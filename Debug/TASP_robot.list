
TASP_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d364  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  0800d568  0800d568  0001d568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbf4  0800dbf4  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbf4  0800dbf4  0001dbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbfc  0800dbfc  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbfc  0800dbfc  0001dbfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc00  0800dc00  0001dc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800dc04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a8  20000220  0800de24  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c8  0800de24  000208c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018dae  00000000  00000000  0002024e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003585  00000000  00000000  00038ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  0003c588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e0  00000000  00000000  0003d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002adeb  00000000  00000000  0003ead0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a464  00000000  00000000  000698bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe424  00000000  00000000  00083d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00182143  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065a8  00000000  00000000  00182194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000220 	.word	0x20000220
 800021c:	00000000 	.word	0x00000000
 8000220:	0800d54c 	.word	0x0800d54c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000224 	.word	0x20000224
 800023c:	0800d54c 	.word	0x0800d54c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b9ac 	b.w	80009f8 <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f83e 	bl	8000728 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2lz>:
 80006b8:	b508      	push	{r3, lr}
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	ec43 2b17 	vmov	d7, r2, r3
 80006c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	d403      	bmi.n	80006d4 <__aeabi_d2lz+0x1c>
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006d0:	f000 b80a 	b.w	80006e8 <__aeabi_d2ulz>
 80006d4:	eeb1 7b47 	vneg.f64	d7, d7
 80006d8:	ec51 0b17 	vmov	r0, r1, d7
 80006dc:	f000 f804 	bl	80006e8 <__aeabi_d2ulz>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	bd08      	pop	{r3, pc}

080006e8 <__aeabi_d2ulz>:
 80006e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000718 <__aeabi_d2ulz+0x30>
 80006ec:	ec41 0b17 	vmov	d7, r0, r1
 80006f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000720 <__aeabi_d2ulz+0x38>
 80006f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006fc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000700:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee16 1a10 	vmov	r1, s12
 800070c:	ee17 0a90 	vmov	r0, s15
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	f3af 8000 	nop.w
 8000718:	00000000 	.word	0x00000000
 800071c:	3df00000 	.word	0x3df00000
 8000720:	00000000 	.word	0x00000000
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468e      	mov	lr, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	d14d      	bne.n	80007d2 <__udivmoddi4+0xaa>
 8000736:	428a      	cmp	r2, r1
 8000738:	4694      	mov	ip, r2
 800073a:	d969      	bls.n	8000810 <__udivmoddi4+0xe8>
 800073c:	fab2 f282 	clz	r2, r2
 8000740:	b152      	cbz	r2, 8000758 <__udivmoddi4+0x30>
 8000742:	fa01 f302 	lsl.w	r3, r1, r2
 8000746:	f1c2 0120 	rsb	r1, r2, #32
 800074a:	fa20 f101 	lsr.w	r1, r0, r1
 800074e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000752:	ea41 0e03 	orr.w	lr, r1, r3
 8000756:	4094      	lsls	r4, r2
 8000758:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800075c:	0c21      	lsrs	r1, r4, #16
 800075e:	fbbe f6f8 	udiv	r6, lr, r8
 8000762:	fa1f f78c 	uxth.w	r7, ip
 8000766:	fb08 e316 	mls	r3, r8, r6, lr
 800076a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800076e:	fb06 f107 	mul.w	r1, r6, r7
 8000772:	4299      	cmp	r1, r3
 8000774:	d90a      	bls.n	800078c <__udivmoddi4+0x64>
 8000776:	eb1c 0303 	adds.w	r3, ip, r3
 800077a:	f106 30ff 	add.w	r0, r6, #4294967295
 800077e:	f080 811f 	bcs.w	80009c0 <__udivmoddi4+0x298>
 8000782:	4299      	cmp	r1, r3
 8000784:	f240 811c 	bls.w	80009c0 <__udivmoddi4+0x298>
 8000788:	3e02      	subs	r6, #2
 800078a:	4463      	add	r3, ip
 800078c:	1a5b      	subs	r3, r3, r1
 800078e:	b2a4      	uxth	r4, r4
 8000790:	fbb3 f0f8 	udiv	r0, r3, r8
 8000794:	fb08 3310 	mls	r3, r8, r0, r3
 8000798:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800079c:	fb00 f707 	mul.w	r7, r0, r7
 80007a0:	42a7      	cmp	r7, r4
 80007a2:	d90a      	bls.n	80007ba <__udivmoddi4+0x92>
 80007a4:	eb1c 0404 	adds.w	r4, ip, r4
 80007a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ac:	f080 810a 	bcs.w	80009c4 <__udivmoddi4+0x29c>
 80007b0:	42a7      	cmp	r7, r4
 80007b2:	f240 8107 	bls.w	80009c4 <__udivmoddi4+0x29c>
 80007b6:	4464      	add	r4, ip
 80007b8:	3802      	subs	r0, #2
 80007ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007be:	1be4      	subs	r4, r4, r7
 80007c0:	2600      	movs	r6, #0
 80007c2:	b11d      	cbz	r5, 80007cc <__udivmoddi4+0xa4>
 80007c4:	40d4      	lsrs	r4, r2
 80007c6:	2300      	movs	r3, #0
 80007c8:	e9c5 4300 	strd	r4, r3, [r5]
 80007cc:	4631      	mov	r1, r6
 80007ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d909      	bls.n	80007ea <__udivmoddi4+0xc2>
 80007d6:	2d00      	cmp	r5, #0
 80007d8:	f000 80ef 	beq.w	80009ba <__udivmoddi4+0x292>
 80007dc:	2600      	movs	r6, #0
 80007de:	e9c5 0100 	strd	r0, r1, [r5]
 80007e2:	4630      	mov	r0, r6
 80007e4:	4631      	mov	r1, r6
 80007e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ea:	fab3 f683 	clz	r6, r3
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d14a      	bne.n	8000888 <__udivmoddi4+0x160>
 80007f2:	428b      	cmp	r3, r1
 80007f4:	d302      	bcc.n	80007fc <__udivmoddi4+0xd4>
 80007f6:	4282      	cmp	r2, r0
 80007f8:	f200 80f9 	bhi.w	80009ee <__udivmoddi4+0x2c6>
 80007fc:	1a84      	subs	r4, r0, r2
 80007fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000802:	2001      	movs	r0, #1
 8000804:	469e      	mov	lr, r3
 8000806:	2d00      	cmp	r5, #0
 8000808:	d0e0      	beq.n	80007cc <__udivmoddi4+0xa4>
 800080a:	e9c5 4e00 	strd	r4, lr, [r5]
 800080e:	e7dd      	b.n	80007cc <__udivmoddi4+0xa4>
 8000810:	b902      	cbnz	r2, 8000814 <__udivmoddi4+0xec>
 8000812:	deff      	udf	#255	; 0xff
 8000814:	fab2 f282 	clz	r2, r2
 8000818:	2a00      	cmp	r2, #0
 800081a:	f040 8092 	bne.w	8000942 <__udivmoddi4+0x21a>
 800081e:	eba1 010c 	sub.w	r1, r1, ip
 8000822:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000826:	fa1f fe8c 	uxth.w	lr, ip
 800082a:	2601      	movs	r6, #1
 800082c:	0c20      	lsrs	r0, r4, #16
 800082e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000832:	fb07 1113 	mls	r1, r7, r3, r1
 8000836:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800083a:	fb0e f003 	mul.w	r0, lr, r3
 800083e:	4288      	cmp	r0, r1
 8000840:	d908      	bls.n	8000854 <__udivmoddi4+0x12c>
 8000842:	eb1c 0101 	adds.w	r1, ip, r1
 8000846:	f103 38ff 	add.w	r8, r3, #4294967295
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x12a>
 800084c:	4288      	cmp	r0, r1
 800084e:	f200 80cb 	bhi.w	80009e8 <__udivmoddi4+0x2c0>
 8000852:	4643      	mov	r3, r8
 8000854:	1a09      	subs	r1, r1, r0
 8000856:	b2a4      	uxth	r4, r4
 8000858:	fbb1 f0f7 	udiv	r0, r1, r7
 800085c:	fb07 1110 	mls	r1, r7, r0, r1
 8000860:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000864:	fb0e fe00 	mul.w	lr, lr, r0
 8000868:	45a6      	cmp	lr, r4
 800086a:	d908      	bls.n	800087e <__udivmoddi4+0x156>
 800086c:	eb1c 0404 	adds.w	r4, ip, r4
 8000870:	f100 31ff 	add.w	r1, r0, #4294967295
 8000874:	d202      	bcs.n	800087c <__udivmoddi4+0x154>
 8000876:	45a6      	cmp	lr, r4
 8000878:	f200 80bb 	bhi.w	80009f2 <__udivmoddi4+0x2ca>
 800087c:	4608      	mov	r0, r1
 800087e:	eba4 040e 	sub.w	r4, r4, lr
 8000882:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000886:	e79c      	b.n	80007c2 <__udivmoddi4+0x9a>
 8000888:	f1c6 0720 	rsb	r7, r6, #32
 800088c:	40b3      	lsls	r3, r6
 800088e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000892:	ea4c 0c03 	orr.w	ip, ip, r3
 8000896:	fa20 f407 	lsr.w	r4, r0, r7
 800089a:	fa01 f306 	lsl.w	r3, r1, r6
 800089e:	431c      	orrs	r4, r3
 80008a0:	40f9      	lsrs	r1, r7
 80008a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008a6:	fa00 f306 	lsl.w	r3, r0, r6
 80008aa:	fbb1 f8f9 	udiv	r8, r1, r9
 80008ae:	0c20      	lsrs	r0, r4, #16
 80008b0:	fa1f fe8c 	uxth.w	lr, ip
 80008b4:	fb09 1118 	mls	r1, r9, r8, r1
 80008b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008bc:	fb08 f00e 	mul.w	r0, r8, lr
 80008c0:	4288      	cmp	r0, r1
 80008c2:	fa02 f206 	lsl.w	r2, r2, r6
 80008c6:	d90b      	bls.n	80008e0 <__udivmoddi4+0x1b8>
 80008c8:	eb1c 0101 	adds.w	r1, ip, r1
 80008cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80008d0:	f080 8088 	bcs.w	80009e4 <__udivmoddi4+0x2bc>
 80008d4:	4288      	cmp	r0, r1
 80008d6:	f240 8085 	bls.w	80009e4 <__udivmoddi4+0x2bc>
 80008da:	f1a8 0802 	sub.w	r8, r8, #2
 80008de:	4461      	add	r1, ip
 80008e0:	1a09      	subs	r1, r1, r0
 80008e2:	b2a4      	uxth	r4, r4
 80008e4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008e8:	fb09 1110 	mls	r1, r9, r0, r1
 80008ec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f4:	458e      	cmp	lr, r1
 80008f6:	d908      	bls.n	800090a <__udivmoddi4+0x1e2>
 80008f8:	eb1c 0101 	adds.w	r1, ip, r1
 80008fc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000900:	d26c      	bcs.n	80009dc <__udivmoddi4+0x2b4>
 8000902:	458e      	cmp	lr, r1
 8000904:	d96a      	bls.n	80009dc <__udivmoddi4+0x2b4>
 8000906:	3802      	subs	r0, #2
 8000908:	4461      	add	r1, ip
 800090a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800090e:	fba0 9402 	umull	r9, r4, r0, r2
 8000912:	eba1 010e 	sub.w	r1, r1, lr
 8000916:	42a1      	cmp	r1, r4
 8000918:	46c8      	mov	r8, r9
 800091a:	46a6      	mov	lr, r4
 800091c:	d356      	bcc.n	80009cc <__udivmoddi4+0x2a4>
 800091e:	d053      	beq.n	80009c8 <__udivmoddi4+0x2a0>
 8000920:	b15d      	cbz	r5, 800093a <__udivmoddi4+0x212>
 8000922:	ebb3 0208 	subs.w	r2, r3, r8
 8000926:	eb61 010e 	sbc.w	r1, r1, lr
 800092a:	fa01 f707 	lsl.w	r7, r1, r7
 800092e:	fa22 f306 	lsr.w	r3, r2, r6
 8000932:	40f1      	lsrs	r1, r6
 8000934:	431f      	orrs	r7, r3
 8000936:	e9c5 7100 	strd	r7, r1, [r5]
 800093a:	2600      	movs	r6, #0
 800093c:	4631      	mov	r1, r6
 800093e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000942:	f1c2 0320 	rsb	r3, r2, #32
 8000946:	40d8      	lsrs	r0, r3
 8000948:	fa0c fc02 	lsl.w	ip, ip, r2
 800094c:	fa21 f303 	lsr.w	r3, r1, r3
 8000950:	4091      	lsls	r1, r2
 8000952:	4301      	orrs	r1, r0
 8000954:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000958:	fa1f fe8c 	uxth.w	lr, ip
 800095c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000960:	fb07 3610 	mls	r6, r7, r0, r3
 8000964:	0c0b      	lsrs	r3, r1, #16
 8000966:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800096a:	fb00 f60e 	mul.w	r6, r0, lr
 800096e:	429e      	cmp	r6, r3
 8000970:	fa04 f402 	lsl.w	r4, r4, r2
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0x260>
 8000976:	eb1c 0303 	adds.w	r3, ip, r3
 800097a:	f100 38ff 	add.w	r8, r0, #4294967295
 800097e:	d22f      	bcs.n	80009e0 <__udivmoddi4+0x2b8>
 8000980:	429e      	cmp	r6, r3
 8000982:	d92d      	bls.n	80009e0 <__udivmoddi4+0x2b8>
 8000984:	3802      	subs	r0, #2
 8000986:	4463      	add	r3, ip
 8000988:	1b9b      	subs	r3, r3, r6
 800098a:	b289      	uxth	r1, r1
 800098c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000990:	fb07 3316 	mls	r3, r7, r6, r3
 8000994:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000998:	fb06 f30e 	mul.w	r3, r6, lr
 800099c:	428b      	cmp	r3, r1
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x28a>
 80009a0:	eb1c 0101 	adds.w	r1, ip, r1
 80009a4:	f106 38ff 	add.w	r8, r6, #4294967295
 80009a8:	d216      	bcs.n	80009d8 <__udivmoddi4+0x2b0>
 80009aa:	428b      	cmp	r3, r1
 80009ac:	d914      	bls.n	80009d8 <__udivmoddi4+0x2b0>
 80009ae:	3e02      	subs	r6, #2
 80009b0:	4461      	add	r1, ip
 80009b2:	1ac9      	subs	r1, r1, r3
 80009b4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80009b8:	e738      	b.n	800082c <__udivmoddi4+0x104>
 80009ba:	462e      	mov	r6, r5
 80009bc:	4628      	mov	r0, r5
 80009be:	e705      	b.n	80007cc <__udivmoddi4+0xa4>
 80009c0:	4606      	mov	r6, r0
 80009c2:	e6e3      	b.n	800078c <__udivmoddi4+0x64>
 80009c4:	4618      	mov	r0, r3
 80009c6:	e6f8      	b.n	80007ba <__udivmoddi4+0x92>
 80009c8:	454b      	cmp	r3, r9
 80009ca:	d2a9      	bcs.n	8000920 <__udivmoddi4+0x1f8>
 80009cc:	ebb9 0802 	subs.w	r8, r9, r2
 80009d0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009d4:	3801      	subs	r0, #1
 80009d6:	e7a3      	b.n	8000920 <__udivmoddi4+0x1f8>
 80009d8:	4646      	mov	r6, r8
 80009da:	e7ea      	b.n	80009b2 <__udivmoddi4+0x28a>
 80009dc:	4620      	mov	r0, r4
 80009de:	e794      	b.n	800090a <__udivmoddi4+0x1e2>
 80009e0:	4640      	mov	r0, r8
 80009e2:	e7d1      	b.n	8000988 <__udivmoddi4+0x260>
 80009e4:	46d0      	mov	r8, sl
 80009e6:	e77b      	b.n	80008e0 <__udivmoddi4+0x1b8>
 80009e8:	3b02      	subs	r3, #2
 80009ea:	4461      	add	r1, ip
 80009ec:	e732      	b.n	8000854 <__udivmoddi4+0x12c>
 80009ee:	4630      	mov	r0, r6
 80009f0:	e709      	b.n	8000806 <__udivmoddi4+0xde>
 80009f2:	4464      	add	r4, ip
 80009f4:	3802      	subs	r0, #2
 80009f6:	e742      	b.n	800087e <__udivmoddi4+0x156>

080009f8 <__aeabi_idiv0>:
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_DMA_Init+0x48>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <MX_DMA_Init+0x48>)
 8000a08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <MX_DMA_Init+0x48>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	200b      	movs	r0, #11
 8000a20:	f002 fb2f 	bl	8003082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a24:	200b      	movs	r0, #11
 8000a26:	f002 fb48 	bl	80030ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2011      	movs	r0, #17
 8000a30:	f002 fb27 	bl	8003082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a34:	2011      	movs	r0, #17
 8000a36:	f002 fb40 	bl	80030ba <HAL_NVIC_EnableIRQ>

}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <start>:
struct motor_t motorL = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
struct motor_t motorR = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };


void start()
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	set_Kh();
 8000a4c:	f000 fa20 	bl	8000e90 <set_Kh>
	MY_TIM3_Init(hw_cfg);
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <start+0x38>)
 8000a52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a56:	f001 fef9 	bl	800284c <MY_TIM3_Init>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000a5a:	210c      	movs	r1, #12
 8000a5c:	4809      	ldr	r0, [pc, #36]	; (8000a84 <start+0x3c>)
 8000a5e:	f004 fc75 	bl	800534c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000a62:	2100      	movs	r1, #0
 8000a64:	4808      	ldr	r0, [pc, #32]	; (8000a88 <start+0x40>)
 8000a66:	f004 fc71 	bl	800534c <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim3);
 8000a6a:	4808      	ldr	r0, [pc, #32]	; (8000a8c <start+0x44>)
 8000a6c:	f004 fb66 	bl	800513c <HAL_TIM_Base_Start_IT>

	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a70:	2008      	movs	r0, #8
 8000a72:	f002 fb22 	bl	80030ba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a76:	2028      	movs	r0, #40	; 0x28
 8000a78:	f002 fb1f 	bl	80030ba <HAL_NVIC_EnableIRQ>
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	2000001c 	.word	0x2000001c
 8000a84:	20000410 	.word	0x20000410
 8000a88:	200004a8 	.word	0x200004a8
 8000a8c:	2000045c 	.word	0x2000045c

08000a90 <stop>:


void stop()
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8000a94:	210c      	movs	r1, #12
 8000a96:	4809      	ldr	r0, [pc, #36]	; (8000abc <stop+0x2c>)
 8000a98:	f004 fd52 	bl	8005540 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <stop+0x30>)
 8000aa0:	f004 fd4e 	bl	8005540 <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(&htim3);
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <stop+0x34>)
 8000aa6:	f004 fbc1 	bl	800522c <HAL_TIM_Base_Stop_IT>

	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000aaa:	2008      	movs	r0, #8
 8000aac:	f002 fb13 	bl	80030d6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000ab0:	2028      	movs	r0, #40	; 0x28
 8000ab2:	f002 fb10 	bl	80030d6 <HAL_NVIC_DisableIRQ>
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000410 	.word	0x20000410
 8000ac0:	200004a8 	.word	0x200004a8
 8000ac4:	2000045c 	.word	0x2000045c

08000ac8 <proc_ISR_PID>:


void proc_ISR_PID()
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
	float hw = calc_hw();
 8000ace:	f000 fa43 	bl	8000f58 <calc_hw>
 8000ad2:	ed87 0a01 	vstr	s0, [r7, #4]

	if(mode)
 8000ad6:	4b6d      	ldr	r3, [pc, #436]	; (8000c8c <proc_ISR_PID+0x1c4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d01e      	beq.n	8000b1c <proc_ISR_PID+0x54>
	{
		motorL.yr = hw * motorL.spd_r + motorL.yr_last;
 8000ade:	4b6c      	ldr	r3, [pc, #432]	; (8000c90 <proc_ISR_PID+0x1c8>)
 8000ae0:	ed93 7a03 	vldr	s14, [r3, #12]
 8000ae4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000aec:	4b68      	ldr	r3, [pc, #416]	; (8000c90 <proc_ISR_PID+0x1c8>)
 8000aee:	edd3 7a06 	vldr	s15, [r3, #24]
 8000af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000af6:	4b66      	ldr	r3, [pc, #408]	; (8000c90 <proc_ISR_PID+0x1c8>)
 8000af8:	edc3 7a05 	vstr	s15, [r3, #20]
		motorR.yr = hw * motorR.spd_r + motorR.yr_last;
 8000afc:	4b65      	ldr	r3, [pc, #404]	; (8000c94 <proc_ISR_PID+0x1cc>)
 8000afe:	ed93 7a03 	vldr	s14, [r3, #12]
 8000b02:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b0a:	4b62      	ldr	r3, [pc, #392]	; (8000c94 <proc_ISR_PID+0x1cc>)
 8000b0c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b14:	4b5f      	ldr	r3, [pc, #380]	; (8000c94 <proc_ISR_PID+0x1cc>)
 8000b16:	edc3 7a05 	vstr	s15, [r3, #20]
 8000b1a:	e007      	b.n	8000b2c <proc_ISR_PID+0x64>
	}
	else
	{
		motorL.yr = motorL.pos_r;
 8000b1c:	4b5c      	ldr	r3, [pc, #368]	; (8000c90 <proc_ISR_PID+0x1c8>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a5b      	ldr	r2, [pc, #364]	; (8000c90 <proc_ISR_PID+0x1c8>)
 8000b22:	6153      	str	r3, [r2, #20]
		motorR.yr = motorR.pos_r;
 8000b24:	4b5b      	ldr	r3, [pc, #364]	; (8000c94 <proc_ISR_PID+0x1cc>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a5a      	ldr	r2, [pc, #360]	; (8000c94 <proc_ISR_PID+0x1cc>)
 8000b2a:	6153      	str	r3, [r2, #20]
	}

	float uL = calc_PID(&motorL);
 8000b2c:	4858      	ldr	r0, [pc, #352]	; (8000c90 <proc_ISR_PID+0x1c8>)
 8000b2e:	f000 fa67 	bl	8001000 <calc_PID>
 8000b32:	ed87 0a03 	vstr	s0, [r7, #12]
	float uR = calc_PID(&motorR);
 8000b36:	4857      	ldr	r0, [pc, #348]	; (8000c94 <proc_ISR_PID+0x1cc>)
 8000b38:	f000 fa62 	bl	8001000 <calc_PID>
 8000b3c:	ed87 0a02 	vstr	s0, [r7, #8]

	if(aut)
 8000b40:	4b55      	ldr	r3, [pc, #340]	; (8000c98 <proc_ISR_PID+0x1d0>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d077      	beq.n	8000c38 <proc_ISR_PID+0x170>
	{
		if(uR > 0)
 8000b48:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b54:	dd0c      	ble.n	8000b70 <proc_ISR_PID+0xa8>
		{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5c:	484f      	ldr	r0, [pc, #316]	; (8000c9c <proc_ISR_PID+0x1d4>)
 8000b5e:	f003 f815 	bl	8003b8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000b62:	2201      	movs	r2, #1
 8000b64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b68:	484d      	ldr	r0, [pc, #308]	; (8000ca0 <proc_ISR_PID+0x1d8>)
 8000b6a:	f003 f80f 	bl	8003b8c <HAL_GPIO_WritePin>
 8000b6e:	e018      	b.n	8000ba2 <proc_ISR_PID+0xda>
		}
		else if(uR < 0)
 8000b70:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b7c:	d511      	bpl.n	8000ba2 <proc_ISR_PID+0xda>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b84:	4846      	ldr	r0, [pc, #280]	; (8000ca0 <proc_ISR_PID+0x1d8>)
 8000b86:	f003 f801 	bl	8003b8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b90:	4842      	ldr	r0, [pc, #264]	; (8000c9c <proc_ISR_PID+0x1d4>)
 8000b92:	f002 fffb 	bl	8003b8c <HAL_GPIO_WritePin>

			 uR = -uR;
 8000b96:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b9a:	eef1 7a67 	vneg.f32	s15, s15
 8000b9e:	edc7 7a02 	vstr	s15, [r7, #8]
		}

		if(uL > 0)
 8000ba2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ba6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bae:	dd0a      	ble.n	8000bc6 <proc_ISR_PID+0xfe>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	483a      	ldr	r0, [pc, #232]	; (8000ca0 <proc_ISR_PID+0x1d8>)
 8000bb6:	f002 ffe9 	bl	8003b8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 1);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	4837      	ldr	r0, [pc, #220]	; (8000c9c <proc_ISR_PID+0x1d4>)
 8000bc0:	f002 ffe4 	bl	8003b8c <HAL_GPIO_WritePin>
 8000bc4:	e016      	b.n	8000bf4 <proc_ISR_PID+0x12c>
		}
		else if(uL < 0)
 8000bc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd2:	d50f      	bpl.n	8000bf4 <proc_ISR_PID+0x12c>
		{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4830      	ldr	r0, [pc, #192]	; (8000c9c <proc_ISR_PID+0x1d4>)
 8000bda:	f002 ffd7 	bl	8003b8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2101      	movs	r1, #1
 8000be2:	482f      	ldr	r0, [pc, #188]	; (8000ca0 <proc_ISR_PID+0x1d8>)
 8000be4:	f002 ffd2 	bl	8003b8c <HAL_GPIO_WritePin>

			 uL = -uL;
 8000be8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bec:	eef1 7a67 	vneg.f32	s15, s15
 8000bf0:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		TIM2->CCR4 = uR / 6 * 2000;
 8000bf4:	ed97 7a02 	vldr	s14, [r7, #8]
 8000bf8:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8000bfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c00:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000ca4 <proc_ISR_PID+0x1dc>
 8000c04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c10:	ee17 2a90 	vmov	r2, s15
 8000c14:	641a      	str	r2, [r3, #64]	; 0x40
		TIM5->CCR1 = uL / 6 * 2000;
 8000c16:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c1a:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8000c1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c22:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000ca4 <proc_ISR_PID+0x1dc>
 8000c26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <proc_ISR_PID+0x1e0>)
 8000c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c30:	ee17 2a90 	vmov	r2, s15
 8000c34:	635a      	str	r2, [r3, #52]	; 0x34
 8000c36:	e01d      	b.n	8000c74 <proc_ISR_PID+0x1ac>
	}
	else
	{
		motorL.e_last = motorL.yr - motorL.pos_m;
 8000c38:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <proc_ISR_PID+0x1c8>)
 8000c3a:	ed93 7a05 	vldr	s14, [r3, #20]
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <proc_ISR_PID+0x1c8>)
 8000c40:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <proc_ISR_PID+0x1c8>)
 8000c4a:	edc3 7a08 	vstr	s15, [r3, #32]
		motorL.pos_m_last = motorL.pos_m;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <proc_ISR_PID+0x1c8>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	4a0f      	ldr	r2, [pc, #60]	; (8000c90 <proc_ISR_PID+0x1c8>)
 8000c54:	6093      	str	r3, [r2, #8]

		motorR.e_last = motorR.yr - motorR.pos_m;
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <proc_ISR_PID+0x1cc>)
 8000c58:	ed93 7a05 	vldr	s14, [r3, #20]
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <proc_ISR_PID+0x1cc>)
 8000c5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <proc_ISR_PID+0x1cc>)
 8000c68:	edc3 7a08 	vstr	s15, [r3, #32]
		motorR.pos_m_last = motorR.pos_m;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <proc_ISR_PID+0x1cc>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <proc_ISR_PID+0x1cc>)
 8000c72:	6093      	str	r3, [r2, #8]
	}

	motorL.yr_last = motorL.yr;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <proc_ISR_PID+0x1c8>)
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <proc_ISR_PID+0x1c8>)
 8000c7a:	6193      	str	r3, [r2, #24]
	motorR.yr_last = motorR.yr;
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <proc_ISR_PID+0x1cc>)
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <proc_ISR_PID+0x1cc>)
 8000c82:	6193      	str	r3, [r2, #24]
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000240 	.word	0x20000240
 8000c90:	20000244 	.word	0x20000244
 8000c94:	2000027c 	.word	0x2000027c
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	44fa0000 	.word	0x44fa0000
 8000ca8:	40000c00 	.word	0x40000c00

08000cac <proc_ISR_speed>:


void proc_ISR_speed()
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b090      	sub	sp, #64	; 0x40
 8000cb0:	af06      	add	r7, sp, #24
	float hw = calc_hw();
 8000cb2:	f000 f951 	bl	8000f58 <calc_hw>
 8000cb6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	motorL.spd_m = (motorL.pos_m - motorL.pos_m_last) / hw;
 8000cba:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <proc_ISR_speed+0xb4>)
 8000cbc:	ed93 7a01 	vldr	s14, [r3, #4]
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <proc_ISR_speed+0xb4>)
 8000cc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000cc6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000cca:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cd2:	4b23      	ldr	r3, [pc, #140]	; (8000d60 <proc_ISR_speed+0xb4>)
 8000cd4:	edc3 7a04 	vstr	s15, [r3, #16]
	motorR.spd_m = (motorR.pos_m - motorR.pos_m_last) / hw;
 8000cd8:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <proc_ISR_speed+0xb8>)
 8000cda:	ed93 7a01 	vldr	s14, [r3, #4]
 8000cde:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <proc_ISR_speed+0xb8>)
 8000ce0:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ce4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ce8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cf0:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <proc_ISR_speed+0xb8>)
 8000cf2:	edc3 7a04 	vstr	s15, [r3, #16]

	if(++cnt == 5)
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <proc_ISR_speed+0xbc>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	4a1a      	ldr	r2, [pc, #104]	; (8000d68 <proc_ISR_speed+0xbc>)
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <proc_ISR_speed+0xbc>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b05      	cmp	r3, #5
 8000d06:	d126      	bne.n	8000d56 <proc_ISR_speed+0xaa>
	{
		cnt = 0;
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <proc_ISR_speed+0xbc>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
		char message[32];
		sprintf(message, "%0.2f|%0.2f || %0.2f|%0.2f", motorL.pos_m, motorL.spd_m, motorR.pos_m, motorR.spd_m);
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <proc_ISR_speed+0xb4>)
 8000d10:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d14:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <proc_ISR_speed+0xb4>)
 8000d1a:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <proc_ISR_speed+0xb8>)
 8000d24:	edd3 6a01 	vldr	s13, [r3, #4]
 8000d28:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <proc_ISR_speed+0xb8>)
 8000d2e:	edd3 5a04 	vldr	s11, [r3, #16]
 8000d32:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000d36:	1d38      	adds	r0, r7, #4
 8000d38:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000d3c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000d40:	ed8d 7b00 	vstr	d7, [sp]
 8000d44:	ec53 2b14 	vmov	r2, r3, d4
 8000d48:	4908      	ldr	r1, [pc, #32]	; (8000d6c <proc_ISR_speed+0xc0>)
 8000d4a:	f008 fa9b 	bl	8009284 <siprintf>
		send_UART(message);
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 ff33 	bl	8002bbc <send_UART>
	}
}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000244 	.word	0x20000244
 8000d64:	2000027c 	.word	0x2000027c
 8000d68:	2000023c 	.word	0x2000023c
 8000d6c:	0800d568 	.word	0x0800d568

08000d70 <update_posL>:


void update_posL(int dir_m)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	if(dir_m)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00e      	beq.n	8000d9c <update_posL+0x2c>
		motorL.pos_m += POS_UNIT;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <update_posL+0x60>)
 8000d80:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d88:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8000dc8 <update_posL+0x58>
 8000d8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d90:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <update_posL+0x60>)
 8000d96:	edc3 7a01 	vstr	s15, [r3, #4]
	else
		motorL.pos_m -= POS_UNIT;
}
 8000d9a:	e00d      	b.n	8000db8 <update_posL+0x48>
		motorL.pos_m -= POS_UNIT;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <update_posL+0x60>)
 8000d9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000da2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000da6:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000dc8 <update_posL+0x58>
 8000daa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000dae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <update_posL+0x60>)
 8000db4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	f3af 8000 	nop.w
 8000dc8:	b0d8fb59 	.word	0xb0d8fb59
 8000dcc:	3f7acee8 	.word	0x3f7acee8
 8000dd0:	20000244 	.word	0x20000244
 8000dd4:	00000000 	.word	0x00000000

08000dd8 <update_posR>:


void update_posR(int dir_m)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	if(dir_m)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00e      	beq.n	8000e04 <update_posR+0x2c>
		motorR.pos_m += POS_UNIT;
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <update_posR+0x60>)
 8000de8:	edd3 7a01 	vldr	s15, [r3, #4]
 8000dec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000df0:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8000e30 <update_posR+0x58>
 8000df4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000df8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <update_posR+0x60>)
 8000dfe:	edc3 7a01 	vstr	s15, [r3, #4]
	else
		motorR.pos_m -= POS_UNIT;
}
 8000e02:	e00d      	b.n	8000e20 <update_posR+0x48>
		motorR.pos_m -= POS_UNIT;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <update_posR+0x60>)
 8000e06:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e0e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000e30 <update_posR+0x58>
 8000e12:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <update_posR+0x60>)
 8000e1c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	f3af 8000 	nop.w
 8000e30:	b0d8fb59 	.word	0xb0d8fb59
 8000e34:	3f7acee8 	.word	0x3f7acee8
 8000e38:	2000027c 	.word	0x2000027c

08000e3c <set_ref>:


void set_ref(float ref, char type)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e46:	4603      	mov	r3, r0
 8000e48:	70fb      	strb	r3, [r7, #3]
	if(type == 'P')
 8000e4a:	78fb      	ldrb	r3, [r7, #3]
 8000e4c:	2b50      	cmp	r3, #80	; 0x50
 8000e4e:	d109      	bne.n	8000e64 <set_ref+0x28>
	{
		mode = 0;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <set_ref+0x48>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
		motorR.pos_r = ref;
 8000e56:	4a0c      	ldr	r2, [pc, #48]	; (8000e88 <set_ref+0x4c>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6013      	str	r3, [r2, #0]
		motorL.pos_r = ref;
 8000e5c:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <set_ref+0x50>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6013      	str	r3, [r2, #0]
	{
		mode = 1;
		motorR.spd_r = ref;
		motorL.spd_r = ref;
	}
}
 8000e62:	e008      	b.n	8000e76 <set_ref+0x3a>
		mode = 1;
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <set_ref+0x48>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	601a      	str	r2, [r3, #0]
		motorR.spd_r = ref;
 8000e6a:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <set_ref+0x4c>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	60d3      	str	r3, [r2, #12]
		motorL.spd_r = ref;
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <set_ref+0x50>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	60d3      	str	r3, [r2, #12]
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000240 	.word	0x20000240
 8000e88:	2000027c 	.word	0x2000027c
 8000e8c:	20000244 	.word	0x20000244

08000e90 <set_Kh>:


void set_Kh(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
	float hw = calc_hw();
 8000e96:	f000 f85f 	bl	8000f58 <calc_hw>
 8000e9a:	ed87 0a01 	vstr	s0, [r7, #4]

	motorL.Kp_h = KpL;
 8000e9e:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <set_Kh+0xa8>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a26      	ldr	r2, [pc, #152]	; (8000f3c <set_Kh+0xac>)
 8000ea4:	62d3      	str	r3, [r2, #44]	; 0x2c
	motorL.Kd_h = KdL * (1 - a) / hw;
 8000ea6:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <set_Kh+0xb0>)
 8000ea8:	edd3 7a00 	vldr	s15, [r3]
 8000eac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eb0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8000f30 <set_Kh+0xa0>
 8000eb4:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000eb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ebc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ec0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000ec4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <set_Kh+0xac>)
 8000eca:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	motorL.Ki_h = KiL * hw;
 8000ece:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <set_Kh+0xb4>)
 8000ed0:	ed93 7a00 	vldr	s14, [r3]
 8000ed4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000edc:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <set_Kh+0xac>)
 8000ede:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	motorR.Kp_h = KpR;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <set_Kh+0xb8>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a19      	ldr	r2, [pc, #100]	; (8000f4c <set_Kh+0xbc>)
 8000ee8:	62d3      	str	r3, [r2, #44]	; 0x2c
	motorR.Kd_h = KdR * (1 - a) / hw;
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <set_Kh+0xc0>)
 8000eec:	edd3 7a00 	vldr	s15, [r3]
 8000ef0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ef4:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8000f30 <set_Kh+0xa0>
 8000ef8:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000efc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f00:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f04:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000f08:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <set_Kh+0xbc>)
 8000f0e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	motorR.Ki_h = KiR * hw;
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <set_Kh+0xc4>)
 8000f14:	ed93 7a00 	vldr	s14, [r3]
 8000f18:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <set_Kh+0xbc>)
 8000f22:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	33333333 	.word	0x33333333
 8000f34:	3fe33333 	.word	0x3fe33333
 8000f38:	20000010 	.word	0x20000010
 8000f3c:	20000244 	.word	0x20000244
 8000f40:	20000014 	.word	0x20000014
 8000f44:	20000018 	.word	0x20000018
 8000f48:	20000004 	.word	0x20000004
 8000f4c:	2000027c 	.word	0x2000027c
 8000f50:	20000008 	.word	0x20000008
 8000f54:	2000000c 	.word	0x2000000c

08000f58 <calc_hw>:


float calc_hw()
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	if(!strcmp(hw_cfg.timeunit, "us"))
 8000f5c:	4922      	ldr	r1, [pc, #136]	; (8000fe8 <calc_hw+0x90>)
 8000f5e:	4823      	ldr	r0, [pc, #140]	; (8000fec <calc_hw+0x94>)
 8000f60:	f7ff f96e 	bl	8000240 <strcmp>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10c      	bne.n	8000f84 <calc_hw+0x2c>
	{
		return 0.000001 * hw_cfg.value;
 8000f6a:	4b21      	ldr	r3, [pc, #132]	; (8000ff0 <calc_hw+0x98>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f76:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8000fd8 <calc_hw+0x80>
 8000f7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f7e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f82:	e023      	b.n	8000fcc <calc_hw+0x74>
	}
	else if(!strcmp(hw_cfg.timeunit, "ms"))
 8000f84:	491b      	ldr	r1, [pc, #108]	; (8000ff4 <calc_hw+0x9c>)
 8000f86:	4819      	ldr	r0, [pc, #100]	; (8000fec <calc_hw+0x94>)
 8000f88:	f7ff f95a 	bl	8000240 <strcmp>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10c      	bne.n	8000fac <calc_hw+0x54>
	{
		return 0.001 * hw_cfg.value;
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <calc_hw+0x98>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f9e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000fe0 <calc_hw+0x88>
 8000fa2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fa6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000faa:	e00f      	b.n	8000fcc <calc_hw+0x74>
	}
	else if(!strcmp(hw_cfg.timeunit, "s"))
 8000fac:	4912      	ldr	r1, [pc, #72]	; (8000ff8 <calc_hw+0xa0>)
 8000fae:	480f      	ldr	r0, [pc, #60]	; (8000fec <calc_hw+0x94>)
 8000fb0:	f7ff f946 	bl	8000240 <strcmp>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d106      	bne.n	8000fc8 <calc_hw+0x70>
	{
		return hw_cfg.value;
 8000fba:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <calc_hw+0x98>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc6:	e001      	b.n	8000fcc <calc_hw+0x74>
	}

	return 0.0000001;
 8000fc8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000ffc <calc_hw+0xa4>
}
 8000fcc:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	a0b5ed8d 	.word	0xa0b5ed8d
 8000fdc:	3eb0c6f7 	.word	0x3eb0c6f7
 8000fe0:	d2f1a9fc 	.word	0xd2f1a9fc
 8000fe4:	3f50624d 	.word	0x3f50624d
 8000fe8:	0800d584 	.word	0x0800d584
 8000fec:	20000020 	.word	0x20000020
 8000ff0:	2000001c 	.word	0x2000001c
 8000ff4:	0800d588 	.word	0x0800d588
 8000ff8:	0800d58c 	.word	0x0800d58c
 8000ffc:	33d6bf95 	.word	0x33d6bf95

08001000 <calc_PID>:


float calc_PID(struct motor_t *motor)
{
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	float e = motor->yr - motor->pos_m;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	ed93 7a05 	vldr	s14, [r3, #20]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	edd3 7a01 	vldr	s15, [r3, #4]
 8001014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001018:	edc7 7a04 	vstr	s15, [r7, #16]

	float sum_e_bkp = motor->sum_e;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	60fb      	str	r3, [r7, #12]
	motor->sum_e = motor->sum_e + motor->e_last;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	ed93 7a07 	vldr	s14, [r3, #28]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	edd3 7a08 	vldr	s15, [r3, #32]
 800102e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	edc3 7a07 	vstr	s15, [r3, #28]
	float u_d = motor->Kd_h * (motor->pos_m - motor->pos_m_last) + a * motor->u_d_last;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	edd3 6a01 	vldr	s13, [r3, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	edd3 7a02 	vldr	s15, [r3, #8]
 800104a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001052:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800105c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001060:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8001108 <calc_PID+0x108>
 8001064:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001068:	ee36 7b07 	vadd.f64	d7, d6, d7
 800106c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001070:	edc7 7a02 	vstr	s15, [r7, #8]
	float u = motor->Kp_h * e + motor->Ki_h * motor->sum_e - u_d;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800107a:	edd7 7a04 	vldr	s15, [r7, #16]
 800107e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	edd3 7a07 	vldr	s15, [r3, #28]
 800108e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001092:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001096:	edd7 7a02 	vldr	s15, [r7, #8]
 800109a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109e:	edc7 7a05 	vstr	s15, [r7, #20]
	motor->e_last = e;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	621a      	str	r2, [r3, #32]
	motor->pos_m_last = motor->pos_m;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	609a      	str	r2, [r3, #8]
	motor->u_d_last = u_d;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28

	if (u > U_SAT_MAX)
 80010b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80010ba:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80010be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c6:	dd05      	ble.n	80010d4 <calc_PID+0xd4>
	{
		u = U_SAT_MAX;
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <calc_PID+0x110>)
 80010ca:	617b      	str	r3, [r7, #20]
		motor->sum_e = sum_e_bkp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	61da      	str	r2, [r3, #28]
 80010d2:	e00d      	b.n	80010f0 <calc_PID+0xf0>
	}
	else if(u < U_SAT_MIN)
 80010d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010d8:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 80010dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	d504      	bpl.n	80010f0 <calc_PID+0xf0>
	{
		u = U_SAT_MIN;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <calc_PID+0x114>)
 80010e8:	617b      	str	r3, [r7, #20]
		motor->sum_e = sum_e_bkp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	61da      	str	r2, [r3, #28]
	}

	return u;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	ee07 3a90 	vmov	s15, r3
}
 80010f6:	eeb0 0a67 	vmov.f32	s0, s15
 80010fa:	371c      	adds	r7, #28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	f3af 8000 	nop.w
 8001108:	9999999a 	.word	0x9999999a
 800110c:	3fd99999 	.word	0x3fd99999
 8001110:	40c00000 	.word	0x40c00000
 8001114:	c0c00000 	.word	0xc0c00000

08001118 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	; 0x30
 800111c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800112e:	4b6d      	ldr	r3, [pc, #436]	; (80012e4 <MX_GPIO_Init+0x1cc>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a6c      	ldr	r2, [pc, #432]	; (80012e4 <MX_GPIO_Init+0x1cc>)
 8001134:	f043 0310 	orr.w	r3, r3, #16
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b6a      	ldr	r3, [pc, #424]	; (80012e4 <MX_GPIO_Init+0x1cc>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001146:	4b67      	ldr	r3, [pc, #412]	; (80012e4 <MX_GPIO_Init+0x1cc>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a66      	ldr	r2, [pc, #408]	; (80012e4 <MX_GPIO_Init+0x1cc>)
 800114c:	f043 0320 	orr.w	r3, r3, #32
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b64      	ldr	r3, [pc, #400]	; (80012e4 <MX_GPIO_Init+0x1cc>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0320 	and.w	r3, r3, #32
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	4b61      	ldr	r3, [pc, #388]	; (80012e4 <MX_GPIO_Init+0x1cc>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a60      	ldr	r2, [pc, #384]	; (80012e4 <MX_GPIO_Init+0x1cc>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b5e      	ldr	r3, [pc, #376]	; (80012e4 <MX_GPIO_Init+0x1cc>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	4b5b      	ldr	r3, [pc, #364]	; (80012e4 <MX_GPIO_Init+0x1cc>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a5a      	ldr	r2, [pc, #360]	; (80012e4 <MX_GPIO_Init+0x1cc>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b58      	ldr	r3, [pc, #352]	; (80012e4 <MX_GPIO_Init+0x1cc>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800118e:	4b55      	ldr	r3, [pc, #340]	; (80012e4 <MX_GPIO_Init+0x1cc>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a54      	ldr	r2, [pc, #336]	; (80012e4 <MX_GPIO_Init+0x1cc>)
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b52      	ldr	r3, [pc, #328]	; (80012e4 <MX_GPIO_Init+0x1cc>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a6:	4b4f      	ldr	r3, [pc, #316]	; (80012e4 <MX_GPIO_Init+0x1cc>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a4e      	ldr	r2, [pc, #312]	; (80012e4 <MX_GPIO_Init+0x1cc>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b4c      	ldr	r3, [pc, #304]	; (80012e4 <MX_GPIO_Init+0x1cc>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, HCSR_TRIG_SX_Pin|FIR_RV_MD_Pin|FIR_RV_ME_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f248 0109 	movw	r1, #32777	; 0x8009
 80011c4:	4848      	ldr	r0, [pc, #288]	; (80012e8 <MX_GPIO_Init+0x1d0>)
 80011c6:	f002 fce1 	bl	8003b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HCSR_TRIG_SY_GPIO_Port, HCSR_TRIG_SY_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2180      	movs	r1, #128	; 0x80
 80011ce:	4847      	ldr	r0, [pc, #284]	; (80012ec <MX_GPIO_Init+0x1d4>)
 80011d0:	f002 fcdc 	bl	8003b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FIR_FW_ME_Pin|FIR_FW_MD_Pin, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	f240 4101 	movw	r1, #1025	; 0x401
 80011da:	4845      	ldr	r0, [pc, #276]	; (80012f0 <MX_GPIO_Init+0x1d8>)
 80011dc:	f002 fcd6 	bl	8003b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = FIR_SA_ME_Pin|FIR_SA_MD_Pin;
 80011e0:	f244 0304 	movw	r3, #16388	; 0x4004
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	483c      	ldr	r0, [pc, #240]	; (80012e8 <MX_GPIO_Init+0x1d0>)
 80011f8:	f002 fb04 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = HCSR_TRIG_SX_Pin|FIR_RV_MD_Pin|FIR_RV_ME_Pin;
 80011fc:	f248 0309 	movw	r3, #32777	; 0x8009
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	4834      	ldr	r0, [pc, #208]	; (80012e8 <MX_GPIO_Init+0x1d0>)
 8001216:	f002 faf5 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HCSR_TRIG_SY_Pin;
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(HCSR_TRIG_SY_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4619      	mov	r1, r3
 8001230:	482e      	ldr	r0, [pc, #184]	; (80012ec <MX_GPIO_Init+0x1d4>)
 8001232:	f002 fae7 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = FIR_FW_ME_Pin|FIR_FW_MD_Pin;
 8001236:	f240 4301 	movw	r3, #1025	; 0x401
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	4828      	ldr	r0, [pc, #160]	; (80012f0 <MX_GPIO_Init+0x1d8>)
 8001250:	f002 fad8 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FIR_SB_MD_Pin;
 8001254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FIR_SB_MD_GPIO_Port, &GPIO_InitStruct);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	481f      	ldr	r0, [pc, #124]	; (80012e8 <MX_GPIO_Init+0x1d0>)
 800126a:	f002 facb 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = IV_SPL_Pin|IV_SFD_Pin|IV_STE_Pin|IV_SFE_Pin;
 800126e:	f44f 4323 	mov.w	r3, #41728	; 0xa300
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	481b      	ldr	r0, [pc, #108]	; (80012f0 <MX_GPIO_Init+0x1d8>)
 8001284:	f002 fabe 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FIR_SB_ME_Pin;
 8001288:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FIR_SB_ME_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	4815      	ldr	r0, [pc, #84]	; (80012f4 <MX_GPIO_Init+0x1dc>)
 800129e:	f002 fab1 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IV_STD_Pin;
 80012a2:	2340      	movs	r3, #64	; 0x40
 80012a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IV_STD_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	4619      	mov	r1, r3
 80012b4:	4810      	ldr	r0, [pc, #64]	; (80012f8 <MX_GPIO_Init+0x1e0>)
 80012b6:	f002 faa5 	bl	8003804 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	2008      	movs	r0, #8
 80012c0:	f001 fedf 	bl	8003082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80012c4:	2008      	movs	r0, #8
 80012c6:	f001 fef8 	bl	80030ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	2028      	movs	r0, #40	; 0x28
 80012d0:	f001 fed7 	bl	8003082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012d4:	2028      	movs	r0, #40	; 0x28
 80012d6:	f001 fef0 	bl	80030ba <HAL_NVIC_EnableIRQ>

}
 80012da:	bf00      	nop
 80012dc:	3730      	adds	r7, #48	; 0x30
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40021400 	.word	0x40021400
 80012f0:	40020400 	.word	0x40020400
 80012f4:	40020c00 	.word	0x40020c00
 80012f8:	40020800 	.word	0x40020800

080012fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_14)	// MD
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800130c:	d10a      	bne.n	8001324 <HAL_GPIO_EXTI_Callback+0x28>
	{
		int dir_m = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12);
 800130e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001312:	480f      	ldr	r0, [pc, #60]	; (8001350 <HAL_GPIO_EXTI_Callback+0x54>)
 8001314:	f002 fc22 	bl	8003b5c <HAL_GPIO_ReadPin>
 8001318:	4603      	mov	r3, r0
 800131a:	60bb      	str	r3, [r7, #8]
		update_posR(dir_m);
 800131c:	68b8      	ldr	r0, [r7, #8]
 800131e:	f7ff fd5b 	bl	8000dd8 <update_posR>
	else if(GPIO_Pin == GPIO_PIN_2)	// ME
	{
		int dir_m = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
		update_posL(dir_m);
	}
}
 8001322:	e011      	b.n	8001348 <HAL_GPIO_EXTI_Callback+0x4c>
	else if(GPIO_Pin == GPIO_PIN_2)	// ME
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	2b04      	cmp	r3, #4
 8001328:	d10e      	bne.n	8001348 <HAL_GPIO_EXTI_Callback+0x4c>
		int dir_m = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 800132a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800132e:	4809      	ldr	r0, [pc, #36]	; (8001354 <HAL_GPIO_EXTI_Callback+0x58>)
 8001330:	f002 fc14 	bl	8003b5c <HAL_GPIO_ReadPin>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	bf0c      	ite	eq
 800133a:	2301      	moveq	r3, #1
 800133c:	2300      	movne	r3, #0
 800133e:	b2db      	uxtb	r3, r3
 8001340:	60fb      	str	r3, [r7, #12]
		update_posL(dir_m);
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f7ff fd14 	bl	8000d70 <update_posL>
}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40021000 	.word	0x40021000
 8001354:	40020c00 	.word	0x40020c00

08001358 <proc_TRIG_FSM>:
struct distSensor_t distSensorY = { 0, 0, 0, 0, 0, 0.0 };
struct coords distance = { 0.0, 0.0 };
static uint8_t state = 0, cnt = 0;

void proc_TRIG_FSM()
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	if(state == 0)														// STATE 0: disable TRIGGER
 800135c:	4b29      	ldr	r3, [pc, #164]	; (8001404 <proc_TRIG_FSM+0xac>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10d      	bne.n	8001380 <proc_TRIG_FSM+0x28>
	{
		state = 1;
 8001364:	4b27      	ldr	r3, [pc, #156]	; (8001404 <proc_TRIG_FSM+0xac>)
 8001366:	2201      	movs	r2, #1
 8001368:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2108      	movs	r1, #8
 800136e:	4826      	ldr	r0, [pc, #152]	; (8001408 <proc_TRIG_FSM+0xb0>)
 8001370:	f002 fc0c 	bl	8003b8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2180      	movs	r1, #128	; 0x80
 8001378:	4824      	ldr	r0, [pc, #144]	; (800140c <proc_TRIG_FSM+0xb4>)
 800137a:	f002 fc07 	bl	8003b8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0);
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 0);
			HAL_TIM_Base_Stop_IT(&htim6);
		}
	}
}
 800137e:	e03f      	b.n	8001400 <proc_TRIG_FSM+0xa8>
	else if(state == 1)													// STATE 1: wait 2uS and enable TRIGGER
 8001380:	4b20      	ldr	r3, [pc, #128]	; (8001404 <proc_TRIG_FSM+0xac>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d11a      	bne.n	80013be <proc_TRIG_FSM+0x66>
		if(++cnt == 2)
 8001388:	4b21      	ldr	r3, [pc, #132]	; (8001410 <proc_TRIG_FSM+0xb8>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <proc_TRIG_FSM+0xb8>)
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <proc_TRIG_FSM+0xb8>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b02      	cmp	r3, #2
 800139a:	d131      	bne.n	8001400 <proc_TRIG_FSM+0xa8>
			cnt = 0;
 800139c:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <proc_TRIG_FSM+0xb8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
			state = 2;
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <proc_TRIG_FSM+0xac>)
 80013a4:	2202      	movs	r2, #2
 80013a6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 1);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2108      	movs	r1, #8
 80013ac:	4816      	ldr	r0, [pc, #88]	; (8001408 <proc_TRIG_FSM+0xb0>)
 80013ae:	f002 fbed 	bl	8003b8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 1);
 80013b2:	2201      	movs	r2, #1
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	4815      	ldr	r0, [pc, #84]	; (800140c <proc_TRIG_FSM+0xb4>)
 80013b8:	f002 fbe8 	bl	8003b8c <HAL_GPIO_WritePin>
}
 80013bc:	e020      	b.n	8001400 <proc_TRIG_FSM+0xa8>
	else if(state == 2)													// STATE 2: wait 10uS and disable TRIGGER
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <proc_TRIG_FSM+0xac>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d11c      	bne.n	8001400 <proc_TRIG_FSM+0xa8>
		if(++cnt == 10)
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <proc_TRIG_FSM+0xb8>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	3301      	adds	r3, #1
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <proc_TRIG_FSM+0xb8>)
 80013d0:	701a      	strb	r2, [r3, #0]
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <proc_TRIG_FSM+0xb8>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b0a      	cmp	r3, #10
 80013d8:	d112      	bne.n	8001400 <proc_TRIG_FSM+0xa8>
			cnt = 0;
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <proc_TRIG_FSM+0xb8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
			state = 0;
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <proc_TRIG_FSM+0xac>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2108      	movs	r1, #8
 80013ea:	4807      	ldr	r0, [pc, #28]	; (8001408 <proc_TRIG_FSM+0xb0>)
 80013ec:	f002 fbce 	bl	8003b8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <proc_TRIG_FSM+0xb4>)
 80013f6:	f002 fbc9 	bl	8003b8c <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim6);
 80013fa:	4806      	ldr	r0, [pc, #24]	; (8001414 <proc_TRIG_FSM+0xbc>)
 80013fc:	f003 ff16 	bl	800522c <HAL_TIM_Base_Stop_IT>
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200002e4 	.word	0x200002e4
 8001408:	40021000 	.word	0x40021000
 800140c:	40021400 	.word	0x40021400
 8001410:	200002e5 	.word	0x200002e5
 8001414:	200004f4 	.word	0x200004f4

08001418 <read_ECHO_pulse>:

void read_ECHO_pulse(char coord)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
	struct distSensor_t* distSensor;
	TIM_HandleTypeDef* htim;
	uint32_t channel;

	if(coord == 'x')
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	2b78      	cmp	r3, #120	; 0x78
 8001426:	d106      	bne.n	8001436 <read_ECHO_pulse+0x1e>
	{
		distSensor = &distSensorX;
 8001428:	4b3d      	ldr	r3, [pc, #244]	; (8001520 <read_ECHO_pulse+0x108>)
 800142a:	617b      	str	r3, [r7, #20]
		htim = &htim9;
 800142c:	4b3d      	ldr	r3, [pc, #244]	; (8001524 <read_ECHO_pulse+0x10c>)
 800142e:	613b      	str	r3, [r7, #16]
		channel = TIM_CHANNEL_2;
 8001430:	2304      	movs	r3, #4
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	e005      	b.n	8001442 <read_ECHO_pulse+0x2a>
	}
	else
	{
		distSensor = &distSensorY;
 8001436:	4b3c      	ldr	r3, [pc, #240]	; (8001528 <read_ECHO_pulse+0x110>)
 8001438:	617b      	str	r3, [r7, #20]
		htim = &htim13;
 800143a:	4b3c      	ldr	r3, [pc, #240]	; (800152c <read_ECHO_pulse+0x114>)
 800143c:	613b      	str	r3, [r7, #16]
		channel = TIM_CHANNEL_1;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
	}

	if(!distSensor->isFirstCapture)														// if positive edge transition
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	7b1b      	ldrb	r3, [r3, #12]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10a      	bne.n	8001460 <read_ECHO_pulse+0x48>
	{
		distSensor->ic1 = HAL_TIM_ReadCapturedValue(htim, channel);						// read first timer counter value
 800144a:	68f9      	ldr	r1, [r7, #12]
 800144c:	6938      	ldr	r0, [r7, #16]
 800144e:	f004 ff01 	bl	8006254 <HAL_TIM_ReadCapturedValue>
 8001452:	4602      	mov	r2, r0
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	601a      	str	r2, [r3, #0]
		distSensor->isFirstCapture = 1;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	2201      	movs	r2, #1
 800145c:	731a      	strb	r2, [r3, #12]

		distSensor->isFirstCapture = 0; 												// set it back to detect positive edge

		distSensor->ready = 1;															// set flag
	}
}
 800145e:	e050      	b.n	8001502 <read_ECHO_pulse+0xea>
		distSensor->ic2 = HAL_TIM_ReadCapturedValue(htim, channel); 					// read second timer counter value
 8001460:	68f9      	ldr	r1, [r7, #12]
 8001462:	6938      	ldr	r0, [r7, #16]
 8001464:	f004 fef6 	bl	8006254 <HAL_TIM_ReadCapturedValue>
 8001468:	4602      	mov	r2, r0
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	605a      	str	r2, [r3, #4]
		HAL_TIM_IC_Stop_IT(htim, channel);												// stop timer
 800146e:	68f9      	ldr	r1, [r7, #12]
 8001470:	6938      	ldr	r0, [r7, #16]
 8001472:	f004 fa97 	bl	80059a4 <HAL_TIM_IC_Stop_IT>
		__HAL_TIM_SET_COUNTER(htim, 0);  												// reset the timer counter
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
		if(distSensor->ic2 > distSensor->ic1)											// calculate timer tick difference
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d907      	bls.n	800149a <read_ECHO_pulse+0x82>
			distSensor->diff = distSensor->ic2 - distSensor->ic1;
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	1ad2      	subs	r2, r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	e007      	b.n	80014aa <read_ECHO_pulse+0x92>
			distSensor->diff = (0xFFFFFFFF - distSensor->ic1) + distSensor->ic2;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	1e5a      	subs	r2, r3, #1
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	609a      	str	r2, [r3, #8]
		distSensor->dist = ((float) distSensor->diff / 1000000.0) * 343.0 / 2.0;		// time convertion to distance
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014b6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80014ba:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8001510 <read_ECHO_pulse+0xf8>
 80014be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014c2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8001518 <read_ECHO_pulse+0x100>
 80014c6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80014ca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80014ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	edc3 7a04 	vstr	s15, [r3, #16]
		if (distSensor->diff < 100 || distSensor->diff > 18000)							// object too close or too far
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b63      	cmp	r3, #99	; 0x63
 80014e2:	d905      	bls.n	80014f0 <read_ECHO_pulse+0xd8>
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f244 6250 	movw	r2, #18000	; 0x4650
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d902      	bls.n	80014f6 <read_ECHO_pulse+0xde>
			distSensor->dist = -1;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <read_ECHO_pulse+0x118>)
 80014f4:	611a      	str	r2, [r3, #16]
		distSensor->isFirstCapture = 0; 												// set it back to detect positive edge
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2200      	movs	r2, #0
 80014fa:	731a      	strb	r2, [r3, #12]
		distSensor->ready = 1;															// set flag
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	2201      	movs	r2, #1
 8001500:	735a      	strb	r2, [r3, #13]
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	f3af 8000 	nop.w
 8001510:	00000000 	.word	0x00000000
 8001514:	412e8480 	.word	0x412e8480
 8001518:	00000000 	.word	0x00000000
 800151c:	40757000 	.word	0x40757000
 8001520:	200002b4 	.word	0x200002b4
 8001524:	2000058c 	.word	0x2000058c
 8001528:	200002c8 	.word	0x200002c8
 800152c:	200005d8 	.word	0x200005d8
 8001530:	bf800000 	.word	0xbf800000

08001534 <proc_distance>:

void proc_distance()
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_2);
 8001538:	2104      	movs	r1, #4
 800153a:	4806      	ldr	r0, [pc, #24]	; (8001554 <proc_distance+0x20>)
 800153c:	f004 f8e2 	bl	8005704 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim13, TIM_CHANNEL_1);
 8001540:	2100      	movs	r1, #0
 8001542:	4805      	ldr	r0, [pc, #20]	; (8001558 <proc_distance+0x24>)
 8001544:	f004 f8de 	bl	8005704 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8001548:	4804      	ldr	r0, [pc, #16]	; (800155c <proc_distance+0x28>)
 800154a:	f003 fdf7 	bl	800513c <HAL_TIM_Base_Start_IT>
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2000058c 	.word	0x2000058c
 8001558:	200005d8 	.word	0x200005d8
 800155c:	200004f4 	.word	0x200004f4

08001560 <get_distance>:

struct coords get_distance()
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08e      	sub	sp, #56	; 0x38
 8001564:	af02      	add	r7, sp, #8
	if(distSensorX.ready && distSensorY.ready)
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <get_distance+0x8c>)
 8001568:	7b5b      	ldrb	r3, [r3, #13]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d029      	beq.n	80015c2 <get_distance+0x62>
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <get_distance+0x90>)
 8001570:	7b5b      	ldrb	r3, [r3, #13]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d025      	beq.n	80015c2 <get_distance+0x62>
	{
		distSensorX.ready = 0;
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <get_distance+0x8c>)
 8001578:	2200      	movs	r2, #0
 800157a:	735a      	strb	r2, [r3, #13]
		distSensorY.ready = 0;
 800157c:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <get_distance+0x90>)
 800157e:	2200      	movs	r2, #0
 8001580:	735a      	strb	r2, [r3, #13]

		distance.x = distSensorX.dist;
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <get_distance+0x8c>)
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	4a1b      	ldr	r2, [pc, #108]	; (80015f4 <get_distance+0x94>)
 8001588:	6013      	str	r3, [r2, #0]
		distance.y = distSensorY.dist;
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <get_distance+0x90>)
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	4a19      	ldr	r2, [pc, #100]	; (80015f4 <get_distance+0x94>)
 8001590:	6053      	str	r3, [r2, #4]

		char message[32];
		sprintf(message, "coords = (%0.2f, %0.2f)", distance.x, distance.y);
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <get_distance+0x94>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800159c:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <get_distance+0x94>)
 800159e:	edd3 7a01 	vldr	s15, [r3, #4]
 80015a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015a6:	f107 0008 	add.w	r0, r7, #8
 80015aa:	ed8d 7b00 	vstr	d7, [sp]
 80015ae:	ec53 2b16 	vmov	r2, r3, d6
 80015b2:	4911      	ldr	r1, [pc, #68]	; (80015f8 <get_distance+0x98>)
 80015b4:	f007 fe66 	bl	8009284 <siprintf>
		send_UART(message);
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	4618      	mov	r0, r3
 80015be:	f001 fafd 	bl	8002bbc <send_UART>
	}

	return distance;
 80015c2:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <get_distance+0x94>)
 80015c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80015d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d4:	ee07 2a10 	vmov	s14, r2
 80015d8:	ee07 3a90 	vmov	s15, r3
}
 80015dc:	eeb0 0a47 	vmov.f32	s0, s14
 80015e0:	eef0 0a67 	vmov.f32	s1, s15
 80015e4:	3730      	adds	r7, #48	; 0x30
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200002b4 	.word	0x200002b4
 80015f0:	200002c8 	.word	0x200002c8
 80015f4:	200002dc 	.word	0x200002dc
 80015f8:	0800d590 	.word	0x0800d590

080015fc <check_command>:

float pos_r = 0.0, spd_r = 0.0;
char m = 'S';

unsigned char check_command(char* message)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
    char cmd = INV;
 8001604:	2300      	movs	r3, #0
 8001606:	73fb      	strb	r3, [r7, #15]

    if((!strncmp((char*) message, "REF", 3)))
 8001608:	2203      	movs	r2, #3
 800160a:	491d      	ldr	r1, [pc, #116]	; (8001680 <check_command+0x84>)
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f007 feca 	bl	80093a6 <strncmp>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <check_command+0x22>
		cmd = REF;
 8001618:	2302      	movs	r3, #2
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e02b      	b.n	8001676 <check_command+0x7a>
    else if((!strncmp((char*) message, "EN", 2)))
 800161e:	2202      	movs	r2, #2
 8001620:	4918      	ldr	r1, [pc, #96]	; (8001684 <check_command+0x88>)
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f007 febf 	bl	80093a6 <strncmp>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d102      	bne.n	8001634 <check_command+0x38>
        cmd = EN;
 800162e:	2301      	movs	r3, #1
 8001630:	73fb      	strb	r3, [r7, #15]
 8001632:	e020      	b.n	8001676 <check_command+0x7a>
	else if((!strncmp((char*) message, "/", 1)))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	781a      	ldrb	r2, [r3, #0]
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <check_command+0x8c>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <check_command+0x4c>
		cmd = INC;
 8001642:	2303      	movs	r3, #3
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	e016      	b.n	8001676 <check_command+0x7a>
	else if((!strncmp((char*) message, "\\", 1)))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <check_command+0x90>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d102      	bne.n	800165c <check_command+0x60>
		cmd = DEC;
 8001656:	2304      	movs	r3, #4
 8001658:	73fb      	strb	r3, [r7, #15]
 800165a:	e00c      	b.n	8001676 <check_command+0x7a>
	else if((!strncmp((char*) message, "DIST", 4)))
 800165c:	2204      	movs	r2, #4
 800165e:	490c      	ldr	r1, [pc, #48]	; (8001690 <check_command+0x94>)
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f007 fea0 	bl	80093a6 <strncmp>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <check_command+0x76>
		cmd = DIST;
 800166c:	2305      	movs	r3, #5
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	e001      	b.n	8001676 <check_command+0x7a>
    else
    	cmd = INV;
 8001672:	2300      	movs	r3, #0
 8001674:	73fb      	strb	r3, [r7, #15]

    return cmd;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	0800d5a8 	.word	0x0800d5a8
 8001684:	0800d5ac 	.word	0x0800d5ac
 8001688:	0800d5b0 	.word	0x0800d5b0
 800168c:	0800d5b4 	.word	0x0800d5b4
 8001690:	0800d5b8 	.word	0x0800d5b8

08001694 <proc_inv_cmd>:
		proc_dist_cmd
};


void proc_inv_cmd(char* message)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	send_UART("Invalid instruction. Type '?' for Help.");
 800169c:	4803      	ldr	r0, [pc, #12]	; (80016ac <proc_inv_cmd+0x18>)
 800169e:	f001 fa8d 	bl	8002bbc <send_UART>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	0800d5c0 	.word	0x0800d5c0

080016b0 <proc_en_cmd>:


void proc_en_cmd(char* message)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	int val;

	if(sscanf((char*) message, "EN %d", &val) == 1)
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	461a      	mov	r2, r3
 80016be:	4914      	ldr	r1, [pc, #80]	; (8001710 <proc_en_cmd+0x60>)
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f007 fdff 	bl	80092c4 <siscanf>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d118      	bne.n	80016fe <proc_en_cmd+0x4e>
	{
		if(val == 0 || val == 1)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <proc_en_cmd+0x28>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d10e      	bne.n	80016f6 <proc_en_cmd+0x46>
		{
			if(val)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <proc_en_cmd+0x3a>
			{
				start();
 80016de:	f7ff f9b3 	bl	8000a48 <start>
				send_UART("System enabled with success.");
 80016e2:	480c      	ldr	r0, [pc, #48]	; (8001714 <proc_en_cmd+0x64>)
 80016e4:	f001 fa6a 	bl	8002bbc <send_UART>
			if(val)
 80016e8:	e00d      	b.n	8001706 <proc_en_cmd+0x56>
			}
			else
			{
				stop();
 80016ea:	f7ff f9d1 	bl	8000a90 <stop>
				send_UART("System disabled with success.");
 80016ee:	480a      	ldr	r0, [pc, #40]	; (8001718 <proc_en_cmd+0x68>)
 80016f0:	f001 fa64 	bl	8002bbc <send_UART>
			if(val)
 80016f4:	e007      	b.n	8001706 <proc_en_cmd+0x56>
			}
		}
		else
			send_UART("Invalid Enable instruction argument values.");
 80016f6:	4809      	ldr	r0, [pc, #36]	; (800171c <proc_en_cmd+0x6c>)
 80016f8:	f001 fa60 	bl	8002bbc <send_UART>
	}
	else
		send_UART("Invalid Enable instruction syntax.");
}
 80016fc:	e003      	b.n	8001706 <proc_en_cmd+0x56>
		send_UART("Invalid Enable instruction syntax.");
 80016fe:	4808      	ldr	r0, [pc, #32]	; (8001720 <proc_en_cmd+0x70>)
 8001700:	f001 fa5c 	bl	8002bbc <send_UART>
}
 8001704:	e7ff      	b.n	8001706 <proc_en_cmd+0x56>
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	0800d5e8 	.word	0x0800d5e8
 8001714:	0800d5f0 	.word	0x0800d5f0
 8001718:	0800d610 	.word	0x0800d610
 800171c:	0800d630 	.word	0x0800d630
 8001720:	0800d65c 	.word	0x0800d65c
 8001724:	00000000 	.word	0x00000000

08001728 <proc_ref_cmd>:


void proc_ref_cmd(char* message)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af02      	add	r7, sp, #8
 800172e:	6078      	str	r0, [r7, #4]
	stop();
 8001730:	f7ff f9ae 	bl	8000a90 <stop>

	char type, sign;
	int val;

	if(sscanf((char*) message, "REF %c %c%d", &type, &sign, &val) == 3)
 8001734:	f107 010e 	add.w	r1, r7, #14
 8001738:	f107 020f 	add.w	r2, r7, #15
 800173c:	f107 0308 	add.w	r3, r7, #8
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	460b      	mov	r3, r1
 8001744:	4942      	ldr	r1, [pc, #264]	; (8001850 <proc_ref_cmd+0x128>)
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f007 fdbc 	bl	80092c4 <siscanf>
 800174c:	4603      	mov	r3, r0
 800174e:	2b03      	cmp	r3, #3
 8001750:	d16a      	bne.n	8001828 <proc_ref_cmd+0x100>
	{
		if((sign == '+' || sign == '-') && (type == 'P' || type == 'S') && val >= 0)
 8001752:	7bbb      	ldrb	r3, [r7, #14]
 8001754:	2b2b      	cmp	r3, #43	; 0x2b
 8001756:	d002      	beq.n	800175e <proc_ref_cmd+0x36>
 8001758:	7bbb      	ldrb	r3, [r7, #14]
 800175a:	2b2d      	cmp	r3, #45	; 0x2d
 800175c:	d160      	bne.n	8001820 <proc_ref_cmd+0xf8>
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	2b50      	cmp	r3, #80	; 0x50
 8001762:	d002      	beq.n	800176a <proc_ref_cmd+0x42>
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	2b53      	cmp	r3, #83	; 0x53
 8001768:	d15a      	bne.n	8001820 <proc_ref_cmd+0xf8>
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	db57      	blt.n	8001820 <proc_ref_cmd+0xf8>
		{
			m = type;
 8001770:	7bfa      	ldrb	r2, [r7, #15]
 8001772:	4b38      	ldr	r3, [pc, #224]	; (8001854 <proc_ref_cmd+0x12c>)
 8001774:	701a      	strb	r2, [r3, #0]
			if(type == 'P')
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	2b50      	cmp	r3, #80	; 0x50
 800177a:	d126      	bne.n	80017ca <proc_ref_cmd+0xa2>
			{
				pos_r = val * PI / 180;
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	ee07 3a90 	vmov	s15, r3
 8001782:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001786:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8001838 <proc_ref_cmd+0x110>
 800178a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800178e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8001840 <proc_ref_cmd+0x118>
 8001792:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001796:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800179a:	4b2f      	ldr	r3, [pc, #188]	; (8001858 <proc_ref_cmd+0x130>)
 800179c:	edc3 7a00 	vstr	s15, [r3]

				if(sign == '-')
 80017a0:	7bbb      	ldrb	r3, [r7, #14]
 80017a2:	2b2d      	cmp	r3, #45	; 0x2d
 80017a4:	d107      	bne.n	80017b6 <proc_ref_cmd+0x8e>
					pos_r = -pos_r;
 80017a6:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <proc_ref_cmd+0x130>)
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	eef1 7a67 	vneg.f32	s15, s15
 80017b0:	4b29      	ldr	r3, [pc, #164]	; (8001858 <proc_ref_cmd+0x130>)
 80017b2:	edc3 7a00 	vstr	s15, [r3]

				set_ref(pos_r, type);
 80017b6:	4b28      	ldr	r3, [pc, #160]	; (8001858 <proc_ref_cmd+0x130>)
 80017b8:	edd3 7a00 	vldr	s15, [r3]
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	4618      	mov	r0, r3
 80017c0:	eeb0 0a67 	vmov.f32	s0, s15
 80017c4:	f7ff fb3a 	bl	8000e3c <set_ref>
 80017c8:	e026      	b.n	8001818 <proc_ref_cmd+0xf0>
			}
			else
			{
				spd_r = val * 2 * PI / 60;
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	ee07 3a90 	vmov	s15, r3
 80017d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80017d6:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8001838 <proc_ref_cmd+0x110>
 80017da:	ee27 6b06 	vmul.f64	d6, d7, d6
 80017de:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8001848 <proc_ref_cmd+0x120>
 80017e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <proc_ref_cmd+0x134>)
 80017ec:	edc3 7a00 	vstr	s15, [r3]

				if(sign == '-')
 80017f0:	7bbb      	ldrb	r3, [r7, #14]
 80017f2:	2b2d      	cmp	r3, #45	; 0x2d
 80017f4:	d107      	bne.n	8001806 <proc_ref_cmd+0xde>
					spd_r = -spd_r;
 80017f6:	4b19      	ldr	r3, [pc, #100]	; (800185c <proc_ref_cmd+0x134>)
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	eef1 7a67 	vneg.f32	s15, s15
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <proc_ref_cmd+0x134>)
 8001802:	edc3 7a00 	vstr	s15, [r3]

				set_ref(spd_r, type);
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <proc_ref_cmd+0x134>)
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	4618      	mov	r0, r3
 8001810:	eeb0 0a67 	vmov.f32	s0, s15
 8001814:	f7ff fb12 	bl	8000e3c <set_ref>
			}

			send_UART("Desired reference changed with success.");
 8001818:	4811      	ldr	r0, [pc, #68]	; (8001860 <proc_ref_cmd+0x138>)
 800181a:	f001 f9cf 	bl	8002bbc <send_UART>
		else
			send_UART("Invalid desired reference value.");
	}
	else
		send_UART("Invalid REF instruction syntax.");
}
 800181e:	e006      	b.n	800182e <proc_ref_cmd+0x106>
			send_UART("Invalid desired reference value.");
 8001820:	4810      	ldr	r0, [pc, #64]	; (8001864 <proc_ref_cmd+0x13c>)
 8001822:	f001 f9cb 	bl	8002bbc <send_UART>
}
 8001826:	e002      	b.n	800182e <proc_ref_cmd+0x106>
		send_UART("Invalid REF instruction syntax.");
 8001828:	480f      	ldr	r0, [pc, #60]	; (8001868 <proc_ref_cmd+0x140>)
 800182a:	f001 f9c7 	bl	8002bbc <send_UART>
}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	4d12d84a 	.word	0x4d12d84a
 800183c:	400921fb 	.word	0x400921fb
 8001840:	00000000 	.word	0x00000000
 8001844:	40668000 	.word	0x40668000
 8001848:	00000000 	.word	0x00000000
 800184c:	404e0000 	.word	0x404e0000
 8001850:	0800d680 	.word	0x0800d680
 8001854:	20000024 	.word	0x20000024
 8001858:	200002e8 	.word	0x200002e8
 800185c:	200002ec 	.word	0x200002ec
 8001860:	0800d68c 	.word	0x0800d68c
 8001864:	0800d6b4 	.word	0x0800d6b4
 8001868:	0800d6d8 	.word	0x0800d6d8

0800186c <proc_inc_cmd>:


void proc_inc_cmd(char* message)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	pos_r += 0.5;
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <proc_inc_cmd+0x6c>)
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800187e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <proc_inc_cmd+0x6c>)
 8001884:	edc3 7a00 	vstr	s15, [r3]
	spd_r += 1.0;
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <proc_inc_cmd+0x70>)
 800188a:	edd3 7a00 	vldr	s15, [r3]
 800188e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001892:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <proc_inc_cmd+0x70>)
 8001898:	edc3 7a00 	vstr	s15, [r3]

	if(m == 'P')
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <proc_inc_cmd+0x74>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b50      	cmp	r3, #80	; 0x50
 80018a2:	d10a      	bne.n	80018ba <proc_inc_cmd+0x4e>
		set_ref(pos_r, m);
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <proc_inc_cmd+0x6c>)
 80018a6:	edd3 7a00 	vldr	s15, [r3]
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <proc_inc_cmd+0x74>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	eeb0 0a67 	vmov.f32	s0, s15
 80018b4:	f7ff fac2 	bl	8000e3c <set_ref>
	else
		set_ref(spd_r, m);
}
 80018b8:	e009      	b.n	80018ce <proc_inc_cmd+0x62>
		set_ref(spd_r, m);
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <proc_inc_cmd+0x70>)
 80018bc:	edd3 7a00 	vldr	s15, [r3]
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <proc_inc_cmd+0x74>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	eeb0 0a67 	vmov.f32	s0, s15
 80018ca:	f7ff fab7 	bl	8000e3c <set_ref>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200002e8 	.word	0x200002e8
 80018dc:	200002ec 	.word	0x200002ec
 80018e0:	20000024 	.word	0x20000024

080018e4 <proc_dec_cmd>:

void proc_dec_cmd(char* message)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	pos_r -= 0.5;
 80018ec:	4b18      	ldr	r3, [pc, #96]	; (8001950 <proc_dec_cmd+0x6c>)
 80018ee:	edd3 7a00 	vldr	s15, [r3]
 80018f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80018f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <proc_dec_cmd+0x6c>)
 80018fc:	edc3 7a00 	vstr	s15, [r3]
	spd_r -= 1.0;
 8001900:	4b14      	ldr	r3, [pc, #80]	; (8001954 <proc_dec_cmd+0x70>)
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800190a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <proc_dec_cmd+0x70>)
 8001910:	edc3 7a00 	vstr	s15, [r3]

	if(m == 'P')
 8001914:	4b10      	ldr	r3, [pc, #64]	; (8001958 <proc_dec_cmd+0x74>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b50      	cmp	r3, #80	; 0x50
 800191a:	d10a      	bne.n	8001932 <proc_dec_cmd+0x4e>
		set_ref(pos_r, m);
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <proc_dec_cmd+0x6c>)
 800191e:	edd3 7a00 	vldr	s15, [r3]
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <proc_dec_cmd+0x74>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	eeb0 0a67 	vmov.f32	s0, s15
 800192c:	f7ff fa86 	bl	8000e3c <set_ref>
	else
		set_ref(spd_r, m);
}
 8001930:	e009      	b.n	8001946 <proc_dec_cmd+0x62>
		set_ref(spd_r, m);
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <proc_dec_cmd+0x70>)
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <proc_dec_cmd+0x74>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	eeb0 0a67 	vmov.f32	s0, s15
 8001942:	f7ff fa7b 	bl	8000e3c <set_ref>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200002e8 	.word	0x200002e8
 8001954:	200002ec 	.word	0x200002ec
 8001958:	20000024 	.word	0x20000024

0800195c <proc_dist_cmd>:

void proc_dist_cmd(char* message)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	proc_distance();
 8001964:	f7ff fde6 	bl	8001534 <proc_distance>
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001974:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <MX_I2C1_Init+0x74>)
 8001976:	4a1c      	ldr	r2, [pc, #112]	; (80019e8 <MX_I2C1_Init+0x78>)
 8001978:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <MX_I2C1_Init+0x74>)
 800197c:	4a1b      	ldr	r2, [pc, #108]	; (80019ec <MX_I2C1_Init+0x7c>)
 800197e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001980:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <MX_I2C1_Init+0x74>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001986:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <MX_I2C1_Init+0x74>)
 8001988:	2201      	movs	r2, #1
 800198a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <MX_I2C1_Init+0x74>)
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001992:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <MX_I2C1_Init+0x74>)
 8001994:	2200      	movs	r2, #0
 8001996:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <MX_I2C1_Init+0x74>)
 800199a:	2200      	movs	r2, #0
 800199c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800199e:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <MX_I2C1_Init+0x74>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <MX_I2C1_Init+0x74>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019aa:	480e      	ldr	r0, [pc, #56]	; (80019e4 <MX_I2C1_Init+0x74>)
 80019ac:	f002 f920 	bl	8003bf0 <HAL_I2C_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019b6:	f000 fa0b 	bl	8001dd0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019ba:	2100      	movs	r1, #0
 80019bc:	4809      	ldr	r0, [pc, #36]	; (80019e4 <MX_I2C1_Init+0x74>)
 80019be:	f002 f9c1 	bl	8003d44 <HAL_I2CEx_ConfigAnalogFilter>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019c8:	f000 fa02 	bl	8001dd0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019cc:	2100      	movs	r1, #0
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_I2C1_Init+0x74>)
 80019d0:	f002 fa03 	bl	8003dda <HAL_I2CEx_ConfigDigitalFilter>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019da:	f000 f9f9 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200002f0 	.word	0x200002f0
 80019e8:	40005400 	.word	0x40005400
 80019ec:	20303e5d 	.word	0x20303e5d

080019f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b0ae      	sub	sp, #184	; 0xb8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2290      	movs	r2, #144	; 0x90
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f006 fde1 	bl	80085d8 <memset>
  if(i2cHandle->Instance==I2C1)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a54      	ldr	r2, [pc, #336]	; (8001b6c <HAL_I2C_MspInit+0x17c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	f040 80a0 	bne.w	8001b62 <HAL_I2C_MspInit+0x172>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a26:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4618      	mov	r0, r3
 8001a32:	f002 ff03 	bl	800483c <HAL_RCCEx_PeriphCLKConfig>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001a3c:	f000 f9c8 	bl	8001dd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a40:	4b4b      	ldr	r3, [pc, #300]	; (8001b70 <HAL_I2C_MspInit+0x180>)
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	4a4a      	ldr	r2, [pc, #296]	; (8001b70 <HAL_I2C_MspInit+0x180>)
 8001a46:	f043 0302 	orr.w	r3, r3, #2
 8001a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4c:	4b48      	ldr	r3, [pc, #288]	; (8001b70 <HAL_I2C_MspInit+0x180>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a58:	23c0      	movs	r3, #192	; 0xc0
 8001a5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a5e:	2312      	movs	r3, #18
 8001a60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a70:	2304      	movs	r3, #4
 8001a72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a76:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	483d      	ldr	r0, [pc, #244]	; (8001b74 <HAL_I2C_MspInit+0x184>)
 8001a7e:	f001 fec1 	bl	8003804 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a82:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <HAL_I2C_MspInit+0x180>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a3a      	ldr	r2, [pc, #232]	; (8001b70 <HAL_I2C_MspInit+0x180>)
 8001a88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b38      	ldr	r3, [pc, #224]	; (8001b70 <HAL_I2C_MspInit+0x180>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001a9a:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <HAL_I2C_MspInit+0x188>)
 8001a9c:	4a37      	ldr	r2, [pc, #220]	; (8001b7c <HAL_I2C_MspInit+0x18c>)
 8001a9e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001aa0:	4b35      	ldr	r3, [pc, #212]	; (8001b78 <HAL_I2C_MspInit+0x188>)
 8001aa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aa8:	4b33      	ldr	r3, [pc, #204]	; (8001b78 <HAL_I2C_MspInit+0x188>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aae:	4b32      	ldr	r3, [pc, #200]	; (8001b78 <HAL_I2C_MspInit+0x188>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ab4:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <HAL_I2C_MspInit+0x188>)
 8001ab6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aba:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001abc:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <HAL_I2C_MspInit+0x188>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ac2:	4b2d      	ldr	r3, [pc, #180]	; (8001b78 <HAL_I2C_MspInit+0x188>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <HAL_I2C_MspInit+0x188>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ace:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <HAL_I2C_MspInit+0x188>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ad4:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <HAL_I2C_MspInit+0x188>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001ada:	4827      	ldr	r0, [pc, #156]	; (8001b78 <HAL_I2C_MspInit+0x188>)
 8001adc:	f001 fb16 	bl	800310c <HAL_DMA_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 8001ae6:	f000 f973 	bl	8001dd0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a22      	ldr	r2, [pc, #136]	; (8001b78 <HAL_I2C_MspInit+0x188>)
 8001aee:	63da      	str	r2, [r3, #60]	; 0x3c
 8001af0:	4a21      	ldr	r2, [pc, #132]	; (8001b78 <HAL_I2C_MspInit+0x188>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001af6:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <HAL_I2C_MspInit+0x190>)
 8001af8:	4a22      	ldr	r2, [pc, #136]	; (8001b84 <HAL_I2C_MspInit+0x194>)
 8001afa:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001afc:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <HAL_I2C_MspInit+0x190>)
 8001afe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b02:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b04:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <HAL_I2C_MspInit+0x190>)
 8001b06:	2240      	movs	r2, #64	; 0x40
 8001b08:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_I2C_MspInit+0x190>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b10:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <HAL_I2C_MspInit+0x190>)
 8001b12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b16:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b18:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <HAL_I2C_MspInit+0x190>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <HAL_I2C_MspInit+0x190>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_I2C_MspInit+0x190>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <HAL_I2C_MspInit+0x190>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b30:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_I2C_MspInit+0x190>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001b36:	4812      	ldr	r0, [pc, #72]	; (8001b80 <HAL_I2C_MspInit+0x190>)
 8001b38:	f001 fae8 	bl	800310c <HAL_DMA_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_I2C_MspInit+0x156>
    {
      Error_Handler();
 8001b42:	f000 f945 	bl	8001dd0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a0d      	ldr	r2, [pc, #52]	; (8001b80 <HAL_I2C_MspInit+0x190>)
 8001b4a:	639a      	str	r2, [r3, #56]	; 0x38
 8001b4c:	4a0c      	ldr	r2, [pc, #48]	; (8001b80 <HAL_I2C_MspInit+0x190>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	201f      	movs	r0, #31
 8001b58:	f001 fa93 	bl	8003082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001b5c:	201f      	movs	r0, #31
 8001b5e:	f001 faac 	bl	80030ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b62:	bf00      	nop
 8001b64:	37b8      	adds	r7, #184	; 0xb8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40005400 	.word	0x40005400
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020400 	.word	0x40020400
 8001b78:	2000033c 	.word	0x2000033c
 8001b7c:	40026010 	.word	0x40026010
 8001b80:	2000039c 	.word	0x2000039c
 8001b84:	400260a0 	.word	0x400260a0

08001b88 <read_obstacles>:

struct obstacle_detection_t obs_det = { 0, 0, 0, 0, 0 };
struct obstacle_detection_t lst_obs_det;

struct obstacle_detection_t read_obstacles()
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	obs_det.PL = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8001b90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b94:	4828      	ldr	r0, [pc, #160]	; (8001c38 <read_obstacles+0xb0>)
 8001b96:	f001 ffe1 	bl	8003b5c <HAL_GPIO_ReadPin>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <read_obstacles+0xb4>)
 8001ba0:	701a      	strb	r2, [r3, #0]
	obs_det.FD = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8001ba2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ba6:	4824      	ldr	r0, [pc, #144]	; (8001c38 <read_obstacles+0xb0>)
 8001ba8:	f001 ffd8 	bl	8003b5c <HAL_GPIO_ReadPin>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <read_obstacles+0xb4>)
 8001bb2:	705a      	strb	r2, [r3, #1]
	obs_det.FE = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 8001bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bb8:	481f      	ldr	r0, [pc, #124]	; (8001c38 <read_obstacles+0xb0>)
 8001bba:	f001 ffcf 	bl	8003b5c <HAL_GPIO_ReadPin>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <read_obstacles+0xb4>)
 8001bc4:	709a      	strb	r2, [r3, #2]
	obs_det.TD = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 8001bc6:	2140      	movs	r1, #64	; 0x40
 8001bc8:	481d      	ldr	r0, [pc, #116]	; (8001c40 <read_obstacles+0xb8>)
 8001bca:	f001 ffc7 	bl	8003b5c <HAL_GPIO_ReadPin>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <read_obstacles+0xb4>)
 8001bd4:	70da      	strb	r2, [r3, #3]
	obs_det.TE = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 8001bd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bda:	4817      	ldr	r0, [pc, #92]	; (8001c38 <read_obstacles+0xb0>)
 8001bdc:	f001 ffbe 	bl	8003b5c <HAL_GPIO_ReadPin>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <read_obstacles+0xb4>)
 8001be6:	711a      	strb	r2, [r3, #4]

	if(lst_obs_det.PL != obs_det.PL ||
 8001be8:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <read_obstacles+0xbc>)
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <read_obstacles+0xb4>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d110      	bne.n	8001c16 <read_obstacles+0x8e>
	   lst_obs_det.FD != obs_det.FD ||
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <read_obstacles+0xbc>)
 8001bf6:	785a      	ldrb	r2, [r3, #1]
 8001bf8:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <read_obstacles+0xb4>)
 8001bfa:	785b      	ldrb	r3, [r3, #1]
	if(lst_obs_det.PL != obs_det.PL ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d10a      	bne.n	8001c16 <read_obstacles+0x8e>
	   lst_obs_det.FE != obs_det.FE ||
 8001c00:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <read_obstacles+0xbc>)
 8001c02:	789a      	ldrb	r2, [r3, #2]
 8001c04:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <read_obstacles+0xb4>)
 8001c06:	789b      	ldrb	r3, [r3, #2]
	   lst_obs_det.FD != obs_det.FD ||
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d104      	bne.n	8001c16 <read_obstacles+0x8e>
	   lst_obs_det.TD != obs_det.TD ||
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <read_obstacles+0xbc>)
 8001c0e:	78da      	ldrb	r2, [r3, #3]
 8001c10:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <read_obstacles+0xb4>)
 8001c12:	78db      	ldrb	r3, [r3, #3]
	   lst_obs_det.FE != obs_det.FE ||
 8001c14:	429a      	cmp	r2, r3
		//sprintf(message, "obst = [%d||%d-%d||%d-%d]", obs_det.PL, obs_det.FE, obs_det.FD, obs_det.TE, obs_det.TD);
		sprintf(message, "obst = [x||x-x||%d-%d]", obs_det.TE, obs_det.TD);
		send_UART(message);*/
	}

	lst_obs_det = obs_det;
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <read_obstacles+0xbc>)
 8001c18:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <read_obstacles+0xb4>)
 8001c1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c1e:	6018      	str	r0, [r3, #0]
 8001c20:	3304      	adds	r3, #4
 8001c22:	7019      	strb	r1, [r3, #0]
	return obs_det;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <read_obstacles+0xb4>)
 8001c28:	6810      	ldr	r0, [r2, #0]
 8001c2a:	6018      	str	r0, [r3, #0]
 8001c2c:	7912      	ldrb	r2, [r2, #4]
 8001c2e:	711a      	strb	r2, [r3, #4]
}
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40020400 	.word	0x40020400
 8001c3c:	200003fc 	.word	0x200003fc
 8001c40:	40020800 	.word	0x40020800
 8001c44:	20000404 	.word	0x20000404

08001c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b0c2      	sub	sp, #264	; 0x108
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c4e:	f001 f8bc 	bl	8002dca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c52:	f000 f84f 	bl	8001cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM3_Init();
 8001c56:	f000 fac7 	bl	80021e8 <MX_TIM3_Init>
  MX_GPIO_Init();
 8001c5a:	f7ff fa5d 	bl	8001118 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001c5e:	f000 fecb 	bl	80029f8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001c62:	f000 fa4b 	bl	80020fc <MX_TIM2_Init>
  MX_TIM5_Init();
 8001c66:	f000 fb0d 	bl	8002284 <MX_TIM5_Init>
  MX_TIM9_Init();
 8001c6a:	f000 fbef 	bl	800244c <MX_TIM9_Init>
  MX_TIM13_Init();
 8001c6e:	f000 fc49 	bl	8002504 <MX_TIM13_Init>
  MX_DMA_Init();
 8001c72:	f7fe fec3 	bl	80009fc <MX_DMA_Init>
  MX_TIM7_Init();
 8001c76:	f000 fbb3 	bl	80023e0 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001c7a:	f7ff fe79 	bl	8001970 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001c7e:	f000 fb79 	bl	8002374 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8001c82:	2201      	movs	r2, #1
 8001c84:	4916      	ldr	r1, [pc, #88]	; (8001ce0 <main+0x98>)
 8001c86:	4817      	ldr	r0, [pc, #92]	; (8001ce4 <main+0x9c>)
 8001c88:	f005 f996 	bl	8006fb8 <HAL_UART_Receive_IT>
  send_UART(PROMPT);
 8001c8c:	4816      	ldr	r0, [pc, #88]	; (8001ce8 <main+0xa0>)
 8001c8e:	f000 ff95 	bl	8002bbc <send_UART>

  HAL_TIM_Base_Start_IT(&htim7);
 8001c92:	4816      	ldr	r0, [pc, #88]	; (8001cec <main+0xa4>)
 8001c94:	f003 fa52 	bl	800513c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(has_message_from_UART())
 8001c98:	f000 ff60 	bl	8002b5c <has_message_from_UART>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0fa      	beq.n	8001c98 <main+0x50>
	  {
		  uint8_t message[BUFFER_SIZE];

		  read_UART((char*) message);
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 ffb3 	bl	8002c10 <read_UART>

		  unsigned char cmd = check_command((char*) message);
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fca5 	bl	80015fc <check_command>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		  exec_command[cmd]((char*) message);
 8001cb8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001cbc:	4a0c      	ldr	r2, [pc, #48]	; (8001cf0 <main+0xa8>)
 8001cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc2:	1d3a      	adds	r2, r7, #4
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4798      	blx	r3

		  while(is_transmitting_to_UART());
 8001cc8:	bf00      	nop
 8001cca:	f000 ff53 	bl	8002b74 <is_transmitting_to_UART>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1fa      	bne.n	8001cca <main+0x82>

		  reset_UART();
 8001cd4:	f000 ff5a 	bl	8002b8c <reset_UART>
		  send_UART(PROMPT);
 8001cd8:	4803      	ldr	r0, [pc, #12]	; (8001ce8 <main+0xa0>)
 8001cda:	f000 ff6f 	bl	8002bbc <send_UART>
	  if(has_message_from_UART())
 8001cde:	e7db      	b.n	8001c98 <main+0x50>
 8001ce0:	20000624 	.word	0x20000624
 8001ce4:	20000830 	.word	0x20000830
 8001ce8:	0800d6f8 	.word	0x0800d6f8
 8001cec:	20000540 	.word	0x20000540
 8001cf0:	20000028 	.word	0x20000028

08001cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b094      	sub	sp, #80	; 0x50
 8001cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cfa:	f107 031c 	add.w	r3, r7, #28
 8001cfe:	2234      	movs	r2, #52	; 0x34
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f006 fc68 	bl	80085d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d08:	f107 0308 	add.w	r3, r7, #8
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d18:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <SystemClock_Config+0xd4>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	4a2a      	ldr	r2, [pc, #168]	; (8001dc8 <SystemClock_Config+0xd4>)
 8001d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d22:	6413      	str	r3, [r2, #64]	; 0x40
 8001d24:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <SystemClock_Config+0xd4>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d30:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <SystemClock_Config+0xd8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a25      	ldr	r2, [pc, #148]	; (8001dcc <SystemClock_Config+0xd8>)
 8001d36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <SystemClock_Config+0xd8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d50:	2310      	movs	r3, #16
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d54:	2302      	movs	r3, #2
 8001d56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001d60:	23c0      	movs	r3, #192	; 0xc0
 8001d62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d64:	2302      	movs	r3, #2
 8001d66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d70:	f107 031c 	add.w	r3, r7, #28
 8001d74:	4618      	mov	r0, r3
 8001d76:	f002 f8cd 	bl	8003f14 <HAL_RCC_OscConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001d80:	f000 f826 	bl	8001dd0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d84:	f002 f876 	bl	8003e74 <HAL_PWREx_EnableOverDrive>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001d8e:	f000 f81f 	bl	8001dd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d92:	230f      	movs	r3, #15
 8001d94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d96:	2302      	movs	r3, #2
 8001d98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001da2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001da4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001da8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001daa:	f107 0308 	add.w	r3, r7, #8
 8001dae:	2106      	movs	r1, #6
 8001db0:	4618      	mov	r0, r3
 8001db2:	f002 fb5d 	bl	8004470 <HAL_RCC_ClockConfig>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001dbc:	f000 f808 	bl	8001dd0 <Error_Handler>
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3750      	adds	r7, #80	; 0x50
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40007000 	.word	0x40007000

08001dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd4:	b672      	cpsid	i
}
 8001dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <Error_Handler+0x8>
	...

08001ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <HAL_MspInit+0x44>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a0e      	ldr	r2, [pc, #56]	; (8001e20 <HAL_MspInit+0x44>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_MspInit+0x44>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_MspInit+0x44>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <HAL_MspInit+0x44>)
 8001e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e04:	6453      	str	r3, [r2, #68]	; 0x44
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_MspInit+0x44>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800

08001e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <NMI_Handler+0x4>

08001e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2e:	e7fe      	b.n	8001e2e <HardFault_Handler+0x4>

08001e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <MemManage_Handler+0x4>

08001e36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <BusFault_Handler+0x4>

08001e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <UsageFault_Handler+0x4>

08001e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e70:	f000 ffe8 	bl	8002e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FIR_SA_ME_Pin);
 8001e7c:	2004      	movs	r0, #4
 8001e7e:	f001 fe9f 	bl	8003bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <DMA1_Stream0_IRQHandler+0x10>)
 8001e8e:	f001 fa7d 	bl	800338c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000033c 	.word	0x2000033c

08001e9c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <DMA1_Stream6_IRQHandler+0x10>)
 8001ea2:	f001 fa73 	bl	800338c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	2000039c 	.word	0x2000039c

08001eb0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001eb6:	f003 fe33 	bl	8005b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	2000058c 	.word	0x2000058c

08001ec4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <TIM3_IRQHandler+0x10>)
 8001eca:	f003 fe29 	bl	8005b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	2000045c 	.word	0x2000045c

08001ed8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001edc:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <I2C1_EV_IRQHandler+0x10>)
 8001ede:	f001 ff17 	bl	8003d10 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	200002f0 	.word	0x200002f0

08001eec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ef0:	4802      	ldr	r0, [pc, #8]	; (8001efc <USART3_IRQHandler+0x10>)
 8001ef2:	f005 f8af 	bl	8007054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000830 	.word	0x20000830

08001f00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FIR_SA_MD_Pin);
 8001f04:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f08:	f001 fe5a 	bl	8003bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001f14:	4802      	ldr	r0, [pc, #8]	; (8001f20 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001f16:	f003 fe03 	bl	8005b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	200005d8 	.word	0x200005d8

08001f24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f28:	4802      	ldr	r0, [pc, #8]	; (8001f34 <TIM6_DAC_IRQHandler+0x10>)
 8001f2a:	f003 fdf9 	bl	8005b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200004f4 	.word	0x200004f4

08001f38 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <TIM7_IRQHandler+0x10>)
 8001f3e:	f003 fdef 	bl	8005b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000540 	.word	0x20000540

08001f4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
	return 1;
 8001f50:	2301      	movs	r3, #1
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <_kill>:

int _kill(int pid, int sig)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f66:	f006 fb0d 	bl	8008584 <__errno>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2216      	movs	r2, #22
 8001f6e:	601a      	str	r2, [r3, #0]
	return -1;
 8001f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <_exit>:

void _exit (int status)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f84:	f04f 31ff 	mov.w	r1, #4294967295
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff ffe7 	bl	8001f5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f8e:	e7fe      	b.n	8001f8e <_exit+0x12>

08001f90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	e00a      	b.n	8001fb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fa2:	f3af 8000 	nop.w
 8001fa6:	4601      	mov	r1, r0
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	60ba      	str	r2, [r7, #8]
 8001fae:	b2ca      	uxtb	r2, r1
 8001fb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	dbf0      	blt.n	8001fa2 <_read+0x12>
	}

return len;
 8001fc0:	687b      	ldr	r3, [r7, #4]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	e009      	b.n	8001ff0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	60ba      	str	r2, [r7, #8]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3301      	adds	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	dbf1      	blt.n	8001fdc <_write+0x12>
	}
	return len;
 8001ff8:	687b      	ldr	r3, [r7, #4]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <_close>:

int _close(int file)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
	return -1;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800202a:	605a      	str	r2, [r3, #4]
	return 0;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <_isatty>:

int _isatty(int file)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
	return 1;
 8002042:	2301      	movs	r3, #1
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
	return 0;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002074:	4a14      	ldr	r2, [pc, #80]	; (80020c8 <_sbrk+0x5c>)
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <_sbrk+0x60>)
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002080:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <_sbrk+0x64>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d102      	bne.n	800208e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <_sbrk+0x64>)
 800208a:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <_sbrk+0x68>)
 800208c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <_sbrk+0x64>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	429a      	cmp	r2, r3
 800209a:	d207      	bcs.n	80020ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800209c:	f006 fa72 	bl	8008584 <__errno>
 80020a0:	4603      	mov	r3, r0
 80020a2:	220c      	movs	r2, #12
 80020a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
 80020aa:	e009      	b.n	80020c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <_sbrk+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020b2:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <_sbrk+0x64>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <_sbrk+0x64>)
 80020bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020be:	68fb      	ldr	r3, [r7, #12]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20080000 	.word	0x20080000
 80020cc:	00000400 	.word	0x00000400
 80020d0:	2000040c 	.word	0x2000040c
 80020d4:	200008c8 	.word	0x200008c8

080020d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <SystemInit+0x20>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e2:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <SystemInit+0x20>)
 80020e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08e      	sub	sp, #56	; 0x38
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002110:	f107 031c 	add.w	r3, r7, #28
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800211c:	463b      	mov	r3, r7
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	609a      	str	r2, [r3, #8]
 8002126:	60da      	str	r2, [r3, #12]
 8002128:	611a      	str	r2, [r3, #16]
 800212a:	615a      	str	r2, [r3, #20]
 800212c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800212e:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <MX_TIM2_Init+0xe8>)
 8002130:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002134:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8002136:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <MX_TIM2_Init+0xe8>)
 8002138:	225f      	movs	r2, #95	; 0x5f
 800213a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213c:	4b29      	ldr	r3, [pc, #164]	; (80021e4 <MX_TIM2_Init+0xe8>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8002142:	4b28      	ldr	r3, [pc, #160]	; (80021e4 <MX_TIM2_Init+0xe8>)
 8002144:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002148:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800214a:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <MX_TIM2_Init+0xe8>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002150:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <MX_TIM2_Init+0xe8>)
 8002152:	2200      	movs	r2, #0
 8002154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002156:	4823      	ldr	r0, [pc, #140]	; (80021e4 <MX_TIM2_Init+0xe8>)
 8002158:	f002 ff98 	bl	800508c <HAL_TIM_Base_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002162:	f7ff fe35 	bl	8001dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800216c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002170:	4619      	mov	r1, r3
 8002172:	481c      	ldr	r0, [pc, #112]	; (80021e4 <MX_TIM2_Init+0xe8>)
 8002174:	f003 ffa4 	bl	80060c0 <HAL_TIM_ConfigClockSource>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800217e:	f7ff fe27 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002182:	4818      	ldr	r0, [pc, #96]	; (80021e4 <MX_TIM2_Init+0xe8>)
 8002184:	f003 f881 	bl	800528a <HAL_TIM_PWM_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800218e:	f7ff fe1f 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800219a:	f107 031c 	add.w	r3, r7, #28
 800219e:	4619      	mov	r1, r3
 80021a0:	4810      	ldr	r0, [pc, #64]	; (80021e4 <MX_TIM2_Init+0xe8>)
 80021a2:	f004 fda1 	bl	8006ce8 <HAL_TIMEx_MasterConfigSynchronization>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80021ac:	f7ff fe10 	bl	8001dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021b0:	2360      	movs	r3, #96	; 0x60
 80021b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021c0:	463b      	mov	r3, r7
 80021c2:	220c      	movs	r2, #12
 80021c4:	4619      	mov	r1, r3
 80021c6:	4807      	ldr	r0, [pc, #28]	; (80021e4 <MX_TIM2_Init+0xe8>)
 80021c8:	f003 fe66 	bl	8005e98 <HAL_TIM_PWM_ConfigChannel>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80021d2:	f7ff fdfd 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021d6:	4803      	ldr	r0, [pc, #12]	; (80021e4 <MX_TIM2_Init+0xe8>)
 80021d8:	f000 fadc 	bl	8002794 <HAL_TIM_MspPostInit>

}
 80021dc:	bf00      	nop
 80021de:	3738      	adds	r7, #56	; 0x38
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000410 	.word	0x20000410

080021e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ee:	f107 0310 	add.w	r3, r7, #16
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <MX_TIM3_Init+0x94>)
 8002208:	4a1d      	ldr	r2, [pc, #116]	; (8002280 <MX_TIM3_Init+0x98>)
 800220a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <MX_TIM3_Init+0x94>)
 800220e:	225f      	movs	r2, #95	; 0x5f
 8002210:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002212:	4b1a      	ldr	r3, [pc, #104]	; (800227c <MX_TIM3_Init+0x94>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002218:	4b18      	ldr	r3, [pc, #96]	; (800227c <MX_TIM3_Init+0x94>)
 800221a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800221e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002220:	4b16      	ldr	r3, [pc, #88]	; (800227c <MX_TIM3_Init+0x94>)
 8002222:	2200      	movs	r2, #0
 8002224:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002226:	4b15      	ldr	r3, [pc, #84]	; (800227c <MX_TIM3_Init+0x94>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800222c:	4813      	ldr	r0, [pc, #76]	; (800227c <MX_TIM3_Init+0x94>)
 800222e:	f002 ff2d 	bl	800508c <HAL_TIM_Base_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002238:	f7ff fdca 	bl	8001dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800223c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002240:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002242:	f107 0310 	add.w	r3, r7, #16
 8002246:	4619      	mov	r1, r3
 8002248:	480c      	ldr	r0, [pc, #48]	; (800227c <MX_TIM3_Init+0x94>)
 800224a:	f003 ff39 	bl	80060c0 <HAL_TIM_ConfigClockSource>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002254:	f7ff fdbc 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002258:	2300      	movs	r3, #0
 800225a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	4619      	mov	r1, r3
 8002264:	4805      	ldr	r0, [pc, #20]	; (800227c <MX_TIM3_Init+0x94>)
 8002266:	f004 fd3f 	bl	8006ce8 <HAL_TIMEx_MasterConfigSynchronization>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002270:	f7ff fdae 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002274:	bf00      	nop
 8002276:	3720      	adds	r7, #32
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	2000045c 	.word	0x2000045c
 8002280:	40000400 	.word	0x40000400

08002284 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08e      	sub	sp, #56	; 0x38
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800228a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022a4:	463b      	mov	r3, r7
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
 80022b0:	611a      	str	r2, [r3, #16]
 80022b2:	615a      	str	r2, [r3, #20]
 80022b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80022b6:	4b2d      	ldr	r3, [pc, #180]	; (800236c <MX_TIM5_Init+0xe8>)
 80022b8:	4a2d      	ldr	r2, [pc, #180]	; (8002370 <MX_TIM5_Init+0xec>)
 80022ba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 96-1;
 80022bc:	4b2b      	ldr	r3, [pc, #172]	; (800236c <MX_TIM5_Init+0xe8>)
 80022be:	225f      	movs	r2, #95	; 0x5f
 80022c0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c2:	4b2a      	ldr	r3, [pc, #168]	; (800236c <MX_TIM5_Init+0xe8>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 80022c8:	4b28      	ldr	r3, [pc, #160]	; (800236c <MX_TIM5_Init+0xe8>)
 80022ca:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80022ce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d0:	4b26      	ldr	r3, [pc, #152]	; (800236c <MX_TIM5_Init+0xe8>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d6:	4b25      	ldr	r3, [pc, #148]	; (800236c <MX_TIM5_Init+0xe8>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80022dc:	4823      	ldr	r0, [pc, #140]	; (800236c <MX_TIM5_Init+0xe8>)
 80022de:	f002 fed5 	bl	800508c <HAL_TIM_Base_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80022e8:	f7ff fd72 	bl	8001dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80022f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022f6:	4619      	mov	r1, r3
 80022f8:	481c      	ldr	r0, [pc, #112]	; (800236c <MX_TIM5_Init+0xe8>)
 80022fa:	f003 fee1 	bl	80060c0 <HAL_TIM_ConfigClockSource>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002304:	f7ff fd64 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002308:	4818      	ldr	r0, [pc, #96]	; (800236c <MX_TIM5_Init+0xe8>)
 800230a:	f002 ffbe 	bl	800528a <HAL_TIM_PWM_Init>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002314:	f7ff fd5c 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800231c:	2300      	movs	r3, #0
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002320:	f107 031c 	add.w	r3, r7, #28
 8002324:	4619      	mov	r1, r3
 8002326:	4811      	ldr	r0, [pc, #68]	; (800236c <MX_TIM5_Init+0xe8>)
 8002328:	f004 fcde 	bl	8006ce8 <HAL_TIMEx_MasterConfigSynchronization>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002332:	f7ff fd4d 	bl	8001dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002336:	2360      	movs	r3, #96	; 0x60
 8002338:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002346:	463b      	mov	r3, r7
 8002348:	2200      	movs	r2, #0
 800234a:	4619      	mov	r1, r3
 800234c:	4807      	ldr	r0, [pc, #28]	; (800236c <MX_TIM5_Init+0xe8>)
 800234e:	f003 fda3 	bl	8005e98 <HAL_TIM_PWM_ConfigChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002358:	f7ff fd3a 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800235c:	4803      	ldr	r0, [pc, #12]	; (800236c <MX_TIM5_Init+0xe8>)
 800235e:	f000 fa19 	bl	8002794 <HAL_TIM_MspPostInit>

}
 8002362:	bf00      	nop
 8002364:	3738      	adds	r7, #56	; 0x38
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	200004a8 	.word	0x200004a8
 8002370:	40000c00 	.word	0x40000c00

08002374 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <MX_TIM6_Init+0x64>)
 8002386:	4a15      	ldr	r2, [pc, #84]	; (80023dc <MX_TIM6_Init+0x68>)
 8002388:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800238a:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <MX_TIM6_Init+0x64>)
 800238c:	2200      	movs	r2, #0
 800238e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <MX_TIM6_Init+0x64>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 96-1;
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <MX_TIM6_Init+0x64>)
 8002398:	225f      	movs	r2, #95	; 0x5f
 800239a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800239c:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <MX_TIM6_Init+0x64>)
 800239e:	2200      	movs	r2, #0
 80023a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80023a2:	480d      	ldr	r0, [pc, #52]	; (80023d8 <MX_TIM6_Init+0x64>)
 80023a4:	f002 fe72 	bl	800508c <HAL_TIM_Base_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80023ae:	f7ff fd0f 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	4619      	mov	r1, r3
 80023be:	4806      	ldr	r0, [pc, #24]	; (80023d8 <MX_TIM6_Init+0x64>)
 80023c0:	f004 fc92 	bl	8006ce8 <HAL_TIMEx_MasterConfigSynchronization>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80023ca:	f7ff fd01 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200004f4 	.word	0x200004f4
 80023dc:	40001000 	.word	0x40001000

080023e0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80023f0:	4b14      	ldr	r3, [pc, #80]	; (8002444 <MX_TIM7_Init+0x64>)
 80023f2:	4a15      	ldr	r2, [pc, #84]	; (8002448 <MX_TIM7_Init+0x68>)
 80023f4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 96-1;
 80023f6:	4b13      	ldr	r3, [pc, #76]	; (8002444 <MX_TIM7_Init+0x64>)
 80023f8:	225f      	movs	r2, #95	; 0x5f
 80023fa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <MX_TIM7_Init+0x64>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <MX_TIM7_Init+0x64>)
 8002404:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002408:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800240a:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <MX_TIM7_Init+0x64>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002410:	480c      	ldr	r0, [pc, #48]	; (8002444 <MX_TIM7_Init+0x64>)
 8002412:	f002 fe3b 	bl	800508c <HAL_TIM_Base_Init>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800241c:	f7ff fcd8 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002420:	2300      	movs	r3, #0
 8002422:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002428:	1d3b      	adds	r3, r7, #4
 800242a:	4619      	mov	r1, r3
 800242c:	4805      	ldr	r0, [pc, #20]	; (8002444 <MX_TIM7_Init+0x64>)
 800242e:	f004 fc5b 	bl	8006ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002438:	f7ff fcca 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000540 	.word	0x20000540
 8002448:	40001400 	.word	0x40001400

0800244c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002452:	f107 0310 	add.w	r3, r7, #16
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	609a      	str	r2, [r3, #8]
 800245e:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002460:	463b      	mov	r3, r7
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800246c:	4b23      	ldr	r3, [pc, #140]	; (80024fc <MX_TIM9_Init+0xb0>)
 800246e:	4a24      	ldr	r2, [pc, #144]	; (8002500 <MX_TIM9_Init+0xb4>)
 8002470:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 96-1;
 8002472:	4b22      	ldr	r3, [pc, #136]	; (80024fc <MX_TIM9_Init+0xb0>)
 8002474:	225f      	movs	r2, #95	; 0x5f
 8002476:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002478:	4b20      	ldr	r3, [pc, #128]	; (80024fc <MX_TIM9_Init+0xb0>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 18000;
 800247e:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <MX_TIM9_Init+0xb0>)
 8002480:	f244 6250 	movw	r2, #18000	; 0x4650
 8002484:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002486:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <MX_TIM9_Init+0xb0>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800248c:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <MX_TIM9_Init+0xb0>)
 800248e:	2200      	movs	r2, #0
 8002490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002492:	481a      	ldr	r0, [pc, #104]	; (80024fc <MX_TIM9_Init+0xb0>)
 8002494:	f002 fdfa 	bl	800508c <HAL_TIM_Base_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_TIM9_Init+0x56>
  {
    Error_Handler();
 800249e:	f7ff fc97 	bl	8001dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80024a8:	f107 0310 	add.w	r3, r7, #16
 80024ac:	4619      	mov	r1, r3
 80024ae:	4813      	ldr	r0, [pc, #76]	; (80024fc <MX_TIM9_Init+0xb0>)
 80024b0:	f003 fe06 	bl	80060c0 <HAL_TIM_ConfigClockSource>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 80024ba:	f7ff fc89 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 80024be:	480f      	ldr	r0, [pc, #60]	; (80024fc <MX_TIM9_Init+0xb0>)
 80024c0:	f003 f8be 	bl	8005640 <HAL_TIM_IC_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM9_Init+0x82>
  {
    Error_Handler();
 80024ca:	f7ff fc81 	bl	8001dd0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80024ce:	230a      	movs	r3, #10
 80024d0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80024d2:	2301      	movs	r3, #1
 80024d4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80024de:	463b      	mov	r3, r7
 80024e0:	2204      	movs	r2, #4
 80024e2:	4619      	mov	r1, r3
 80024e4:	4805      	ldr	r0, [pc, #20]	; (80024fc <MX_TIM9_Init+0xb0>)
 80024e6:	f003 fc3a 	bl	8005d5e <HAL_TIM_IC_ConfigChannel>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_TIM9_Init+0xa8>
  {
    Error_Handler();
 80024f0:	f7ff fc6e 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80024f4:	bf00      	nop
 80024f6:	3720      	adds	r7, #32
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	2000058c 	.word	0x2000058c
 8002500:	40014000 	.word	0x40014000

08002504 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800250a:	463b      	mov	r3, r7
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002516:	4b1d      	ldr	r3, [pc, #116]	; (800258c <MX_TIM13_Init+0x88>)
 8002518:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <MX_TIM13_Init+0x8c>)
 800251a:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 96-1;
 800251c:	4b1b      	ldr	r3, [pc, #108]	; (800258c <MX_TIM13_Init+0x88>)
 800251e:	225f      	movs	r2, #95	; 0x5f
 8002520:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002522:	4b1a      	ldr	r3, [pc, #104]	; (800258c <MX_TIM13_Init+0x88>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 18000;
 8002528:	4b18      	ldr	r3, [pc, #96]	; (800258c <MX_TIM13_Init+0x88>)
 800252a:	f244 6250 	movw	r2, #18000	; 0x4650
 800252e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002530:	4b16      	ldr	r3, [pc, #88]	; (800258c <MX_TIM13_Init+0x88>)
 8002532:	2200      	movs	r2, #0
 8002534:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002536:	4b15      	ldr	r3, [pc, #84]	; (800258c <MX_TIM13_Init+0x88>)
 8002538:	2200      	movs	r2, #0
 800253a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800253c:	4813      	ldr	r0, [pc, #76]	; (800258c <MX_TIM13_Init+0x88>)
 800253e:	f002 fda5 	bl	800508c <HAL_TIM_Base_Init>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_TIM13_Init+0x48>
  {
    Error_Handler();
 8002548:	f7ff fc42 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 800254c:	480f      	ldr	r0, [pc, #60]	; (800258c <MX_TIM13_Init+0x88>)
 800254e:	f003 f877 	bl	8005640 <HAL_TIM_IC_Init>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM13_Init+0x58>
  {
    Error_Handler();
 8002558:	f7ff fc3a 	bl	8001dd0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800255c:	230a      	movs	r3, #10
 800255e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002560:	2301      	movs	r3, #1
 8002562:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002564:	2300      	movs	r3, #0
 8002566:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800256c:	463b      	mov	r3, r7
 800256e:	2200      	movs	r2, #0
 8002570:	4619      	mov	r1, r3
 8002572:	4806      	ldr	r0, [pc, #24]	; (800258c <MX_TIM13_Init+0x88>)
 8002574:	f003 fbf3 	bl	8005d5e <HAL_TIM_IC_ConfigChannel>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM13_Init+0x7e>
  {
    Error_Handler();
 800257e:	f7ff fc27 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	200005d8 	.word	0x200005d8
 8002590:	40001c00 	.word	0x40001c00

08002594 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b090      	sub	sp, #64	; 0x40
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b4:	d10c      	bne.n	80025d0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025b6:	4b6e      	ldr	r3, [pc, #440]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	4a6d      	ldr	r2, [pc, #436]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6413      	str	r3, [r2, #64]	; 0x40
 80025c2:	4b6b      	ldr	r3, [pc, #428]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80025cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80025ce:	e0cb      	b.n	8002768 <HAL_TIM_Base_MspInit+0x1d4>
  else if(tim_baseHandle->Instance==TIM3)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a67      	ldr	r2, [pc, #412]	; (8002774 <HAL_TIM_Base_MspInit+0x1e0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d114      	bne.n	8002604 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025da:	4b65      	ldr	r3, [pc, #404]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	4a64      	ldr	r2, [pc, #400]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 80025e0:	f043 0302 	orr.w	r3, r3, #2
 80025e4:	6413      	str	r3, [r2, #64]	; 0x40
 80025e6:	4b62      	ldr	r3, [pc, #392]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2100      	movs	r1, #0
 80025f6:	201d      	movs	r0, #29
 80025f8:	f000 fd43 	bl	8003082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025fc:	201d      	movs	r0, #29
 80025fe:	f000 fd5c 	bl	80030ba <HAL_NVIC_EnableIRQ>
}
 8002602:	e0b1      	b.n	8002768 <HAL_TIM_Base_MspInit+0x1d4>
  else if(tim_baseHandle->Instance==TIM5)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a5b      	ldr	r2, [pc, #364]	; (8002778 <HAL_TIM_Base_MspInit+0x1e4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d10c      	bne.n	8002628 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800260e:	4b58      	ldr	r3, [pc, #352]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	4a57      	ldr	r2, [pc, #348]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 8002614:	f043 0308 	orr.w	r3, r3, #8
 8002618:	6413      	str	r3, [r2, #64]	; 0x40
 800261a:	4b55      	ldr	r3, [pc, #340]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	623b      	str	r3, [r7, #32]
 8002624:	6a3b      	ldr	r3, [r7, #32]
}
 8002626:	e09f      	b.n	8002768 <HAL_TIM_Base_MspInit+0x1d4>
  else if(tim_baseHandle->Instance==TIM6)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a53      	ldr	r2, [pc, #332]	; (800277c <HAL_TIM_Base_MspInit+0x1e8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d114      	bne.n	800265c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002632:	4b4f      	ldr	r3, [pc, #316]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	4a4e      	ldr	r2, [pc, #312]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 8002638:	f043 0310 	orr.w	r3, r3, #16
 800263c:	6413      	str	r3, [r2, #64]	; 0x40
 800263e:	4b4c      	ldr	r3, [pc, #304]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	2100      	movs	r1, #0
 800264e:	2036      	movs	r0, #54	; 0x36
 8002650:	f000 fd17 	bl	8003082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002654:	2036      	movs	r0, #54	; 0x36
 8002656:	f000 fd30 	bl	80030ba <HAL_NVIC_EnableIRQ>
}
 800265a:	e085      	b.n	8002768 <HAL_TIM_Base_MspInit+0x1d4>
  else if(tim_baseHandle->Instance==TIM7)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a47      	ldr	r2, [pc, #284]	; (8002780 <HAL_TIM_Base_MspInit+0x1ec>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d114      	bne.n	8002690 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002666:	4b42      	ldr	r3, [pc, #264]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4a41      	ldr	r2, [pc, #260]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 800266c:	f043 0320 	orr.w	r3, r3, #32
 8002670:	6413      	str	r3, [r2, #64]	; 0x40
 8002672:	4b3f      	ldr	r3, [pc, #252]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800267e:	2200      	movs	r2, #0
 8002680:	2100      	movs	r1, #0
 8002682:	2037      	movs	r0, #55	; 0x37
 8002684:	f000 fcfd 	bl	8003082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002688:	2037      	movs	r0, #55	; 0x37
 800268a:	f000 fd16 	bl	80030ba <HAL_NVIC_EnableIRQ>
}
 800268e:	e06b      	b.n	8002768 <HAL_TIM_Base_MspInit+0x1d4>
  else if(tim_baseHandle->Instance==TIM9)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a3b      	ldr	r2, [pc, #236]	; (8002784 <HAL_TIM_Base_MspInit+0x1f0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d130      	bne.n	80026fc <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800269a:	4b35      	ldr	r3, [pc, #212]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	4a34      	ldr	r2, [pc, #208]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a4:	6453      	str	r3, [r2, #68]	; 0x44
 80026a6:	4b32      	ldr	r3, [pc, #200]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026b2:	4b2f      	ldr	r3, [pc, #188]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	4a2e      	ldr	r2, [pc, #184]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 80026b8:	f043 0310 	orr.w	r3, r3, #16
 80026bc:	6313      	str	r3, [r2, #48]	; 0x30
 80026be:	4b2c      	ldr	r3, [pc, #176]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HCSR_ECHO_SX_Pin;
 80026ca:	2340      	movs	r3, #64	; 0x40
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ce:	2302      	movs	r3, #2
 80026d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d6:	2300      	movs	r3, #0
 80026d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80026da:	2303      	movs	r3, #3
 80026dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(HCSR_ECHO_SX_GPIO_Port, &GPIO_InitStruct);
 80026de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026e2:	4619      	mov	r1, r3
 80026e4:	4828      	ldr	r0, [pc, #160]	; (8002788 <HAL_TIM_Base_MspInit+0x1f4>)
 80026e6:	f001 f88d 	bl	8003804 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2100      	movs	r1, #0
 80026ee:	2018      	movs	r0, #24
 80026f0:	f000 fcc7 	bl	8003082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80026f4:	2018      	movs	r0, #24
 80026f6:	f000 fce0 	bl	80030ba <HAL_NVIC_EnableIRQ>
}
 80026fa:	e035      	b.n	8002768 <HAL_TIM_Base_MspInit+0x1d4>
  else if(tim_baseHandle->Instance==TIM13)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a22      	ldr	r2, [pc, #136]	; (800278c <HAL_TIM_Base_MspInit+0x1f8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d130      	bne.n	8002768 <HAL_TIM_Base_MspInit+0x1d4>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002706:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	4a19      	ldr	r2, [pc, #100]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 800270c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002710:	6413      	str	r3, [r2, #64]	; 0x40
 8002712:	4b17      	ldr	r3, [pc, #92]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800271e:	4b14      	ldr	r3, [pc, #80]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4a13      	ldr	r2, [pc, #76]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 8002724:	f043 0320 	orr.w	r3, r3, #32
 8002728:	6313      	str	r3, [r2, #48]	; 0x30
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_TIM_Base_MspInit+0x1dc>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HCSR_ECHO_SY_Pin;
 8002736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273c:	2302      	movs	r3, #2
 800273e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002744:	2300      	movs	r3, #0
 8002746:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002748:	2309      	movs	r3, #9
 800274a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(HCSR_ECHO_SY_GPIO_Port, &GPIO_InitStruct);
 800274c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002750:	4619      	mov	r1, r3
 8002752:	480f      	ldr	r0, [pc, #60]	; (8002790 <HAL_TIM_Base_MspInit+0x1fc>)
 8002754:	f001 f856 	bl	8003804 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002758:	2200      	movs	r2, #0
 800275a:	2100      	movs	r1, #0
 800275c:	202c      	movs	r0, #44	; 0x2c
 800275e:	f000 fc90 	bl	8003082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002762:	202c      	movs	r0, #44	; 0x2c
 8002764:	f000 fca9 	bl	80030ba <HAL_NVIC_EnableIRQ>
}
 8002768:	bf00      	nop
 800276a:	3740      	adds	r7, #64	; 0x40
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40023800 	.word	0x40023800
 8002774:	40000400 	.word	0x40000400
 8002778:	40000c00 	.word	0x40000c00
 800277c:	40001000 	.word	0x40001000
 8002780:	40001400 	.word	0x40001400
 8002784:	40014000 	.word	0x40014000
 8002788:	40021000 	.word	0x40021000
 800278c:	40001c00 	.word	0x40001c00
 8002790:	40021400 	.word	0x40021400

08002794 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	; 0x28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b4:	d11d      	bne.n	80027f2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b6:	4b21      	ldr	r3, [pc, #132]	; (800283c <HAL_TIM_MspPostInit+0xa8>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a20      	ldr	r2, [pc, #128]	; (800283c <HAL_TIM_MspPostInit+0xa8>)
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b1e      	ldr	r3, [pc, #120]	; (800283c <HAL_TIM_MspPostInit+0xa8>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = FIR_PWM_MD_Pin;
 80027ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	2302      	movs	r3, #2
 80027d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027dc:	2300      	movs	r3, #0
 80027de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027e0:	2301      	movs	r3, #1
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FIR_PWM_MD_GPIO_Port, &GPIO_InitStruct);
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	4619      	mov	r1, r3
 80027ea:	4815      	ldr	r0, [pc, #84]	; (8002840 <HAL_TIM_MspPostInit+0xac>)
 80027ec:	f001 f80a 	bl	8003804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80027f0:	e020      	b.n	8002834 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM5)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a13      	ldr	r2, [pc, #76]	; (8002844 <HAL_TIM_MspPostInit+0xb0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d11b      	bne.n	8002834 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fc:	4b0f      	ldr	r3, [pc, #60]	; (800283c <HAL_TIM_MspPostInit+0xa8>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	4a0e      	ldr	r2, [pc, #56]	; (800283c <HAL_TIM_MspPostInit+0xa8>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6313      	str	r3, [r2, #48]	; 0x30
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <HAL_TIM_MspPostInit+0xa8>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FIR_PWM_ME_Pin;
 8002814:	2301      	movs	r3, #1
 8002816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002818:	2302      	movs	r3, #2
 800281a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002820:	2300      	movs	r3, #0
 8002822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002824:	2302      	movs	r3, #2
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FIR_PWM_ME_GPIO_Port, &GPIO_InitStruct);
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	4619      	mov	r1, r3
 800282e:	4806      	ldr	r0, [pc, #24]	; (8002848 <HAL_TIM_MspPostInit+0xb4>)
 8002830:	f000 ffe8 	bl	8003804 <HAL_GPIO_Init>
}
 8002834:	bf00      	nop
 8002836:	3728      	adds	r7, #40	; 0x28
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40023800 	.word	0x40023800
 8002840:	40020400 	.word	0x40020400
 8002844:	40000c00 	.word	0x40000c00
 8002848:	40020000 	.word	0x40020000

0800284c <MY_TIM3_Init>:
}

/* USER CODE BEGIN 1 */

void MY_TIM3_Init(struct hw_cfg_t hw_cfg)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08c      	sub	sp, #48	; 0x30
 8002850:	af00      	add	r7, sp, #0
 8002852:	463b      	mov	r3, r7
 8002854:	e883 0003 	stmia.w	r3, {r0, r1}
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002858:	f107 0318 	add.w	r3, r7, #24
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002866:	f107 030c 	add.w	r3, r7, #12
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	609a      	str	r2, [r3, #8]

	unsigned int mul1 = 1, mul2 = 1;
 8002872:	2301      	movs	r3, #1
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002876:	2301      	movs	r3, #1
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28

	if(!strncmp(hw_cfg.timeunit, "us", 2))
 800287a:	463b      	mov	r3, r7
 800287c:	3304      	adds	r3, #4
 800287e:	2202      	movs	r2, #2
 8002880:	4932      	ldr	r1, [pc, #200]	; (800294c <MY_TIM3_Init+0x100>)
 8002882:	4618      	mov	r0, r3
 8002884:	f006 fd8f 	bl	80093a6 <strncmp>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d018      	beq.n	80028c0 <MY_TIM3_Init+0x74>
	{

	}
	else if(!strncmp(hw_cfg.timeunit, "ms", 2))
 800288e:	463b      	mov	r3, r7
 8002890:	3304      	adds	r3, #4
 8002892:	2202      	movs	r2, #2
 8002894:	492e      	ldr	r1, [pc, #184]	; (8002950 <MY_TIM3_Init+0x104>)
 8002896:	4618      	mov	r0, r3
 8002898:	f006 fd85 	bl	80093a6 <strncmp>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d103      	bne.n	80028aa <MY_TIM3_Init+0x5e>
	{
		mul1 = 1000;
 80028a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028a8:	e00a      	b.n	80028c0 <MY_TIM3_Init+0x74>
	}
	else if(!strncmp(hw_cfg.timeunit, "s", 1))
 80028aa:	793a      	ldrb	r2, [r7, #4]
 80028ac:	4b29      	ldr	r3, [pc, #164]	; (8002954 <MY_TIM3_Init+0x108>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d104      	bne.n	80028c0 <MY_TIM3_Init+0x74>
	{
		mul1 = 20000;
 80028b6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		mul2 = 50;
 80028bc:	2332      	movs	r3, #50	; 0x32
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	htim3.Instance = TIM3;
 80028c0:	4b25      	ldr	r3, [pc, #148]	; (8002958 <MY_TIM3_Init+0x10c>)
 80028c2:	4a26      	ldr	r2, [pc, #152]	; (800295c <MY_TIM3_Init+0x110>)
 80028c4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = (2 * mul1) - 1;
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	3b01      	subs	r3, #1
 80028cc:	4a22      	ldr	r2, [pc, #136]	; (8002958 <MY_TIM3_Init+0x10c>)
 80028ce:	6053      	str	r3, [r2, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d0:	4b21      	ldr	r3, [pc, #132]	; (8002958 <MY_TIM3_Init+0x10c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = ((hw_cfg.value * 48 * mul2)-1) & 65535;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028da:	fb03 f202 	mul.w	r2, r3, r2
 80028de:	4613      	mov	r3, r2
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4413      	add	r3, r2
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	4a1b      	ldr	r2, [pc, #108]	; (8002958 <MY_TIM3_Init+0x10c>)
 80028ec:	60d3      	str	r3, [r2, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ee:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <MY_TIM3_Init+0x10c>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f4:	4b18      	ldr	r3, [pc, #96]	; (8002958 <MY_TIM3_Init+0x10c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028fa:	4817      	ldr	r0, [pc, #92]	; (8002958 <MY_TIM3_Init+0x10c>)
 80028fc:	f002 fbc6 	bl	800508c <HAL_TIM_Base_Init>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MY_TIM3_Init+0xbe>
	{
		Error_Handler();
 8002906:	f7ff fa63 	bl	8001dd0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800290a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800290e:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002910:	f107 0318 	add.w	r3, r7, #24
 8002914:	4619      	mov	r1, r3
 8002916:	4810      	ldr	r0, [pc, #64]	; (8002958 <MY_TIM3_Init+0x10c>)
 8002918:	f003 fbd2 	bl	80060c0 <HAL_TIM_ConfigClockSource>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MY_TIM3_Init+0xda>
	{
		Error_Handler();
 8002922:	f7ff fa55 	bl	8001dd0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800292e:	f107 030c 	add.w	r3, r7, #12
 8002932:	4619      	mov	r1, r3
 8002934:	4808      	ldr	r0, [pc, #32]	; (8002958 <MY_TIM3_Init+0x10c>)
 8002936:	f004 f9d7 	bl	8006ce8 <HAL_TIMEx_MasterConfigSynchronization>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MY_TIM3_Init+0xf8>
	{
		Error_Handler();
 8002940:	f7ff fa46 	bl	8001dd0 <Error_Handler>
	}
}
 8002944:	bf00      	nop
 8002946:	3730      	adds	r7, #48	; 0x30
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	0800d6fc 	.word	0x0800d6fc
 8002950:	0800d700 	.word	0x0800d700
 8002954:	0800d704 	.word	0x0800d704
 8002958:	2000045c 	.word	0x2000045c
 800295c:	40000400 	.word	0x40000400

08002960 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
	if(htim == &htim3)	//	FIR0450
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4a0e      	ldr	r2, [pc, #56]	; (80029a4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d104      	bne.n	800297a <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		proc_ISR_speed();
 8002970:	f7fe f99c 	bl	8000cac <proc_ISR_speed>
		proc_ISR_PID();
 8002974:	f7fe f8a8 	bl	8000ac8 <proc_ISR_PID>
	else if(htim == &htim7)
	{
		get_distance();
		read_obstacles();
	}
}
 8002978:	e010      	b.n	800299c <HAL_TIM_PeriodElapsedCallback+0x3c>
	else if(htim == &htim6)	//	HC-SR04
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d102      	bne.n	8002988 <HAL_TIM_PeriodElapsedCallback+0x28>
		proc_TRIG_FSM();
 8002982:	f7fe fce9 	bl	8001358 <proc_TRIG_FSM>
}
 8002986:	e009      	b.n	800299c <HAL_TIM_PeriodElapsedCallback+0x3c>
	else if(htim == &htim7)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a08      	ldr	r2, [pc, #32]	; (80029ac <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d105      	bne.n	800299c <HAL_TIM_PeriodElapsedCallback+0x3c>
		get_distance();
 8002990:	f7fe fde6 	bl	8001560 <get_distance>
		read_obstacles();
 8002994:	463b      	mov	r3, r7
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff f8f6 	bl	8001b88 <read_obstacles>
}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	2000045c 	.word	0x2000045c
 80029a8:	200004f4 	.word	0x200004f4
 80029ac:	20000540 	.word	0x20000540

080029b0 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	if(htim == &htim9)														// SX
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <HAL_TIM_IC_CaptureCallback+0x40>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d107      	bne.n	80029d0 <HAL_TIM_IC_CaptureCallback+0x20>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	7f1b      	ldrb	r3, [r3, #28]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d10e      	bne.n	80029e6 <HAL_TIM_IC_CaptureCallback+0x36>
		{
			read_ECHO_pulse('x');
 80029c8:	2078      	movs	r0, #120	; 0x78
 80029ca:	f7fe fd25 	bl	8001418 <read_ECHO_pulse>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
		{
			read_ECHO_pulse('y');
		}
	}
}
 80029ce:	e00a      	b.n	80029e6 <HAL_TIM_IC_CaptureCallback+0x36>
	else if(htim == &htim13)												// SY
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a08      	ldr	r2, [pc, #32]	; (80029f4 <HAL_TIM_IC_CaptureCallback+0x44>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d106      	bne.n	80029e6 <HAL_TIM_IC_CaptureCallback+0x36>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	7f1b      	ldrb	r3, [r3, #28]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d102      	bne.n	80029e6 <HAL_TIM_IC_CaptureCallback+0x36>
			read_ECHO_pulse('y');
 80029e0:	2079      	movs	r0, #121	; 0x79
 80029e2:	f7fe fd19 	bl	8001418 <read_ECHO_pulse>
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	2000058c 	.word	0x2000058c
 80029f4:	200005d8 	.word	0x200005d8

080029f8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <MX_USART3_UART_Init+0x74>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 8002a02:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <MX_USART3_UART_Init+0x78>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 8002a08:	4b1a      	ldr	r3, [pc, #104]	; (8002a74 <MX_USART3_UART_Init+0x7c>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 8002a0e:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <MX_USART3_UART_Init+0x80>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <MX_USART3_UART_Init+0x84>)
 8002a16:	220d      	movs	r2, #13
 8002a18:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a1a:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <MX_USART3_UART_Init+0x88>)
 8002a1c:	4a19      	ldr	r2, [pc, #100]	; (8002a84 <MX_USART3_UART_Init+0x8c>)
 8002a1e:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1750000;
 8002a20:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <MX_USART3_UART_Init+0x88>)
 8002a22:	4a19      	ldr	r2, [pc, #100]	; (8002a88 <MX_USART3_UART_Init+0x90>)
 8002a24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a26:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <MX_USART3_UART_Init+0x88>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <MX_USART3_UART_Init+0x88>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a32:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <MX_USART3_UART_Init+0x88>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a38:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <MX_USART3_UART_Init+0x88>)
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a3e:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <MX_USART3_UART_Init+0x88>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <MX_USART3_UART_Init+0x88>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <MX_USART3_UART_Init+0x88>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <MX_USART3_UART_Init+0x88>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a56:	480a      	ldr	r0, [pc, #40]	; (8002a80 <MX_USART3_UART_Init+0x88>)
 8002a58:	f004 f9f2 	bl	8006e40 <HAL_UART_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_USART3_UART_Init+0x6e>
  {
    Error_Handler();
 8002a62:	f7ff f9b5 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	2000082c 	.word	0x2000082c
 8002a70:	2000082d 	.word	0x2000082d
 8002a74:	20000724 	.word	0x20000724
 8002a78:	20000828 	.word	0x20000828
 8002a7c:	20000728 	.word	0x20000728
 8002a80:	20000830 	.word	0x20000830
 8002a84:	40004800 	.word	0x40004800
 8002a88:	001ab3f0 	.word	0x001ab3f0

08002a8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b0ae      	sub	sp, #184	; 0xb8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	2290      	movs	r2, #144	; 0x90
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4618      	mov	r0, r3
 8002aae:	f005 fd93 	bl	80085d8 <memset>
  if(uartHandle->Instance==USART3)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a26      	ldr	r2, [pc, #152]	; (8002b50 <HAL_UART_MspInit+0xc4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d144      	bne.n	8002b46 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002abc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ac0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ac6:	f107 0314 	add.w	r3, r7, #20
 8002aca:	4618      	mov	r0, r3
 8002acc:	f001 feb6 	bl	800483c <HAL_RCCEx_PeriphCLKConfig>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002ad6:	f7ff f97b 	bl	8001dd0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ada:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <HAL_UART_MspInit+0xc8>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <HAL_UART_MspInit+0xc8>)
 8002ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae6:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <HAL_UART_MspInit+0xc8>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002af2:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <HAL_UART_MspInit+0xc8>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	4a17      	ldr	r2, [pc, #92]	; (8002b54 <HAL_UART_MspInit+0xc8>)
 8002af8:	f043 0308 	orr.w	r3, r3, #8
 8002afc:	6313      	str	r3, [r2, #48]	; 0x30
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <HAL_UART_MspInit+0xc8>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b24:	2307      	movs	r3, #7
 8002b26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b2a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4809      	ldr	r0, [pc, #36]	; (8002b58 <HAL_UART_MspInit+0xcc>)
 8002b32:	f000 fe67 	bl	8003804 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	2100      	movs	r1, #0
 8002b3a:	2027      	movs	r0, #39	; 0x27
 8002b3c:	f000 faa1 	bl	8003082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b40:	2027      	movs	r0, #39	; 0x27
 8002b42:	f000 faba 	bl	80030ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002b46:	bf00      	nop
 8002b48:	37b8      	adds	r7, #184	; 0xb8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40004800 	.word	0x40004800
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40020c00 	.word	0x40020c00

08002b5c <has_message_from_UART>:
}

/* USER CODE BEGIN 1 */

bool has_message_from_UART()
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
	return flagCPP;
 8002b60:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <has_message_from_UART+0x14>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	2000082c 	.word	0x2000082c

08002b74 <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
	return flagCPE;
 8002b78:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <is_transmitting_to_UART+0x14>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	2000082d 	.word	0x2000082d

08002b8c <reset_UART>:

void reset_UART()
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 8002b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b94:	2100      	movs	r1, #0
 8002b96:	4806      	ldr	r0, [pc, #24]	; (8002bb0 <reset_UART+0x24>)
 8002b98:	f005 fd1e 	bl	80085d8 <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	4904      	ldr	r1, [pc, #16]	; (8002bb0 <reset_UART+0x24>)
 8002ba0:	4804      	ldr	r0, [pc, #16]	; (8002bb4 <reset_UART+0x28>)
 8002ba2:	f004 fa09 	bl	8006fb8 <HAL_UART_Receive_IT>
	flagCPP = false;
 8002ba6:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <reset_UART+0x2c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000624 	.word	0x20000624
 8002bb4:	20000830 	.word	0x20000830
 8002bb8:	2000082c 	.word	0x2000082c

08002bbc <send_UART>:

void send_UART(const char* msg_to_send)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, BUFFER_SIZE);
 8002bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	480d      	ldr	r0, [pc, #52]	; (8002c00 <send_UART+0x44>)
 8002bcc:	f006 fbff 	bl	80093ce <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 8002bd0:	480b      	ldr	r0, [pc, #44]	; (8002c00 <send_UART+0x44>)
 8002bd2:	f7fd fb3f 	bl	8000254 <strlen>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <send_UART+0x44>)
 8002bdc:	4413      	add	r3, r2
 8002bde:	4909      	ldr	r1, [pc, #36]	; (8002c04 <send_UART+0x48>)
 8002be0:	461a      	mov	r2, r3
 8002be2:	460b      	mov	r3, r1
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 8002be8:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <send_UART+0x4c>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 8002bee:	2201      	movs	r2, #1
 8002bf0:	4903      	ldr	r1, [pc, #12]	; (8002c00 <send_UART+0x44>)
 8002bf2:	4806      	ldr	r0, [pc, #24]	; (8002c0c <send_UART+0x50>)
 8002bf4:	f004 f972 	bl	8006edc <HAL_UART_Transmit_IT>
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	20000728 	.word	0x20000728
 8002c04:	0800d708 	.word	0x0800d708
 8002c08:	2000082d 	.word	0x2000082d
 8002c0c:	20000830 	.word	0x20000830

08002c10 <read_UART>:

void read_UART(char* msg_to_read)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, BUFFER_SIZE);
 8002c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c1c:	4903      	ldr	r1, [pc, #12]	; (8002c2c <read_UART+0x1c>)
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f006 fbd5 	bl	80093ce <strncpy>
}
 8002c24:	bf00      	nop
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000624 	.word	0x20000624

08002c30 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 8002c38:	4b2e      	ldr	r3, [pc, #184]	; (8002cf4 <HAL_UART_RxCpltCallback+0xc4>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d154      	bne.n	8002cea <HAL_UART_RxCpltCallback+0xba>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r' || UART_RX_buffer[UART_RX_index] == '\\' || UART_RX_buffer[UART_RX_index] == '/')
 8002c40:	4b2d      	ldr	r3, [pc, #180]	; (8002cf8 <HAL_UART_RxCpltCallback+0xc8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a2d      	ldr	r2, [pc, #180]	; (8002cfc <HAL_UART_RxCpltCallback+0xcc>)
 8002c46:	5cd3      	ldrb	r3, [r2, r3]
 8002c48:	2b0d      	cmp	r3, #13
 8002c4a:	d00b      	beq.n	8002c64 <HAL_UART_RxCpltCallback+0x34>
 8002c4c:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <HAL_UART_RxCpltCallback+0xc8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a2a      	ldr	r2, [pc, #168]	; (8002cfc <HAL_UART_RxCpltCallback+0xcc>)
 8002c52:	5cd3      	ldrb	r3, [r2, r3]
 8002c54:	2b5c      	cmp	r3, #92	; 0x5c
 8002c56:	d005      	beq.n	8002c64 <HAL_UART_RxCpltCallback+0x34>
 8002c58:	4b27      	ldr	r3, [pc, #156]	; (8002cf8 <HAL_UART_RxCpltCallback+0xc8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a27      	ldr	r2, [pc, #156]	; (8002cfc <HAL_UART_RxCpltCallback+0xcc>)
 8002c5e:	5cd3      	ldrb	r3, [r2, r3]
 8002c60:	2b2f      	cmp	r3, #47	; 0x2f
 8002c62:	d106      	bne.n	8002c72 <HAL_UART_RxCpltCallback+0x42>
	{
		UART_RX_index = 0;
 8002c64:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <HAL_UART_RxCpltCallback+0xc8>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 8002c6a:	4b22      	ldr	r3, [pc, #136]	; (8002cf4 <HAL_UART_RxCpltCallback+0xc4>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
 8002c70:	e03c      	b.n	8002cec <HAL_UART_RxCpltCallback+0xbc>
	}
	else
	{
		if(UART_RX_buffer[UART_RX_index] == 0x08) //	BACKSPACE
 8002c72:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <HAL_UART_RxCpltCallback+0xc8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a21      	ldr	r2, [pc, #132]	; (8002cfc <HAL_UART_RxCpltCallback+0xcc>)
 8002c78:	5cd3      	ldrb	r3, [r2, r3]
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d10f      	bne.n	8002c9e <HAL_UART_RxCpltCallback+0x6e>
		{
			if(UART_RX_index == 0)
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <HAL_UART_RxCpltCallback+0xc8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d105      	bne.n	8002c92 <HAL_UART_RxCpltCallback+0x62>
				UART_RX_index--;
 8002c86:	4b1c      	ldr	r3, [pc, #112]	; (8002cf8 <HAL_UART_RxCpltCallback+0xc8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	4a1a      	ldr	r2, [pc, #104]	; (8002cf8 <HAL_UART_RxCpltCallback+0xc8>)
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	e01c      	b.n	8002ccc <HAL_UART_RxCpltCallback+0x9c>
			else
				UART_RX_index -= 2;
 8002c92:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <HAL_UART_RxCpltCallback+0xc8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	3b02      	subs	r3, #2
 8002c98:	4a17      	ldr	r2, [pc, #92]	; (8002cf8 <HAL_UART_RxCpltCallback+0xc8>)
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	e016      	b.n	8002ccc <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == 0x1B) //	ESCAPE
 8002c9e:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <HAL_UART_RxCpltCallback+0xc8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a16      	ldr	r2, [pc, #88]	; (8002cfc <HAL_UART_RxCpltCallback+0xcc>)
 8002ca4:	5cd3      	ldrb	r3, [r2, r3]
 8002ca6:	2b1b      	cmp	r3, #27
 8002ca8:	d104      	bne.n	8002cb4 <HAL_UART_RxCpltCallback+0x84>
		{
			UART_RX_index = -1;
 8002caa:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <HAL_UART_RxCpltCallback+0xc8>)
 8002cac:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	e00b      	b.n	8002ccc <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == '$') //		$
 8002cb4:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <HAL_UART_RxCpltCallback+0xc8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a10      	ldr	r2, [pc, #64]	; (8002cfc <HAL_UART_RxCpltCallback+0xcc>)
 8002cba:	5cd3      	ldrb	r3, [r2, r3]
 8002cbc:	2b24      	cmp	r3, #36	; 0x24
 8002cbe:	d105      	bne.n	8002ccc <HAL_UART_RxCpltCallback+0x9c>
		{
			UART_RX_index = 0;
 8002cc0:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <HAL_UART_RxCpltCallback+0xc8>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
			UART_RX_buffer[0] = '$';
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <HAL_UART_RxCpltCallback+0xcc>)
 8002cc8:	2224      	movs	r2, #36	; 0x24
 8002cca:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <HAL_UART_RxCpltCallback+0xc8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	4a09      	ldr	r2, [pc, #36]	; (8002cf8 <HAL_UART_RxCpltCallback+0xc8>)
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <HAL_UART_RxCpltCallback+0xc8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <HAL_UART_RxCpltCallback+0xcc>)
 8002cdc:	4413      	add	r3, r2
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4807      	ldr	r0, [pc, #28]	; (8002d00 <HAL_UART_RxCpltCallback+0xd0>)
 8002ce4:	f004 f968 	bl	8006fb8 <HAL_UART_Receive_IT>
 8002ce8:	e000      	b.n	8002cec <HAL_UART_RxCpltCallback+0xbc>
		return;
 8002cea:	bf00      	nop
	}
}
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	2000082c 	.word	0x2000082c
 8002cf8:	20000724 	.word	0x20000724
 8002cfc:	20000624 	.word	0x20000624
 8002d00:	20000830 	.word	0x20000830

08002d04 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 8002d0c:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <HAL_UART_TxCpltCallback+0x64>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	f083 0301 	eor.w	r3, r3, #1
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d122      	bne.n	8002d60 <HAL_UART_TxCpltCallback+0x5c>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r' && UART_TX_buffer[UART_TX_index-1] != '\n')
 8002d1a:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <HAL_UART_TxCpltCallback+0x68>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a14      	ldr	r2, [pc, #80]	; (8002d70 <HAL_UART_TxCpltCallback+0x6c>)
 8002d20:	5cd3      	ldrb	r3, [r2, r3]
 8002d22:	2b0d      	cmp	r3, #13
 8002d24:	d10d      	bne.n	8002d42 <HAL_UART_TxCpltCallback+0x3e>
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <HAL_UART_TxCpltCallback+0x68>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	4a10      	ldr	r2, [pc, #64]	; (8002d70 <HAL_UART_TxCpltCallback+0x6c>)
 8002d2e:	5cd3      	ldrb	r3, [r2, r3]
 8002d30:	2b0a      	cmp	r3, #10
 8002d32:	d006      	beq.n	8002d42 <HAL_UART_TxCpltCallback+0x3e>
	{
		UART_TX_index = 0;
 8002d34:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <HAL_UART_TxCpltCallback+0x68>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_UART_TxCpltCallback+0x64>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e00f      	b.n	8002d62 <HAL_UART_TxCpltCallback+0x5e>
	}
	else
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 8002d42:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <HAL_UART_TxCpltCallback+0x68>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3301      	adds	r3, #1
 8002d48:	4a08      	ldr	r2, [pc, #32]	; (8002d6c <HAL_UART_TxCpltCallback+0x68>)
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <HAL_UART_TxCpltCallback+0x68>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a07      	ldr	r2, [pc, #28]	; (8002d70 <HAL_UART_TxCpltCallback+0x6c>)
 8002d52:	4413      	add	r3, r2
 8002d54:	2201      	movs	r2, #1
 8002d56:	4619      	mov	r1, r3
 8002d58:	4806      	ldr	r0, [pc, #24]	; (8002d74 <HAL_UART_TxCpltCallback+0x70>)
 8002d5a:	f004 f8bf 	bl	8006edc <HAL_UART_Transmit_IT>
 8002d5e:	e000      	b.n	8002d62 <HAL_UART_TxCpltCallback+0x5e>
		return;
 8002d60:	bf00      	nop
}
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	2000082d 	.word	0x2000082d
 8002d6c:	20000828 	.word	0x20000828
 8002d70:	20000728 	.word	0x20000728
 8002d74:	20000830 	.word	0x20000830

08002d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002db0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d7c:	480d      	ldr	r0, [pc, #52]	; (8002db4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d7e:	490e      	ldr	r1, [pc, #56]	; (8002db8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d80:	4a0e      	ldr	r2, [pc, #56]	; (8002dbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d84:	e002      	b.n	8002d8c <LoopCopyDataInit>

08002d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d8a:	3304      	adds	r3, #4

08002d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d90:	d3f9      	bcc.n	8002d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d92:	4a0b      	ldr	r2, [pc, #44]	; (8002dc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d94:	4c0b      	ldr	r4, [pc, #44]	; (8002dc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d98:	e001      	b.n	8002d9e <LoopFillZerobss>

08002d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d9c:	3204      	adds	r2, #4

08002d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da0:	d3fb      	bcc.n	8002d9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002da2:	f7ff f999 	bl	80020d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002da6:	f005 fbf3 	bl	8008590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002daa:	f7fe ff4d 	bl	8001c48 <main>
  bx  lr    
 8002dae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002db0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002db8:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8002dbc:	0800dc04 	.word	0x0800dc04
  ldr r2, =_sbss
 8002dc0:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8002dc4:	200008c8 	.word	0x200008c8

08002dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dc8:	e7fe      	b.n	8002dc8 <ADC_IRQHandler>

08002dca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dce:	2003      	movs	r0, #3
 8002dd0:	f000 f94c 	bl	800306c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dd4:	200f      	movs	r0, #15
 8002dd6:	f000 f805 	bl	8002de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dda:	f7fe ffff 	bl	8001ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_InitTick+0x54>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <HAL_InitTick+0x58>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	4619      	mov	r1, r3
 8002df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 f975 	bl	80030f2 <HAL_SYSTICK_Config>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e00e      	b.n	8002e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b0f      	cmp	r3, #15
 8002e16:	d80a      	bhi.n	8002e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e20:	f000 f92f 	bl	8003082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e24:	4a06      	ldr	r2, [pc, #24]	; (8002e40 <HAL_InitTick+0x5c>)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e000      	b.n	8002e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20000040 	.word	0x20000040
 8002e3c:	20000048 	.word	0x20000048
 8002e40:	20000044 	.word	0x20000044

08002e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_IncTick+0x20>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_IncTick+0x24>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4413      	add	r3, r2
 8002e54:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <HAL_IncTick+0x24>)
 8002e56:	6013      	str	r3, [r2, #0]
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000048 	.word	0x20000048
 8002e68:	200008b4 	.word	0x200008b4

08002e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e70:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <HAL_GetTick+0x14>)
 8002e72:	681b      	ldr	r3, [r3, #0]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	200008b4 	.word	0x200008b4

08002e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <__NVIC_SetPriorityGrouping+0x40>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb2:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <__NVIC_SetPriorityGrouping+0x40>)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	60d3      	str	r3, [r2, #12]
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000ed00 	.word	0xe000ed00
 8002ec8:	05fa0000 	.word	0x05fa0000

08002ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	f003 0307 	and.w	r3, r3, #7
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	db0b      	blt.n	8002f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	f003 021f 	and.w	r2, r3, #31
 8002f00:	4907      	ldr	r1, [pc, #28]	; (8002f20 <__NVIC_EnableIRQ+0x38>)
 8002f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	2001      	movs	r0, #1
 8002f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000e100 	.word	0xe000e100

08002f24 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	db12      	blt.n	8002f5c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	f003 021f 	and.w	r2, r3, #31
 8002f3c:	490a      	ldr	r1, [pc, #40]	; (8002f68 <__NVIC_DisableIRQ+0x44>)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2001      	movs	r0, #1
 8002f46:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4a:	3320      	adds	r3, #32
 8002f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f50:	f3bf 8f4f 	dsb	sy
}
 8002f54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f56:	f3bf 8f6f 	isb	sy
}
 8002f5a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000e100 	.word	0xe000e100

08002f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	6039      	str	r1, [r7, #0]
 8002f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	db0a      	blt.n	8002f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	490c      	ldr	r1, [pc, #48]	; (8002fb8 <__NVIC_SetPriority+0x4c>)
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	0112      	lsls	r2, r2, #4
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	440b      	add	r3, r1
 8002f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f94:	e00a      	b.n	8002fac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	4908      	ldr	r1, [pc, #32]	; (8002fbc <__NVIC_SetPriority+0x50>)
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	3b04      	subs	r3, #4
 8002fa4:	0112      	lsls	r2, r2, #4
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	440b      	add	r3, r1
 8002faa:	761a      	strb	r2, [r3, #24]
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	e000e100 	.word	0xe000e100
 8002fbc:	e000ed00 	.word	0xe000ed00

08002fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b089      	sub	sp, #36	; 0x24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f1c3 0307 	rsb	r3, r3, #7
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	bf28      	it	cs
 8002fde:	2304      	movcs	r3, #4
 8002fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	2b06      	cmp	r3, #6
 8002fe8:	d902      	bls.n	8002ff0 <NVIC_EncodePriority+0x30>
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	3b03      	subs	r3, #3
 8002fee:	e000      	b.n	8002ff2 <NVIC_EncodePriority+0x32>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43da      	mvns	r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	401a      	ands	r2, r3
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003008:	f04f 31ff 	mov.w	r1, #4294967295
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	fa01 f303 	lsl.w	r3, r1, r3
 8003012:	43d9      	mvns	r1, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003018:	4313      	orrs	r3, r2
         );
}
 800301a:	4618      	mov	r0, r3
 800301c:	3724      	adds	r7, #36	; 0x24
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
	...

08003028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3b01      	subs	r3, #1
 8003034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003038:	d301      	bcc.n	800303e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800303a:	2301      	movs	r3, #1
 800303c:	e00f      	b.n	800305e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800303e:	4a0a      	ldr	r2, [pc, #40]	; (8003068 <SysTick_Config+0x40>)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3b01      	subs	r3, #1
 8003044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003046:	210f      	movs	r1, #15
 8003048:	f04f 30ff 	mov.w	r0, #4294967295
 800304c:	f7ff ff8e 	bl	8002f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <SysTick_Config+0x40>)
 8003052:	2200      	movs	r2, #0
 8003054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003056:	4b04      	ldr	r3, [pc, #16]	; (8003068 <SysTick_Config+0x40>)
 8003058:	2207      	movs	r2, #7
 800305a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	e000e010 	.word	0xe000e010

0800306c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff ff05 	bl	8002e84 <__NVIC_SetPriorityGrouping>
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003082:	b580      	push	{r7, lr}
 8003084:	b086      	sub	sp, #24
 8003086:	af00      	add	r7, sp, #0
 8003088:	4603      	mov	r3, r0
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003090:	2300      	movs	r3, #0
 8003092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003094:	f7ff ff1a 	bl	8002ecc <__NVIC_GetPriorityGrouping>
 8003098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	68b9      	ldr	r1, [r7, #8]
 800309e:	6978      	ldr	r0, [r7, #20]
 80030a0:	f7ff ff8e 	bl	8002fc0 <NVIC_EncodePriority>
 80030a4:	4602      	mov	r2, r0
 80030a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff ff5d 	bl	8002f6c <__NVIC_SetPriority>
}
 80030b2:	bf00      	nop
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	4603      	mov	r3, r0
 80030c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff ff0d 	bl	8002ee8 <__NVIC_EnableIRQ>
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	4603      	mov	r3, r0
 80030de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80030e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff ff1d 	bl	8002f24 <__NVIC_DisableIRQ>
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff ff94 	bl	8003028 <SysTick_Config>
 8003100:	4603      	mov	r3, r0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003118:	f7ff fea8 	bl	8002e6c <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e099      	b.n	800325c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003148:	e00f      	b.n	800316a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800314a:	f7ff fe8f 	bl	8002e6c <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b05      	cmp	r3, #5
 8003156:	d908      	bls.n	800316a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2220      	movs	r2, #32
 800315c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2203      	movs	r2, #3
 8003162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e078      	b.n	800325c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1e8      	bne.n	800314a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	4b38      	ldr	r3, [pc, #224]	; (8003264 <HAL_DMA_Init+0x158>)
 8003184:	4013      	ands	r3, r2
 8003186:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003196:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d107      	bne.n	80031d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	4313      	orrs	r3, r2
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f023 0307 	bic.w	r3, r3, #7
 80031ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d117      	bne.n	800322e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00e      	beq.n	800322e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fa7b 	bl	800370c <DMA_CheckFifoParam>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2240      	movs	r2, #64	; 0x40
 8003220:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800322a:	2301      	movs	r3, #1
 800322c:	e016      	b.n	800325c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 fa32 	bl	80036a0 <DMA_CalcBaseAndBitshift>
 800323c:	4603      	mov	r3, r0
 800323e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003244:	223f      	movs	r2, #63	; 0x3f
 8003246:	409a      	lsls	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	e010803f 	.word	0xe010803f

08003268 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003274:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003276:	f7ff fdf9 	bl	8002e6c <HAL_GetTick>
 800327a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d008      	beq.n	800329a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2280      	movs	r2, #128	; 0x80
 800328c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e052      	b.n	8003340 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0216 	bic.w	r2, r2, #22
 80032a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d103      	bne.n	80032ca <HAL_DMA_Abort+0x62>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0208 	bic.w	r2, r2, #8
 80032d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0201 	bic.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ea:	e013      	b.n	8003314 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032ec:	f7ff fdbe 	bl	8002e6c <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d90c      	bls.n	8003314 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2203      	movs	r2, #3
 8003304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e015      	b.n	8003340 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e4      	bne.n	80032ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003326:	223f      	movs	r2, #63	; 0x3f
 8003328:	409a      	lsls	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d004      	beq.n	8003366 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2280      	movs	r2, #128	; 0x80
 8003360:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e00c      	b.n	8003380 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2205      	movs	r2, #5
 800336a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0201 	bic.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003398:	4b8e      	ldr	r3, [pc, #568]	; (80035d4 <HAL_DMA_IRQHandler+0x248>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a8e      	ldr	r2, [pc, #568]	; (80035d8 <HAL_DMA_IRQHandler+0x24c>)
 800339e:	fba2 2303 	umull	r2, r3, r2, r3
 80033a2:	0a9b      	lsrs	r3, r3, #10
 80033a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b6:	2208      	movs	r2, #8
 80033b8:	409a      	lsls	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d01a      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d013      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0204 	bic.w	r2, r2, #4
 80033de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e4:	2208      	movs	r2, #8
 80033e6:	409a      	lsls	r2, r3
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f0:	f043 0201 	orr.w	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fc:	2201      	movs	r2, #1
 80033fe:	409a      	lsls	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4013      	ands	r3, r2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d012      	beq.n	800342e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341a:	2201      	movs	r2, #1
 800341c:	409a      	lsls	r2, r3
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003426:	f043 0202 	orr.w	r2, r3, #2
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003432:	2204      	movs	r2, #4
 8003434:	409a      	lsls	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d012      	beq.n	8003464 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00b      	beq.n	8003464 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003450:	2204      	movs	r2, #4
 8003452:	409a      	lsls	r2, r3
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345c:	f043 0204 	orr.w	r2, r3, #4
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003468:	2210      	movs	r2, #16
 800346a:	409a      	lsls	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d043      	beq.n	80034fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d03c      	beq.n	80034fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	2210      	movs	r2, #16
 8003488:	409a      	lsls	r2, r3
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d018      	beq.n	80034ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d108      	bne.n	80034bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d024      	beq.n	80034fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	4798      	blx	r3
 80034ba:	e01f      	b.n	80034fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01b      	beq.n	80034fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	4798      	blx	r3
 80034cc:	e016      	b.n	80034fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d107      	bne.n	80034ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0208 	bic.w	r2, r2, #8
 80034ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003500:	2220      	movs	r2, #32
 8003502:	409a      	lsls	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4013      	ands	r3, r2
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 808f 	beq.w	800362c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 8087 	beq.w	800362c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003522:	2220      	movs	r2, #32
 8003524:	409a      	lsls	r2, r3
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b05      	cmp	r3, #5
 8003534:	d136      	bne.n	80035a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0216 	bic.w	r2, r2, #22
 8003544:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003554:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d103      	bne.n	8003566 <HAL_DMA_IRQHandler+0x1da>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0208 	bic.w	r2, r2, #8
 8003574:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357a:	223f      	movs	r2, #63	; 0x3f
 800357c:	409a      	lsls	r2, r3
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003596:	2b00      	cmp	r3, #0
 8003598:	d07e      	beq.n	8003698 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	4798      	blx	r3
        }
        return;
 80035a2:	e079      	b.n	8003698 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d01d      	beq.n	80035ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10d      	bne.n	80035dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d031      	beq.n	800362c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
 80035d0:	e02c      	b.n	800362c <HAL_DMA_IRQHandler+0x2a0>
 80035d2:	bf00      	nop
 80035d4:	20000040 	.word	0x20000040
 80035d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d023      	beq.n	800362c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	4798      	blx	r3
 80035ec:	e01e      	b.n	800362c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10f      	bne.n	800361c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0210 	bic.w	r2, r2, #16
 800360a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003630:	2b00      	cmp	r3, #0
 8003632:	d032      	beq.n	800369a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d022      	beq.n	8003686 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2205      	movs	r2, #5
 8003644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	3301      	adds	r3, #1
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	429a      	cmp	r2, r3
 8003662:	d307      	bcc.n	8003674 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f2      	bne.n	8003658 <HAL_DMA_IRQHandler+0x2cc>
 8003672:	e000      	b.n	8003676 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003674:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	4798      	blx	r3
 8003696:	e000      	b.n	800369a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003698:	bf00      	nop
    }
  }
}
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	3b10      	subs	r3, #16
 80036b0:	4a13      	ldr	r2, [pc, #76]	; (8003700 <DMA_CalcBaseAndBitshift+0x60>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	091b      	lsrs	r3, r3, #4
 80036b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036ba:	4a12      	ldr	r2, [pc, #72]	; (8003704 <DMA_CalcBaseAndBitshift+0x64>)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4413      	add	r3, r2
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d908      	bls.n	80036e0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <DMA_CalcBaseAndBitshift+0x68>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	1d1a      	adds	r2, r3, #4
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	659a      	str	r2, [r3, #88]	; 0x58
 80036de:	e006      	b.n	80036ee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b08      	ldr	r3, [pc, #32]	; (8003708 <DMA_CalcBaseAndBitshift+0x68>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	aaaaaaab 	.word	0xaaaaaaab
 8003704:	0800d730 	.word	0x0800d730
 8003708:	fffffc00 	.word	0xfffffc00

0800370c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d11f      	bne.n	8003766 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d856      	bhi.n	80037da <DMA_CheckFifoParam+0xce>
 800372c:	a201      	add	r2, pc, #4	; (adr r2, 8003734 <DMA_CheckFifoParam+0x28>)
 800372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003732:	bf00      	nop
 8003734:	08003745 	.word	0x08003745
 8003738:	08003757 	.word	0x08003757
 800373c:	08003745 	.word	0x08003745
 8003740:	080037db 	.word	0x080037db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d046      	beq.n	80037de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003754:	e043      	b.n	80037de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800375e:	d140      	bne.n	80037e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003764:	e03d      	b.n	80037e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800376e:	d121      	bne.n	80037b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d837      	bhi.n	80037e6 <DMA_CheckFifoParam+0xda>
 8003776:	a201      	add	r2, pc, #4	; (adr r2, 800377c <DMA_CheckFifoParam+0x70>)
 8003778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377c:	0800378d 	.word	0x0800378d
 8003780:	08003793 	.word	0x08003793
 8003784:	0800378d 	.word	0x0800378d
 8003788:	080037a5 	.word	0x080037a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      break;
 8003790:	e030      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d025      	beq.n	80037ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a2:	e022      	b.n	80037ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037ac:	d11f      	bne.n	80037ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037b2:	e01c      	b.n	80037ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d903      	bls.n	80037c2 <DMA_CheckFifoParam+0xb6>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d003      	beq.n	80037c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037c0:	e018      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
      break;
 80037c6:	e015      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00e      	beq.n	80037f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
      break;
 80037d8:	e00b      	b.n	80037f2 <DMA_CheckFifoParam+0xe6>
      break;
 80037da:	bf00      	nop
 80037dc:	e00a      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;
 80037de:	bf00      	nop
 80037e0:	e008      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;
 80037e2:	bf00      	nop
 80037e4:	e006      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;
 80037e6:	bf00      	nop
 80037e8:	e004      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;
 80037ea:	bf00      	nop
 80037ec:	e002      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80037ee:	bf00      	nop
 80037f0:	e000      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;
 80037f2:	bf00      	nop
    }
  } 
  
  return status; 
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop

08003804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	; 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003816:	2300      	movs	r3, #0
 8003818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	e175      	b.n	8003b10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003824:	2201      	movs	r2, #1
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	4013      	ands	r3, r2
 8003836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	429a      	cmp	r2, r3
 800383e:	f040 8164 	bne.w	8003b0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b01      	cmp	r3, #1
 800384c:	d005      	beq.n	800385a <HAL_GPIO_Init+0x56>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d130      	bne.n	80038bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	2203      	movs	r2, #3
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4013      	ands	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4313      	orrs	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003890:	2201      	movs	r2, #1
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 0201 	and.w	r2, r3, #1
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d017      	beq.n	80038f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	2203      	movs	r2, #3
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d123      	bne.n	800394c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	08da      	lsrs	r2, r3, #3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3208      	adds	r2, #8
 800390c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	220f      	movs	r2, #15
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	08da      	lsrs	r2, r3, #3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3208      	adds	r2, #8
 8003946:	69b9      	ldr	r1, [r7, #24]
 8003948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	2203      	movs	r2, #3
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0203 	and.w	r2, r3, #3
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80be 	beq.w	8003b0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398e:	4b66      	ldr	r3, [pc, #408]	; (8003b28 <HAL_GPIO_Init+0x324>)
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	4a65      	ldr	r2, [pc, #404]	; (8003b28 <HAL_GPIO_Init+0x324>)
 8003994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003998:	6453      	str	r3, [r2, #68]	; 0x44
 800399a:	4b63      	ldr	r3, [pc, #396]	; (8003b28 <HAL_GPIO_Init+0x324>)
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80039a6:	4a61      	ldr	r2, [pc, #388]	; (8003b2c <HAL_GPIO_Init+0x328>)
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	089b      	lsrs	r3, r3, #2
 80039ac:	3302      	adds	r3, #2
 80039ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	220f      	movs	r2, #15
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a58      	ldr	r2, [pc, #352]	; (8003b30 <HAL_GPIO_Init+0x32c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d037      	beq.n	8003a42 <HAL_GPIO_Init+0x23e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a57      	ldr	r2, [pc, #348]	; (8003b34 <HAL_GPIO_Init+0x330>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d031      	beq.n	8003a3e <HAL_GPIO_Init+0x23a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a56      	ldr	r2, [pc, #344]	; (8003b38 <HAL_GPIO_Init+0x334>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d02b      	beq.n	8003a3a <HAL_GPIO_Init+0x236>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a55      	ldr	r2, [pc, #340]	; (8003b3c <HAL_GPIO_Init+0x338>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d025      	beq.n	8003a36 <HAL_GPIO_Init+0x232>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a54      	ldr	r2, [pc, #336]	; (8003b40 <HAL_GPIO_Init+0x33c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d01f      	beq.n	8003a32 <HAL_GPIO_Init+0x22e>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a53      	ldr	r2, [pc, #332]	; (8003b44 <HAL_GPIO_Init+0x340>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d019      	beq.n	8003a2e <HAL_GPIO_Init+0x22a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a52      	ldr	r2, [pc, #328]	; (8003b48 <HAL_GPIO_Init+0x344>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_GPIO_Init+0x226>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a51      	ldr	r2, [pc, #324]	; (8003b4c <HAL_GPIO_Init+0x348>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00d      	beq.n	8003a26 <HAL_GPIO_Init+0x222>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a50      	ldr	r2, [pc, #320]	; (8003b50 <HAL_GPIO_Init+0x34c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d007      	beq.n	8003a22 <HAL_GPIO_Init+0x21e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a4f      	ldr	r2, [pc, #316]	; (8003b54 <HAL_GPIO_Init+0x350>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <HAL_GPIO_Init+0x21a>
 8003a1a:	2309      	movs	r3, #9
 8003a1c:	e012      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a1e:	230a      	movs	r3, #10
 8003a20:	e010      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a22:	2308      	movs	r3, #8
 8003a24:	e00e      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a26:	2307      	movs	r3, #7
 8003a28:	e00c      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a2a:	2306      	movs	r3, #6
 8003a2c:	e00a      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a2e:	2305      	movs	r3, #5
 8003a30:	e008      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a32:	2304      	movs	r3, #4
 8003a34:	e006      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a36:	2303      	movs	r3, #3
 8003a38:	e004      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e002      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a42:	2300      	movs	r3, #0
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	f002 0203 	and.w	r2, r2, #3
 8003a4a:	0092      	lsls	r2, r2, #2
 8003a4c:	4093      	lsls	r3, r2
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a54:	4935      	ldr	r1, [pc, #212]	; (8003b2c <HAL_GPIO_Init+0x328>)
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	089b      	lsrs	r3, r3, #2
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a62:	4b3d      	ldr	r3, [pc, #244]	; (8003b58 <HAL_GPIO_Init+0x354>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a86:	4a34      	ldr	r2, [pc, #208]	; (8003b58 <HAL_GPIO_Init+0x354>)
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a8c:	4b32      	ldr	r3, [pc, #200]	; (8003b58 <HAL_GPIO_Init+0x354>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ab0:	4a29      	ldr	r2, [pc, #164]	; (8003b58 <HAL_GPIO_Init+0x354>)
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ab6:	4b28      	ldr	r3, [pc, #160]	; (8003b58 <HAL_GPIO_Init+0x354>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ada:	4a1f      	ldr	r2, [pc, #124]	; (8003b58 <HAL_GPIO_Init+0x354>)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ae0:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <HAL_GPIO_Init+0x354>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b04:	4a14      	ldr	r2, [pc, #80]	; (8003b58 <HAL_GPIO_Init+0x354>)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	2b0f      	cmp	r3, #15
 8003b14:	f67f ae86 	bls.w	8003824 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	3724      	adds	r7, #36	; 0x24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40013800 	.word	0x40013800
 8003b30:	40020000 	.word	0x40020000
 8003b34:	40020400 	.word	0x40020400
 8003b38:	40020800 	.word	0x40020800
 8003b3c:	40020c00 	.word	0x40020c00
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40021400 	.word	0x40021400
 8003b48:	40021800 	.word	0x40021800
 8003b4c:	40021c00 	.word	0x40021c00
 8003b50:	40022000 	.word	0x40022000
 8003b54:	40022400 	.word	0x40022400
 8003b58:	40013c00 	.word	0x40013c00

08003b5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	887b      	ldrh	r3, [r7, #2]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
 8003b78:	e001      	b.n	8003b7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	807b      	strh	r3, [r7, #2]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b9c:	787b      	ldrb	r3, [r7, #1]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ba2:	887a      	ldrh	r2, [r7, #2]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ba8:	e003      	b.n	8003bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003baa:	887b      	ldrh	r3, [r7, #2]
 8003bac:	041a      	lsls	r2, r3, #16
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	619a      	str	r2, [r3, #24]
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
	...

08003bc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bca:	4b08      	ldr	r3, [pc, #32]	; (8003bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d006      	beq.n	8003be4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bd6:	4a05      	ldr	r2, [pc, #20]	; (8003bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bd8:	88fb      	ldrh	r3, [r7, #6]
 8003bda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bdc:	88fb      	ldrh	r3, [r7, #6]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fd fb8c 	bl	80012fc <HAL_GPIO_EXTI_Callback>
  }
}
 8003be4:	bf00      	nop
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40013c00 	.word	0x40013c00

08003bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e07f      	b.n	8003d02 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fd feea 	bl	80019f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2224      	movs	r2, #36	; 0x24
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0201 	bic.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d107      	bne.n	8003c6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	e006      	b.n	8003c78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d104      	bne.n	8003c8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6859      	ldr	r1, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <HAL_I2C_Init+0x11c>)
 8003c96:	430b      	orrs	r3, r1
 8003c98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ca8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69d9      	ldr	r1, [r3, #28]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1a      	ldr	r2, [r3, #32]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	02008000 	.word	0x02008000

08003d10 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	68f9      	ldr	r1, [r7, #12]
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	4798      	blx	r3
  }
}
 8003d3c:	bf00      	nop
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d138      	bne.n	8003dcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e032      	b.n	8003dce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2224      	movs	r2, #36	; 0x24
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0201 	bic.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6819      	ldr	r1, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e000      	b.n	8003dce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dcc:	2302      	movs	r3, #2
  }
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b085      	sub	sp, #20
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d139      	bne.n	8003e64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e033      	b.n	8003e66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2224      	movs	r2, #36	; 0x24
 8003e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0201 	bic.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	e000      	b.n	8003e66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
  }
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e7e:	4b23      	ldr	r3, [pc, #140]	; (8003f0c <HAL_PWREx_EnableOverDrive+0x98>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	4a22      	ldr	r2, [pc, #136]	; (8003f0c <HAL_PWREx_EnableOverDrive+0x98>)
 8003e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e88:	6413      	str	r3, [r2, #64]	; 0x40
 8003e8a:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <HAL_PWREx_EnableOverDrive+0x98>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e96:	4b1e      	ldr	r3, [pc, #120]	; (8003f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1d      	ldr	r2, [pc, #116]	; (8003f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ea2:	f7fe ffe3 	bl	8002e6c <HAL_GetTick>
 8003ea6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ea8:	e009      	b.n	8003ebe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003eaa:	f7fe ffdf 	bl	8002e6c <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eb8:	d901      	bls.n	8003ebe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e022      	b.n	8003f04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ebe:	4b14      	ldr	r3, [pc, #80]	; (8003f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eca:	d1ee      	bne.n	8003eaa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ecc:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a0f      	ldr	r2, [pc, #60]	; (8003f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ed8:	f7fe ffc8 	bl	8002e6c <HAL_GetTick>
 8003edc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ede:	e009      	b.n	8003ef4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ee0:	f7fe ffc4 	bl	8002e6c <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eee:	d901      	bls.n	8003ef4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e007      	b.n	8003f04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ef4:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f00:	d1ee      	bne.n	8003ee0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	40007000 	.word	0x40007000

08003f14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e29b      	b.n	8004462 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 8087 	beq.w	8004046 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f38:	4b96      	ldr	r3, [pc, #600]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 030c 	and.w	r3, r3, #12
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d00c      	beq.n	8003f5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f44:	4b93      	ldr	r3, [pc, #588]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 030c 	and.w	r3, r3, #12
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d112      	bne.n	8003f76 <HAL_RCC_OscConfig+0x62>
 8003f50:	4b90      	ldr	r3, [pc, #576]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f5c:	d10b      	bne.n	8003f76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f5e:	4b8d      	ldr	r3, [pc, #564]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d06c      	beq.n	8004044 <HAL_RCC_OscConfig+0x130>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d168      	bne.n	8004044 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e275      	b.n	8004462 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f7e:	d106      	bne.n	8003f8e <HAL_RCC_OscConfig+0x7a>
 8003f80:	4b84      	ldr	r3, [pc, #528]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a83      	ldr	r2, [pc, #524]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8003f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	e02e      	b.n	8003fec <HAL_RCC_OscConfig+0xd8>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10c      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x9c>
 8003f96:	4b7f      	ldr	r3, [pc, #508]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a7e      	ldr	r2, [pc, #504]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8003f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	4b7c      	ldr	r3, [pc, #496]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a7b      	ldr	r2, [pc, #492]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8003fa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	e01d      	b.n	8003fec <HAL_RCC_OscConfig+0xd8>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fb8:	d10c      	bne.n	8003fd4 <HAL_RCC_OscConfig+0xc0>
 8003fba:	4b76      	ldr	r3, [pc, #472]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a75      	ldr	r2, [pc, #468]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8003fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	4b73      	ldr	r3, [pc, #460]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a72      	ldr	r2, [pc, #456]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8003fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	e00b      	b.n	8003fec <HAL_RCC_OscConfig+0xd8>
 8003fd4:	4b6f      	ldr	r3, [pc, #444]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a6e      	ldr	r2, [pc, #440]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8003fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	4b6c      	ldr	r3, [pc, #432]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a6b      	ldr	r2, [pc, #428]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8003fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d013      	beq.n	800401c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff4:	f7fe ff3a 	bl	8002e6c <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ffc:	f7fe ff36 	bl	8002e6c <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b64      	cmp	r3, #100	; 0x64
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e229      	b.n	8004462 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400e:	4b61      	ldr	r3, [pc, #388]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0xe8>
 800401a:	e014      	b.n	8004046 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fe ff26 	bl	8002e6c <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004024:	f7fe ff22 	bl	8002e6c <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	; 0x64
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e215      	b.n	8004462 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004036:	4b57      	ldr	r3, [pc, #348]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f0      	bne.n	8004024 <HAL_RCC_OscConfig+0x110>
 8004042:	e000      	b.n	8004046 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d069      	beq.n	8004126 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004052:	4b50      	ldr	r3, [pc, #320]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00b      	beq.n	8004076 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800405e:	4b4d      	ldr	r3, [pc, #308]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
 8004066:	2b08      	cmp	r3, #8
 8004068:	d11c      	bne.n	80040a4 <HAL_RCC_OscConfig+0x190>
 800406a:	4b4a      	ldr	r3, [pc, #296]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d116      	bne.n	80040a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004076:	4b47      	ldr	r3, [pc, #284]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <HAL_RCC_OscConfig+0x17a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d001      	beq.n	800408e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e1e9      	b.n	8004462 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408e:	4b41      	ldr	r3, [pc, #260]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	493d      	ldr	r1, [pc, #244]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a2:	e040      	b.n	8004126 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d023      	beq.n	80040f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040ac:	4b39      	ldr	r3, [pc, #228]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a38      	ldr	r2, [pc, #224]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b8:	f7fe fed8 	bl	8002e6c <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c0:	f7fe fed4 	bl	8002e6c <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e1c7      	b.n	8004462 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d2:	4b30      	ldr	r3, [pc, #192]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040de:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4929      	ldr	r1, [pc, #164]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	600b      	str	r3, [r1, #0]
 80040f2:	e018      	b.n	8004126 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040f4:	4b27      	ldr	r3, [pc, #156]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a26      	ldr	r2, [pc, #152]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 80040fa:	f023 0301 	bic.w	r3, r3, #1
 80040fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fe feb4 	bl	8002e6c <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004108:	f7fe feb0 	bl	8002e6c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e1a3      	b.n	8004462 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411a:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d038      	beq.n	80041a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d019      	beq.n	800416e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800413a:	4b16      	ldr	r3, [pc, #88]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 800413c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800413e:	4a15      	ldr	r2, [pc, #84]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004146:	f7fe fe91 	bl	8002e6c <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414e:	f7fe fe8d 	bl	8002e6c <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e180      	b.n	8004462 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004160:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8004162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0f0      	beq.n	800414e <HAL_RCC_OscConfig+0x23a>
 800416c:	e01a      	b.n	80041a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800416e:	4b09      	ldr	r3, [pc, #36]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8004170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004172:	4a08      	ldr	r2, [pc, #32]	; (8004194 <HAL_RCC_OscConfig+0x280>)
 8004174:	f023 0301 	bic.w	r3, r3, #1
 8004178:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417a:	f7fe fe77 	bl	8002e6c <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004180:	e00a      	b.n	8004198 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004182:	f7fe fe73 	bl	8002e6c <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d903      	bls.n	8004198 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e166      	b.n	8004462 <HAL_RCC_OscConfig+0x54e>
 8004194:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004198:	4b92      	ldr	r3, [pc, #584]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 800419a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1ee      	bne.n	8004182 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 80a4 	beq.w	80042fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041b2:	4b8c      	ldr	r3, [pc, #560]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10d      	bne.n	80041da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80041be:	4b89      	ldr	r3, [pc, #548]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	4a88      	ldr	r2, [pc, #544]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 80041c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ca:	4b86      	ldr	r3, [pc, #536]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d2:	60bb      	str	r3, [r7, #8]
 80041d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d6:	2301      	movs	r3, #1
 80041d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041da:	4b83      	ldr	r3, [pc, #524]	; (80043e8 <HAL_RCC_OscConfig+0x4d4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d118      	bne.n	8004218 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80041e6:	4b80      	ldr	r3, [pc, #512]	; (80043e8 <HAL_RCC_OscConfig+0x4d4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a7f      	ldr	r2, [pc, #508]	; (80043e8 <HAL_RCC_OscConfig+0x4d4>)
 80041ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041f2:	f7fe fe3b 	bl	8002e6c <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041fa:	f7fe fe37 	bl	8002e6c <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b64      	cmp	r3, #100	; 0x64
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e12a      	b.n	8004462 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800420c:	4b76      	ldr	r3, [pc, #472]	; (80043e8 <HAL_RCC_OscConfig+0x4d4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f0      	beq.n	80041fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d106      	bne.n	800422e <HAL_RCC_OscConfig+0x31a>
 8004220:	4b70      	ldr	r3, [pc, #448]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 8004222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004224:	4a6f      	ldr	r2, [pc, #444]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	6713      	str	r3, [r2, #112]	; 0x70
 800422c:	e02d      	b.n	800428a <HAL_RCC_OscConfig+0x376>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10c      	bne.n	8004250 <HAL_RCC_OscConfig+0x33c>
 8004236:	4b6b      	ldr	r3, [pc, #428]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 8004238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423a:	4a6a      	ldr	r2, [pc, #424]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 800423c:	f023 0301 	bic.w	r3, r3, #1
 8004240:	6713      	str	r3, [r2, #112]	; 0x70
 8004242:	4b68      	ldr	r3, [pc, #416]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004246:	4a67      	ldr	r2, [pc, #412]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 8004248:	f023 0304 	bic.w	r3, r3, #4
 800424c:	6713      	str	r3, [r2, #112]	; 0x70
 800424e:	e01c      	b.n	800428a <HAL_RCC_OscConfig+0x376>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b05      	cmp	r3, #5
 8004256:	d10c      	bne.n	8004272 <HAL_RCC_OscConfig+0x35e>
 8004258:	4b62      	ldr	r3, [pc, #392]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425c:	4a61      	ldr	r2, [pc, #388]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 800425e:	f043 0304 	orr.w	r3, r3, #4
 8004262:	6713      	str	r3, [r2, #112]	; 0x70
 8004264:	4b5f      	ldr	r3, [pc, #380]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	4a5e      	ldr	r2, [pc, #376]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	6713      	str	r3, [r2, #112]	; 0x70
 8004270:	e00b      	b.n	800428a <HAL_RCC_OscConfig+0x376>
 8004272:	4b5c      	ldr	r3, [pc, #368]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	4a5b      	ldr	r2, [pc, #364]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 8004278:	f023 0301 	bic.w	r3, r3, #1
 800427c:	6713      	str	r3, [r2, #112]	; 0x70
 800427e:	4b59      	ldr	r3, [pc, #356]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	4a58      	ldr	r2, [pc, #352]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 8004284:	f023 0304 	bic.w	r3, r3, #4
 8004288:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d015      	beq.n	80042be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004292:	f7fe fdeb 	bl	8002e6c <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004298:	e00a      	b.n	80042b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429a:	f7fe fde7 	bl	8002e6c <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e0d8      	b.n	8004462 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b0:	4b4c      	ldr	r3, [pc, #304]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 80042b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0ee      	beq.n	800429a <HAL_RCC_OscConfig+0x386>
 80042bc:	e014      	b.n	80042e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042be:	f7fe fdd5 	bl	8002e6c <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c4:	e00a      	b.n	80042dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c6:	f7fe fdd1 	bl	8002e6c <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e0c2      	b.n	8004462 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042dc:	4b41      	ldr	r3, [pc, #260]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 80042de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1ee      	bne.n	80042c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d105      	bne.n	80042fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ee:	4b3d      	ldr	r3, [pc, #244]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	4a3c      	ldr	r2, [pc, #240]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 80042f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 80ae 	beq.w	8004460 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004304:	4b37      	ldr	r3, [pc, #220]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 030c 	and.w	r3, r3, #12
 800430c:	2b08      	cmp	r3, #8
 800430e:	d06d      	beq.n	80043ec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	2b02      	cmp	r3, #2
 8004316:	d14b      	bne.n	80043b0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004318:	4b32      	ldr	r3, [pc, #200]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a31      	ldr	r2, [pc, #196]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 800431e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fe fda2 	bl	8002e6c <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800432c:	f7fe fd9e 	bl	8002e6c <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e091      	b.n	8004462 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433e:	4b29      	ldr	r3, [pc, #164]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69da      	ldr	r2, [r3, #28]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	019b      	lsls	r3, r3, #6
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	3b01      	subs	r3, #1
 8004364:	041b      	lsls	r3, r3, #16
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	061b      	lsls	r3, r3, #24
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	071b      	lsls	r3, r3, #28
 8004376:	491b      	ldr	r1, [pc, #108]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 8004378:	4313      	orrs	r3, r2
 800437a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800437c:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a18      	ldr	r2, [pc, #96]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 8004382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fe fd70 	bl	8002e6c <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004390:	f7fe fd6c 	bl	8002e6c <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e05f      	b.n	8004462 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a2:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f0      	beq.n	8004390 <HAL_RCC_OscConfig+0x47c>
 80043ae:	e057      	b.n	8004460 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b0:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a0b      	ldr	r2, [pc, #44]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 80043b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fe fd56 	bl	8002e6c <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c4:	f7fe fd52 	bl	8002e6c <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e045      	b.n	8004462 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d6:	4b03      	ldr	r3, [pc, #12]	; (80043e4 <HAL_RCC_OscConfig+0x4d0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f0      	bne.n	80043c4 <HAL_RCC_OscConfig+0x4b0>
 80043e2:	e03d      	b.n	8004460 <HAL_RCC_OscConfig+0x54c>
 80043e4:	40023800 	.word	0x40023800
 80043e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80043ec:	4b1f      	ldr	r3, [pc, #124]	; (800446c <HAL_RCC_OscConfig+0x558>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d030      	beq.n	800445c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004404:	429a      	cmp	r2, r3
 8004406:	d129      	bne.n	800445c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004412:	429a      	cmp	r2, r3
 8004414:	d122      	bne.n	800445c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800441c:	4013      	ands	r3, r2
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004422:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004424:	4293      	cmp	r3, r2
 8004426:	d119      	bne.n	800445c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004432:	085b      	lsrs	r3, r3, #1
 8004434:	3b01      	subs	r3, #1
 8004436:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004438:	429a      	cmp	r2, r3
 800443a:	d10f      	bne.n	800445c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004448:	429a      	cmp	r2, r3
 800444a:	d107      	bne.n	800445c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d001      	beq.n	8004460 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40023800 	.word	0x40023800

08004470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0d0      	b.n	800462a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004488:	4b6a      	ldr	r3, [pc, #424]	; (8004634 <HAL_RCC_ClockConfig+0x1c4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 030f 	and.w	r3, r3, #15
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d910      	bls.n	80044b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004496:	4b67      	ldr	r3, [pc, #412]	; (8004634 <HAL_RCC_ClockConfig+0x1c4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f023 020f 	bic.w	r2, r3, #15
 800449e:	4965      	ldr	r1, [pc, #404]	; (8004634 <HAL_RCC_ClockConfig+0x1c4>)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a6:	4b63      	ldr	r3, [pc, #396]	; (8004634 <HAL_RCC_ClockConfig+0x1c4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d001      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0b8      	b.n	800462a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d020      	beq.n	8004506 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d005      	beq.n	80044dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044d0:	4b59      	ldr	r3, [pc, #356]	; (8004638 <HAL_RCC_ClockConfig+0x1c8>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	4a58      	ldr	r2, [pc, #352]	; (8004638 <HAL_RCC_ClockConfig+0x1c8>)
 80044d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044e8:	4b53      	ldr	r3, [pc, #332]	; (8004638 <HAL_RCC_ClockConfig+0x1c8>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	4a52      	ldr	r2, [pc, #328]	; (8004638 <HAL_RCC_ClockConfig+0x1c8>)
 80044ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044f4:	4b50      	ldr	r3, [pc, #320]	; (8004638 <HAL_RCC_ClockConfig+0x1c8>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	494d      	ldr	r1, [pc, #308]	; (8004638 <HAL_RCC_ClockConfig+0x1c8>)
 8004502:	4313      	orrs	r3, r2
 8004504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d040      	beq.n	8004594 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d107      	bne.n	800452a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451a:	4b47      	ldr	r3, [pc, #284]	; (8004638 <HAL_RCC_ClockConfig+0x1c8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d115      	bne.n	8004552 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e07f      	b.n	800462a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2b02      	cmp	r3, #2
 8004530:	d107      	bne.n	8004542 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004532:	4b41      	ldr	r3, [pc, #260]	; (8004638 <HAL_RCC_ClockConfig+0x1c8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e073      	b.n	800462a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004542:	4b3d      	ldr	r3, [pc, #244]	; (8004638 <HAL_RCC_ClockConfig+0x1c8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e06b      	b.n	800462a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004552:	4b39      	ldr	r3, [pc, #228]	; (8004638 <HAL_RCC_ClockConfig+0x1c8>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f023 0203 	bic.w	r2, r3, #3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	4936      	ldr	r1, [pc, #216]	; (8004638 <HAL_RCC_ClockConfig+0x1c8>)
 8004560:	4313      	orrs	r3, r2
 8004562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004564:	f7fe fc82 	bl	8002e6c <HAL_GetTick>
 8004568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456a:	e00a      	b.n	8004582 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800456c:	f7fe fc7e 	bl	8002e6c <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f241 3288 	movw	r2, #5000	; 0x1388
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e053      	b.n	800462a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004582:	4b2d      	ldr	r3, [pc, #180]	; (8004638 <HAL_RCC_ClockConfig+0x1c8>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 020c 	and.w	r2, r3, #12
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	429a      	cmp	r2, r3
 8004592:	d1eb      	bne.n	800456c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004594:	4b27      	ldr	r3, [pc, #156]	; (8004634 <HAL_RCC_ClockConfig+0x1c4>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d210      	bcs.n	80045c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a2:	4b24      	ldr	r3, [pc, #144]	; (8004634 <HAL_RCC_ClockConfig+0x1c4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f023 020f 	bic.w	r2, r3, #15
 80045aa:	4922      	ldr	r1, [pc, #136]	; (8004634 <HAL_RCC_ClockConfig+0x1c4>)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b2:	4b20      	ldr	r3, [pc, #128]	; (8004634 <HAL_RCC_ClockConfig+0x1c4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d001      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e032      	b.n	800462a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d008      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045d0:	4b19      	ldr	r3, [pc, #100]	; (8004638 <HAL_RCC_ClockConfig+0x1c8>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4916      	ldr	r1, [pc, #88]	; (8004638 <HAL_RCC_ClockConfig+0x1c8>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d009      	beq.n	8004602 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045ee:	4b12      	ldr	r3, [pc, #72]	; (8004638 <HAL_RCC_ClockConfig+0x1c8>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	490e      	ldr	r1, [pc, #56]	; (8004638 <HAL_RCC_ClockConfig+0x1c8>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004602:	f000 f821 	bl	8004648 <HAL_RCC_GetSysClockFreq>
 8004606:	4602      	mov	r2, r0
 8004608:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <HAL_RCC_ClockConfig+0x1c8>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	091b      	lsrs	r3, r3, #4
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	490a      	ldr	r1, [pc, #40]	; (800463c <HAL_RCC_ClockConfig+0x1cc>)
 8004614:	5ccb      	ldrb	r3, [r1, r3]
 8004616:	fa22 f303 	lsr.w	r3, r2, r3
 800461a:	4a09      	ldr	r2, [pc, #36]	; (8004640 <HAL_RCC_ClockConfig+0x1d0>)
 800461c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800461e:	4b09      	ldr	r3, [pc, #36]	; (8004644 <HAL_RCC_ClockConfig+0x1d4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f7fe fbde 	bl	8002de4 <HAL_InitTick>

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40023c00 	.word	0x40023c00
 8004638:	40023800 	.word	0x40023800
 800463c:	0800d718 	.word	0x0800d718
 8004640:	20000040 	.word	0x20000040
 8004644:	20000044 	.word	0x20000044

08004648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800464c:	b090      	sub	sp, #64	; 0x40
 800464e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	637b      	str	r3, [r7, #52]	; 0x34
 8004654:	2300      	movs	r3, #0
 8004656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004658:	2300      	movs	r3, #0
 800465a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004660:	4b59      	ldr	r3, [pc, #356]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 030c 	and.w	r3, r3, #12
 8004668:	2b08      	cmp	r3, #8
 800466a:	d00d      	beq.n	8004688 <HAL_RCC_GetSysClockFreq+0x40>
 800466c:	2b08      	cmp	r3, #8
 800466e:	f200 80a1 	bhi.w	80047b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <HAL_RCC_GetSysClockFreq+0x34>
 8004676:	2b04      	cmp	r3, #4
 8004678:	d003      	beq.n	8004682 <HAL_RCC_GetSysClockFreq+0x3a>
 800467a:	e09b      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800467c:	4b53      	ldr	r3, [pc, #332]	; (80047cc <HAL_RCC_GetSysClockFreq+0x184>)
 800467e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004680:	e09b      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004682:	4b53      	ldr	r3, [pc, #332]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004684:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004686:	e098      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004688:	4b4f      	ldr	r3, [pc, #316]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004690:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004692:	4b4d      	ldr	r3, [pc, #308]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d028      	beq.n	80046f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800469e:	4b4a      	ldr	r3, [pc, #296]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	099b      	lsrs	r3, r3, #6
 80046a4:	2200      	movs	r2, #0
 80046a6:	623b      	str	r3, [r7, #32]
 80046a8:	627a      	str	r2, [r7, #36]	; 0x24
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046b0:	2100      	movs	r1, #0
 80046b2:	4b47      	ldr	r3, [pc, #284]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80046b4:	fb03 f201 	mul.w	r2, r3, r1
 80046b8:	2300      	movs	r3, #0
 80046ba:	fb00 f303 	mul.w	r3, r0, r3
 80046be:	4413      	add	r3, r2
 80046c0:	4a43      	ldr	r2, [pc, #268]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80046c2:	fba0 1202 	umull	r1, r2, r0, r2
 80046c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046c8:	460a      	mov	r2, r1
 80046ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80046cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ce:	4413      	add	r3, r2
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d4:	2200      	movs	r2, #0
 80046d6:	61bb      	str	r3, [r7, #24]
 80046d8:	61fa      	str	r2, [r7, #28]
 80046da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046e2:	f7fb ffd1 	bl	8000688 <__aeabi_uldivmod>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4613      	mov	r3, r2
 80046ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ee:	e053      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046f0:	4b35      	ldr	r3, [pc, #212]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	099b      	lsrs	r3, r3, #6
 80046f6:	2200      	movs	r2, #0
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	617a      	str	r2, [r7, #20]
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004702:	f04f 0b00 	mov.w	fp, #0
 8004706:	4652      	mov	r2, sl
 8004708:	465b      	mov	r3, fp
 800470a:	f04f 0000 	mov.w	r0, #0
 800470e:	f04f 0100 	mov.w	r1, #0
 8004712:	0159      	lsls	r1, r3, #5
 8004714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004718:	0150      	lsls	r0, r2, #5
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	ebb2 080a 	subs.w	r8, r2, sl
 8004722:	eb63 090b 	sbc.w	r9, r3, fp
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004732:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004736:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800473a:	ebb2 0408 	subs.w	r4, r2, r8
 800473e:	eb63 0509 	sbc.w	r5, r3, r9
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	00eb      	lsls	r3, r5, #3
 800474c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004750:	00e2      	lsls	r2, r4, #3
 8004752:	4614      	mov	r4, r2
 8004754:	461d      	mov	r5, r3
 8004756:	eb14 030a 	adds.w	r3, r4, sl
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	eb45 030b 	adc.w	r3, r5, fp
 8004760:	607b      	str	r3, [r7, #4]
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800476e:	4629      	mov	r1, r5
 8004770:	028b      	lsls	r3, r1, #10
 8004772:	4621      	mov	r1, r4
 8004774:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004778:	4621      	mov	r1, r4
 800477a:	028a      	lsls	r2, r1, #10
 800477c:	4610      	mov	r0, r2
 800477e:	4619      	mov	r1, r3
 8004780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004782:	2200      	movs	r2, #0
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	60fa      	str	r2, [r7, #12]
 8004788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800478c:	f7fb ff7c 	bl	8000688 <__aeabi_uldivmod>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4613      	mov	r3, r2
 8004796:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	0c1b      	lsrs	r3, r3, #16
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	3301      	adds	r3, #1
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80047a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047b2:	e002      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <HAL_RCC_GetSysClockFreq+0x184>)
 80047b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3740      	adds	r7, #64	; 0x40
 80047c0:	46bd      	mov	sp, r7
 80047c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047c6:	bf00      	nop
 80047c8:	40023800 	.word	0x40023800
 80047cc:	00f42400 	.word	0x00f42400
 80047d0:	017d7840 	.word	0x017d7840

080047d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d8:	4b03      	ldr	r3, [pc, #12]	; (80047e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80047da:	681b      	ldr	r3, [r3, #0]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	20000040 	.word	0x20000040

080047ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047f0:	f7ff fff0 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 80047f4:	4602      	mov	r2, r0
 80047f6:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCC_GetPCLK1Freq+0x20>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	0a9b      	lsrs	r3, r3, #10
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	4903      	ldr	r1, [pc, #12]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004802:	5ccb      	ldrb	r3, [r1, r3]
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004808:	4618      	mov	r0, r3
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40023800 	.word	0x40023800
 8004810:	0800d728 	.word	0x0800d728

08004814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004818:	f7ff ffdc 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b05      	ldr	r3, [pc, #20]	; (8004834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	0b5b      	lsrs	r3, r3, #13
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	4903      	ldr	r1, [pc, #12]	; (8004838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40023800 	.word	0x40023800
 8004838:	0800d728 	.word	0x0800d728

0800483c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004850:	2300      	movs	r3, #0
 8004852:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d012      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004864:	4b69      	ldr	r3, [pc, #420]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	4a68      	ldr	r2, [pc, #416]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800486a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800486e:	6093      	str	r3, [r2, #8]
 8004870:	4b66      	ldr	r3, [pc, #408]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004878:	4964      	ldr	r1, [pc, #400]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800487a:	4313      	orrs	r3, r2
 800487c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004886:	2301      	movs	r3, #1
 8004888:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d017      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004896:	4b5d      	ldr	r3, [pc, #372]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800489c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a4:	4959      	ldr	r1, [pc, #356]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048b4:	d101      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80048b6:	2301      	movs	r3, #1
 80048b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80048c2:	2301      	movs	r3, #1
 80048c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d017      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048d2:	4b4e      	ldr	r3, [pc, #312]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	494a      	ldr	r1, [pc, #296]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048f0:	d101      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80048f2:	2301      	movs	r3, #1
 80048f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80048fe:	2301      	movs	r3, #1
 8004900:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800490e:	2301      	movs	r3, #1
 8004910:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 808b 	beq.w	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004920:	4b3a      	ldr	r3, [pc, #232]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	4a39      	ldr	r2, [pc, #228]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492a:	6413      	str	r3, [r2, #64]	; 0x40
 800492c:	4b37      	ldr	r3, [pc, #220]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004934:	60bb      	str	r3, [r7, #8]
 8004936:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004938:	4b35      	ldr	r3, [pc, #212]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a34      	ldr	r2, [pc, #208]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800493e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004942:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004944:	f7fe fa92 	bl	8002e6c <HAL_GetTick>
 8004948:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800494a:	e008      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800494c:	f7fe fa8e 	bl	8002e6c <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b64      	cmp	r3, #100	; 0x64
 8004958:	d901      	bls.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e38f      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800495e:	4b2c      	ldr	r3, [pc, #176]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f0      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800496a:	4b28      	ldr	r3, [pc, #160]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004972:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d035      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	429a      	cmp	r2, r3
 8004986:	d02e      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004988:	4b20      	ldr	r3, [pc, #128]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800498a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004990:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004992:	4b1e      	ldr	r3, [pc, #120]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004996:	4a1d      	ldr	r2, [pc, #116]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800499c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800499e:	4b1b      	ldr	r3, [pc, #108]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a2:	4a1a      	ldr	r2, [pc, #104]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80049aa:	4a18      	ldr	r2, [pc, #96]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049b0:	4b16      	ldr	r3, [pc, #88]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d114      	bne.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049bc:	f7fe fa56 	bl	8002e6c <HAL_GetTick>
 80049c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c2:	e00a      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049c4:	f7fe fa52 	bl	8002e6c <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d901      	bls.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e351      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049da:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0ee      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049f2:	d111      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80049f4:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a00:	4b04      	ldr	r3, [pc, #16]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a02:	400b      	ands	r3, r1
 8004a04:	4901      	ldr	r1, [pc, #4]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	608b      	str	r3, [r1, #8]
 8004a0a:	e00b      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	40007000 	.word	0x40007000
 8004a14:	0ffffcff 	.word	0x0ffffcff
 8004a18:	4bac      	ldr	r3, [pc, #688]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	4aab      	ldr	r2, [pc, #684]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a1e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a22:	6093      	str	r3, [r2, #8]
 8004a24:	4ba9      	ldr	r3, [pc, #676]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a30:	49a6      	ldr	r1, [pc, #664]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0310 	and.w	r3, r3, #16
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d010      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a42:	4ba2      	ldr	r3, [pc, #648]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a48:	4aa0      	ldr	r2, [pc, #640]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004a52:	4b9e      	ldr	r3, [pc, #632]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a54:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	499b      	ldr	r1, [pc, #620]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a70:	4b96      	ldr	r3, [pc, #600]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a7e:	4993      	ldr	r1, [pc, #588]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a92:	4b8e      	ldr	r3, [pc, #568]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aa0:	498a      	ldr	r1, [pc, #552]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ab4:	4b85      	ldr	r3, [pc, #532]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ac2:	4982      	ldr	r1, [pc, #520]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ad6:	4b7d      	ldr	r3, [pc, #500]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004adc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae4:	4979      	ldr	r1, [pc, #484]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004af8:	4b74      	ldr	r3, [pc, #464]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afe:	f023 0203 	bic.w	r2, r3, #3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	4971      	ldr	r1, [pc, #452]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b1a:	4b6c      	ldr	r3, [pc, #432]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b20:	f023 020c 	bic.w	r2, r3, #12
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b28:	4968      	ldr	r1, [pc, #416]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00a      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b3c:	4b63      	ldr	r3, [pc, #396]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4a:	4960      	ldr	r1, [pc, #384]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b5e:	4b5b      	ldr	r3, [pc, #364]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b64:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b6c:	4957      	ldr	r1, [pc, #348]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b80:	4b52      	ldr	r3, [pc, #328]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8e:	494f      	ldr	r1, [pc, #316]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004ba2:	4b4a      	ldr	r3, [pc, #296]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb0:	4946      	ldr	r1, [pc, #280]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00a      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004bc4:	4b41      	ldr	r3, [pc, #260]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd2:	493e      	ldr	r1, [pc, #248]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004be6:	4b39      	ldr	r3, [pc, #228]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf4:	4935      	ldr	r1, [pc, #212]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00a      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c08:	4b30      	ldr	r3, [pc, #192]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c16:	492d      	ldr	r1, [pc, #180]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d011      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c2a:	4b28      	ldr	r3, [pc, #160]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c30:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c38:	4924      	ldr	r1, [pc, #144]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c48:	d101      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c6a:	4b18      	ldr	r3, [pc, #96]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c70:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c78:	4914      	ldr	r1, [pc, #80]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00b      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c8c:	4b0f      	ldr	r3, [pc, #60]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c9c:	490b      	ldr	r1, [pc, #44]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00f      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004cb0:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cc0:	4902      	ldr	r1, [pc, #8]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cc8:	e002      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004cca:	bf00      	nop
 8004ccc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00b      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cdc:	4b8a      	ldr	r3, [pc, #552]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ce2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cec:	4986      	ldr	r1, [pc, #536]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00b      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d00:	4b81      	ldr	r3, [pc, #516]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d06:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d10:	497d      	ldr	r1, [pc, #500]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d006      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 80d6 	beq.w	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d2c:	4b76      	ldr	r3, [pc, #472]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a75      	ldr	r2, [pc, #468]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d38:	f7fe f898 	bl	8002e6c <HAL_GetTick>
 8004d3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d40:	f7fe f894 	bl	8002e6c <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b64      	cmp	r3, #100	; 0x64
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e195      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d52:	4b6d      	ldr	r3, [pc, #436]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1f0      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d021      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d11d      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d72:	4b65      	ldr	r3, [pc, #404]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d78:	0c1b      	lsrs	r3, r3, #16
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d80:	4b61      	ldr	r3, [pc, #388]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d86:	0e1b      	lsrs	r3, r3, #24
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	019a      	lsls	r2, r3, #6
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	041b      	lsls	r3, r3, #16
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	061b      	lsls	r3, r3, #24
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	071b      	lsls	r3, r3, #28
 8004da6:	4958      	ldr	r1, [pc, #352]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d004      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dc2:	d00a      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d02e      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dd8:	d129      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004dda:	4b4b      	ldr	r3, [pc, #300]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004de0:	0c1b      	lsrs	r3, r3, #16
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004de8:	4b47      	ldr	r3, [pc, #284]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dee:	0f1b      	lsrs	r3, r3, #28
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	019a      	lsls	r2, r3, #6
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	041b      	lsls	r3, r3, #16
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	061b      	lsls	r3, r3, #24
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	071b      	lsls	r3, r3, #28
 8004e0e:	493e      	ldr	r1, [pc, #248]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e16:	4b3c      	ldr	r3, [pc, #240]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e1c:	f023 021f 	bic.w	r2, r3, #31
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	3b01      	subs	r3, #1
 8004e26:	4938      	ldr	r1, [pc, #224]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d01d      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e3a:	4b33      	ldr	r3, [pc, #204]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e40:	0e1b      	lsrs	r3, r3, #24
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e48:	4b2f      	ldr	r3, [pc, #188]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e4e:	0f1b      	lsrs	r3, r3, #28
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	019a      	lsls	r2, r3, #6
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	041b      	lsls	r3, r3, #16
 8004e62:	431a      	orrs	r2, r3
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	061b      	lsls	r3, r3, #24
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	071b      	lsls	r3, r3, #28
 8004e6e:	4926      	ldr	r1, [pc, #152]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d011      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	019a      	lsls	r2, r3, #6
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	041b      	lsls	r3, r3, #16
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	061b      	lsls	r3, r3, #24
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	071b      	lsls	r3, r3, #28
 8004e9e:	491a      	ldr	r1, [pc, #104]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ea6:	4b18      	ldr	r3, [pc, #96]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a17      	ldr	r2, [pc, #92]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004eb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb2:	f7fd ffdb 	bl	8002e6c <HAL_GetTick>
 8004eb6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004eba:	f7fd ffd7 	bl	8002e6c <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b64      	cmp	r3, #100	; 0x64
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e0d8      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ecc:	4b0e      	ldr	r3, [pc, #56]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f0      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	f040 80ce 	bne.w	800507c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ee0:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a08      	ldr	r2, [pc, #32]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eec:	f7fd ffbe 	bl	8002e6c <HAL_GetTick>
 8004ef0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ef2:	e00b      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ef4:	f7fd ffba 	bl	8002e6c <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b64      	cmp	r3, #100	; 0x64
 8004f00:	d904      	bls.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e0bb      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004f06:	bf00      	nop
 8004f08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f0c:	4b5e      	ldr	r3, [pc, #376]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f18:	d0ec      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d02e      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d12a      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f42:	4b51      	ldr	r3, [pc, #324]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f48:	0c1b      	lsrs	r3, r3, #16
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f50:	4b4d      	ldr	r3, [pc, #308]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f56:	0f1b      	lsrs	r3, r3, #28
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	019a      	lsls	r2, r3, #6
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	041b      	lsls	r3, r3, #16
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	061b      	lsls	r3, r3, #24
 8004f70:	431a      	orrs	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	071b      	lsls	r3, r3, #28
 8004f76:	4944      	ldr	r1, [pc, #272]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f7e:	4b42      	ldr	r3, [pc, #264]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	021b      	lsls	r3, r3, #8
 8004f90:	493d      	ldr	r1, [pc, #244]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d022      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fac:	d11d      	bne.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004fae:	4b36      	ldr	r3, [pc, #216]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb4:	0e1b      	lsrs	r3, r3, #24
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fbc:	4b32      	ldr	r3, [pc, #200]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc2:	0f1b      	lsrs	r3, r3, #28
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	019a      	lsls	r2, r3, #6
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	041b      	lsls	r3, r3, #16
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	061b      	lsls	r3, r3, #24
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	071b      	lsls	r3, r3, #28
 8004fe2:	4929      	ldr	r1, [pc, #164]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d028      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ff6:	4b24      	ldr	r3, [pc, #144]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffc:	0e1b      	lsrs	r3, r3, #24
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005004:	4b20      	ldr	r3, [pc, #128]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500a:	0c1b      	lsrs	r3, r3, #16
 800500c:	f003 0303 	and.w	r3, r3, #3
 8005010:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	019a      	lsls	r2, r3, #6
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	041b      	lsls	r3, r3, #16
 800501c:	431a      	orrs	r2, r3
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	061b      	lsls	r3, r3, #24
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	071b      	lsls	r3, r3, #28
 800502a:	4917      	ldr	r1, [pc, #92]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005032:	4b15      	ldr	r3, [pc, #84]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005038:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	4911      	ldr	r1, [pc, #68]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005048:	4b0f      	ldr	r3, [pc, #60]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a0e      	ldr	r2, [pc, #56]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800504e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005052:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005054:	f7fd ff0a 	bl	8002e6c <HAL_GetTick>
 8005058:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800505a:	e008      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800505c:	f7fd ff06 	bl	8002e6c <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b64      	cmp	r3, #100	; 0x64
 8005068:	d901      	bls.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e007      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800506e:	4b06      	ldr	r3, [pc, #24]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800507a:	d1ef      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3720      	adds	r7, #32
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40023800 	.word	0x40023800

0800508c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e049      	b.n	8005132 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d106      	bne.n	80050b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fd fa6e 	bl	8002594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3304      	adds	r3, #4
 80050c8:	4619      	mov	r1, r3
 80050ca:	4610      	mov	r0, r2
 80050cc:	f001 f924 	bl	8006318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b01      	cmp	r3, #1
 800514e:	d001      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e054      	b.n	80051fe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a26      	ldr	r2, [pc, #152]	; (800520c <HAL_TIM_Base_Start_IT+0xd0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d022      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x80>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517e:	d01d      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x80>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a22      	ldr	r2, [pc, #136]	; (8005210 <HAL_TIM_Base_Start_IT+0xd4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d018      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x80>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a21      	ldr	r2, [pc, #132]	; (8005214 <HAL_TIM_Base_Start_IT+0xd8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d013      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x80>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a1f      	ldr	r2, [pc, #124]	; (8005218 <HAL_TIM_Base_Start_IT+0xdc>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00e      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x80>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a1e      	ldr	r2, [pc, #120]	; (800521c <HAL_TIM_Base_Start_IT+0xe0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d009      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x80>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a1c      	ldr	r2, [pc, #112]	; (8005220 <HAL_TIM_Base_Start_IT+0xe4>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d004      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x80>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a1b      	ldr	r2, [pc, #108]	; (8005224 <HAL_TIM_Base_Start_IT+0xe8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d115      	bne.n	80051e8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	4b19      	ldr	r3, [pc, #100]	; (8005228 <HAL_TIM_Base_Start_IT+0xec>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b06      	cmp	r3, #6
 80051cc:	d015      	beq.n	80051fa <HAL_TIM_Base_Start_IT+0xbe>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d4:	d011      	beq.n	80051fa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0201 	orr.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e6:	e008      	b.n	80051fa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0201 	orr.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	e000      	b.n	80051fc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40010000 	.word	0x40010000
 8005210:	40000400 	.word	0x40000400
 8005214:	40000800 	.word	0x40000800
 8005218:	40000c00 	.word	0x40000c00
 800521c:	40010400 	.word	0x40010400
 8005220:	40014000 	.word	0x40014000
 8005224:	40001800 	.word	0x40001800
 8005228:	00010007 	.word	0x00010007

0800522c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0201 	bic.w	r2, r2, #1
 8005242:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6a1a      	ldr	r2, [r3, #32]
 800524a:	f241 1311 	movw	r3, #4369	; 0x1111
 800524e:	4013      	ands	r3, r2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10f      	bne.n	8005274 <HAL_TIM_Base_Stop_IT+0x48>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6a1a      	ldr	r2, [r3, #32]
 800525a:	f240 4344 	movw	r3, #1092	; 0x444
 800525e:	4013      	ands	r3, r2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d107      	bne.n	8005274 <HAL_TIM_Base_Stop_IT+0x48>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0201 	bic.w	r2, r2, #1
 8005272:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b082      	sub	sp, #8
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e049      	b.n	8005330 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d106      	bne.n	80052b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f841 	bl	8005338 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3304      	adds	r3, #4
 80052c6:	4619      	mov	r1, r3
 80052c8:	4610      	mov	r0, r2
 80052ca:	f001 f825 	bl	8006318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d109      	bne.n	8005370 <HAL_TIM_PWM_Start+0x24>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	bf14      	ite	ne
 8005368:	2301      	movne	r3, #1
 800536a:	2300      	moveq	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	e03c      	b.n	80053ea <HAL_TIM_PWM_Start+0x9e>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b04      	cmp	r3, #4
 8005374:	d109      	bne.n	800538a <HAL_TIM_PWM_Start+0x3e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b01      	cmp	r3, #1
 8005380:	bf14      	ite	ne
 8005382:	2301      	movne	r3, #1
 8005384:	2300      	moveq	r3, #0
 8005386:	b2db      	uxtb	r3, r3
 8005388:	e02f      	b.n	80053ea <HAL_TIM_PWM_Start+0x9e>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d109      	bne.n	80053a4 <HAL_TIM_PWM_Start+0x58>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b01      	cmp	r3, #1
 800539a:	bf14      	ite	ne
 800539c:	2301      	movne	r3, #1
 800539e:	2300      	moveq	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	e022      	b.n	80053ea <HAL_TIM_PWM_Start+0x9e>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b0c      	cmp	r3, #12
 80053a8:	d109      	bne.n	80053be <HAL_TIM_PWM_Start+0x72>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	bf14      	ite	ne
 80053b6:	2301      	movne	r3, #1
 80053b8:	2300      	moveq	r3, #0
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	e015      	b.n	80053ea <HAL_TIM_PWM_Start+0x9e>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	d109      	bne.n	80053d8 <HAL_TIM_PWM_Start+0x8c>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	bf14      	ite	ne
 80053d0:	2301      	movne	r3, #1
 80053d2:	2300      	moveq	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	e008      	b.n	80053ea <HAL_TIM_PWM_Start+0x9e>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	bf14      	ite	ne
 80053e4:	2301      	movne	r3, #1
 80053e6:	2300      	moveq	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e092      	b.n	8005518 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d104      	bne.n	8005402 <HAL_TIM_PWM_Start+0xb6>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005400:	e023      	b.n	800544a <HAL_TIM_PWM_Start+0xfe>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b04      	cmp	r3, #4
 8005406:	d104      	bne.n	8005412 <HAL_TIM_PWM_Start+0xc6>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005410:	e01b      	b.n	800544a <HAL_TIM_PWM_Start+0xfe>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b08      	cmp	r3, #8
 8005416:	d104      	bne.n	8005422 <HAL_TIM_PWM_Start+0xd6>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005420:	e013      	b.n	800544a <HAL_TIM_PWM_Start+0xfe>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b0c      	cmp	r3, #12
 8005426:	d104      	bne.n	8005432 <HAL_TIM_PWM_Start+0xe6>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005430:	e00b      	b.n	800544a <HAL_TIM_PWM_Start+0xfe>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b10      	cmp	r3, #16
 8005436:	d104      	bne.n	8005442 <HAL_TIM_PWM_Start+0xf6>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005440:	e003      	b.n	800544a <HAL_TIM_PWM_Start+0xfe>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2202      	movs	r2, #2
 8005446:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2201      	movs	r2, #1
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f001 fc22 	bl	8006c9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a30      	ldr	r2, [pc, #192]	; (8005520 <HAL_TIM_PWM_Start+0x1d4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d004      	beq.n	800546c <HAL_TIM_PWM_Start+0x120>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a2f      	ldr	r2, [pc, #188]	; (8005524 <HAL_TIM_PWM_Start+0x1d8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d101      	bne.n	8005470 <HAL_TIM_PWM_Start+0x124>
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <HAL_TIM_PWM_Start+0x126>
 8005470:	2300      	movs	r3, #0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d007      	beq.n	8005486 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005484:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a25      	ldr	r2, [pc, #148]	; (8005520 <HAL_TIM_PWM_Start+0x1d4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d022      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x18a>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005498:	d01d      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x18a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a22      	ldr	r2, [pc, #136]	; (8005528 <HAL_TIM_PWM_Start+0x1dc>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d018      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x18a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a20      	ldr	r2, [pc, #128]	; (800552c <HAL_TIM_PWM_Start+0x1e0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x18a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a1f      	ldr	r2, [pc, #124]	; (8005530 <HAL_TIM_PWM_Start+0x1e4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00e      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x18a>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a19      	ldr	r2, [pc, #100]	; (8005524 <HAL_TIM_PWM_Start+0x1d8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d009      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x18a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a1b      	ldr	r2, [pc, #108]	; (8005534 <HAL_TIM_PWM_Start+0x1e8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d004      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x18a>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a19      	ldr	r2, [pc, #100]	; (8005538 <HAL_TIM_PWM_Start+0x1ec>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d115      	bne.n	8005502 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	4b17      	ldr	r3, [pc, #92]	; (800553c <HAL_TIM_PWM_Start+0x1f0>)
 80054de:	4013      	ands	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b06      	cmp	r3, #6
 80054e6:	d015      	beq.n	8005514 <HAL_TIM_PWM_Start+0x1c8>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ee:	d011      	beq.n	8005514 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0201 	orr.w	r2, r2, #1
 80054fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005500:	e008      	b.n	8005514 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 0201 	orr.w	r2, r2, #1
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	e000      	b.n	8005516 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005514:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40010000 	.word	0x40010000
 8005524:	40010400 	.word	0x40010400
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800
 8005530:	40000c00 	.word	0x40000c00
 8005534:	40014000 	.word	0x40014000
 8005538:	40001800 	.word	0x40001800
 800553c:	00010007 	.word	0x00010007

08005540 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2200      	movs	r2, #0
 8005550:	6839      	ldr	r1, [r7, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f001 fba2 	bl	8006c9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a36      	ldr	r2, [pc, #216]	; (8005638 <HAL_TIM_PWM_Stop+0xf8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d004      	beq.n	800556c <HAL_TIM_PWM_Stop+0x2c>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a35      	ldr	r2, [pc, #212]	; (800563c <HAL_TIM_PWM_Stop+0xfc>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d101      	bne.n	8005570 <HAL_TIM_PWM_Stop+0x30>
 800556c:	2301      	movs	r3, #1
 800556e:	e000      	b.n	8005572 <HAL_TIM_PWM_Stop+0x32>
 8005570:	2300      	movs	r3, #0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d017      	beq.n	80055a6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6a1a      	ldr	r2, [r3, #32]
 800557c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005580:	4013      	ands	r3, r2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10f      	bne.n	80055a6 <HAL_TIM_PWM_Stop+0x66>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6a1a      	ldr	r2, [r3, #32]
 800558c:	f240 4344 	movw	r3, #1092	; 0x444
 8005590:	4013      	ands	r3, r2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d107      	bne.n	80055a6 <HAL_TIM_PWM_Stop+0x66>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6a1a      	ldr	r2, [r3, #32]
 80055ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10f      	bne.n	80055d6 <HAL_TIM_PWM_Stop+0x96>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6a1a      	ldr	r2, [r3, #32]
 80055bc:	f240 4344 	movw	r3, #1092	; 0x444
 80055c0:	4013      	ands	r3, r2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d107      	bne.n	80055d6 <HAL_TIM_PWM_Stop+0x96>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0201 	bic.w	r2, r2, #1
 80055d4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d104      	bne.n	80055e6 <HAL_TIM_PWM_Stop+0xa6>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e4:	e023      	b.n	800562e <HAL_TIM_PWM_Stop+0xee>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d104      	bne.n	80055f6 <HAL_TIM_PWM_Stop+0xb6>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f4:	e01b      	b.n	800562e <HAL_TIM_PWM_Stop+0xee>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d104      	bne.n	8005606 <HAL_TIM_PWM_Stop+0xc6>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005604:	e013      	b.n	800562e <HAL_TIM_PWM_Stop+0xee>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b0c      	cmp	r3, #12
 800560a:	d104      	bne.n	8005616 <HAL_TIM_PWM_Stop+0xd6>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005614:	e00b      	b.n	800562e <HAL_TIM_PWM_Stop+0xee>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b10      	cmp	r3, #16
 800561a:	d104      	bne.n	8005626 <HAL_TIM_PWM_Stop+0xe6>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005624:	e003      	b.n	800562e <HAL_TIM_PWM_Stop+0xee>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40010000 	.word	0x40010000
 800563c:	40010400 	.word	0x40010400

08005640 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e049      	b.n	80056e6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f841 	bl	80056ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3304      	adds	r3, #4
 800567c:	4619      	mov	r1, r3
 800567e:	4610      	mov	r0, r2
 8005680:	f000 fe4a 	bl	8006318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
	...

08005704 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d104      	bne.n	8005722 <HAL_TIM_IC_Start_IT+0x1e>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800571e:	b2db      	uxtb	r3, r3
 8005720:	e023      	b.n	800576a <HAL_TIM_IC_Start_IT+0x66>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b04      	cmp	r3, #4
 8005726:	d104      	bne.n	8005732 <HAL_TIM_IC_Start_IT+0x2e>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800572e:	b2db      	uxtb	r3, r3
 8005730:	e01b      	b.n	800576a <HAL_TIM_IC_Start_IT+0x66>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b08      	cmp	r3, #8
 8005736:	d104      	bne.n	8005742 <HAL_TIM_IC_Start_IT+0x3e>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800573e:	b2db      	uxtb	r3, r3
 8005740:	e013      	b.n	800576a <HAL_TIM_IC_Start_IT+0x66>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b0c      	cmp	r3, #12
 8005746:	d104      	bne.n	8005752 <HAL_TIM_IC_Start_IT+0x4e>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800574e:	b2db      	uxtb	r3, r3
 8005750:	e00b      	b.n	800576a <HAL_TIM_IC_Start_IT+0x66>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b10      	cmp	r3, #16
 8005756:	d104      	bne.n	8005762 <HAL_TIM_IC_Start_IT+0x5e>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800575e:	b2db      	uxtb	r3, r3
 8005760:	e003      	b.n	800576a <HAL_TIM_IC_Start_IT+0x66>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005768:	b2db      	uxtb	r3, r3
 800576a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d104      	bne.n	800577c <HAL_TIM_IC_Start_IT+0x78>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005778:	b2db      	uxtb	r3, r3
 800577a:	e013      	b.n	80057a4 <HAL_TIM_IC_Start_IT+0xa0>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b04      	cmp	r3, #4
 8005780:	d104      	bne.n	800578c <HAL_TIM_IC_Start_IT+0x88>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005788:	b2db      	uxtb	r3, r3
 800578a:	e00b      	b.n	80057a4 <HAL_TIM_IC_Start_IT+0xa0>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2b08      	cmp	r3, #8
 8005790:	d104      	bne.n	800579c <HAL_TIM_IC_Start_IT+0x98>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005798:	b2db      	uxtb	r3, r3
 800579a:	e003      	b.n	80057a4 <HAL_TIM_IC_Start_IT+0xa0>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80057a6:	7bbb      	ldrb	r3, [r7, #14]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d102      	bne.n	80057b2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80057ac:	7b7b      	ldrb	r3, [r7, #13]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d001      	beq.n	80057b6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e0e2      	b.n	800597c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d104      	bne.n	80057c6 <HAL_TIM_IC_Start_IT+0xc2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057c4:	e023      	b.n	800580e <HAL_TIM_IC_Start_IT+0x10a>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d104      	bne.n	80057d6 <HAL_TIM_IC_Start_IT+0xd2>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057d4:	e01b      	b.n	800580e <HAL_TIM_IC_Start_IT+0x10a>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d104      	bne.n	80057e6 <HAL_TIM_IC_Start_IT+0xe2>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057e4:	e013      	b.n	800580e <HAL_TIM_IC_Start_IT+0x10a>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b0c      	cmp	r3, #12
 80057ea:	d104      	bne.n	80057f6 <HAL_TIM_IC_Start_IT+0xf2>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057f4:	e00b      	b.n	800580e <HAL_TIM_IC_Start_IT+0x10a>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b10      	cmp	r3, #16
 80057fa:	d104      	bne.n	8005806 <HAL_TIM_IC_Start_IT+0x102>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005804:	e003      	b.n	800580e <HAL_TIM_IC_Start_IT+0x10a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2202      	movs	r2, #2
 800580a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d104      	bne.n	800581e <HAL_TIM_IC_Start_IT+0x11a>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2202      	movs	r2, #2
 8005818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800581c:	e013      	b.n	8005846 <HAL_TIM_IC_Start_IT+0x142>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b04      	cmp	r3, #4
 8005822:	d104      	bne.n	800582e <HAL_TIM_IC_Start_IT+0x12a>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800582c:	e00b      	b.n	8005846 <HAL_TIM_IC_Start_IT+0x142>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b08      	cmp	r3, #8
 8005832:	d104      	bne.n	800583e <HAL_TIM_IC_Start_IT+0x13a>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800583c:	e003      	b.n	8005846 <HAL_TIM_IC_Start_IT+0x142>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2202      	movs	r2, #2
 8005842:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b0c      	cmp	r3, #12
 800584a:	d841      	bhi.n	80058d0 <HAL_TIM_IC_Start_IT+0x1cc>
 800584c:	a201      	add	r2, pc, #4	; (adr r2, 8005854 <HAL_TIM_IC_Start_IT+0x150>)
 800584e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005852:	bf00      	nop
 8005854:	08005889 	.word	0x08005889
 8005858:	080058d1 	.word	0x080058d1
 800585c:	080058d1 	.word	0x080058d1
 8005860:	080058d1 	.word	0x080058d1
 8005864:	0800589b 	.word	0x0800589b
 8005868:	080058d1 	.word	0x080058d1
 800586c:	080058d1 	.word	0x080058d1
 8005870:	080058d1 	.word	0x080058d1
 8005874:	080058ad 	.word	0x080058ad
 8005878:	080058d1 	.word	0x080058d1
 800587c:	080058d1 	.word	0x080058d1
 8005880:	080058d1 	.word	0x080058d1
 8005884:	080058bf 	.word	0x080058bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68da      	ldr	r2, [r3, #12]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 0202 	orr.w	r2, r2, #2
 8005896:	60da      	str	r2, [r3, #12]
      break;
 8005898:	e01d      	b.n	80058d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68da      	ldr	r2, [r3, #12]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0204 	orr.w	r2, r2, #4
 80058a8:	60da      	str	r2, [r3, #12]
      break;
 80058aa:	e014      	b.n	80058d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0208 	orr.w	r2, r2, #8
 80058ba:	60da      	str	r2, [r3, #12]
      break;
 80058bc:	e00b      	b.n	80058d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 0210 	orr.w	r2, r2, #16
 80058cc:	60da      	str	r2, [r3, #12]
      break;
 80058ce:	e002      	b.n	80058d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	73fb      	strb	r3, [r7, #15]
      break;
 80058d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d14e      	bne.n	800597a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2201      	movs	r2, #1
 80058e2:	6839      	ldr	r1, [r7, #0]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f001 f9d9 	bl	8006c9c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a25      	ldr	r2, [pc, #148]	; (8005984 <HAL_TIM_IC_Start_IT+0x280>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d022      	beq.n	800593a <HAL_TIM_IC_Start_IT+0x236>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fc:	d01d      	beq.n	800593a <HAL_TIM_IC_Start_IT+0x236>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a21      	ldr	r2, [pc, #132]	; (8005988 <HAL_TIM_IC_Start_IT+0x284>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d018      	beq.n	800593a <HAL_TIM_IC_Start_IT+0x236>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1f      	ldr	r2, [pc, #124]	; (800598c <HAL_TIM_IC_Start_IT+0x288>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <HAL_TIM_IC_Start_IT+0x236>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a1e      	ldr	r2, [pc, #120]	; (8005990 <HAL_TIM_IC_Start_IT+0x28c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00e      	beq.n	800593a <HAL_TIM_IC_Start_IT+0x236>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a1c      	ldr	r2, [pc, #112]	; (8005994 <HAL_TIM_IC_Start_IT+0x290>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d009      	beq.n	800593a <HAL_TIM_IC_Start_IT+0x236>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1b      	ldr	r2, [pc, #108]	; (8005998 <HAL_TIM_IC_Start_IT+0x294>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d004      	beq.n	800593a <HAL_TIM_IC_Start_IT+0x236>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a19      	ldr	r2, [pc, #100]	; (800599c <HAL_TIM_IC_Start_IT+0x298>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d115      	bne.n	8005966 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	4b17      	ldr	r3, [pc, #92]	; (80059a0 <HAL_TIM_IC_Start_IT+0x29c>)
 8005942:	4013      	ands	r3, r2
 8005944:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b06      	cmp	r3, #6
 800594a:	d015      	beq.n	8005978 <HAL_TIM_IC_Start_IT+0x274>
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005952:	d011      	beq.n	8005978 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0201 	orr.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005964:	e008      	b.n	8005978 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 0201 	orr.w	r2, r2, #1
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	e000      	b.n	800597a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005978:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800597a:	7bfb      	ldrb	r3, [r7, #15]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40010000 	.word	0x40010000
 8005988:	40000400 	.word	0x40000400
 800598c:	40000800 	.word	0x40000800
 8005990:	40000c00 	.word	0x40000c00
 8005994:	40010400 	.word	0x40010400
 8005998:	40014000 	.word	0x40014000
 800599c:	40001800 	.word	0x40001800
 80059a0:	00010007 	.word	0x00010007

080059a4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b0c      	cmp	r3, #12
 80059b6:	d841      	bhi.n	8005a3c <HAL_TIM_IC_Stop_IT+0x98>
 80059b8:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <HAL_TIM_IC_Stop_IT+0x1c>)
 80059ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059be:	bf00      	nop
 80059c0:	080059f5 	.word	0x080059f5
 80059c4:	08005a3d 	.word	0x08005a3d
 80059c8:	08005a3d 	.word	0x08005a3d
 80059cc:	08005a3d 	.word	0x08005a3d
 80059d0:	08005a07 	.word	0x08005a07
 80059d4:	08005a3d 	.word	0x08005a3d
 80059d8:	08005a3d 	.word	0x08005a3d
 80059dc:	08005a3d 	.word	0x08005a3d
 80059e0:	08005a19 	.word	0x08005a19
 80059e4:	08005a3d 	.word	0x08005a3d
 80059e8:	08005a3d 	.word	0x08005a3d
 80059ec:	08005a3d 	.word	0x08005a3d
 80059f0:	08005a2b 	.word	0x08005a2b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0202 	bic.w	r2, r2, #2
 8005a02:	60da      	str	r2, [r3, #12]
      break;
 8005a04:	e01d      	b.n	8005a42 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0204 	bic.w	r2, r2, #4
 8005a14:	60da      	str	r2, [r3, #12]
      break;
 8005a16:	e014      	b.n	8005a42 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0208 	bic.w	r2, r2, #8
 8005a26:	60da      	str	r2, [r3, #12]
      break;
 8005a28:	e00b      	b.n	8005a42 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0210 	bic.w	r2, r2, #16
 8005a38:	60da      	str	r2, [r3, #12]
      break;
 8005a3a:	e002      	b.n	8005a42 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a40:	bf00      	nop
  }

  if (status == HAL_OK)
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d166      	bne.n	8005b16 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	6839      	ldr	r1, [r7, #0]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f001 f923 	bl	8006c9c <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6a1a      	ldr	r2, [r3, #32]
 8005a5c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a60:	4013      	ands	r3, r2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10f      	bne.n	8005a86 <HAL_TIM_IC_Stop_IT+0xe2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6a1a      	ldr	r2, [r3, #32]
 8005a6c:	f240 4344 	movw	r3, #1092	; 0x444
 8005a70:	4013      	ands	r3, r2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d107      	bne.n	8005a86 <HAL_TIM_IC_Stop_IT+0xe2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0201 	bic.w	r2, r2, #1
 8005a84:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d104      	bne.n	8005a96 <HAL_TIM_IC_Stop_IT+0xf2>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a94:	e023      	b.n	8005ade <HAL_TIM_IC_Stop_IT+0x13a>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	d104      	bne.n	8005aa6 <HAL_TIM_IC_Stop_IT+0x102>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aa4:	e01b      	b.n	8005ade <HAL_TIM_IC_Stop_IT+0x13a>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d104      	bne.n	8005ab6 <HAL_TIM_IC_Stop_IT+0x112>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ab4:	e013      	b.n	8005ade <HAL_TIM_IC_Stop_IT+0x13a>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b0c      	cmp	r3, #12
 8005aba:	d104      	bne.n	8005ac6 <HAL_TIM_IC_Stop_IT+0x122>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ac4:	e00b      	b.n	8005ade <HAL_TIM_IC_Stop_IT+0x13a>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b10      	cmp	r3, #16
 8005aca:	d104      	bne.n	8005ad6 <HAL_TIM_IC_Stop_IT+0x132>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ad4:	e003      	b.n	8005ade <HAL_TIM_IC_Stop_IT+0x13a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d104      	bne.n	8005aee <HAL_TIM_IC_Stop_IT+0x14a>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aec:	e013      	b.n	8005b16 <HAL_TIM_IC_Stop_IT+0x172>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d104      	bne.n	8005afe <HAL_TIM_IC_Stop_IT+0x15a>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005afc:	e00b      	b.n	8005b16 <HAL_TIM_IC_Stop_IT+0x172>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d104      	bne.n	8005b0e <HAL_TIM_IC_Stop_IT+0x16a>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b0c:	e003      	b.n	8005b16 <HAL_TIM_IC_Stop_IT+0x172>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d122      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d11b      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f06f 0202 	mvn.w	r2, #2
 8005b4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fc ff24 	bl	80029b0 <HAL_TIM_IC_CaptureCallback>
 8005b68:	e005      	b.n	8005b76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fbb6 	bl	80062dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fbbd 	bl	80062f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0304 	and.w	r3, r3, #4
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	d122      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d11b      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0204 	mvn.w	r2, #4
 8005ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fc fefa 	bl	80029b0 <HAL_TIM_IC_CaptureCallback>
 8005bbc:	e005      	b.n	8005bca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fb8c 	bl	80062dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fb93 	bl	80062f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f003 0308 	and.w	r3, r3, #8
 8005bda:	2b08      	cmp	r3, #8
 8005bdc:	d122      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0308 	and.w	r3, r3, #8
 8005be8:	2b08      	cmp	r3, #8
 8005bea:	d11b      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0208 	mvn.w	r2, #8
 8005bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2204      	movs	r2, #4
 8005bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fc fed0 	bl	80029b0 <HAL_TIM_IC_CaptureCallback>
 8005c10:	e005      	b.n	8005c1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fb62 	bl	80062dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fb69 	bl	80062f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f003 0310 	and.w	r3, r3, #16
 8005c2e:	2b10      	cmp	r3, #16
 8005c30:	d122      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f003 0310 	and.w	r3, r3, #16
 8005c3c:	2b10      	cmp	r3, #16
 8005c3e:	d11b      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0210 	mvn.w	r2, #16
 8005c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2208      	movs	r2, #8
 8005c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fc fea6 	bl	80029b0 <HAL_TIM_IC_CaptureCallback>
 8005c64:	e005      	b.n	8005c72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fb38 	bl	80062dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fb3f 	bl	80062f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d10e      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d107      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0201 	mvn.w	r2, #1
 8005c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7fc fe5e 	bl	8002960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cae:	2b80      	cmp	r3, #128	; 0x80
 8005cb0:	d10e      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cbc:	2b80      	cmp	r3, #128	; 0x80
 8005cbe:	d107      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f001 f8a4 	bl	8006e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cde:	d10e      	bne.n	8005cfe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cea:	2b80      	cmp	r3, #128	; 0x80
 8005cec:	d107      	bne.n	8005cfe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f001 f897 	bl	8006e2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d08:	2b40      	cmp	r3, #64	; 0x40
 8005d0a:	d10e      	bne.n	8005d2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d16:	2b40      	cmp	r3, #64	; 0x40
 8005d18:	d107      	bne.n	8005d2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 faed 	bl	8006304 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f003 0320 	and.w	r3, r3, #32
 8005d34:	2b20      	cmp	r3, #32
 8005d36:	d10e      	bne.n	8005d56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f003 0320 	and.w	r3, r3, #32
 8005d42:	2b20      	cmp	r3, #32
 8005d44:	d107      	bne.n	8005d56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f06f 0220 	mvn.w	r2, #32
 8005d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 f857 	bl	8006e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d56:	bf00      	nop
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b086      	sub	sp, #24
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	60f8      	str	r0, [r7, #12]
 8005d66:	60b9      	str	r1, [r7, #8]
 8005d68:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d101      	bne.n	8005d7c <HAL_TIM_IC_ConfigChannel+0x1e>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e088      	b.n	8005e8e <HAL_TIM_IC_ConfigChannel+0x130>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d11b      	bne.n	8005dc2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6818      	ldr	r0, [r3, #0]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	6819      	ldr	r1, [r3, #0]
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f000 fdbb 	bl	8006914 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	699a      	ldr	r2, [r3, #24]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 020c 	bic.w	r2, r2, #12
 8005dac:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6999      	ldr	r1, [r3, #24]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	619a      	str	r2, [r3, #24]
 8005dc0:	e060      	b.n	8005e84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	d11c      	bne.n	8005e02 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6818      	ldr	r0, [r3, #0]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	6819      	ldr	r1, [r3, #0]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f000 fe3f 	bl	8006a5a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699a      	ldr	r2, [r3, #24]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005dea:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6999      	ldr	r1, [r3, #24]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	021a      	lsls	r2, r3, #8
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	619a      	str	r2, [r3, #24]
 8005e00:	e040      	b.n	8005e84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d11b      	bne.n	8005e40 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6818      	ldr	r0, [r3, #0]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	6819      	ldr	r1, [r3, #0]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f000 fe8c 	bl	8006b34 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	69da      	ldr	r2, [r3, #28]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 020c 	bic.w	r2, r2, #12
 8005e2a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	69d9      	ldr	r1, [r3, #28]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	689a      	ldr	r2, [r3, #8]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	61da      	str	r2, [r3, #28]
 8005e3e:	e021      	b.n	8005e84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b0c      	cmp	r3, #12
 8005e44:	d11c      	bne.n	8005e80 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6818      	ldr	r0, [r3, #0]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	6819      	ldr	r1, [r3, #0]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f000 fea9 	bl	8006bac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69da      	ldr	r2, [r3, #28]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e68:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69d9      	ldr	r1, [r3, #28]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	021a      	lsls	r2, r3, #8
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	61da      	str	r2, [r3, #28]
 8005e7e:	e001      	b.n	8005e84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d101      	bne.n	8005eb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	e0ff      	b.n	80060b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b14      	cmp	r3, #20
 8005ec2:	f200 80f0 	bhi.w	80060a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ec6:	a201      	add	r2, pc, #4	; (adr r2, 8005ecc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ecc:	08005f21 	.word	0x08005f21
 8005ed0:	080060a7 	.word	0x080060a7
 8005ed4:	080060a7 	.word	0x080060a7
 8005ed8:	080060a7 	.word	0x080060a7
 8005edc:	08005f61 	.word	0x08005f61
 8005ee0:	080060a7 	.word	0x080060a7
 8005ee4:	080060a7 	.word	0x080060a7
 8005ee8:	080060a7 	.word	0x080060a7
 8005eec:	08005fa3 	.word	0x08005fa3
 8005ef0:	080060a7 	.word	0x080060a7
 8005ef4:	080060a7 	.word	0x080060a7
 8005ef8:	080060a7 	.word	0x080060a7
 8005efc:	08005fe3 	.word	0x08005fe3
 8005f00:	080060a7 	.word	0x080060a7
 8005f04:	080060a7 	.word	0x080060a7
 8005f08:	080060a7 	.word	0x080060a7
 8005f0c:	08006025 	.word	0x08006025
 8005f10:	080060a7 	.word	0x080060a7
 8005f14:	080060a7 	.word	0x080060a7
 8005f18:	080060a7 	.word	0x080060a7
 8005f1c:	08006065 	.word	0x08006065
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68b9      	ldr	r1, [r7, #8]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 fa96 	bl	8006458 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699a      	ldr	r2, [r3, #24]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0208 	orr.w	r2, r2, #8
 8005f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699a      	ldr	r2, [r3, #24]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0204 	bic.w	r2, r2, #4
 8005f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6999      	ldr	r1, [r3, #24]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	691a      	ldr	r2, [r3, #16]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	619a      	str	r2, [r3, #24]
      break;
 8005f5e:	e0a5      	b.n	80060ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68b9      	ldr	r1, [r7, #8]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 fae8 	bl	800653c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699a      	ldr	r2, [r3, #24]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699a      	ldr	r2, [r3, #24]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6999      	ldr	r1, [r3, #24]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	021a      	lsls	r2, r3, #8
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	619a      	str	r2, [r3, #24]
      break;
 8005fa0:	e084      	b.n	80060ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fb3f 	bl	800662c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	69da      	ldr	r2, [r3, #28]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f042 0208 	orr.w	r2, r2, #8
 8005fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0204 	bic.w	r2, r2, #4
 8005fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69d9      	ldr	r1, [r3, #28]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	691a      	ldr	r2, [r3, #16]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	61da      	str	r2, [r3, #28]
      break;
 8005fe0:	e064      	b.n	80060ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68b9      	ldr	r1, [r7, #8]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fb95 	bl	8006718 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	69da      	ldr	r2, [r3, #28]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69da      	ldr	r2, [r3, #28]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800600c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69d9      	ldr	r1, [r3, #28]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	021a      	lsls	r2, r3, #8
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	61da      	str	r2, [r3, #28]
      break;
 8006022:	e043      	b.n	80060ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68b9      	ldr	r1, [r7, #8]
 800602a:	4618      	mov	r0, r3
 800602c:	f000 fbcc 	bl	80067c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0208 	orr.w	r2, r2, #8
 800603e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 0204 	bic.w	r2, r2, #4
 800604e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	691a      	ldr	r2, [r3, #16]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006062:	e023      	b.n	80060ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68b9      	ldr	r1, [r7, #8]
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fbfe 	bl	800686c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800607e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800608e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	021a      	lsls	r2, r3, #8
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060a4:	e002      	b.n	80060ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	75fb      	strb	r3, [r7, #23]
      break;
 80060aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop

080060c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d101      	bne.n	80060dc <HAL_TIM_ConfigClockSource+0x1c>
 80060d8:	2302      	movs	r3, #2
 80060da:	e0b4      	b.n	8006246 <HAL_TIM_ConfigClockSource+0x186>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	4b56      	ldr	r3, [pc, #344]	; (8006250 <HAL_TIM_ConfigClockSource+0x190>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006102:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006114:	d03e      	beq.n	8006194 <HAL_TIM_ConfigClockSource+0xd4>
 8006116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800611a:	f200 8087 	bhi.w	800622c <HAL_TIM_ConfigClockSource+0x16c>
 800611e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006122:	f000 8086 	beq.w	8006232 <HAL_TIM_ConfigClockSource+0x172>
 8006126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800612a:	d87f      	bhi.n	800622c <HAL_TIM_ConfigClockSource+0x16c>
 800612c:	2b70      	cmp	r3, #112	; 0x70
 800612e:	d01a      	beq.n	8006166 <HAL_TIM_ConfigClockSource+0xa6>
 8006130:	2b70      	cmp	r3, #112	; 0x70
 8006132:	d87b      	bhi.n	800622c <HAL_TIM_ConfigClockSource+0x16c>
 8006134:	2b60      	cmp	r3, #96	; 0x60
 8006136:	d050      	beq.n	80061da <HAL_TIM_ConfigClockSource+0x11a>
 8006138:	2b60      	cmp	r3, #96	; 0x60
 800613a:	d877      	bhi.n	800622c <HAL_TIM_ConfigClockSource+0x16c>
 800613c:	2b50      	cmp	r3, #80	; 0x50
 800613e:	d03c      	beq.n	80061ba <HAL_TIM_ConfigClockSource+0xfa>
 8006140:	2b50      	cmp	r3, #80	; 0x50
 8006142:	d873      	bhi.n	800622c <HAL_TIM_ConfigClockSource+0x16c>
 8006144:	2b40      	cmp	r3, #64	; 0x40
 8006146:	d058      	beq.n	80061fa <HAL_TIM_ConfigClockSource+0x13a>
 8006148:	2b40      	cmp	r3, #64	; 0x40
 800614a:	d86f      	bhi.n	800622c <HAL_TIM_ConfigClockSource+0x16c>
 800614c:	2b30      	cmp	r3, #48	; 0x30
 800614e:	d064      	beq.n	800621a <HAL_TIM_ConfigClockSource+0x15a>
 8006150:	2b30      	cmp	r3, #48	; 0x30
 8006152:	d86b      	bhi.n	800622c <HAL_TIM_ConfigClockSource+0x16c>
 8006154:	2b20      	cmp	r3, #32
 8006156:	d060      	beq.n	800621a <HAL_TIM_ConfigClockSource+0x15a>
 8006158:	2b20      	cmp	r3, #32
 800615a:	d867      	bhi.n	800622c <HAL_TIM_ConfigClockSource+0x16c>
 800615c:	2b00      	cmp	r3, #0
 800615e:	d05c      	beq.n	800621a <HAL_TIM_ConfigClockSource+0x15a>
 8006160:	2b10      	cmp	r3, #16
 8006162:	d05a      	beq.n	800621a <HAL_TIM_ConfigClockSource+0x15a>
 8006164:	e062      	b.n	800622c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	6899      	ldr	r1, [r3, #8]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f000 fd71 	bl	8006c5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	609a      	str	r2, [r3, #8]
      break;
 8006192:	e04f      	b.n	8006234 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6818      	ldr	r0, [r3, #0]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	6899      	ldr	r1, [r3, #8]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f000 fd5a 	bl	8006c5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061b6:	609a      	str	r2, [r3, #8]
      break;
 80061b8:	e03c      	b.n	8006234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	6859      	ldr	r1, [r3, #4]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	461a      	mov	r2, r3
 80061c8:	f000 fc18 	bl	80069fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2150      	movs	r1, #80	; 0x50
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fd27 	bl	8006c26 <TIM_ITRx_SetConfig>
      break;
 80061d8:	e02c      	b.n	8006234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6818      	ldr	r0, [r3, #0]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	6859      	ldr	r1, [r3, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	461a      	mov	r2, r3
 80061e8:	f000 fc74 	bl	8006ad4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2160      	movs	r1, #96	; 0x60
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fd17 	bl	8006c26 <TIM_ITRx_SetConfig>
      break;
 80061f8:	e01c      	b.n	8006234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6818      	ldr	r0, [r3, #0]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	6859      	ldr	r1, [r3, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	461a      	mov	r2, r3
 8006208:	f000 fbf8 	bl	80069fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2140      	movs	r1, #64	; 0x40
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fd07 	bl	8006c26 <TIM_ITRx_SetConfig>
      break;
 8006218:	e00c      	b.n	8006234 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4619      	mov	r1, r3
 8006224:	4610      	mov	r0, r2
 8006226:	f000 fcfe 	bl	8006c26 <TIM_ITRx_SetConfig>
      break;
 800622a:	e003      	b.n	8006234 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	73fb      	strb	r3, [r7, #15]
      break;
 8006230:	e000      	b.n	8006234 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006244:	7bfb      	ldrb	r3, [r7, #15]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	fffeff88 	.word	0xfffeff88

08006254 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b0c      	cmp	r3, #12
 8006266:	d831      	bhi.n	80062cc <HAL_TIM_ReadCapturedValue+0x78>
 8006268:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <HAL_TIM_ReadCapturedValue+0x1c>)
 800626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626e:	bf00      	nop
 8006270:	080062a5 	.word	0x080062a5
 8006274:	080062cd 	.word	0x080062cd
 8006278:	080062cd 	.word	0x080062cd
 800627c:	080062cd 	.word	0x080062cd
 8006280:	080062af 	.word	0x080062af
 8006284:	080062cd 	.word	0x080062cd
 8006288:	080062cd 	.word	0x080062cd
 800628c:	080062cd 	.word	0x080062cd
 8006290:	080062b9 	.word	0x080062b9
 8006294:	080062cd 	.word	0x080062cd
 8006298:	080062cd 	.word	0x080062cd
 800629c:	080062cd 	.word	0x080062cd
 80062a0:	080062c3 	.word	0x080062c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062aa:	60fb      	str	r3, [r7, #12]

      break;
 80062ac:	e00f      	b.n	80062ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	60fb      	str	r3, [r7, #12]

      break;
 80062b6:	e00a      	b.n	80062ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062be:	60fb      	str	r3, [r7, #12]

      break;
 80062c0:	e005      	b.n	80062ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c8:	60fb      	str	r3, [r7, #12]

      break;
 80062ca:	e000      	b.n	80062ce <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80062cc:	bf00      	nop
  }

  return tmpreg;
 80062ce:	68fb      	ldr	r3, [r7, #12]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3714      	adds	r7, #20
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a40      	ldr	r2, [pc, #256]	; (800642c <TIM_Base_SetConfig+0x114>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d013      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006336:	d00f      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a3d      	ldr	r2, [pc, #244]	; (8006430 <TIM_Base_SetConfig+0x118>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d00b      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a3c      	ldr	r2, [pc, #240]	; (8006434 <TIM_Base_SetConfig+0x11c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d007      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a3b      	ldr	r2, [pc, #236]	; (8006438 <TIM_Base_SetConfig+0x120>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a3a      	ldr	r2, [pc, #232]	; (800643c <TIM_Base_SetConfig+0x124>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d108      	bne.n	800636a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a2f      	ldr	r2, [pc, #188]	; (800642c <TIM_Base_SetConfig+0x114>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d02b      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006378:	d027      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a2c      	ldr	r2, [pc, #176]	; (8006430 <TIM_Base_SetConfig+0x118>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d023      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a2b      	ldr	r2, [pc, #172]	; (8006434 <TIM_Base_SetConfig+0x11c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d01f      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a2a      	ldr	r2, [pc, #168]	; (8006438 <TIM_Base_SetConfig+0x120>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d01b      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a29      	ldr	r2, [pc, #164]	; (800643c <TIM_Base_SetConfig+0x124>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d017      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a28      	ldr	r2, [pc, #160]	; (8006440 <TIM_Base_SetConfig+0x128>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d013      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a27      	ldr	r2, [pc, #156]	; (8006444 <TIM_Base_SetConfig+0x12c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d00f      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a26      	ldr	r2, [pc, #152]	; (8006448 <TIM_Base_SetConfig+0x130>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d00b      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a25      	ldr	r2, [pc, #148]	; (800644c <TIM_Base_SetConfig+0x134>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d007      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a24      	ldr	r2, [pc, #144]	; (8006450 <TIM_Base_SetConfig+0x138>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d003      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a23      	ldr	r2, [pc, #140]	; (8006454 <TIM_Base_SetConfig+0x13c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d108      	bne.n	80063dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	4313      	orrs	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a0a      	ldr	r2, [pc, #40]	; (800642c <TIM_Base_SetConfig+0x114>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d003      	beq.n	8006410 <TIM_Base_SetConfig+0xf8>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a0c      	ldr	r2, [pc, #48]	; (800643c <TIM_Base_SetConfig+0x124>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d103      	bne.n	8006418 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	691a      	ldr	r2, [r3, #16]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	615a      	str	r2, [r3, #20]
}
 800641e:	bf00      	nop
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40010000 	.word	0x40010000
 8006430:	40000400 	.word	0x40000400
 8006434:	40000800 	.word	0x40000800
 8006438:	40000c00 	.word	0x40000c00
 800643c:	40010400 	.word	0x40010400
 8006440:	40014000 	.word	0x40014000
 8006444:	40014400 	.word	0x40014400
 8006448:	40014800 	.word	0x40014800
 800644c:	40001800 	.word	0x40001800
 8006450:	40001c00 	.word	0x40001c00
 8006454:	40002000 	.word	0x40002000

08006458 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	f023 0201 	bic.w	r2, r3, #1
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4b2b      	ldr	r3, [pc, #172]	; (8006530 <TIM_OC1_SetConfig+0xd8>)
 8006484:	4013      	ands	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0303 	bic.w	r3, r3, #3
 800648e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f023 0302 	bic.w	r3, r3, #2
 80064a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a21      	ldr	r2, [pc, #132]	; (8006534 <TIM_OC1_SetConfig+0xdc>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d003      	beq.n	80064bc <TIM_OC1_SetConfig+0x64>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a20      	ldr	r2, [pc, #128]	; (8006538 <TIM_OC1_SetConfig+0xe0>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d10c      	bne.n	80064d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f023 0308 	bic.w	r3, r3, #8
 80064c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f023 0304 	bic.w	r3, r3, #4
 80064d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a16      	ldr	r2, [pc, #88]	; (8006534 <TIM_OC1_SetConfig+0xdc>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d003      	beq.n	80064e6 <TIM_OC1_SetConfig+0x8e>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a15      	ldr	r2, [pc, #84]	; (8006538 <TIM_OC1_SetConfig+0xe0>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d111      	bne.n	800650a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	4313      	orrs	r3, r2
 8006508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	621a      	str	r2, [r3, #32]
}
 8006524:	bf00      	nop
 8006526:	371c      	adds	r7, #28
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	fffeff8f 	.word	0xfffeff8f
 8006534:	40010000 	.word	0x40010000
 8006538:	40010400 	.word	0x40010400

0800653c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	f023 0210 	bic.w	r2, r3, #16
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	4b2e      	ldr	r3, [pc, #184]	; (8006620 <TIM_OC2_SetConfig+0xe4>)
 8006568:	4013      	ands	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	021b      	lsls	r3, r3, #8
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	4313      	orrs	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f023 0320 	bic.w	r3, r3, #32
 8006586:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	011b      	lsls	r3, r3, #4
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	4313      	orrs	r3, r2
 8006592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a23      	ldr	r2, [pc, #140]	; (8006624 <TIM_OC2_SetConfig+0xe8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d003      	beq.n	80065a4 <TIM_OC2_SetConfig+0x68>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a22      	ldr	r2, [pc, #136]	; (8006628 <TIM_OC2_SetConfig+0xec>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d10d      	bne.n	80065c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a18      	ldr	r2, [pc, #96]	; (8006624 <TIM_OC2_SetConfig+0xe8>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d003      	beq.n	80065d0 <TIM_OC2_SetConfig+0x94>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a17      	ldr	r2, [pc, #92]	; (8006628 <TIM_OC2_SetConfig+0xec>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d113      	bne.n	80065f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	621a      	str	r2, [r3, #32]
}
 8006612:	bf00      	nop
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	feff8fff 	.word	0xfeff8fff
 8006624:	40010000 	.word	0x40010000
 8006628:	40010400 	.word	0x40010400

0800662c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4b2d      	ldr	r3, [pc, #180]	; (800670c <TIM_OC3_SetConfig+0xe0>)
 8006658:	4013      	ands	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f023 0303 	bic.w	r3, r3, #3
 8006662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4313      	orrs	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	021b      	lsls	r3, r3, #8
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	4313      	orrs	r3, r2
 8006680:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a22      	ldr	r2, [pc, #136]	; (8006710 <TIM_OC3_SetConfig+0xe4>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d003      	beq.n	8006692 <TIM_OC3_SetConfig+0x66>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a21      	ldr	r2, [pc, #132]	; (8006714 <TIM_OC3_SetConfig+0xe8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d10d      	bne.n	80066ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006698:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	021b      	lsls	r3, r3, #8
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a17      	ldr	r2, [pc, #92]	; (8006710 <TIM_OC3_SetConfig+0xe4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d003      	beq.n	80066be <TIM_OC3_SetConfig+0x92>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a16      	ldr	r2, [pc, #88]	; (8006714 <TIM_OC3_SetConfig+0xe8>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d113      	bne.n	80066e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	011b      	lsls	r3, r3, #4
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	621a      	str	r2, [r3, #32]
}
 8006700:	bf00      	nop
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	fffeff8f 	.word	0xfffeff8f
 8006710:	40010000 	.word	0x40010000
 8006714:	40010400 	.word	0x40010400

08006718 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4b1e      	ldr	r3, [pc, #120]	; (80067bc <TIM_OC4_SetConfig+0xa4>)
 8006744:	4013      	ands	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	021b      	lsls	r3, r3, #8
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	4313      	orrs	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006762:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	031b      	lsls	r3, r3, #12
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a13      	ldr	r2, [pc, #76]	; (80067c0 <TIM_OC4_SetConfig+0xa8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d003      	beq.n	8006780 <TIM_OC4_SetConfig+0x68>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a12      	ldr	r2, [pc, #72]	; (80067c4 <TIM_OC4_SetConfig+0xac>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d109      	bne.n	8006794 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006786:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	019b      	lsls	r3, r3, #6
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	4313      	orrs	r3, r2
 8006792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	621a      	str	r2, [r3, #32]
}
 80067ae:	bf00      	nop
 80067b0:	371c      	adds	r7, #28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	feff8fff 	.word	0xfeff8fff
 80067c0:	40010000 	.word	0x40010000
 80067c4:	40010400 	.word	0x40010400

080067c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4b1b      	ldr	r3, [pc, #108]	; (8006860 <TIM_OC5_SetConfig+0x98>)
 80067f4:	4013      	ands	r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	4313      	orrs	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006808:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	041b      	lsls	r3, r3, #16
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a12      	ldr	r2, [pc, #72]	; (8006864 <TIM_OC5_SetConfig+0x9c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d003      	beq.n	8006826 <TIM_OC5_SetConfig+0x5e>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a11      	ldr	r2, [pc, #68]	; (8006868 <TIM_OC5_SetConfig+0xa0>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d109      	bne.n	800683a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800682c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	021b      	lsls	r3, r3, #8
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	4313      	orrs	r3, r2
 8006838:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	621a      	str	r2, [r3, #32]
}
 8006854:	bf00      	nop
 8006856:	371c      	adds	r7, #28
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	fffeff8f 	.word	0xfffeff8f
 8006864:	40010000 	.word	0x40010000
 8006868:	40010400 	.word	0x40010400

0800686c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4b1c      	ldr	r3, [pc, #112]	; (8006908 <TIM_OC6_SetConfig+0x9c>)
 8006898:	4013      	ands	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	021b      	lsls	r3, r3, #8
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	051b      	lsls	r3, r3, #20
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a13      	ldr	r2, [pc, #76]	; (800690c <TIM_OC6_SetConfig+0xa0>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_OC6_SetConfig+0x60>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a12      	ldr	r2, [pc, #72]	; (8006910 <TIM_OC6_SetConfig+0xa4>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d109      	bne.n	80068e0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	029b      	lsls	r3, r3, #10
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	4313      	orrs	r3, r2
 80068de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	feff8fff 	.word	0xfeff8fff
 800690c:	40010000 	.word	0x40010000
 8006910:	40010400 	.word	0x40010400

08006914 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
 8006920:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	f023 0201 	bic.w	r2, r3, #1
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4a28      	ldr	r2, [pc, #160]	; (80069e0 <TIM_TI1_SetConfig+0xcc>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d01b      	beq.n	800697a <TIM_TI1_SetConfig+0x66>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006948:	d017      	beq.n	800697a <TIM_TI1_SetConfig+0x66>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4a25      	ldr	r2, [pc, #148]	; (80069e4 <TIM_TI1_SetConfig+0xd0>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d013      	beq.n	800697a <TIM_TI1_SetConfig+0x66>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	4a24      	ldr	r2, [pc, #144]	; (80069e8 <TIM_TI1_SetConfig+0xd4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00f      	beq.n	800697a <TIM_TI1_SetConfig+0x66>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	4a23      	ldr	r2, [pc, #140]	; (80069ec <TIM_TI1_SetConfig+0xd8>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00b      	beq.n	800697a <TIM_TI1_SetConfig+0x66>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	4a22      	ldr	r2, [pc, #136]	; (80069f0 <TIM_TI1_SetConfig+0xdc>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d007      	beq.n	800697a <TIM_TI1_SetConfig+0x66>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4a21      	ldr	r2, [pc, #132]	; (80069f4 <TIM_TI1_SetConfig+0xe0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d003      	beq.n	800697a <TIM_TI1_SetConfig+0x66>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4a20      	ldr	r2, [pc, #128]	; (80069f8 <TIM_TI1_SetConfig+0xe4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d101      	bne.n	800697e <TIM_TI1_SetConfig+0x6a>
 800697a:	2301      	movs	r3, #1
 800697c:	e000      	b.n	8006980 <TIM_TI1_SetConfig+0x6c>
 800697e:	2300      	movs	r3, #0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d008      	beq.n	8006996 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f023 0303 	bic.w	r3, r3, #3
 800698a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4313      	orrs	r3, r2
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	e003      	b.n	800699e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f043 0301 	orr.w	r3, r3, #1
 800699c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	011b      	lsls	r3, r3, #4
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f023 030a 	bic.w	r3, r3, #10
 80069b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	f003 030a 	and.w	r3, r3, #10
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	621a      	str	r2, [r3, #32]
}
 80069d2:	bf00      	nop
 80069d4:	371c      	adds	r7, #28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40010000 	.word	0x40010000
 80069e4:	40000400 	.word	0x40000400
 80069e8:	40000800 	.word	0x40000800
 80069ec:	40000c00 	.word	0x40000c00
 80069f0:	40010400 	.word	0x40010400
 80069f4:	40014000 	.word	0x40014000
 80069f8:	40001800 	.word	0x40001800

080069fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
 8006a0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	f023 0201 	bic.w	r2, r3, #1
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	011b      	lsls	r3, r3, #4
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f023 030a 	bic.w	r3, r3, #10
 8006a38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	621a      	str	r2, [r3, #32]
}
 8006a4e:	bf00      	nop
 8006a50:	371c      	adds	r7, #28
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b087      	sub	sp, #28
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	607a      	str	r2, [r7, #4]
 8006a66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	f023 0210 	bic.w	r2, r3, #16
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	021b      	lsls	r3, r3, #8
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	031b      	lsls	r3, r3, #12
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006aac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	011b      	lsls	r3, r3, #4
 8006ab2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	621a      	str	r2, [r3, #32]
}
 8006ac8:	bf00      	nop
 8006aca:	371c      	adds	r7, #28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	f023 0210 	bic.w	r2, r3, #16
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006afe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	031b      	lsls	r3, r3, #12
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	011b      	lsls	r3, r3, #4
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	621a      	str	r2, [r3, #32]
}
 8006b28:	bf00      	nop
 8006b2a:	371c      	adds	r7, #28
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f023 0303 	bic.w	r3, r3, #3
 8006b60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	011b      	lsls	r3, r3, #4
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006b84:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	021b      	lsls	r3, r3, #8
 8006b8a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	621a      	str	r2, [r3, #32]
}
 8006ba0:	bf00      	nop
 8006ba2:	371c      	adds	r7, #28
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bd8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	021b      	lsls	r3, r3, #8
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	031b      	lsls	r3, r3, #12
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006bfe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	031b      	lsls	r3, r3, #12
 8006c04:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	621a      	str	r2, [r3, #32]
}
 8006c1a:	bf00      	nop
 8006c1c:	371c      	adds	r7, #28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b085      	sub	sp, #20
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	f043 0307 	orr.w	r3, r3, #7
 8006c48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	609a      	str	r2, [r3, #8]
}
 8006c50:	bf00      	nop
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
 8006c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	021a      	lsls	r2, r3, #8
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	609a      	str	r2, [r3, #8]
}
 8006c90:	bf00      	nop
 8006c92:	371c      	adds	r7, #28
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	f003 031f 	and.w	r3, r3, #31
 8006cae:	2201      	movs	r2, #1
 8006cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6a1a      	ldr	r2, [r3, #32]
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	43db      	mvns	r3, r3
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6a1a      	ldr	r2, [r3, #32]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	f003 031f 	and.w	r3, r3, #31
 8006cce:	6879      	ldr	r1, [r7, #4]
 8006cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	621a      	str	r2, [r3, #32]
}
 8006cda:	bf00      	nop
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
	...

08006ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d101      	bne.n	8006d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	e06d      	b.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a30      	ldr	r2, [pc, #192]	; (8006de8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d004      	beq.n	8006d34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a2f      	ldr	r2, [pc, #188]	; (8006dec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d108      	bne.n	8006d46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a20      	ldr	r2, [pc, #128]	; (8006de8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d022      	beq.n	8006db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d72:	d01d      	beq.n	8006db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a1d      	ldr	r2, [pc, #116]	; (8006df0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d018      	beq.n	8006db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a1c      	ldr	r2, [pc, #112]	; (8006df4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d013      	beq.n	8006db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a1a      	ldr	r2, [pc, #104]	; (8006df8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d00e      	beq.n	8006db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a15      	ldr	r2, [pc, #84]	; (8006dec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d009      	beq.n	8006db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a16      	ldr	r2, [pc, #88]	; (8006dfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d004      	beq.n	8006db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a15      	ldr	r2, [pc, #84]	; (8006e00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d10c      	bne.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006db6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	40010000 	.word	0x40010000
 8006dec:	40010400 	.word	0x40010400
 8006df0:	40000400 	.word	0x40000400
 8006df4:	40000800 	.word	0x40000800
 8006df8:	40000c00 	.word	0x40000c00
 8006dfc:	40014000 	.word	0x40014000
 8006e00:	40001800 	.word	0x40001800

08006e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e040      	b.n	8006ed4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d106      	bne.n	8006e68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7fb fe12 	bl	8002a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2224      	movs	r2, #36	; 0x24
 8006e6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f022 0201 	bic.w	r2, r2, #1
 8006e7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fbe8 	bl	8007654 <UART_SetConfig>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d101      	bne.n	8006e8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e022      	b.n	8006ed4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d002      	beq.n	8006e9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fe40 	bl	8007b1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006eaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689a      	ldr	r2, [r3, #8]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006eba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f042 0201 	orr.w	r2, r2, #1
 8006eca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fec7 	bl	8007c60 <UART_CheckIdleState>
 8006ed2:	4603      	mov	r3, r0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b08b      	sub	sp, #44	; 0x2c
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eee:	2b20      	cmp	r3, #32
 8006ef0:	d156      	bne.n	8006fa0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <HAL_UART_Transmit_IT+0x22>
 8006ef8:	88fb      	ldrh	r3, [r7, #6]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e04f      	b.n	8006fa2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d101      	bne.n	8006f10 <HAL_UART_Transmit_IT+0x34>
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	e048      	b.n	8006fa2 <HAL_UART_Transmit_IT+0xc6>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	88fa      	ldrh	r2, [r7, #6]
 8006f22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	88fa      	ldrh	r2, [r7, #6]
 8006f2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2221      	movs	r2, #33	; 0x21
 8006f40:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f4a:	d107      	bne.n	8006f5c <HAL_UART_Transmit_IT+0x80>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d103      	bne.n	8006f5c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4a16      	ldr	r2, [pc, #88]	; (8006fb0 <HAL_UART_Transmit_IT+0xd4>)
 8006f58:	669a      	str	r2, [r3, #104]	; 0x68
 8006f5a:	e002      	b.n	8006f62 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4a15      	ldr	r2, [pc, #84]	; (8006fb4 <HAL_UART_Transmit_IT+0xd8>)
 8006f60:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	e853 3f00 	ldrex	r3, [r3]
 8006f76:	613b      	str	r3, [r7, #16]
   return(result);
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	461a      	mov	r2, r3
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	623b      	str	r3, [r7, #32]
 8006f8a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8c:	69f9      	ldr	r1, [r7, #28]
 8006f8e:	6a3a      	ldr	r2, [r7, #32]
 8006f90:	e841 2300 	strex	r3, r2, [r1]
 8006f94:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e6      	bne.n	8006f6a <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	e000      	b.n	8006fa2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006fa0:	2302      	movs	r3, #2
  }
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	372c      	adds	r7, #44	; 0x2c
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	080081b9 	.word	0x080081b9
 8006fb4:	08008103 	.word	0x08008103

08006fb8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b08a      	sub	sp, #40	; 0x28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	d13d      	bne.n	800704a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <HAL_UART_Receive_IT+0x22>
 8006fd4:	88fb      	ldrh	r3, [r7, #6]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e036      	b.n	800704c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d101      	bne.n	8006fec <HAL_UART_Receive_IT+0x34>
 8006fe8:	2302      	movs	r3, #2
 8006fea:	e02f      	b.n	800704c <HAL_UART_Receive_IT+0x94>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d018      	beq.n	800703a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	e853 3f00 	ldrex	r3, [r3]
 8007014:	613b      	str	r3, [r7, #16]
   return(result);
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800701c:	627b      	str	r3, [r7, #36]	; 0x24
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	461a      	mov	r2, r3
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	623b      	str	r3, [r7, #32]
 8007028:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702a:	69f9      	ldr	r1, [r7, #28]
 800702c:	6a3a      	ldr	r2, [r7, #32]
 800702e:	e841 2300 	strex	r3, r2, [r1]
 8007032:	61bb      	str	r3, [r7, #24]
   return(result);
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1e6      	bne.n	8007008 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	461a      	mov	r2, r3
 800703e:	68b9      	ldr	r1, [r7, #8]
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 ff1b 	bl	8007e7c <UART_Start_Receive_IT>
 8007046:	4603      	mov	r3, r0
 8007048:	e000      	b.n	800704c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800704a:	2302      	movs	r3, #2
  }
}
 800704c:	4618      	mov	r0, r3
 800704e:	3728      	adds	r7, #40	; 0x28
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b0ba      	sub	sp, #232	; 0xe8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800707a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800707e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007082:	4013      	ands	r3, r2
 8007084:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800708c:	2b00      	cmp	r3, #0
 800708e:	d115      	bne.n	80070bc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00f      	beq.n	80070bc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800709c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a0:	f003 0320 	and.w	r3, r3, #32
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d009      	beq.n	80070bc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 82a4 	beq.w	80075fa <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	4798      	blx	r3
      }
      return;
 80070ba:	e29e      	b.n	80075fa <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80070bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 8117 	beq.w	80072f4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80070c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d106      	bne.n	80070e0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80070d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80070d6:	4b85      	ldr	r3, [pc, #532]	; (80072ec <HAL_UART_IRQHandler+0x298>)
 80070d8:	4013      	ands	r3, r2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 810a 	beq.w	80072f4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d011      	beq.n	8007110 <HAL_UART_IRQHandler+0xbc>
 80070ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00b      	beq.n	8007110 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2201      	movs	r2, #1
 80070fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007106:	f043 0201 	orr.w	r2, r3, #1
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b00      	cmp	r3, #0
 800711a:	d011      	beq.n	8007140 <HAL_UART_IRQHandler+0xec>
 800711c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00b      	beq.n	8007140 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2202      	movs	r2, #2
 800712e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007136:	f043 0204 	orr.w	r2, r3, #4
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007144:	f003 0304 	and.w	r3, r3, #4
 8007148:	2b00      	cmp	r3, #0
 800714a:	d011      	beq.n	8007170 <HAL_UART_IRQHandler+0x11c>
 800714c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00b      	beq.n	8007170 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2204      	movs	r2, #4
 800715e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007166:	f043 0202 	orr.w	r2, r3, #2
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007174:	f003 0308 	and.w	r3, r3, #8
 8007178:	2b00      	cmp	r3, #0
 800717a:	d017      	beq.n	80071ac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800717c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007180:	f003 0320 	and.w	r3, r3, #32
 8007184:	2b00      	cmp	r3, #0
 8007186:	d105      	bne.n	8007194 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800718c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00b      	beq.n	80071ac <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2208      	movs	r2, #8
 800719a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071a2:	f043 0208 	orr.w	r2, r3, #8
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d012      	beq.n	80071de <HAL_UART_IRQHandler+0x18a>
 80071b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00c      	beq.n	80071de <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071d4:	f043 0220 	orr.w	r2, r3, #32
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 820a 	beq.w	80075fe <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80071ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00d      	beq.n	8007212 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071fa:	f003 0320 	and.w	r3, r3, #32
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d007      	beq.n	8007212 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007218:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007226:	2b40      	cmp	r3, #64	; 0x40
 8007228:	d005      	beq.n	8007236 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800722a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800722e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007232:	2b00      	cmp	r3, #0
 8007234:	d04f      	beq.n	80072d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 feea 	bl	8008010 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007246:	2b40      	cmp	r3, #64	; 0x40
 8007248:	d141      	bne.n	80072ce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3308      	adds	r3, #8
 8007250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007254:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007258:	e853 3f00 	ldrex	r3, [r3]
 800725c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007268:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	3308      	adds	r3, #8
 8007272:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007276:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800727a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007282:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007286:	e841 2300 	strex	r3, r2, [r1]
 800728a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800728e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1d9      	bne.n	800724a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729a:	2b00      	cmp	r3, #0
 800729c:	d013      	beq.n	80072c6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a2:	4a13      	ldr	r2, [pc, #76]	; (80072f0 <HAL_UART_IRQHandler+0x29c>)
 80072a4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fc f84c 	bl	8003348 <HAL_DMA_Abort_IT>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d017      	beq.n	80072e6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80072c0:	4610      	mov	r0, r2
 80072c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c4:	e00f      	b.n	80072e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f9a4 	bl	8007614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072cc:	e00b      	b.n	80072e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f9a0 	bl	8007614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d4:	e007      	b.n	80072e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f99c 	bl	8007614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80072e4:	e18b      	b.n	80075fe <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e6:	bf00      	nop
    return;
 80072e8:	e189      	b.n	80075fe <HAL_UART_IRQHandler+0x5aa>
 80072ea:	bf00      	nop
 80072ec:	04000120 	.word	0x04000120
 80072f0:	080080d7 	.word	0x080080d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	f040 8144 	bne.w	8007586 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80072fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007302:	f003 0310 	and.w	r3, r3, #16
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 813d 	beq.w	8007586 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800730c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007310:	f003 0310 	and.w	r3, r3, #16
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 8136 	beq.w	8007586 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2210      	movs	r2, #16
 8007320:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732c:	2b40      	cmp	r3, #64	; 0x40
 800732e:	f040 80b2 	bne.w	8007496 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800733e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007342:	2b00      	cmp	r3, #0
 8007344:	f000 815d 	beq.w	8007602 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800734e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007352:	429a      	cmp	r2, r3
 8007354:	f080 8155 	bcs.w	8007602 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800735e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800736c:	f000 8085 	beq.w	800747a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007378:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800737c:	e853 3f00 	ldrex	r3, [r3]
 8007380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007384:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800738c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	461a      	mov	r2, r3
 8007396:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800739a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800739e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073aa:	e841 2300 	strex	r3, r2, [r1]
 80073ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1da      	bne.n	8007370 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3308      	adds	r3, #8
 80073c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073c4:	e853 3f00 	ldrex	r3, [r3]
 80073c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073cc:	f023 0301 	bic.w	r3, r3, #1
 80073d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3308      	adds	r3, #8
 80073da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073ea:	e841 2300 	strex	r3, r2, [r1]
 80073ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1e1      	bne.n	80073ba <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3308      	adds	r3, #8
 80073fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800740c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3308      	adds	r3, #8
 8007416:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800741a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800741c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007420:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e3      	bne.n	80073f6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2220      	movs	r2, #32
 8007432:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007442:	e853 3f00 	ldrex	r3, [r3]
 8007446:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800744a:	f023 0310 	bic.w	r3, r3, #16
 800744e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	461a      	mov	r2, r3
 8007458:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800745c:	65bb      	str	r3, [r7, #88]	; 0x58
 800745e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007460:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007462:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007464:	e841 2300 	strex	r3, r2, [r1]
 8007468:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800746a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1e4      	bne.n	800743a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007474:	4618      	mov	r0, r3
 8007476:	f7fb fef7 	bl	8003268 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007486:	b29b      	uxth	r3, r3
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	b29b      	uxth	r3, r3
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f8ca 	bl	8007628 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007494:	e0b5      	b.n	8007602 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 80a7 	beq.w	8007606 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80074b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 80a2 	beq.w	8007606 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ca:	e853 3f00 	ldrex	r3, [r3]
 80074ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	461a      	mov	r2, r3
 80074e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074e4:	647b      	str	r3, [r7, #68]	; 0x44
 80074e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074ec:	e841 2300 	strex	r3, r2, [r1]
 80074f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e4      	bne.n	80074c2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3308      	adds	r3, #8
 80074fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	e853 3f00 	ldrex	r3, [r3]
 8007506:	623b      	str	r3, [r7, #32]
   return(result);
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	f023 0301 	bic.w	r3, r3, #1
 800750e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3308      	adds	r3, #8
 8007518:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800751c:	633a      	str	r2, [r7, #48]	; 0x30
 800751e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e3      	bne.n	80074f8 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2220      	movs	r2, #32
 8007534:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	e853 3f00 	ldrex	r3, [r3]
 800754e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 0310 	bic.w	r3, r3, #16
 8007556:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007564:	61fb      	str	r3, [r7, #28]
 8007566:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007568:	69b9      	ldr	r1, [r7, #24]
 800756a:	69fa      	ldr	r2, [r7, #28]
 800756c:	e841 2300 	strex	r3, r2, [r1]
 8007570:	617b      	str	r3, [r7, #20]
   return(result);
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1e4      	bne.n	8007542 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007578:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f852 	bl	8007628 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007584:	e03f      	b.n	8007606 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800758a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00e      	beq.n	80075b0 <HAL_UART_IRQHandler+0x55c>
 8007592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d008      	beq.n	80075b0 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80075a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 f849 	bl	8007640 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075ae:	e02d      	b.n	800760c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80075b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00e      	beq.n	80075da <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80075bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d008      	beq.n	80075da <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d01c      	beq.n	800760a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	4798      	blx	r3
    }
    return;
 80075d8:	e017      	b.n	800760a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d012      	beq.n	800760c <HAL_UART_IRQHandler+0x5b8>
 80075e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00c      	beq.n	800760c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fe40 	bl	8008278 <UART_EndTransmit_IT>
    return;
 80075f8:	e008      	b.n	800760c <HAL_UART_IRQHandler+0x5b8>
      return;
 80075fa:	bf00      	nop
 80075fc:	e006      	b.n	800760c <HAL_UART_IRQHandler+0x5b8>
    return;
 80075fe:	bf00      	nop
 8007600:	e004      	b.n	800760c <HAL_UART_IRQHandler+0x5b8>
      return;
 8007602:	bf00      	nop
 8007604:	e002      	b.n	800760c <HAL_UART_IRQHandler+0x5b8>
      return;
 8007606:	bf00      	nop
 8007608:	e000      	b.n	800760c <HAL_UART_IRQHandler+0x5b8>
    return;
 800760a:	bf00      	nop
  }

}
 800760c:	37e8      	adds	r7, #232	; 0xe8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop

08007614 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	460b      	mov	r3, r1
 8007632:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689a      	ldr	r2, [r3, #8]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	431a      	orrs	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	431a      	orrs	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	4313      	orrs	r3, r2
 8007676:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	4ba6      	ldr	r3, [pc, #664]	; (8007918 <UART_SetConfig+0x2c4>)
 8007680:	4013      	ands	r3, r2
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	6812      	ldr	r2, [r2, #0]
 8007686:	6979      	ldr	r1, [r7, #20]
 8007688:	430b      	orrs	r3, r1
 800768a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68da      	ldr	r2, [r3, #12]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a1b      	ldr	r3, [r3, #32]
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	430a      	orrs	r2, r1
 80076c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a94      	ldr	r2, [pc, #592]	; (800791c <UART_SetConfig+0x2c8>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d120      	bne.n	8007712 <UART_SetConfig+0xbe>
 80076d0:	4b93      	ldr	r3, [pc, #588]	; (8007920 <UART_SetConfig+0x2cc>)
 80076d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d6:	f003 0303 	and.w	r3, r3, #3
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d816      	bhi.n	800770c <UART_SetConfig+0xb8>
 80076de:	a201      	add	r2, pc, #4	; (adr r2, 80076e4 <UART_SetConfig+0x90>)
 80076e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e4:	080076f5 	.word	0x080076f5
 80076e8:	08007701 	.word	0x08007701
 80076ec:	080076fb 	.word	0x080076fb
 80076f0:	08007707 	.word	0x08007707
 80076f4:	2301      	movs	r3, #1
 80076f6:	77fb      	strb	r3, [r7, #31]
 80076f8:	e150      	b.n	800799c <UART_SetConfig+0x348>
 80076fa:	2302      	movs	r3, #2
 80076fc:	77fb      	strb	r3, [r7, #31]
 80076fe:	e14d      	b.n	800799c <UART_SetConfig+0x348>
 8007700:	2304      	movs	r3, #4
 8007702:	77fb      	strb	r3, [r7, #31]
 8007704:	e14a      	b.n	800799c <UART_SetConfig+0x348>
 8007706:	2308      	movs	r3, #8
 8007708:	77fb      	strb	r3, [r7, #31]
 800770a:	e147      	b.n	800799c <UART_SetConfig+0x348>
 800770c:	2310      	movs	r3, #16
 800770e:	77fb      	strb	r3, [r7, #31]
 8007710:	e144      	b.n	800799c <UART_SetConfig+0x348>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a83      	ldr	r2, [pc, #524]	; (8007924 <UART_SetConfig+0x2d0>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d132      	bne.n	8007782 <UART_SetConfig+0x12e>
 800771c:	4b80      	ldr	r3, [pc, #512]	; (8007920 <UART_SetConfig+0x2cc>)
 800771e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007722:	f003 030c 	and.w	r3, r3, #12
 8007726:	2b0c      	cmp	r3, #12
 8007728:	d828      	bhi.n	800777c <UART_SetConfig+0x128>
 800772a:	a201      	add	r2, pc, #4	; (adr r2, 8007730 <UART_SetConfig+0xdc>)
 800772c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007730:	08007765 	.word	0x08007765
 8007734:	0800777d 	.word	0x0800777d
 8007738:	0800777d 	.word	0x0800777d
 800773c:	0800777d 	.word	0x0800777d
 8007740:	08007771 	.word	0x08007771
 8007744:	0800777d 	.word	0x0800777d
 8007748:	0800777d 	.word	0x0800777d
 800774c:	0800777d 	.word	0x0800777d
 8007750:	0800776b 	.word	0x0800776b
 8007754:	0800777d 	.word	0x0800777d
 8007758:	0800777d 	.word	0x0800777d
 800775c:	0800777d 	.word	0x0800777d
 8007760:	08007777 	.word	0x08007777
 8007764:	2300      	movs	r3, #0
 8007766:	77fb      	strb	r3, [r7, #31]
 8007768:	e118      	b.n	800799c <UART_SetConfig+0x348>
 800776a:	2302      	movs	r3, #2
 800776c:	77fb      	strb	r3, [r7, #31]
 800776e:	e115      	b.n	800799c <UART_SetConfig+0x348>
 8007770:	2304      	movs	r3, #4
 8007772:	77fb      	strb	r3, [r7, #31]
 8007774:	e112      	b.n	800799c <UART_SetConfig+0x348>
 8007776:	2308      	movs	r3, #8
 8007778:	77fb      	strb	r3, [r7, #31]
 800777a:	e10f      	b.n	800799c <UART_SetConfig+0x348>
 800777c:	2310      	movs	r3, #16
 800777e:	77fb      	strb	r3, [r7, #31]
 8007780:	e10c      	b.n	800799c <UART_SetConfig+0x348>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a68      	ldr	r2, [pc, #416]	; (8007928 <UART_SetConfig+0x2d4>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d120      	bne.n	80077ce <UART_SetConfig+0x17a>
 800778c:	4b64      	ldr	r3, [pc, #400]	; (8007920 <UART_SetConfig+0x2cc>)
 800778e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007792:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007796:	2b30      	cmp	r3, #48	; 0x30
 8007798:	d013      	beq.n	80077c2 <UART_SetConfig+0x16e>
 800779a:	2b30      	cmp	r3, #48	; 0x30
 800779c:	d814      	bhi.n	80077c8 <UART_SetConfig+0x174>
 800779e:	2b20      	cmp	r3, #32
 80077a0:	d009      	beq.n	80077b6 <UART_SetConfig+0x162>
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	d810      	bhi.n	80077c8 <UART_SetConfig+0x174>
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d002      	beq.n	80077b0 <UART_SetConfig+0x15c>
 80077aa:	2b10      	cmp	r3, #16
 80077ac:	d006      	beq.n	80077bc <UART_SetConfig+0x168>
 80077ae:	e00b      	b.n	80077c8 <UART_SetConfig+0x174>
 80077b0:	2300      	movs	r3, #0
 80077b2:	77fb      	strb	r3, [r7, #31]
 80077b4:	e0f2      	b.n	800799c <UART_SetConfig+0x348>
 80077b6:	2302      	movs	r3, #2
 80077b8:	77fb      	strb	r3, [r7, #31]
 80077ba:	e0ef      	b.n	800799c <UART_SetConfig+0x348>
 80077bc:	2304      	movs	r3, #4
 80077be:	77fb      	strb	r3, [r7, #31]
 80077c0:	e0ec      	b.n	800799c <UART_SetConfig+0x348>
 80077c2:	2308      	movs	r3, #8
 80077c4:	77fb      	strb	r3, [r7, #31]
 80077c6:	e0e9      	b.n	800799c <UART_SetConfig+0x348>
 80077c8:	2310      	movs	r3, #16
 80077ca:	77fb      	strb	r3, [r7, #31]
 80077cc:	e0e6      	b.n	800799c <UART_SetConfig+0x348>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a56      	ldr	r2, [pc, #344]	; (800792c <UART_SetConfig+0x2d8>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d120      	bne.n	800781a <UART_SetConfig+0x1c6>
 80077d8:	4b51      	ldr	r3, [pc, #324]	; (8007920 <UART_SetConfig+0x2cc>)
 80077da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077e2:	2bc0      	cmp	r3, #192	; 0xc0
 80077e4:	d013      	beq.n	800780e <UART_SetConfig+0x1ba>
 80077e6:	2bc0      	cmp	r3, #192	; 0xc0
 80077e8:	d814      	bhi.n	8007814 <UART_SetConfig+0x1c0>
 80077ea:	2b80      	cmp	r3, #128	; 0x80
 80077ec:	d009      	beq.n	8007802 <UART_SetConfig+0x1ae>
 80077ee:	2b80      	cmp	r3, #128	; 0x80
 80077f0:	d810      	bhi.n	8007814 <UART_SetConfig+0x1c0>
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <UART_SetConfig+0x1a8>
 80077f6:	2b40      	cmp	r3, #64	; 0x40
 80077f8:	d006      	beq.n	8007808 <UART_SetConfig+0x1b4>
 80077fa:	e00b      	b.n	8007814 <UART_SetConfig+0x1c0>
 80077fc:	2300      	movs	r3, #0
 80077fe:	77fb      	strb	r3, [r7, #31]
 8007800:	e0cc      	b.n	800799c <UART_SetConfig+0x348>
 8007802:	2302      	movs	r3, #2
 8007804:	77fb      	strb	r3, [r7, #31]
 8007806:	e0c9      	b.n	800799c <UART_SetConfig+0x348>
 8007808:	2304      	movs	r3, #4
 800780a:	77fb      	strb	r3, [r7, #31]
 800780c:	e0c6      	b.n	800799c <UART_SetConfig+0x348>
 800780e:	2308      	movs	r3, #8
 8007810:	77fb      	strb	r3, [r7, #31]
 8007812:	e0c3      	b.n	800799c <UART_SetConfig+0x348>
 8007814:	2310      	movs	r3, #16
 8007816:	77fb      	strb	r3, [r7, #31]
 8007818:	e0c0      	b.n	800799c <UART_SetConfig+0x348>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a44      	ldr	r2, [pc, #272]	; (8007930 <UART_SetConfig+0x2dc>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d125      	bne.n	8007870 <UART_SetConfig+0x21c>
 8007824:	4b3e      	ldr	r3, [pc, #248]	; (8007920 <UART_SetConfig+0x2cc>)
 8007826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800782a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800782e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007832:	d017      	beq.n	8007864 <UART_SetConfig+0x210>
 8007834:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007838:	d817      	bhi.n	800786a <UART_SetConfig+0x216>
 800783a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800783e:	d00b      	beq.n	8007858 <UART_SetConfig+0x204>
 8007840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007844:	d811      	bhi.n	800786a <UART_SetConfig+0x216>
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <UART_SetConfig+0x1fe>
 800784a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800784e:	d006      	beq.n	800785e <UART_SetConfig+0x20a>
 8007850:	e00b      	b.n	800786a <UART_SetConfig+0x216>
 8007852:	2300      	movs	r3, #0
 8007854:	77fb      	strb	r3, [r7, #31]
 8007856:	e0a1      	b.n	800799c <UART_SetConfig+0x348>
 8007858:	2302      	movs	r3, #2
 800785a:	77fb      	strb	r3, [r7, #31]
 800785c:	e09e      	b.n	800799c <UART_SetConfig+0x348>
 800785e:	2304      	movs	r3, #4
 8007860:	77fb      	strb	r3, [r7, #31]
 8007862:	e09b      	b.n	800799c <UART_SetConfig+0x348>
 8007864:	2308      	movs	r3, #8
 8007866:	77fb      	strb	r3, [r7, #31]
 8007868:	e098      	b.n	800799c <UART_SetConfig+0x348>
 800786a:	2310      	movs	r3, #16
 800786c:	77fb      	strb	r3, [r7, #31]
 800786e:	e095      	b.n	800799c <UART_SetConfig+0x348>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a2f      	ldr	r2, [pc, #188]	; (8007934 <UART_SetConfig+0x2e0>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d125      	bne.n	80078c6 <UART_SetConfig+0x272>
 800787a:	4b29      	ldr	r3, [pc, #164]	; (8007920 <UART_SetConfig+0x2cc>)
 800787c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007880:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007884:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007888:	d017      	beq.n	80078ba <UART_SetConfig+0x266>
 800788a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800788e:	d817      	bhi.n	80078c0 <UART_SetConfig+0x26c>
 8007890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007894:	d00b      	beq.n	80078ae <UART_SetConfig+0x25a>
 8007896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800789a:	d811      	bhi.n	80078c0 <UART_SetConfig+0x26c>
 800789c:	2b00      	cmp	r3, #0
 800789e:	d003      	beq.n	80078a8 <UART_SetConfig+0x254>
 80078a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078a4:	d006      	beq.n	80078b4 <UART_SetConfig+0x260>
 80078a6:	e00b      	b.n	80078c0 <UART_SetConfig+0x26c>
 80078a8:	2301      	movs	r3, #1
 80078aa:	77fb      	strb	r3, [r7, #31]
 80078ac:	e076      	b.n	800799c <UART_SetConfig+0x348>
 80078ae:	2302      	movs	r3, #2
 80078b0:	77fb      	strb	r3, [r7, #31]
 80078b2:	e073      	b.n	800799c <UART_SetConfig+0x348>
 80078b4:	2304      	movs	r3, #4
 80078b6:	77fb      	strb	r3, [r7, #31]
 80078b8:	e070      	b.n	800799c <UART_SetConfig+0x348>
 80078ba:	2308      	movs	r3, #8
 80078bc:	77fb      	strb	r3, [r7, #31]
 80078be:	e06d      	b.n	800799c <UART_SetConfig+0x348>
 80078c0:	2310      	movs	r3, #16
 80078c2:	77fb      	strb	r3, [r7, #31]
 80078c4:	e06a      	b.n	800799c <UART_SetConfig+0x348>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a1b      	ldr	r2, [pc, #108]	; (8007938 <UART_SetConfig+0x2e4>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d138      	bne.n	8007942 <UART_SetConfig+0x2ee>
 80078d0:	4b13      	ldr	r3, [pc, #76]	; (8007920 <UART_SetConfig+0x2cc>)
 80078d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80078da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078de:	d017      	beq.n	8007910 <UART_SetConfig+0x2bc>
 80078e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078e4:	d82a      	bhi.n	800793c <UART_SetConfig+0x2e8>
 80078e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ea:	d00b      	beq.n	8007904 <UART_SetConfig+0x2b0>
 80078ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078f0:	d824      	bhi.n	800793c <UART_SetConfig+0x2e8>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <UART_SetConfig+0x2aa>
 80078f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078fa:	d006      	beq.n	800790a <UART_SetConfig+0x2b6>
 80078fc:	e01e      	b.n	800793c <UART_SetConfig+0x2e8>
 80078fe:	2300      	movs	r3, #0
 8007900:	77fb      	strb	r3, [r7, #31]
 8007902:	e04b      	b.n	800799c <UART_SetConfig+0x348>
 8007904:	2302      	movs	r3, #2
 8007906:	77fb      	strb	r3, [r7, #31]
 8007908:	e048      	b.n	800799c <UART_SetConfig+0x348>
 800790a:	2304      	movs	r3, #4
 800790c:	77fb      	strb	r3, [r7, #31]
 800790e:	e045      	b.n	800799c <UART_SetConfig+0x348>
 8007910:	2308      	movs	r3, #8
 8007912:	77fb      	strb	r3, [r7, #31]
 8007914:	e042      	b.n	800799c <UART_SetConfig+0x348>
 8007916:	bf00      	nop
 8007918:	efff69f3 	.word	0xefff69f3
 800791c:	40011000 	.word	0x40011000
 8007920:	40023800 	.word	0x40023800
 8007924:	40004400 	.word	0x40004400
 8007928:	40004800 	.word	0x40004800
 800792c:	40004c00 	.word	0x40004c00
 8007930:	40005000 	.word	0x40005000
 8007934:	40011400 	.word	0x40011400
 8007938:	40007800 	.word	0x40007800
 800793c:	2310      	movs	r3, #16
 800793e:	77fb      	strb	r3, [r7, #31]
 8007940:	e02c      	b.n	800799c <UART_SetConfig+0x348>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a72      	ldr	r2, [pc, #456]	; (8007b10 <UART_SetConfig+0x4bc>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d125      	bne.n	8007998 <UART_SetConfig+0x344>
 800794c:	4b71      	ldr	r3, [pc, #452]	; (8007b14 <UART_SetConfig+0x4c0>)
 800794e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007952:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007956:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800795a:	d017      	beq.n	800798c <UART_SetConfig+0x338>
 800795c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007960:	d817      	bhi.n	8007992 <UART_SetConfig+0x33e>
 8007962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007966:	d00b      	beq.n	8007980 <UART_SetConfig+0x32c>
 8007968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800796c:	d811      	bhi.n	8007992 <UART_SetConfig+0x33e>
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <UART_SetConfig+0x326>
 8007972:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007976:	d006      	beq.n	8007986 <UART_SetConfig+0x332>
 8007978:	e00b      	b.n	8007992 <UART_SetConfig+0x33e>
 800797a:	2300      	movs	r3, #0
 800797c:	77fb      	strb	r3, [r7, #31]
 800797e:	e00d      	b.n	800799c <UART_SetConfig+0x348>
 8007980:	2302      	movs	r3, #2
 8007982:	77fb      	strb	r3, [r7, #31]
 8007984:	e00a      	b.n	800799c <UART_SetConfig+0x348>
 8007986:	2304      	movs	r3, #4
 8007988:	77fb      	strb	r3, [r7, #31]
 800798a:	e007      	b.n	800799c <UART_SetConfig+0x348>
 800798c:	2308      	movs	r3, #8
 800798e:	77fb      	strb	r3, [r7, #31]
 8007990:	e004      	b.n	800799c <UART_SetConfig+0x348>
 8007992:	2310      	movs	r3, #16
 8007994:	77fb      	strb	r3, [r7, #31]
 8007996:	e001      	b.n	800799c <UART_SetConfig+0x348>
 8007998:	2310      	movs	r3, #16
 800799a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	69db      	ldr	r3, [r3, #28]
 80079a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079a4:	d15b      	bne.n	8007a5e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80079a6:	7ffb      	ldrb	r3, [r7, #31]
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	d828      	bhi.n	80079fe <UART_SetConfig+0x3aa>
 80079ac:	a201      	add	r2, pc, #4	; (adr r2, 80079b4 <UART_SetConfig+0x360>)
 80079ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b2:	bf00      	nop
 80079b4:	080079d9 	.word	0x080079d9
 80079b8:	080079e1 	.word	0x080079e1
 80079bc:	080079e9 	.word	0x080079e9
 80079c0:	080079ff 	.word	0x080079ff
 80079c4:	080079ef 	.word	0x080079ef
 80079c8:	080079ff 	.word	0x080079ff
 80079cc:	080079ff 	.word	0x080079ff
 80079d0:	080079ff 	.word	0x080079ff
 80079d4:	080079f7 	.word	0x080079f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079d8:	f7fc ff08 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 80079dc:	61b8      	str	r0, [r7, #24]
        break;
 80079de:	e013      	b.n	8007a08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079e0:	f7fc ff18 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 80079e4:	61b8      	str	r0, [r7, #24]
        break;
 80079e6:	e00f      	b.n	8007a08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079e8:	4b4b      	ldr	r3, [pc, #300]	; (8007b18 <UART_SetConfig+0x4c4>)
 80079ea:	61bb      	str	r3, [r7, #24]
        break;
 80079ec:	e00c      	b.n	8007a08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ee:	f7fc fe2b 	bl	8004648 <HAL_RCC_GetSysClockFreq>
 80079f2:	61b8      	str	r0, [r7, #24]
        break;
 80079f4:	e008      	b.n	8007a08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079fa:	61bb      	str	r3, [r7, #24]
        break;
 80079fc:	e004      	b.n	8007a08 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80079fe:	2300      	movs	r3, #0
 8007a00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	77bb      	strb	r3, [r7, #30]
        break;
 8007a06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d074      	beq.n	8007af8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	005a      	lsls	r2, r3, #1
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	085b      	lsrs	r3, r3, #1
 8007a18:	441a      	add	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	2b0f      	cmp	r3, #15
 8007a28:	d916      	bls.n	8007a58 <UART_SetConfig+0x404>
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a30:	d212      	bcs.n	8007a58 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	f023 030f 	bic.w	r3, r3, #15
 8007a3a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	085b      	lsrs	r3, r3, #1
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	f003 0307 	and.w	r3, r3, #7
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	89fb      	ldrh	r3, [r7, #14]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	89fa      	ldrh	r2, [r7, #14]
 8007a54:	60da      	str	r2, [r3, #12]
 8007a56:	e04f      	b.n	8007af8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	77bb      	strb	r3, [r7, #30]
 8007a5c:	e04c      	b.n	8007af8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a5e:	7ffb      	ldrb	r3, [r7, #31]
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	d828      	bhi.n	8007ab6 <UART_SetConfig+0x462>
 8007a64:	a201      	add	r2, pc, #4	; (adr r2, 8007a6c <UART_SetConfig+0x418>)
 8007a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6a:	bf00      	nop
 8007a6c:	08007a91 	.word	0x08007a91
 8007a70:	08007a99 	.word	0x08007a99
 8007a74:	08007aa1 	.word	0x08007aa1
 8007a78:	08007ab7 	.word	0x08007ab7
 8007a7c:	08007aa7 	.word	0x08007aa7
 8007a80:	08007ab7 	.word	0x08007ab7
 8007a84:	08007ab7 	.word	0x08007ab7
 8007a88:	08007ab7 	.word	0x08007ab7
 8007a8c:	08007aaf 	.word	0x08007aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a90:	f7fc feac 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 8007a94:	61b8      	str	r0, [r7, #24]
        break;
 8007a96:	e013      	b.n	8007ac0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a98:	f7fc febc 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 8007a9c:	61b8      	str	r0, [r7, #24]
        break;
 8007a9e:	e00f      	b.n	8007ac0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007aa0:	4b1d      	ldr	r3, [pc, #116]	; (8007b18 <UART_SetConfig+0x4c4>)
 8007aa2:	61bb      	str	r3, [r7, #24]
        break;
 8007aa4:	e00c      	b.n	8007ac0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aa6:	f7fc fdcf 	bl	8004648 <HAL_RCC_GetSysClockFreq>
 8007aaa:	61b8      	str	r0, [r7, #24]
        break;
 8007aac:	e008      	b.n	8007ac0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ab2:	61bb      	str	r3, [r7, #24]
        break;
 8007ab4:	e004      	b.n	8007ac0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	77bb      	strb	r3, [r7, #30]
        break;
 8007abe:	bf00      	nop
    }

    if (pclk != 0U)
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d018      	beq.n	8007af8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	085a      	lsrs	r2, r3, #1
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	441a      	add	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	2b0f      	cmp	r3, #15
 8007ade:	d909      	bls.n	8007af4 <UART_SetConfig+0x4a0>
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ae6:	d205      	bcs.n	8007af4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	60da      	str	r2, [r3, #12]
 8007af2:	e001      	b.n	8007af8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007b04:	7fbb      	ldrb	r3, [r7, #30]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3720      	adds	r7, #32
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	40007c00 	.word	0x40007c00
 8007b14:	40023800 	.word	0x40023800
 8007b18:	00f42400 	.word	0x00f42400

08007b1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b28:	f003 0301 	and.w	r3, r3, #1
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00a      	beq.n	8007b46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00a      	beq.n	8007b68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00a      	beq.n	8007b8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8e:	f003 0308 	and.w	r3, r3, #8
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00a      	beq.n	8007bac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	430a      	orrs	r2, r1
 8007baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb0:	f003 0310 	and.w	r3, r3, #16
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00a      	beq.n	8007bce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd2:	f003 0320 	and.w	r3, r3, #32
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00a      	beq.n	8007bf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	430a      	orrs	r2, r1
 8007bee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d01a      	beq.n	8007c32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c1a:	d10a      	bne.n	8007c32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00a      	beq.n	8007c54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	430a      	orrs	r2, r1
 8007c52:	605a      	str	r2, [r3, #4]
  }
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af02      	add	r7, sp, #8
 8007c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c70:	f7fb f8fc 	bl	8002e6c <HAL_GetTick>
 8007c74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0308 	and.w	r3, r3, #8
 8007c80:	2b08      	cmp	r3, #8
 8007c82:	d10e      	bne.n	8007ca2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f82d 	bl	8007cf2 <UART_WaitOnFlagUntilTimeout>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e023      	b.n	8007cea <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0304 	and.w	r3, r3, #4
 8007cac:	2b04      	cmp	r3, #4
 8007cae:	d10e      	bne.n	8007cce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f817 	bl	8007cf2 <UART_WaitOnFlagUntilTimeout>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e00d      	b.n	8007cea <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2220      	movs	r2, #32
 8007cd2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2220      	movs	r2, #32
 8007cd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b09c      	sub	sp, #112	; 0x70
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	60b9      	str	r1, [r7, #8]
 8007cfc:	603b      	str	r3, [r7, #0]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d02:	e0a5      	b.n	8007e50 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0a:	f000 80a1 	beq.w	8007e50 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d0e:	f7fb f8ad 	bl	8002e6c <HAL_GetTick>
 8007d12:	4602      	mov	r2, r0
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d302      	bcc.n	8007d24 <UART_WaitOnFlagUntilTimeout+0x32>
 8007d1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d13e      	bne.n	8007da2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d38:	667b      	str	r3, [r7, #100]	; 0x64
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d44:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e6      	bne.n	8007d24 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3308      	adds	r3, #8
 8007d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d60:	e853 3f00 	ldrex	r3, [r3]
 8007d64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d68:	f023 0301 	bic.w	r3, r3, #1
 8007d6c:	663b      	str	r3, [r7, #96]	; 0x60
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3308      	adds	r3, #8
 8007d74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d76:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d7e:	e841 2300 	strex	r3, r2, [r1]
 8007d82:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1e5      	bne.n	8007d56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2220      	movs	r2, #32
 8007d8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2220      	movs	r2, #32
 8007d94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e067      	b.n	8007e72 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0304 	and.w	r3, r3, #4
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d04f      	beq.n	8007e50 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	69db      	ldr	r3, [r3, #28]
 8007db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dbe:	d147      	bne.n	8007e50 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dc8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd2:	e853 3f00 	ldrex	r3, [r3]
 8007dd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007dde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	461a      	mov	r2, r3
 8007de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007de8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007df0:	e841 2300 	strex	r3, r2, [r1]
 8007df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1e6      	bne.n	8007dca <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3308      	adds	r3, #8
 8007e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	e853 3f00 	ldrex	r3, [r3]
 8007e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	f023 0301 	bic.w	r3, r3, #1
 8007e12:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3308      	adds	r3, #8
 8007e1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e1c:	623a      	str	r2, [r7, #32]
 8007e1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e20:	69f9      	ldr	r1, [r7, #28]
 8007e22:	6a3a      	ldr	r2, [r7, #32]
 8007e24:	e841 2300 	strex	r3, r2, [r1]
 8007e28:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1e5      	bne.n	8007dfc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2220      	movs	r2, #32
 8007e34:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2220      	movs	r2, #32
 8007e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e010      	b.n	8007e72 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	69da      	ldr	r2, [r3, #28]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	4013      	ands	r3, r2
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	bf0c      	ite	eq
 8007e60:	2301      	moveq	r3, #1
 8007e62:	2300      	movne	r3, #0
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	461a      	mov	r2, r3
 8007e68:	79fb      	ldrb	r3, [r7, #7]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	f43f af4a 	beq.w	8007d04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3770      	adds	r7, #112	; 0x70
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
	...

08007e7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b097      	sub	sp, #92	; 0x5c
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	4613      	mov	r3, r2
 8007e88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	88fa      	ldrh	r2, [r7, #6]
 8007e94:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	88fa      	ldrh	r2, [r7, #6]
 8007e9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eae:	d10e      	bne.n	8007ece <UART_Start_Receive_IT+0x52>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d105      	bne.n	8007ec4 <UART_Start_Receive_IT+0x48>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007ebe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ec2:	e02d      	b.n	8007f20 <UART_Start_Receive_IT+0xa4>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	22ff      	movs	r2, #255	; 0xff
 8007ec8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ecc:	e028      	b.n	8007f20 <UART_Start_Receive_IT+0xa4>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10d      	bne.n	8007ef2 <UART_Start_Receive_IT+0x76>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d104      	bne.n	8007ee8 <UART_Start_Receive_IT+0x6c>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	22ff      	movs	r2, #255	; 0xff
 8007ee2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ee6:	e01b      	b.n	8007f20 <UART_Start_Receive_IT+0xa4>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	227f      	movs	r2, #127	; 0x7f
 8007eec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ef0:	e016      	b.n	8007f20 <UART_Start_Receive_IT+0xa4>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007efa:	d10d      	bne.n	8007f18 <UART_Start_Receive_IT+0x9c>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d104      	bne.n	8007f0e <UART_Start_Receive_IT+0x92>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	227f      	movs	r2, #127	; 0x7f
 8007f08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f0c:	e008      	b.n	8007f20 <UART_Start_Receive_IT+0xa4>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	223f      	movs	r2, #63	; 0x3f
 8007f12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f16:	e003      	b.n	8007f20 <UART_Start_Receive_IT+0xa4>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2222      	movs	r2, #34	; 0x22
 8007f2c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	3308      	adds	r3, #8
 8007f34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f38:	e853 3f00 	ldrex	r3, [r3]
 8007f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f40:	f043 0301 	orr.w	r3, r3, #1
 8007f44:	657b      	str	r3, [r7, #84]	; 0x54
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3308      	adds	r3, #8
 8007f4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f56:	e841 2300 	strex	r3, r2, [r1]
 8007f5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1e5      	bne.n	8007f2e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f6a:	d107      	bne.n	8007f7c <UART_Start_Receive_IT+0x100>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d103      	bne.n	8007f7c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4a24      	ldr	r2, [pc, #144]	; (8008008 <UART_Start_Receive_IT+0x18c>)
 8007f78:	665a      	str	r2, [r3, #100]	; 0x64
 8007f7a:	e002      	b.n	8007f82 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	4a23      	ldr	r2, [pc, #140]	; (800800c <UART_Start_Receive_IT+0x190>)
 8007f80:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d019      	beq.n	8007fc6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	e853 3f00 	ldrex	r3, [r3]
 8007f9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	461a      	mov	r2, r3
 8007fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8007fb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fb8:	e841 2300 	strex	r3, r2, [r1]
 8007fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1e6      	bne.n	8007f92 <UART_Start_Receive_IT+0x116>
 8007fc4:	e018      	b.n	8007ff8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	e853 3f00 	ldrex	r3, [r3]
 8007fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	f043 0320 	orr.w	r3, r3, #32
 8007fda:	653b      	str	r3, [r7, #80]	; 0x50
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fe4:	623b      	str	r3, [r7, #32]
 8007fe6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe8:	69f9      	ldr	r1, [r7, #28]
 8007fea:	6a3a      	ldr	r2, [r7, #32]
 8007fec:	e841 2300 	strex	r3, r2, [r1]
 8007ff0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1e6      	bne.n	8007fc6 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	375c      	adds	r7, #92	; 0x5c
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	08008429 	.word	0x08008429
 800800c:	080082cd 	.word	0x080082cd

08008010 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008010:	b480      	push	{r7}
 8008012:	b095      	sub	sp, #84	; 0x54
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008020:	e853 3f00 	ldrex	r3, [r3]
 8008024:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008028:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800802c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008036:	643b      	str	r3, [r7, #64]	; 0x40
 8008038:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800803c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800803e:	e841 2300 	strex	r3, r2, [r1]
 8008042:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1e6      	bne.n	8008018 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3308      	adds	r3, #8
 8008050:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008052:	6a3b      	ldr	r3, [r7, #32]
 8008054:	e853 3f00 	ldrex	r3, [r3]
 8008058:	61fb      	str	r3, [r7, #28]
   return(result);
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	f023 0301 	bic.w	r3, r3, #1
 8008060:	64bb      	str	r3, [r7, #72]	; 0x48
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3308      	adds	r3, #8
 8008068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800806a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800806c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008072:	e841 2300 	strex	r3, r2, [r1]
 8008076:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1e5      	bne.n	800804a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008082:	2b01      	cmp	r3, #1
 8008084:	d118      	bne.n	80080b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	60bb      	str	r3, [r7, #8]
   return(result);
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f023 0310 	bic.w	r3, r3, #16
 800809a:	647b      	str	r3, [r7, #68]	; 0x44
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	461a      	mov	r2, r3
 80080a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080a4:	61bb      	str	r3, [r7, #24]
 80080a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a8:	6979      	ldr	r1, [r7, #20]
 80080aa:	69ba      	ldr	r2, [r7, #24]
 80080ac:	e841 2300 	strex	r3, r2, [r1]
 80080b0:	613b      	str	r3, [r7, #16]
   return(result);
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1e6      	bne.n	8008086 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2220      	movs	r2, #32
 80080bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80080ca:	bf00      	nop
 80080cc:	3754      	adds	r7, #84	; 0x54
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b084      	sub	sp, #16
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f7ff fa8d 	bl	8007614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080fa:	bf00      	nop
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008102:	b480      	push	{r7}
 8008104:	b08f      	sub	sp, #60	; 0x3c
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800810e:	2b21      	cmp	r3, #33	; 0x21
 8008110:	d14c      	bne.n	80081ac <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008118:	b29b      	uxth	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d132      	bne.n	8008184 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	e853 3f00 	ldrex	r3, [r3]
 800812a:	61fb      	str	r3, [r7, #28]
   return(result);
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008132:	637b      	str	r3, [r7, #52]	; 0x34
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	461a      	mov	r2, r3
 800813a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800813c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800813e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008144:	e841 2300 	strex	r3, r2, [r1]
 8008148:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1e6      	bne.n	800811e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	e853 3f00 	ldrex	r3, [r3]
 800815c:	60bb      	str	r3, [r7, #8]
   return(result);
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008164:	633b      	str	r3, [r7, #48]	; 0x30
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	461a      	mov	r2, r3
 800816c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816e:	61bb      	str	r3, [r7, #24]
 8008170:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008172:	6979      	ldr	r1, [r7, #20]
 8008174:	69ba      	ldr	r2, [r7, #24]
 8008176:	e841 2300 	strex	r3, r2, [r1]
 800817a:	613b      	str	r3, [r7, #16]
   return(result);
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1e6      	bne.n	8008150 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008182:	e013      	b.n	80081ac <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008188:	781a      	ldrb	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80081ac:	bf00      	nop
 80081ae:	373c      	adds	r7, #60	; 0x3c
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b091      	sub	sp, #68	; 0x44
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081c4:	2b21      	cmp	r3, #33	; 0x21
 80081c6:	d151      	bne.n	800826c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d132      	bne.n	800823a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	e853 3f00 	ldrex	r3, [r3]
 80081e0:	623b      	str	r3, [r7, #32]
   return(result);
 80081e2:	6a3b      	ldr	r3, [r7, #32]
 80081e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f2:	633b      	str	r3, [r7, #48]	; 0x30
 80081f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081fa:	e841 2300 	strex	r3, r2, [r1]
 80081fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1e6      	bne.n	80081d4 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	e853 3f00 	ldrex	r3, [r3]
 8008212:	60fb      	str	r3, [r7, #12]
   return(result);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800821a:	637b      	str	r3, [r7, #52]	; 0x34
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	461a      	mov	r2, r3
 8008222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008224:	61fb      	str	r3, [r7, #28]
 8008226:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008228:	69b9      	ldr	r1, [r7, #24]
 800822a:	69fa      	ldr	r2, [r7, #28]
 800822c:	e841 2300 	strex	r3, r2, [r1]
 8008230:	617b      	str	r3, [r7, #20]
   return(result);
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1e6      	bne.n	8008206 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008238:	e018      	b.n	800826c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008242:	881b      	ldrh	r3, [r3, #0]
 8008244:	461a      	mov	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800824e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008254:	1c9a      	adds	r2, r3, #2
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008260:	b29b      	uxth	r3, r3
 8008262:	3b01      	subs	r3, #1
 8008264:	b29a      	uxth	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800826c:	bf00      	nop
 800826e:	3744      	adds	r7, #68	; 0x44
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b088      	sub	sp, #32
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	e853 3f00 	ldrex	r3, [r3]
 800828c:	60bb      	str	r3, [r7, #8]
   return(result);
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008294:	61fb      	str	r3, [r7, #28]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	61bb      	str	r3, [r7, #24]
 80082a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a2:	6979      	ldr	r1, [r7, #20]
 80082a4:	69ba      	ldr	r2, [r7, #24]
 80082a6:	e841 2300 	strex	r3, r2, [r1]
 80082aa:	613b      	str	r3, [r7, #16]
   return(result);
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1e6      	bne.n	8008280 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2220      	movs	r2, #32
 80082b6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7fa fd20 	bl	8002d04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082c4:	bf00      	nop
 80082c6:	3720      	adds	r7, #32
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b096      	sub	sp, #88	; 0x58
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082da:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082e2:	2b22      	cmp	r3, #34	; 0x22
 80082e4:	f040 8094 	bne.w	8008410 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ee:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80082f2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80082f6:	b2d9      	uxtb	r1, r3
 80082f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008302:	400a      	ands	r2, r1
 8008304:	b2d2      	uxtb	r2, r2
 8008306:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800830c:	1c5a      	adds	r2, r3, #1
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008318:	b29b      	uxth	r3, r3
 800831a:	3b01      	subs	r3, #1
 800831c:	b29a      	uxth	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800832a:	b29b      	uxth	r3, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	d177      	bne.n	8008420 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008338:	e853 3f00 	ldrex	r3, [r3]
 800833c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800833e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008340:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008344:	653b      	str	r3, [r7, #80]	; 0x50
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	461a      	mov	r2, r3
 800834c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800834e:	647b      	str	r3, [r7, #68]	; 0x44
 8008350:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008352:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008354:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008356:	e841 2300 	strex	r3, r2, [r1]
 800835a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800835c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1e6      	bne.n	8008330 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	3308      	adds	r3, #8
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	e853 3f00 	ldrex	r3, [r3]
 8008370:	623b      	str	r3, [r7, #32]
   return(result);
 8008372:	6a3b      	ldr	r3, [r7, #32]
 8008374:	f023 0301 	bic.w	r3, r3, #1
 8008378:	64fb      	str	r3, [r7, #76]	; 0x4c
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	3308      	adds	r3, #8
 8008380:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008382:	633a      	str	r2, [r7, #48]	; 0x30
 8008384:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008386:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800838a:	e841 2300 	strex	r3, r2, [r1]
 800838e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1e5      	bne.n	8008362 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2220      	movs	r2, #32
 800839a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d12e      	bne.n	8008408 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	e853 3f00 	ldrex	r3, [r3]
 80083bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f023 0310 	bic.w	r3, r3, #16
 80083c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	461a      	mov	r2, r3
 80083cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083ce:	61fb      	str	r3, [r7, #28]
 80083d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d2:	69b9      	ldr	r1, [r7, #24]
 80083d4:	69fa      	ldr	r2, [r7, #28]
 80083d6:	e841 2300 	strex	r3, r2, [r1]
 80083da:	617b      	str	r3, [r7, #20]
   return(result);
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1e6      	bne.n	80083b0 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	f003 0310 	and.w	r3, r3, #16
 80083ec:	2b10      	cmp	r3, #16
 80083ee:	d103      	bne.n	80083f8 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2210      	movs	r2, #16
 80083f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80083fe:	4619      	mov	r1, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7ff f911 	bl	8007628 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008406:	e00b      	b.n	8008420 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7fa fc11 	bl	8002c30 <HAL_UART_RxCpltCallback>
}
 800840e:	e007      	b.n	8008420 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	699a      	ldr	r2, [r3, #24]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f042 0208 	orr.w	r2, r2, #8
 800841e:	619a      	str	r2, [r3, #24]
}
 8008420:	bf00      	nop
 8008422:	3758      	adds	r7, #88	; 0x58
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b096      	sub	sp, #88	; 0x58
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008436:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800843e:	2b22      	cmp	r3, #34	; 0x22
 8008440:	f040 8094 	bne.w	800856c <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008452:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008454:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008458:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800845c:	4013      	ands	r3, r2
 800845e:	b29a      	uxth	r2, r3
 8008460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008462:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008468:	1c9a      	adds	r2, r3, #2
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008474:	b29b      	uxth	r3, r3
 8008476:	3b01      	subs	r3, #1
 8008478:	b29a      	uxth	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008486:	b29b      	uxth	r3, r3
 8008488:	2b00      	cmp	r3, #0
 800848a:	d177      	bne.n	800857c <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	461a      	mov	r2, r3
 80084a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084aa:	643b      	str	r3, [r7, #64]	; 0x40
 80084ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e6      	bne.n	800848c <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	3308      	adds	r3, #8
 80084c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c6:	6a3b      	ldr	r3, [r7, #32]
 80084c8:	e853 3f00 	ldrex	r3, [r3]
 80084cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	f023 0301 	bic.w	r3, r3, #1
 80084d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3308      	adds	r3, #8
 80084dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084e6:	e841 2300 	strex	r3, r2, [r1]
 80084ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1e5      	bne.n	80084be <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2220      	movs	r2, #32
 80084f6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008502:	2b01      	cmp	r3, #1
 8008504:	d12e      	bne.n	8008564 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	e853 3f00 	ldrex	r3, [r3]
 8008518:	60bb      	str	r3, [r7, #8]
   return(result);
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	f023 0310 	bic.w	r3, r3, #16
 8008520:	647b      	str	r3, [r7, #68]	; 0x44
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	461a      	mov	r2, r3
 8008528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800852a:	61bb      	str	r3, [r7, #24]
 800852c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852e:	6979      	ldr	r1, [r7, #20]
 8008530:	69ba      	ldr	r2, [r7, #24]
 8008532:	e841 2300 	strex	r3, r2, [r1]
 8008536:	613b      	str	r3, [r7, #16]
   return(result);
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1e6      	bne.n	800850c <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	69db      	ldr	r3, [r3, #28]
 8008544:	f003 0310 	and.w	r3, r3, #16
 8008548:	2b10      	cmp	r3, #16
 800854a:	d103      	bne.n	8008554 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2210      	movs	r2, #16
 8008552:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800855a:	4619      	mov	r1, r3
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f7ff f863 	bl	8007628 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008562:	e00b      	b.n	800857c <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f7fa fb63 	bl	8002c30 <HAL_UART_RxCpltCallback>
}
 800856a:	e007      	b.n	800857c <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	699a      	ldr	r2, [r3, #24]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f042 0208 	orr.w	r2, r2, #8
 800857a:	619a      	str	r2, [r3, #24]
}
 800857c:	bf00      	nop
 800857e:	3758      	adds	r7, #88	; 0x58
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <__errno>:
 8008584:	4b01      	ldr	r3, [pc, #4]	; (800858c <__errno+0x8>)
 8008586:	6818      	ldr	r0, [r3, #0]
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	2000004c 	.word	0x2000004c

08008590 <__libc_init_array>:
 8008590:	b570      	push	{r4, r5, r6, lr}
 8008592:	4d0d      	ldr	r5, [pc, #52]	; (80085c8 <__libc_init_array+0x38>)
 8008594:	4c0d      	ldr	r4, [pc, #52]	; (80085cc <__libc_init_array+0x3c>)
 8008596:	1b64      	subs	r4, r4, r5
 8008598:	10a4      	asrs	r4, r4, #2
 800859a:	2600      	movs	r6, #0
 800859c:	42a6      	cmp	r6, r4
 800859e:	d109      	bne.n	80085b4 <__libc_init_array+0x24>
 80085a0:	4d0b      	ldr	r5, [pc, #44]	; (80085d0 <__libc_init_array+0x40>)
 80085a2:	4c0c      	ldr	r4, [pc, #48]	; (80085d4 <__libc_init_array+0x44>)
 80085a4:	f004 ffd2 	bl	800d54c <_init>
 80085a8:	1b64      	subs	r4, r4, r5
 80085aa:	10a4      	asrs	r4, r4, #2
 80085ac:	2600      	movs	r6, #0
 80085ae:	42a6      	cmp	r6, r4
 80085b0:	d105      	bne.n	80085be <__libc_init_array+0x2e>
 80085b2:	bd70      	pop	{r4, r5, r6, pc}
 80085b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b8:	4798      	blx	r3
 80085ba:	3601      	adds	r6, #1
 80085bc:	e7ee      	b.n	800859c <__libc_init_array+0xc>
 80085be:	f855 3b04 	ldr.w	r3, [r5], #4
 80085c2:	4798      	blx	r3
 80085c4:	3601      	adds	r6, #1
 80085c6:	e7f2      	b.n	80085ae <__libc_init_array+0x1e>
 80085c8:	0800dbfc 	.word	0x0800dbfc
 80085cc:	0800dbfc 	.word	0x0800dbfc
 80085d0:	0800dbfc 	.word	0x0800dbfc
 80085d4:	0800dc00 	.word	0x0800dc00

080085d8 <memset>:
 80085d8:	4402      	add	r2, r0
 80085da:	4603      	mov	r3, r0
 80085dc:	4293      	cmp	r3, r2
 80085de:	d100      	bne.n	80085e2 <memset+0xa>
 80085e0:	4770      	bx	lr
 80085e2:	f803 1b01 	strb.w	r1, [r3], #1
 80085e6:	e7f9      	b.n	80085dc <memset+0x4>

080085e8 <__cvt>:
 80085e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ea:	ed2d 8b02 	vpush	{d8}
 80085ee:	eeb0 8b40 	vmov.f64	d8, d0
 80085f2:	b085      	sub	sp, #20
 80085f4:	4617      	mov	r7, r2
 80085f6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80085f8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80085fa:	ee18 2a90 	vmov	r2, s17
 80085fe:	f025 0520 	bic.w	r5, r5, #32
 8008602:	2a00      	cmp	r2, #0
 8008604:	bfb6      	itet	lt
 8008606:	222d      	movlt	r2, #45	; 0x2d
 8008608:	2200      	movge	r2, #0
 800860a:	eeb1 8b40 	vneglt.f64	d8, d0
 800860e:	2d46      	cmp	r5, #70	; 0x46
 8008610:	460c      	mov	r4, r1
 8008612:	701a      	strb	r2, [r3, #0]
 8008614:	d004      	beq.n	8008620 <__cvt+0x38>
 8008616:	2d45      	cmp	r5, #69	; 0x45
 8008618:	d100      	bne.n	800861c <__cvt+0x34>
 800861a:	3401      	adds	r4, #1
 800861c:	2102      	movs	r1, #2
 800861e:	e000      	b.n	8008622 <__cvt+0x3a>
 8008620:	2103      	movs	r1, #3
 8008622:	ab03      	add	r3, sp, #12
 8008624:	9301      	str	r3, [sp, #4]
 8008626:	ab02      	add	r3, sp, #8
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	4622      	mov	r2, r4
 800862c:	4633      	mov	r3, r6
 800862e:	eeb0 0b48 	vmov.f64	d0, d8
 8008632:	f001 fde9 	bl	800a208 <_dtoa_r>
 8008636:	2d47      	cmp	r5, #71	; 0x47
 8008638:	d101      	bne.n	800863e <__cvt+0x56>
 800863a:	07fb      	lsls	r3, r7, #31
 800863c:	d51a      	bpl.n	8008674 <__cvt+0x8c>
 800863e:	2d46      	cmp	r5, #70	; 0x46
 8008640:	eb00 0204 	add.w	r2, r0, r4
 8008644:	d10c      	bne.n	8008660 <__cvt+0x78>
 8008646:	7803      	ldrb	r3, [r0, #0]
 8008648:	2b30      	cmp	r3, #48	; 0x30
 800864a:	d107      	bne.n	800865c <__cvt+0x74>
 800864c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008654:	bf1c      	itt	ne
 8008656:	f1c4 0401 	rsbne	r4, r4, #1
 800865a:	6034      	strne	r4, [r6, #0]
 800865c:	6833      	ldr	r3, [r6, #0]
 800865e:	441a      	add	r2, r3
 8008660:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008668:	bf08      	it	eq
 800866a:	9203      	streq	r2, [sp, #12]
 800866c:	2130      	movs	r1, #48	; 0x30
 800866e:	9b03      	ldr	r3, [sp, #12]
 8008670:	4293      	cmp	r3, r2
 8008672:	d307      	bcc.n	8008684 <__cvt+0x9c>
 8008674:	9b03      	ldr	r3, [sp, #12]
 8008676:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008678:	1a1b      	subs	r3, r3, r0
 800867a:	6013      	str	r3, [r2, #0]
 800867c:	b005      	add	sp, #20
 800867e:	ecbd 8b02 	vpop	{d8}
 8008682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008684:	1c5c      	adds	r4, r3, #1
 8008686:	9403      	str	r4, [sp, #12]
 8008688:	7019      	strb	r1, [r3, #0]
 800868a:	e7f0      	b.n	800866e <__cvt+0x86>

0800868c <__exponent>:
 800868c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800868e:	4603      	mov	r3, r0
 8008690:	2900      	cmp	r1, #0
 8008692:	bfb8      	it	lt
 8008694:	4249      	neglt	r1, r1
 8008696:	f803 2b02 	strb.w	r2, [r3], #2
 800869a:	bfb4      	ite	lt
 800869c:	222d      	movlt	r2, #45	; 0x2d
 800869e:	222b      	movge	r2, #43	; 0x2b
 80086a0:	2909      	cmp	r1, #9
 80086a2:	7042      	strb	r2, [r0, #1]
 80086a4:	dd2a      	ble.n	80086fc <__exponent+0x70>
 80086a6:	f10d 0407 	add.w	r4, sp, #7
 80086aa:	46a4      	mov	ip, r4
 80086ac:	270a      	movs	r7, #10
 80086ae:	46a6      	mov	lr, r4
 80086b0:	460a      	mov	r2, r1
 80086b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80086b6:	fb07 1516 	mls	r5, r7, r6, r1
 80086ba:	3530      	adds	r5, #48	; 0x30
 80086bc:	2a63      	cmp	r2, #99	; 0x63
 80086be:	f104 34ff 	add.w	r4, r4, #4294967295
 80086c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80086c6:	4631      	mov	r1, r6
 80086c8:	dcf1      	bgt.n	80086ae <__exponent+0x22>
 80086ca:	3130      	adds	r1, #48	; 0x30
 80086cc:	f1ae 0502 	sub.w	r5, lr, #2
 80086d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80086d4:	1c44      	adds	r4, r0, #1
 80086d6:	4629      	mov	r1, r5
 80086d8:	4561      	cmp	r1, ip
 80086da:	d30a      	bcc.n	80086f2 <__exponent+0x66>
 80086dc:	f10d 0209 	add.w	r2, sp, #9
 80086e0:	eba2 020e 	sub.w	r2, r2, lr
 80086e4:	4565      	cmp	r5, ip
 80086e6:	bf88      	it	hi
 80086e8:	2200      	movhi	r2, #0
 80086ea:	4413      	add	r3, r2
 80086ec:	1a18      	subs	r0, r3, r0
 80086ee:	b003      	add	sp, #12
 80086f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80086fa:	e7ed      	b.n	80086d8 <__exponent+0x4c>
 80086fc:	2330      	movs	r3, #48	; 0x30
 80086fe:	3130      	adds	r1, #48	; 0x30
 8008700:	7083      	strb	r3, [r0, #2]
 8008702:	70c1      	strb	r1, [r0, #3]
 8008704:	1d03      	adds	r3, r0, #4
 8008706:	e7f1      	b.n	80086ec <__exponent+0x60>

08008708 <_printf_float>:
 8008708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800870c:	b08b      	sub	sp, #44	; 0x2c
 800870e:	460c      	mov	r4, r1
 8008710:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008714:	4616      	mov	r6, r2
 8008716:	461f      	mov	r7, r3
 8008718:	4605      	mov	r5, r0
 800871a:	f002 fe53 	bl	800b3c4 <_localeconv_r>
 800871e:	f8d0 b000 	ldr.w	fp, [r0]
 8008722:	4658      	mov	r0, fp
 8008724:	f7f7 fd96 	bl	8000254 <strlen>
 8008728:	2300      	movs	r3, #0
 800872a:	9308      	str	r3, [sp, #32]
 800872c:	f8d8 3000 	ldr.w	r3, [r8]
 8008730:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008734:	6822      	ldr	r2, [r4, #0]
 8008736:	3307      	adds	r3, #7
 8008738:	f023 0307 	bic.w	r3, r3, #7
 800873c:	f103 0108 	add.w	r1, r3, #8
 8008740:	f8c8 1000 	str.w	r1, [r8]
 8008744:	4682      	mov	sl, r0
 8008746:	e9d3 0100 	ldrd	r0, r1, [r3]
 800874a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800874e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80089b0 <_printf_float+0x2a8>
 8008752:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008756:	eeb0 6bc0 	vabs.f64	d6, d0
 800875a:	eeb4 6b47 	vcmp.f64	d6, d7
 800875e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008762:	dd24      	ble.n	80087ae <_printf_float+0xa6>
 8008764:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800876c:	d502      	bpl.n	8008774 <_printf_float+0x6c>
 800876e:	232d      	movs	r3, #45	; 0x2d
 8008770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008774:	4b90      	ldr	r3, [pc, #576]	; (80089b8 <_printf_float+0x2b0>)
 8008776:	4891      	ldr	r0, [pc, #580]	; (80089bc <_printf_float+0x2b4>)
 8008778:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800877c:	bf94      	ite	ls
 800877e:	4698      	movls	r8, r3
 8008780:	4680      	movhi	r8, r0
 8008782:	2303      	movs	r3, #3
 8008784:	6123      	str	r3, [r4, #16]
 8008786:	f022 0204 	bic.w	r2, r2, #4
 800878a:	2300      	movs	r3, #0
 800878c:	6022      	str	r2, [r4, #0]
 800878e:	9304      	str	r3, [sp, #16]
 8008790:	9700      	str	r7, [sp, #0]
 8008792:	4633      	mov	r3, r6
 8008794:	aa09      	add	r2, sp, #36	; 0x24
 8008796:	4621      	mov	r1, r4
 8008798:	4628      	mov	r0, r5
 800879a:	f000 f9d3 	bl	8008b44 <_printf_common>
 800879e:	3001      	adds	r0, #1
 80087a0:	f040 808a 	bne.w	80088b8 <_printf_float+0x1b0>
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295
 80087a8:	b00b      	add	sp, #44	; 0x2c
 80087aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ae:	eeb4 0b40 	vcmp.f64	d0, d0
 80087b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b6:	d709      	bvc.n	80087cc <_printf_float+0xc4>
 80087b8:	ee10 3a90 	vmov	r3, s1
 80087bc:	2b00      	cmp	r3, #0
 80087be:	bfbc      	itt	lt
 80087c0:	232d      	movlt	r3, #45	; 0x2d
 80087c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80087c6:	487e      	ldr	r0, [pc, #504]	; (80089c0 <_printf_float+0x2b8>)
 80087c8:	4b7e      	ldr	r3, [pc, #504]	; (80089c4 <_printf_float+0x2bc>)
 80087ca:	e7d5      	b.n	8008778 <_printf_float+0x70>
 80087cc:	6863      	ldr	r3, [r4, #4]
 80087ce:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80087d2:	9104      	str	r1, [sp, #16]
 80087d4:	1c59      	adds	r1, r3, #1
 80087d6:	d13c      	bne.n	8008852 <_printf_float+0x14a>
 80087d8:	2306      	movs	r3, #6
 80087da:	6063      	str	r3, [r4, #4]
 80087dc:	2300      	movs	r3, #0
 80087de:	9303      	str	r3, [sp, #12]
 80087e0:	ab08      	add	r3, sp, #32
 80087e2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80087e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087ea:	ab07      	add	r3, sp, #28
 80087ec:	6861      	ldr	r1, [r4, #4]
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	6022      	str	r2, [r4, #0]
 80087f2:	f10d 031b 	add.w	r3, sp, #27
 80087f6:	4628      	mov	r0, r5
 80087f8:	f7ff fef6 	bl	80085e8 <__cvt>
 80087fc:	9b04      	ldr	r3, [sp, #16]
 80087fe:	9907      	ldr	r1, [sp, #28]
 8008800:	2b47      	cmp	r3, #71	; 0x47
 8008802:	4680      	mov	r8, r0
 8008804:	d108      	bne.n	8008818 <_printf_float+0x110>
 8008806:	1cc8      	adds	r0, r1, #3
 8008808:	db02      	blt.n	8008810 <_printf_float+0x108>
 800880a:	6863      	ldr	r3, [r4, #4]
 800880c:	4299      	cmp	r1, r3
 800880e:	dd41      	ble.n	8008894 <_printf_float+0x18c>
 8008810:	f1a9 0902 	sub.w	r9, r9, #2
 8008814:	fa5f f989 	uxtb.w	r9, r9
 8008818:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800881c:	d820      	bhi.n	8008860 <_printf_float+0x158>
 800881e:	3901      	subs	r1, #1
 8008820:	464a      	mov	r2, r9
 8008822:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008826:	9107      	str	r1, [sp, #28]
 8008828:	f7ff ff30 	bl	800868c <__exponent>
 800882c:	9a08      	ldr	r2, [sp, #32]
 800882e:	9004      	str	r0, [sp, #16]
 8008830:	1813      	adds	r3, r2, r0
 8008832:	2a01      	cmp	r2, #1
 8008834:	6123      	str	r3, [r4, #16]
 8008836:	dc02      	bgt.n	800883e <_printf_float+0x136>
 8008838:	6822      	ldr	r2, [r4, #0]
 800883a:	07d2      	lsls	r2, r2, #31
 800883c:	d501      	bpl.n	8008842 <_printf_float+0x13a>
 800883e:	3301      	adds	r3, #1
 8008840:	6123      	str	r3, [r4, #16]
 8008842:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d0a2      	beq.n	8008790 <_printf_float+0x88>
 800884a:	232d      	movs	r3, #45	; 0x2d
 800884c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008850:	e79e      	b.n	8008790 <_printf_float+0x88>
 8008852:	9904      	ldr	r1, [sp, #16]
 8008854:	2947      	cmp	r1, #71	; 0x47
 8008856:	d1c1      	bne.n	80087dc <_printf_float+0xd4>
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1bf      	bne.n	80087dc <_printf_float+0xd4>
 800885c:	2301      	movs	r3, #1
 800885e:	e7bc      	b.n	80087da <_printf_float+0xd2>
 8008860:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008864:	d118      	bne.n	8008898 <_printf_float+0x190>
 8008866:	2900      	cmp	r1, #0
 8008868:	6863      	ldr	r3, [r4, #4]
 800886a:	dd0b      	ble.n	8008884 <_printf_float+0x17c>
 800886c:	6121      	str	r1, [r4, #16]
 800886e:	b913      	cbnz	r3, 8008876 <_printf_float+0x16e>
 8008870:	6822      	ldr	r2, [r4, #0]
 8008872:	07d0      	lsls	r0, r2, #31
 8008874:	d502      	bpl.n	800887c <_printf_float+0x174>
 8008876:	3301      	adds	r3, #1
 8008878:	440b      	add	r3, r1
 800887a:	6123      	str	r3, [r4, #16]
 800887c:	2300      	movs	r3, #0
 800887e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008880:	9304      	str	r3, [sp, #16]
 8008882:	e7de      	b.n	8008842 <_printf_float+0x13a>
 8008884:	b913      	cbnz	r3, 800888c <_printf_float+0x184>
 8008886:	6822      	ldr	r2, [r4, #0]
 8008888:	07d2      	lsls	r2, r2, #31
 800888a:	d501      	bpl.n	8008890 <_printf_float+0x188>
 800888c:	3302      	adds	r3, #2
 800888e:	e7f4      	b.n	800887a <_printf_float+0x172>
 8008890:	2301      	movs	r3, #1
 8008892:	e7f2      	b.n	800887a <_printf_float+0x172>
 8008894:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008898:	9b08      	ldr	r3, [sp, #32]
 800889a:	4299      	cmp	r1, r3
 800889c:	db05      	blt.n	80088aa <_printf_float+0x1a2>
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	6121      	str	r1, [r4, #16]
 80088a2:	07d8      	lsls	r0, r3, #31
 80088a4:	d5ea      	bpl.n	800887c <_printf_float+0x174>
 80088a6:	1c4b      	adds	r3, r1, #1
 80088a8:	e7e7      	b.n	800887a <_printf_float+0x172>
 80088aa:	2900      	cmp	r1, #0
 80088ac:	bfd4      	ite	le
 80088ae:	f1c1 0202 	rsble	r2, r1, #2
 80088b2:	2201      	movgt	r2, #1
 80088b4:	4413      	add	r3, r2
 80088b6:	e7e0      	b.n	800887a <_printf_float+0x172>
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	055a      	lsls	r2, r3, #21
 80088bc:	d407      	bmi.n	80088ce <_printf_float+0x1c6>
 80088be:	6923      	ldr	r3, [r4, #16]
 80088c0:	4642      	mov	r2, r8
 80088c2:	4631      	mov	r1, r6
 80088c4:	4628      	mov	r0, r5
 80088c6:	47b8      	blx	r7
 80088c8:	3001      	adds	r0, #1
 80088ca:	d12a      	bne.n	8008922 <_printf_float+0x21a>
 80088cc:	e76a      	b.n	80087a4 <_printf_float+0x9c>
 80088ce:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80088d2:	f240 80e2 	bls.w	8008a9a <_printf_float+0x392>
 80088d6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80088da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80088de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e2:	d133      	bne.n	800894c <_printf_float+0x244>
 80088e4:	4a38      	ldr	r2, [pc, #224]	; (80089c8 <_printf_float+0x2c0>)
 80088e6:	2301      	movs	r3, #1
 80088e8:	4631      	mov	r1, r6
 80088ea:	4628      	mov	r0, r5
 80088ec:	47b8      	blx	r7
 80088ee:	3001      	adds	r0, #1
 80088f0:	f43f af58 	beq.w	80087a4 <_printf_float+0x9c>
 80088f4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	db02      	blt.n	8008902 <_printf_float+0x1fa>
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	07d8      	lsls	r0, r3, #31
 8008900:	d50f      	bpl.n	8008922 <_printf_float+0x21a>
 8008902:	4653      	mov	r3, sl
 8008904:	465a      	mov	r2, fp
 8008906:	4631      	mov	r1, r6
 8008908:	4628      	mov	r0, r5
 800890a:	47b8      	blx	r7
 800890c:	3001      	adds	r0, #1
 800890e:	f43f af49 	beq.w	80087a4 <_printf_float+0x9c>
 8008912:	f04f 0800 	mov.w	r8, #0
 8008916:	f104 091a 	add.w	r9, r4, #26
 800891a:	9b08      	ldr	r3, [sp, #32]
 800891c:	3b01      	subs	r3, #1
 800891e:	4543      	cmp	r3, r8
 8008920:	dc09      	bgt.n	8008936 <_printf_float+0x22e>
 8008922:	6823      	ldr	r3, [r4, #0]
 8008924:	079b      	lsls	r3, r3, #30
 8008926:	f100 8108 	bmi.w	8008b3a <_printf_float+0x432>
 800892a:	68e0      	ldr	r0, [r4, #12]
 800892c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800892e:	4298      	cmp	r0, r3
 8008930:	bfb8      	it	lt
 8008932:	4618      	movlt	r0, r3
 8008934:	e738      	b.n	80087a8 <_printf_float+0xa0>
 8008936:	2301      	movs	r3, #1
 8008938:	464a      	mov	r2, r9
 800893a:	4631      	mov	r1, r6
 800893c:	4628      	mov	r0, r5
 800893e:	47b8      	blx	r7
 8008940:	3001      	adds	r0, #1
 8008942:	f43f af2f 	beq.w	80087a4 <_printf_float+0x9c>
 8008946:	f108 0801 	add.w	r8, r8, #1
 800894a:	e7e6      	b.n	800891a <_printf_float+0x212>
 800894c:	9b07      	ldr	r3, [sp, #28]
 800894e:	2b00      	cmp	r3, #0
 8008950:	dc3c      	bgt.n	80089cc <_printf_float+0x2c4>
 8008952:	4a1d      	ldr	r2, [pc, #116]	; (80089c8 <_printf_float+0x2c0>)
 8008954:	2301      	movs	r3, #1
 8008956:	4631      	mov	r1, r6
 8008958:	4628      	mov	r0, r5
 800895a:	47b8      	blx	r7
 800895c:	3001      	adds	r0, #1
 800895e:	f43f af21 	beq.w	80087a4 <_printf_float+0x9c>
 8008962:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008966:	4313      	orrs	r3, r2
 8008968:	d102      	bne.n	8008970 <_printf_float+0x268>
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	07d9      	lsls	r1, r3, #31
 800896e:	d5d8      	bpl.n	8008922 <_printf_float+0x21a>
 8008970:	4653      	mov	r3, sl
 8008972:	465a      	mov	r2, fp
 8008974:	4631      	mov	r1, r6
 8008976:	4628      	mov	r0, r5
 8008978:	47b8      	blx	r7
 800897a:	3001      	adds	r0, #1
 800897c:	f43f af12 	beq.w	80087a4 <_printf_float+0x9c>
 8008980:	f04f 0900 	mov.w	r9, #0
 8008984:	f104 0a1a 	add.w	sl, r4, #26
 8008988:	9b07      	ldr	r3, [sp, #28]
 800898a:	425b      	negs	r3, r3
 800898c:	454b      	cmp	r3, r9
 800898e:	dc01      	bgt.n	8008994 <_printf_float+0x28c>
 8008990:	9b08      	ldr	r3, [sp, #32]
 8008992:	e795      	b.n	80088c0 <_printf_float+0x1b8>
 8008994:	2301      	movs	r3, #1
 8008996:	4652      	mov	r2, sl
 8008998:	4631      	mov	r1, r6
 800899a:	4628      	mov	r0, r5
 800899c:	47b8      	blx	r7
 800899e:	3001      	adds	r0, #1
 80089a0:	f43f af00 	beq.w	80087a4 <_printf_float+0x9c>
 80089a4:	f109 0901 	add.w	r9, r9, #1
 80089a8:	e7ee      	b.n	8008988 <_printf_float+0x280>
 80089aa:	bf00      	nop
 80089ac:	f3af 8000 	nop.w
 80089b0:	ffffffff 	.word	0xffffffff
 80089b4:	7fefffff 	.word	0x7fefffff
 80089b8:	0800d73c 	.word	0x0800d73c
 80089bc:	0800d740 	.word	0x0800d740
 80089c0:	0800d748 	.word	0x0800d748
 80089c4:	0800d744 	.word	0x0800d744
 80089c8:	0800db41 	.word	0x0800db41
 80089cc:	9a08      	ldr	r2, [sp, #32]
 80089ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089d0:	429a      	cmp	r2, r3
 80089d2:	bfa8      	it	ge
 80089d4:	461a      	movge	r2, r3
 80089d6:	2a00      	cmp	r2, #0
 80089d8:	4691      	mov	r9, r2
 80089da:	dc38      	bgt.n	8008a4e <_printf_float+0x346>
 80089dc:	2300      	movs	r3, #0
 80089de:	9305      	str	r3, [sp, #20]
 80089e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089e4:	f104 021a 	add.w	r2, r4, #26
 80089e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089ea:	9905      	ldr	r1, [sp, #20]
 80089ec:	9304      	str	r3, [sp, #16]
 80089ee:	eba3 0309 	sub.w	r3, r3, r9
 80089f2:	428b      	cmp	r3, r1
 80089f4:	dc33      	bgt.n	8008a5e <_printf_float+0x356>
 80089f6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	db3c      	blt.n	8008a78 <_printf_float+0x370>
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	07da      	lsls	r2, r3, #31
 8008a02:	d439      	bmi.n	8008a78 <_printf_float+0x370>
 8008a04:	9b08      	ldr	r3, [sp, #32]
 8008a06:	9a04      	ldr	r2, [sp, #16]
 8008a08:	9907      	ldr	r1, [sp, #28]
 8008a0a:	1a9a      	subs	r2, r3, r2
 8008a0c:	eba3 0901 	sub.w	r9, r3, r1
 8008a10:	4591      	cmp	r9, r2
 8008a12:	bfa8      	it	ge
 8008a14:	4691      	movge	r9, r2
 8008a16:	f1b9 0f00 	cmp.w	r9, #0
 8008a1a:	dc35      	bgt.n	8008a88 <_printf_float+0x380>
 8008a1c:	f04f 0800 	mov.w	r8, #0
 8008a20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a24:	f104 0a1a 	add.w	sl, r4, #26
 8008a28:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008a2c:	1a9b      	subs	r3, r3, r2
 8008a2e:	eba3 0309 	sub.w	r3, r3, r9
 8008a32:	4543      	cmp	r3, r8
 8008a34:	f77f af75 	ble.w	8008922 <_printf_float+0x21a>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	4652      	mov	r2, sl
 8008a3c:	4631      	mov	r1, r6
 8008a3e:	4628      	mov	r0, r5
 8008a40:	47b8      	blx	r7
 8008a42:	3001      	adds	r0, #1
 8008a44:	f43f aeae 	beq.w	80087a4 <_printf_float+0x9c>
 8008a48:	f108 0801 	add.w	r8, r8, #1
 8008a4c:	e7ec      	b.n	8008a28 <_printf_float+0x320>
 8008a4e:	4613      	mov	r3, r2
 8008a50:	4631      	mov	r1, r6
 8008a52:	4642      	mov	r2, r8
 8008a54:	4628      	mov	r0, r5
 8008a56:	47b8      	blx	r7
 8008a58:	3001      	adds	r0, #1
 8008a5a:	d1bf      	bne.n	80089dc <_printf_float+0x2d4>
 8008a5c:	e6a2      	b.n	80087a4 <_printf_float+0x9c>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	4631      	mov	r1, r6
 8008a62:	4628      	mov	r0, r5
 8008a64:	9204      	str	r2, [sp, #16]
 8008a66:	47b8      	blx	r7
 8008a68:	3001      	adds	r0, #1
 8008a6a:	f43f ae9b 	beq.w	80087a4 <_printf_float+0x9c>
 8008a6e:	9b05      	ldr	r3, [sp, #20]
 8008a70:	9a04      	ldr	r2, [sp, #16]
 8008a72:	3301      	adds	r3, #1
 8008a74:	9305      	str	r3, [sp, #20]
 8008a76:	e7b7      	b.n	80089e8 <_printf_float+0x2e0>
 8008a78:	4653      	mov	r3, sl
 8008a7a:	465a      	mov	r2, fp
 8008a7c:	4631      	mov	r1, r6
 8008a7e:	4628      	mov	r0, r5
 8008a80:	47b8      	blx	r7
 8008a82:	3001      	adds	r0, #1
 8008a84:	d1be      	bne.n	8008a04 <_printf_float+0x2fc>
 8008a86:	e68d      	b.n	80087a4 <_printf_float+0x9c>
 8008a88:	9a04      	ldr	r2, [sp, #16]
 8008a8a:	464b      	mov	r3, r9
 8008a8c:	4442      	add	r2, r8
 8008a8e:	4631      	mov	r1, r6
 8008a90:	4628      	mov	r0, r5
 8008a92:	47b8      	blx	r7
 8008a94:	3001      	adds	r0, #1
 8008a96:	d1c1      	bne.n	8008a1c <_printf_float+0x314>
 8008a98:	e684      	b.n	80087a4 <_printf_float+0x9c>
 8008a9a:	9a08      	ldr	r2, [sp, #32]
 8008a9c:	2a01      	cmp	r2, #1
 8008a9e:	dc01      	bgt.n	8008aa4 <_printf_float+0x39c>
 8008aa0:	07db      	lsls	r3, r3, #31
 8008aa2:	d537      	bpl.n	8008b14 <_printf_float+0x40c>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	4642      	mov	r2, r8
 8008aa8:	4631      	mov	r1, r6
 8008aaa:	4628      	mov	r0, r5
 8008aac:	47b8      	blx	r7
 8008aae:	3001      	adds	r0, #1
 8008ab0:	f43f ae78 	beq.w	80087a4 <_printf_float+0x9c>
 8008ab4:	4653      	mov	r3, sl
 8008ab6:	465a      	mov	r2, fp
 8008ab8:	4631      	mov	r1, r6
 8008aba:	4628      	mov	r0, r5
 8008abc:	47b8      	blx	r7
 8008abe:	3001      	adds	r0, #1
 8008ac0:	f43f ae70 	beq.w	80087a4 <_printf_float+0x9c>
 8008ac4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008ac8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad0:	d01b      	beq.n	8008b0a <_printf_float+0x402>
 8008ad2:	9b08      	ldr	r3, [sp, #32]
 8008ad4:	f108 0201 	add.w	r2, r8, #1
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	4631      	mov	r1, r6
 8008adc:	4628      	mov	r0, r5
 8008ade:	47b8      	blx	r7
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	d10e      	bne.n	8008b02 <_printf_float+0x3fa>
 8008ae4:	e65e      	b.n	80087a4 <_printf_float+0x9c>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	464a      	mov	r2, r9
 8008aea:	4631      	mov	r1, r6
 8008aec:	4628      	mov	r0, r5
 8008aee:	47b8      	blx	r7
 8008af0:	3001      	adds	r0, #1
 8008af2:	f43f ae57 	beq.w	80087a4 <_printf_float+0x9c>
 8008af6:	f108 0801 	add.w	r8, r8, #1
 8008afa:	9b08      	ldr	r3, [sp, #32]
 8008afc:	3b01      	subs	r3, #1
 8008afe:	4543      	cmp	r3, r8
 8008b00:	dcf1      	bgt.n	8008ae6 <_printf_float+0x3de>
 8008b02:	9b04      	ldr	r3, [sp, #16]
 8008b04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b08:	e6db      	b.n	80088c2 <_printf_float+0x1ba>
 8008b0a:	f04f 0800 	mov.w	r8, #0
 8008b0e:	f104 091a 	add.w	r9, r4, #26
 8008b12:	e7f2      	b.n	8008afa <_printf_float+0x3f2>
 8008b14:	2301      	movs	r3, #1
 8008b16:	4642      	mov	r2, r8
 8008b18:	e7df      	b.n	8008ada <_printf_float+0x3d2>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	464a      	mov	r2, r9
 8008b1e:	4631      	mov	r1, r6
 8008b20:	4628      	mov	r0, r5
 8008b22:	47b8      	blx	r7
 8008b24:	3001      	adds	r0, #1
 8008b26:	f43f ae3d 	beq.w	80087a4 <_printf_float+0x9c>
 8008b2a:	f108 0801 	add.w	r8, r8, #1
 8008b2e:	68e3      	ldr	r3, [r4, #12]
 8008b30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b32:	1a5b      	subs	r3, r3, r1
 8008b34:	4543      	cmp	r3, r8
 8008b36:	dcf0      	bgt.n	8008b1a <_printf_float+0x412>
 8008b38:	e6f7      	b.n	800892a <_printf_float+0x222>
 8008b3a:	f04f 0800 	mov.w	r8, #0
 8008b3e:	f104 0919 	add.w	r9, r4, #25
 8008b42:	e7f4      	b.n	8008b2e <_printf_float+0x426>

08008b44 <_printf_common>:
 8008b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b48:	4616      	mov	r6, r2
 8008b4a:	4699      	mov	r9, r3
 8008b4c:	688a      	ldr	r2, [r1, #8]
 8008b4e:	690b      	ldr	r3, [r1, #16]
 8008b50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b54:	4293      	cmp	r3, r2
 8008b56:	bfb8      	it	lt
 8008b58:	4613      	movlt	r3, r2
 8008b5a:	6033      	str	r3, [r6, #0]
 8008b5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b60:	4607      	mov	r7, r0
 8008b62:	460c      	mov	r4, r1
 8008b64:	b10a      	cbz	r2, 8008b6a <_printf_common+0x26>
 8008b66:	3301      	adds	r3, #1
 8008b68:	6033      	str	r3, [r6, #0]
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	0699      	lsls	r1, r3, #26
 8008b6e:	bf42      	ittt	mi
 8008b70:	6833      	ldrmi	r3, [r6, #0]
 8008b72:	3302      	addmi	r3, #2
 8008b74:	6033      	strmi	r3, [r6, #0]
 8008b76:	6825      	ldr	r5, [r4, #0]
 8008b78:	f015 0506 	ands.w	r5, r5, #6
 8008b7c:	d106      	bne.n	8008b8c <_printf_common+0x48>
 8008b7e:	f104 0a19 	add.w	sl, r4, #25
 8008b82:	68e3      	ldr	r3, [r4, #12]
 8008b84:	6832      	ldr	r2, [r6, #0]
 8008b86:	1a9b      	subs	r3, r3, r2
 8008b88:	42ab      	cmp	r3, r5
 8008b8a:	dc26      	bgt.n	8008bda <_printf_common+0x96>
 8008b8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b90:	1e13      	subs	r3, r2, #0
 8008b92:	6822      	ldr	r2, [r4, #0]
 8008b94:	bf18      	it	ne
 8008b96:	2301      	movne	r3, #1
 8008b98:	0692      	lsls	r2, r2, #26
 8008b9a:	d42b      	bmi.n	8008bf4 <_printf_common+0xb0>
 8008b9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ba0:	4649      	mov	r1, r9
 8008ba2:	4638      	mov	r0, r7
 8008ba4:	47c0      	blx	r8
 8008ba6:	3001      	adds	r0, #1
 8008ba8:	d01e      	beq.n	8008be8 <_printf_common+0xa4>
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	68e5      	ldr	r5, [r4, #12]
 8008bae:	6832      	ldr	r2, [r6, #0]
 8008bb0:	f003 0306 	and.w	r3, r3, #6
 8008bb4:	2b04      	cmp	r3, #4
 8008bb6:	bf08      	it	eq
 8008bb8:	1aad      	subeq	r5, r5, r2
 8008bba:	68a3      	ldr	r3, [r4, #8]
 8008bbc:	6922      	ldr	r2, [r4, #16]
 8008bbe:	bf0c      	ite	eq
 8008bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bc4:	2500      	movne	r5, #0
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	bfc4      	itt	gt
 8008bca:	1a9b      	subgt	r3, r3, r2
 8008bcc:	18ed      	addgt	r5, r5, r3
 8008bce:	2600      	movs	r6, #0
 8008bd0:	341a      	adds	r4, #26
 8008bd2:	42b5      	cmp	r5, r6
 8008bd4:	d11a      	bne.n	8008c0c <_printf_common+0xc8>
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	e008      	b.n	8008bec <_printf_common+0xa8>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	4652      	mov	r2, sl
 8008bde:	4649      	mov	r1, r9
 8008be0:	4638      	mov	r0, r7
 8008be2:	47c0      	blx	r8
 8008be4:	3001      	adds	r0, #1
 8008be6:	d103      	bne.n	8008bf0 <_printf_common+0xac>
 8008be8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf0:	3501      	adds	r5, #1
 8008bf2:	e7c6      	b.n	8008b82 <_printf_common+0x3e>
 8008bf4:	18e1      	adds	r1, r4, r3
 8008bf6:	1c5a      	adds	r2, r3, #1
 8008bf8:	2030      	movs	r0, #48	; 0x30
 8008bfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bfe:	4422      	add	r2, r4
 8008c00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c08:	3302      	adds	r3, #2
 8008c0a:	e7c7      	b.n	8008b9c <_printf_common+0x58>
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	4622      	mov	r2, r4
 8008c10:	4649      	mov	r1, r9
 8008c12:	4638      	mov	r0, r7
 8008c14:	47c0      	blx	r8
 8008c16:	3001      	adds	r0, #1
 8008c18:	d0e6      	beq.n	8008be8 <_printf_common+0xa4>
 8008c1a:	3601      	adds	r6, #1
 8008c1c:	e7d9      	b.n	8008bd2 <_printf_common+0x8e>
	...

08008c20 <_printf_i>:
 8008c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c24:	7e0f      	ldrb	r7, [r1, #24]
 8008c26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c28:	2f78      	cmp	r7, #120	; 0x78
 8008c2a:	4691      	mov	r9, r2
 8008c2c:	4680      	mov	r8, r0
 8008c2e:	460c      	mov	r4, r1
 8008c30:	469a      	mov	sl, r3
 8008c32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c36:	d807      	bhi.n	8008c48 <_printf_i+0x28>
 8008c38:	2f62      	cmp	r7, #98	; 0x62
 8008c3a:	d80a      	bhi.n	8008c52 <_printf_i+0x32>
 8008c3c:	2f00      	cmp	r7, #0
 8008c3e:	f000 80d8 	beq.w	8008df2 <_printf_i+0x1d2>
 8008c42:	2f58      	cmp	r7, #88	; 0x58
 8008c44:	f000 80a3 	beq.w	8008d8e <_printf_i+0x16e>
 8008c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c50:	e03a      	b.n	8008cc8 <_printf_i+0xa8>
 8008c52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c56:	2b15      	cmp	r3, #21
 8008c58:	d8f6      	bhi.n	8008c48 <_printf_i+0x28>
 8008c5a:	a101      	add	r1, pc, #4	; (adr r1, 8008c60 <_printf_i+0x40>)
 8008c5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c60:	08008cb9 	.word	0x08008cb9
 8008c64:	08008ccd 	.word	0x08008ccd
 8008c68:	08008c49 	.word	0x08008c49
 8008c6c:	08008c49 	.word	0x08008c49
 8008c70:	08008c49 	.word	0x08008c49
 8008c74:	08008c49 	.word	0x08008c49
 8008c78:	08008ccd 	.word	0x08008ccd
 8008c7c:	08008c49 	.word	0x08008c49
 8008c80:	08008c49 	.word	0x08008c49
 8008c84:	08008c49 	.word	0x08008c49
 8008c88:	08008c49 	.word	0x08008c49
 8008c8c:	08008dd9 	.word	0x08008dd9
 8008c90:	08008cfd 	.word	0x08008cfd
 8008c94:	08008dbb 	.word	0x08008dbb
 8008c98:	08008c49 	.word	0x08008c49
 8008c9c:	08008c49 	.word	0x08008c49
 8008ca0:	08008dfb 	.word	0x08008dfb
 8008ca4:	08008c49 	.word	0x08008c49
 8008ca8:	08008cfd 	.word	0x08008cfd
 8008cac:	08008c49 	.word	0x08008c49
 8008cb0:	08008c49 	.word	0x08008c49
 8008cb4:	08008dc3 	.word	0x08008dc3
 8008cb8:	682b      	ldr	r3, [r5, #0]
 8008cba:	1d1a      	adds	r2, r3, #4
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	602a      	str	r2, [r5, #0]
 8008cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e0a3      	b.n	8008e14 <_printf_i+0x1f4>
 8008ccc:	6820      	ldr	r0, [r4, #0]
 8008cce:	6829      	ldr	r1, [r5, #0]
 8008cd0:	0606      	lsls	r6, r0, #24
 8008cd2:	f101 0304 	add.w	r3, r1, #4
 8008cd6:	d50a      	bpl.n	8008cee <_printf_i+0xce>
 8008cd8:	680e      	ldr	r6, [r1, #0]
 8008cda:	602b      	str	r3, [r5, #0]
 8008cdc:	2e00      	cmp	r6, #0
 8008cde:	da03      	bge.n	8008ce8 <_printf_i+0xc8>
 8008ce0:	232d      	movs	r3, #45	; 0x2d
 8008ce2:	4276      	negs	r6, r6
 8008ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ce8:	485e      	ldr	r0, [pc, #376]	; (8008e64 <_printf_i+0x244>)
 8008cea:	230a      	movs	r3, #10
 8008cec:	e019      	b.n	8008d22 <_printf_i+0x102>
 8008cee:	680e      	ldr	r6, [r1, #0]
 8008cf0:	602b      	str	r3, [r5, #0]
 8008cf2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cf6:	bf18      	it	ne
 8008cf8:	b236      	sxthne	r6, r6
 8008cfa:	e7ef      	b.n	8008cdc <_printf_i+0xbc>
 8008cfc:	682b      	ldr	r3, [r5, #0]
 8008cfe:	6820      	ldr	r0, [r4, #0]
 8008d00:	1d19      	adds	r1, r3, #4
 8008d02:	6029      	str	r1, [r5, #0]
 8008d04:	0601      	lsls	r1, r0, #24
 8008d06:	d501      	bpl.n	8008d0c <_printf_i+0xec>
 8008d08:	681e      	ldr	r6, [r3, #0]
 8008d0a:	e002      	b.n	8008d12 <_printf_i+0xf2>
 8008d0c:	0646      	lsls	r6, r0, #25
 8008d0e:	d5fb      	bpl.n	8008d08 <_printf_i+0xe8>
 8008d10:	881e      	ldrh	r6, [r3, #0]
 8008d12:	4854      	ldr	r0, [pc, #336]	; (8008e64 <_printf_i+0x244>)
 8008d14:	2f6f      	cmp	r7, #111	; 0x6f
 8008d16:	bf0c      	ite	eq
 8008d18:	2308      	moveq	r3, #8
 8008d1a:	230a      	movne	r3, #10
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d22:	6865      	ldr	r5, [r4, #4]
 8008d24:	60a5      	str	r5, [r4, #8]
 8008d26:	2d00      	cmp	r5, #0
 8008d28:	bfa2      	ittt	ge
 8008d2a:	6821      	ldrge	r1, [r4, #0]
 8008d2c:	f021 0104 	bicge.w	r1, r1, #4
 8008d30:	6021      	strge	r1, [r4, #0]
 8008d32:	b90e      	cbnz	r6, 8008d38 <_printf_i+0x118>
 8008d34:	2d00      	cmp	r5, #0
 8008d36:	d04d      	beq.n	8008dd4 <_printf_i+0x1b4>
 8008d38:	4615      	mov	r5, r2
 8008d3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d3e:	fb03 6711 	mls	r7, r3, r1, r6
 8008d42:	5dc7      	ldrb	r7, [r0, r7]
 8008d44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d48:	4637      	mov	r7, r6
 8008d4a:	42bb      	cmp	r3, r7
 8008d4c:	460e      	mov	r6, r1
 8008d4e:	d9f4      	bls.n	8008d3a <_printf_i+0x11a>
 8008d50:	2b08      	cmp	r3, #8
 8008d52:	d10b      	bne.n	8008d6c <_printf_i+0x14c>
 8008d54:	6823      	ldr	r3, [r4, #0]
 8008d56:	07de      	lsls	r6, r3, #31
 8008d58:	d508      	bpl.n	8008d6c <_printf_i+0x14c>
 8008d5a:	6923      	ldr	r3, [r4, #16]
 8008d5c:	6861      	ldr	r1, [r4, #4]
 8008d5e:	4299      	cmp	r1, r3
 8008d60:	bfde      	ittt	le
 8008d62:	2330      	movle	r3, #48	; 0x30
 8008d64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d6c:	1b52      	subs	r2, r2, r5
 8008d6e:	6122      	str	r2, [r4, #16]
 8008d70:	f8cd a000 	str.w	sl, [sp]
 8008d74:	464b      	mov	r3, r9
 8008d76:	aa03      	add	r2, sp, #12
 8008d78:	4621      	mov	r1, r4
 8008d7a:	4640      	mov	r0, r8
 8008d7c:	f7ff fee2 	bl	8008b44 <_printf_common>
 8008d80:	3001      	adds	r0, #1
 8008d82:	d14c      	bne.n	8008e1e <_printf_i+0x1fe>
 8008d84:	f04f 30ff 	mov.w	r0, #4294967295
 8008d88:	b004      	add	sp, #16
 8008d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8e:	4835      	ldr	r0, [pc, #212]	; (8008e64 <_printf_i+0x244>)
 8008d90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d94:	6829      	ldr	r1, [r5, #0]
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d9c:	6029      	str	r1, [r5, #0]
 8008d9e:	061d      	lsls	r5, r3, #24
 8008da0:	d514      	bpl.n	8008dcc <_printf_i+0x1ac>
 8008da2:	07df      	lsls	r7, r3, #31
 8008da4:	bf44      	itt	mi
 8008da6:	f043 0320 	orrmi.w	r3, r3, #32
 8008daa:	6023      	strmi	r3, [r4, #0]
 8008dac:	b91e      	cbnz	r6, 8008db6 <_printf_i+0x196>
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	f023 0320 	bic.w	r3, r3, #32
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	2310      	movs	r3, #16
 8008db8:	e7b0      	b.n	8008d1c <_printf_i+0xfc>
 8008dba:	6823      	ldr	r3, [r4, #0]
 8008dbc:	f043 0320 	orr.w	r3, r3, #32
 8008dc0:	6023      	str	r3, [r4, #0]
 8008dc2:	2378      	movs	r3, #120	; 0x78
 8008dc4:	4828      	ldr	r0, [pc, #160]	; (8008e68 <_printf_i+0x248>)
 8008dc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dca:	e7e3      	b.n	8008d94 <_printf_i+0x174>
 8008dcc:	0659      	lsls	r1, r3, #25
 8008dce:	bf48      	it	mi
 8008dd0:	b2b6      	uxthmi	r6, r6
 8008dd2:	e7e6      	b.n	8008da2 <_printf_i+0x182>
 8008dd4:	4615      	mov	r5, r2
 8008dd6:	e7bb      	b.n	8008d50 <_printf_i+0x130>
 8008dd8:	682b      	ldr	r3, [r5, #0]
 8008dda:	6826      	ldr	r6, [r4, #0]
 8008ddc:	6961      	ldr	r1, [r4, #20]
 8008dde:	1d18      	adds	r0, r3, #4
 8008de0:	6028      	str	r0, [r5, #0]
 8008de2:	0635      	lsls	r5, r6, #24
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	d501      	bpl.n	8008dec <_printf_i+0x1cc>
 8008de8:	6019      	str	r1, [r3, #0]
 8008dea:	e002      	b.n	8008df2 <_printf_i+0x1d2>
 8008dec:	0670      	lsls	r0, r6, #25
 8008dee:	d5fb      	bpl.n	8008de8 <_printf_i+0x1c8>
 8008df0:	8019      	strh	r1, [r3, #0]
 8008df2:	2300      	movs	r3, #0
 8008df4:	6123      	str	r3, [r4, #16]
 8008df6:	4615      	mov	r5, r2
 8008df8:	e7ba      	b.n	8008d70 <_printf_i+0x150>
 8008dfa:	682b      	ldr	r3, [r5, #0]
 8008dfc:	1d1a      	adds	r2, r3, #4
 8008dfe:	602a      	str	r2, [r5, #0]
 8008e00:	681d      	ldr	r5, [r3, #0]
 8008e02:	6862      	ldr	r2, [r4, #4]
 8008e04:	2100      	movs	r1, #0
 8008e06:	4628      	mov	r0, r5
 8008e08:	f7f7 fa32 	bl	8000270 <memchr>
 8008e0c:	b108      	cbz	r0, 8008e12 <_printf_i+0x1f2>
 8008e0e:	1b40      	subs	r0, r0, r5
 8008e10:	6060      	str	r0, [r4, #4]
 8008e12:	6863      	ldr	r3, [r4, #4]
 8008e14:	6123      	str	r3, [r4, #16]
 8008e16:	2300      	movs	r3, #0
 8008e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e1c:	e7a8      	b.n	8008d70 <_printf_i+0x150>
 8008e1e:	6923      	ldr	r3, [r4, #16]
 8008e20:	462a      	mov	r2, r5
 8008e22:	4649      	mov	r1, r9
 8008e24:	4640      	mov	r0, r8
 8008e26:	47d0      	blx	sl
 8008e28:	3001      	adds	r0, #1
 8008e2a:	d0ab      	beq.n	8008d84 <_printf_i+0x164>
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	079b      	lsls	r3, r3, #30
 8008e30:	d413      	bmi.n	8008e5a <_printf_i+0x23a>
 8008e32:	68e0      	ldr	r0, [r4, #12]
 8008e34:	9b03      	ldr	r3, [sp, #12]
 8008e36:	4298      	cmp	r0, r3
 8008e38:	bfb8      	it	lt
 8008e3a:	4618      	movlt	r0, r3
 8008e3c:	e7a4      	b.n	8008d88 <_printf_i+0x168>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	4632      	mov	r2, r6
 8008e42:	4649      	mov	r1, r9
 8008e44:	4640      	mov	r0, r8
 8008e46:	47d0      	blx	sl
 8008e48:	3001      	adds	r0, #1
 8008e4a:	d09b      	beq.n	8008d84 <_printf_i+0x164>
 8008e4c:	3501      	adds	r5, #1
 8008e4e:	68e3      	ldr	r3, [r4, #12]
 8008e50:	9903      	ldr	r1, [sp, #12]
 8008e52:	1a5b      	subs	r3, r3, r1
 8008e54:	42ab      	cmp	r3, r5
 8008e56:	dcf2      	bgt.n	8008e3e <_printf_i+0x21e>
 8008e58:	e7eb      	b.n	8008e32 <_printf_i+0x212>
 8008e5a:	2500      	movs	r5, #0
 8008e5c:	f104 0619 	add.w	r6, r4, #25
 8008e60:	e7f5      	b.n	8008e4e <_printf_i+0x22e>
 8008e62:	bf00      	nop
 8008e64:	0800d74c 	.word	0x0800d74c
 8008e68:	0800d75d 	.word	0x0800d75d

08008e6c <_scanf_float>:
 8008e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e70:	b087      	sub	sp, #28
 8008e72:	4617      	mov	r7, r2
 8008e74:	9303      	str	r3, [sp, #12]
 8008e76:	688b      	ldr	r3, [r1, #8]
 8008e78:	1e5a      	subs	r2, r3, #1
 8008e7a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008e7e:	bf83      	ittte	hi
 8008e80:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008e84:	195b      	addhi	r3, r3, r5
 8008e86:	9302      	strhi	r3, [sp, #8]
 8008e88:	2300      	movls	r3, #0
 8008e8a:	bf86      	itte	hi
 8008e8c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008e90:	608b      	strhi	r3, [r1, #8]
 8008e92:	9302      	strls	r3, [sp, #8]
 8008e94:	680b      	ldr	r3, [r1, #0]
 8008e96:	468b      	mov	fp, r1
 8008e98:	2500      	movs	r5, #0
 8008e9a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008e9e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008ea2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008ea6:	4680      	mov	r8, r0
 8008ea8:	460c      	mov	r4, r1
 8008eaa:	465e      	mov	r6, fp
 8008eac:	46aa      	mov	sl, r5
 8008eae:	46a9      	mov	r9, r5
 8008eb0:	9501      	str	r5, [sp, #4]
 8008eb2:	68a2      	ldr	r2, [r4, #8]
 8008eb4:	b152      	cbz	r2, 8008ecc <_scanf_float+0x60>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	2b4e      	cmp	r3, #78	; 0x4e
 8008ebc:	d864      	bhi.n	8008f88 <_scanf_float+0x11c>
 8008ebe:	2b40      	cmp	r3, #64	; 0x40
 8008ec0:	d83c      	bhi.n	8008f3c <_scanf_float+0xd0>
 8008ec2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008ec6:	b2c8      	uxtb	r0, r1
 8008ec8:	280e      	cmp	r0, #14
 8008eca:	d93a      	bls.n	8008f42 <_scanf_float+0xd6>
 8008ecc:	f1b9 0f00 	cmp.w	r9, #0
 8008ed0:	d003      	beq.n	8008eda <_scanf_float+0x6e>
 8008ed2:	6823      	ldr	r3, [r4, #0]
 8008ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ed8:	6023      	str	r3, [r4, #0]
 8008eda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ede:	f1ba 0f01 	cmp.w	sl, #1
 8008ee2:	f200 8113 	bhi.w	800910c <_scanf_float+0x2a0>
 8008ee6:	455e      	cmp	r6, fp
 8008ee8:	f200 8105 	bhi.w	80090f6 <_scanf_float+0x28a>
 8008eec:	2501      	movs	r5, #1
 8008eee:	4628      	mov	r0, r5
 8008ef0:	b007      	add	sp, #28
 8008ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008efa:	2a0d      	cmp	r2, #13
 8008efc:	d8e6      	bhi.n	8008ecc <_scanf_float+0x60>
 8008efe:	a101      	add	r1, pc, #4	; (adr r1, 8008f04 <_scanf_float+0x98>)
 8008f00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008f04:	08009043 	.word	0x08009043
 8008f08:	08008ecd 	.word	0x08008ecd
 8008f0c:	08008ecd 	.word	0x08008ecd
 8008f10:	08008ecd 	.word	0x08008ecd
 8008f14:	080090a3 	.word	0x080090a3
 8008f18:	0800907b 	.word	0x0800907b
 8008f1c:	08008ecd 	.word	0x08008ecd
 8008f20:	08008ecd 	.word	0x08008ecd
 8008f24:	08009051 	.word	0x08009051
 8008f28:	08008ecd 	.word	0x08008ecd
 8008f2c:	08008ecd 	.word	0x08008ecd
 8008f30:	08008ecd 	.word	0x08008ecd
 8008f34:	08008ecd 	.word	0x08008ecd
 8008f38:	08009009 	.word	0x08009009
 8008f3c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008f40:	e7db      	b.n	8008efa <_scanf_float+0x8e>
 8008f42:	290e      	cmp	r1, #14
 8008f44:	d8c2      	bhi.n	8008ecc <_scanf_float+0x60>
 8008f46:	a001      	add	r0, pc, #4	; (adr r0, 8008f4c <_scanf_float+0xe0>)
 8008f48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008f4c:	08008ffb 	.word	0x08008ffb
 8008f50:	08008ecd 	.word	0x08008ecd
 8008f54:	08008ffb 	.word	0x08008ffb
 8008f58:	0800908f 	.word	0x0800908f
 8008f5c:	08008ecd 	.word	0x08008ecd
 8008f60:	08008fa9 	.word	0x08008fa9
 8008f64:	08008fe5 	.word	0x08008fe5
 8008f68:	08008fe5 	.word	0x08008fe5
 8008f6c:	08008fe5 	.word	0x08008fe5
 8008f70:	08008fe5 	.word	0x08008fe5
 8008f74:	08008fe5 	.word	0x08008fe5
 8008f78:	08008fe5 	.word	0x08008fe5
 8008f7c:	08008fe5 	.word	0x08008fe5
 8008f80:	08008fe5 	.word	0x08008fe5
 8008f84:	08008fe5 	.word	0x08008fe5
 8008f88:	2b6e      	cmp	r3, #110	; 0x6e
 8008f8a:	d809      	bhi.n	8008fa0 <_scanf_float+0x134>
 8008f8c:	2b60      	cmp	r3, #96	; 0x60
 8008f8e:	d8b2      	bhi.n	8008ef6 <_scanf_float+0x8a>
 8008f90:	2b54      	cmp	r3, #84	; 0x54
 8008f92:	d077      	beq.n	8009084 <_scanf_float+0x218>
 8008f94:	2b59      	cmp	r3, #89	; 0x59
 8008f96:	d199      	bne.n	8008ecc <_scanf_float+0x60>
 8008f98:	2d07      	cmp	r5, #7
 8008f9a:	d197      	bne.n	8008ecc <_scanf_float+0x60>
 8008f9c:	2508      	movs	r5, #8
 8008f9e:	e029      	b.n	8008ff4 <_scanf_float+0x188>
 8008fa0:	2b74      	cmp	r3, #116	; 0x74
 8008fa2:	d06f      	beq.n	8009084 <_scanf_float+0x218>
 8008fa4:	2b79      	cmp	r3, #121	; 0x79
 8008fa6:	e7f6      	b.n	8008f96 <_scanf_float+0x12a>
 8008fa8:	6821      	ldr	r1, [r4, #0]
 8008faa:	05c8      	lsls	r0, r1, #23
 8008fac:	d51a      	bpl.n	8008fe4 <_scanf_float+0x178>
 8008fae:	9b02      	ldr	r3, [sp, #8]
 8008fb0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008fb4:	6021      	str	r1, [r4, #0]
 8008fb6:	f109 0901 	add.w	r9, r9, #1
 8008fba:	b11b      	cbz	r3, 8008fc4 <_scanf_float+0x158>
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	3201      	adds	r2, #1
 8008fc0:	9302      	str	r3, [sp, #8]
 8008fc2:	60a2      	str	r2, [r4, #8]
 8008fc4:	68a3      	ldr	r3, [r4, #8]
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	60a3      	str	r3, [r4, #8]
 8008fca:	6923      	ldr	r3, [r4, #16]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	6123      	str	r3, [r4, #16]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	607b      	str	r3, [r7, #4]
 8008fd8:	f340 8084 	ble.w	80090e4 <_scanf_float+0x278>
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	603b      	str	r3, [r7, #0]
 8008fe2:	e766      	b.n	8008eb2 <_scanf_float+0x46>
 8008fe4:	eb1a 0f05 	cmn.w	sl, r5
 8008fe8:	f47f af70 	bne.w	8008ecc <_scanf_float+0x60>
 8008fec:	6822      	ldr	r2, [r4, #0]
 8008fee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008ff2:	6022      	str	r2, [r4, #0]
 8008ff4:	f806 3b01 	strb.w	r3, [r6], #1
 8008ff8:	e7e4      	b.n	8008fc4 <_scanf_float+0x158>
 8008ffa:	6822      	ldr	r2, [r4, #0]
 8008ffc:	0610      	lsls	r0, r2, #24
 8008ffe:	f57f af65 	bpl.w	8008ecc <_scanf_float+0x60>
 8009002:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009006:	e7f4      	b.n	8008ff2 <_scanf_float+0x186>
 8009008:	f1ba 0f00 	cmp.w	sl, #0
 800900c:	d10e      	bne.n	800902c <_scanf_float+0x1c0>
 800900e:	f1b9 0f00 	cmp.w	r9, #0
 8009012:	d10e      	bne.n	8009032 <_scanf_float+0x1c6>
 8009014:	6822      	ldr	r2, [r4, #0]
 8009016:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800901a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800901e:	d108      	bne.n	8009032 <_scanf_float+0x1c6>
 8009020:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009024:	6022      	str	r2, [r4, #0]
 8009026:	f04f 0a01 	mov.w	sl, #1
 800902a:	e7e3      	b.n	8008ff4 <_scanf_float+0x188>
 800902c:	f1ba 0f02 	cmp.w	sl, #2
 8009030:	d055      	beq.n	80090de <_scanf_float+0x272>
 8009032:	2d01      	cmp	r5, #1
 8009034:	d002      	beq.n	800903c <_scanf_float+0x1d0>
 8009036:	2d04      	cmp	r5, #4
 8009038:	f47f af48 	bne.w	8008ecc <_scanf_float+0x60>
 800903c:	3501      	adds	r5, #1
 800903e:	b2ed      	uxtb	r5, r5
 8009040:	e7d8      	b.n	8008ff4 <_scanf_float+0x188>
 8009042:	f1ba 0f01 	cmp.w	sl, #1
 8009046:	f47f af41 	bne.w	8008ecc <_scanf_float+0x60>
 800904a:	f04f 0a02 	mov.w	sl, #2
 800904e:	e7d1      	b.n	8008ff4 <_scanf_float+0x188>
 8009050:	b97d      	cbnz	r5, 8009072 <_scanf_float+0x206>
 8009052:	f1b9 0f00 	cmp.w	r9, #0
 8009056:	f47f af3c 	bne.w	8008ed2 <_scanf_float+0x66>
 800905a:	6822      	ldr	r2, [r4, #0]
 800905c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009060:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009064:	f47f af39 	bne.w	8008eda <_scanf_float+0x6e>
 8009068:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800906c:	6022      	str	r2, [r4, #0]
 800906e:	2501      	movs	r5, #1
 8009070:	e7c0      	b.n	8008ff4 <_scanf_float+0x188>
 8009072:	2d03      	cmp	r5, #3
 8009074:	d0e2      	beq.n	800903c <_scanf_float+0x1d0>
 8009076:	2d05      	cmp	r5, #5
 8009078:	e7de      	b.n	8009038 <_scanf_float+0x1cc>
 800907a:	2d02      	cmp	r5, #2
 800907c:	f47f af26 	bne.w	8008ecc <_scanf_float+0x60>
 8009080:	2503      	movs	r5, #3
 8009082:	e7b7      	b.n	8008ff4 <_scanf_float+0x188>
 8009084:	2d06      	cmp	r5, #6
 8009086:	f47f af21 	bne.w	8008ecc <_scanf_float+0x60>
 800908a:	2507      	movs	r5, #7
 800908c:	e7b2      	b.n	8008ff4 <_scanf_float+0x188>
 800908e:	6822      	ldr	r2, [r4, #0]
 8009090:	0591      	lsls	r1, r2, #22
 8009092:	f57f af1b 	bpl.w	8008ecc <_scanf_float+0x60>
 8009096:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800909a:	6022      	str	r2, [r4, #0]
 800909c:	f8cd 9004 	str.w	r9, [sp, #4]
 80090a0:	e7a8      	b.n	8008ff4 <_scanf_float+0x188>
 80090a2:	6822      	ldr	r2, [r4, #0]
 80090a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80090a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80090ac:	d006      	beq.n	80090bc <_scanf_float+0x250>
 80090ae:	0550      	lsls	r0, r2, #21
 80090b0:	f57f af0c 	bpl.w	8008ecc <_scanf_float+0x60>
 80090b4:	f1b9 0f00 	cmp.w	r9, #0
 80090b8:	f43f af0f 	beq.w	8008eda <_scanf_float+0x6e>
 80090bc:	0591      	lsls	r1, r2, #22
 80090be:	bf58      	it	pl
 80090c0:	9901      	ldrpl	r1, [sp, #4]
 80090c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80090c6:	bf58      	it	pl
 80090c8:	eba9 0101 	subpl.w	r1, r9, r1
 80090cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80090d0:	bf58      	it	pl
 80090d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80090d6:	6022      	str	r2, [r4, #0]
 80090d8:	f04f 0900 	mov.w	r9, #0
 80090dc:	e78a      	b.n	8008ff4 <_scanf_float+0x188>
 80090de:	f04f 0a03 	mov.w	sl, #3
 80090e2:	e787      	b.n	8008ff4 <_scanf_float+0x188>
 80090e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80090e8:	4639      	mov	r1, r7
 80090ea:	4640      	mov	r0, r8
 80090ec:	4798      	blx	r3
 80090ee:	2800      	cmp	r0, #0
 80090f0:	f43f aedf 	beq.w	8008eb2 <_scanf_float+0x46>
 80090f4:	e6ea      	b.n	8008ecc <_scanf_float+0x60>
 80090f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090fe:	463a      	mov	r2, r7
 8009100:	4640      	mov	r0, r8
 8009102:	4798      	blx	r3
 8009104:	6923      	ldr	r3, [r4, #16]
 8009106:	3b01      	subs	r3, #1
 8009108:	6123      	str	r3, [r4, #16]
 800910a:	e6ec      	b.n	8008ee6 <_scanf_float+0x7a>
 800910c:	1e6b      	subs	r3, r5, #1
 800910e:	2b06      	cmp	r3, #6
 8009110:	d825      	bhi.n	800915e <_scanf_float+0x2f2>
 8009112:	2d02      	cmp	r5, #2
 8009114:	d836      	bhi.n	8009184 <_scanf_float+0x318>
 8009116:	455e      	cmp	r6, fp
 8009118:	f67f aee8 	bls.w	8008eec <_scanf_float+0x80>
 800911c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009120:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009124:	463a      	mov	r2, r7
 8009126:	4640      	mov	r0, r8
 8009128:	4798      	blx	r3
 800912a:	6923      	ldr	r3, [r4, #16]
 800912c:	3b01      	subs	r3, #1
 800912e:	6123      	str	r3, [r4, #16]
 8009130:	e7f1      	b.n	8009116 <_scanf_float+0x2aa>
 8009132:	9802      	ldr	r0, [sp, #8]
 8009134:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009138:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800913c:	9002      	str	r0, [sp, #8]
 800913e:	463a      	mov	r2, r7
 8009140:	4640      	mov	r0, r8
 8009142:	4798      	blx	r3
 8009144:	6923      	ldr	r3, [r4, #16]
 8009146:	3b01      	subs	r3, #1
 8009148:	6123      	str	r3, [r4, #16]
 800914a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800914e:	fa5f fa8a 	uxtb.w	sl, sl
 8009152:	f1ba 0f02 	cmp.w	sl, #2
 8009156:	d1ec      	bne.n	8009132 <_scanf_float+0x2c6>
 8009158:	3d03      	subs	r5, #3
 800915a:	b2ed      	uxtb	r5, r5
 800915c:	1b76      	subs	r6, r6, r5
 800915e:	6823      	ldr	r3, [r4, #0]
 8009160:	05da      	lsls	r2, r3, #23
 8009162:	d52f      	bpl.n	80091c4 <_scanf_float+0x358>
 8009164:	055b      	lsls	r3, r3, #21
 8009166:	d510      	bpl.n	800918a <_scanf_float+0x31e>
 8009168:	455e      	cmp	r6, fp
 800916a:	f67f aebf 	bls.w	8008eec <_scanf_float+0x80>
 800916e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009172:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009176:	463a      	mov	r2, r7
 8009178:	4640      	mov	r0, r8
 800917a:	4798      	blx	r3
 800917c:	6923      	ldr	r3, [r4, #16]
 800917e:	3b01      	subs	r3, #1
 8009180:	6123      	str	r3, [r4, #16]
 8009182:	e7f1      	b.n	8009168 <_scanf_float+0x2fc>
 8009184:	46aa      	mov	sl, r5
 8009186:	9602      	str	r6, [sp, #8]
 8009188:	e7df      	b.n	800914a <_scanf_float+0x2de>
 800918a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800918e:	6923      	ldr	r3, [r4, #16]
 8009190:	2965      	cmp	r1, #101	; 0x65
 8009192:	f103 33ff 	add.w	r3, r3, #4294967295
 8009196:	f106 35ff 	add.w	r5, r6, #4294967295
 800919a:	6123      	str	r3, [r4, #16]
 800919c:	d00c      	beq.n	80091b8 <_scanf_float+0x34c>
 800919e:	2945      	cmp	r1, #69	; 0x45
 80091a0:	d00a      	beq.n	80091b8 <_scanf_float+0x34c>
 80091a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091a6:	463a      	mov	r2, r7
 80091a8:	4640      	mov	r0, r8
 80091aa:	4798      	blx	r3
 80091ac:	6923      	ldr	r3, [r4, #16]
 80091ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80091b2:	3b01      	subs	r3, #1
 80091b4:	1eb5      	subs	r5, r6, #2
 80091b6:	6123      	str	r3, [r4, #16]
 80091b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091bc:	463a      	mov	r2, r7
 80091be:	4640      	mov	r0, r8
 80091c0:	4798      	blx	r3
 80091c2:	462e      	mov	r6, r5
 80091c4:	6825      	ldr	r5, [r4, #0]
 80091c6:	f015 0510 	ands.w	r5, r5, #16
 80091ca:	d14e      	bne.n	800926a <_scanf_float+0x3fe>
 80091cc:	7035      	strb	r5, [r6, #0]
 80091ce:	6823      	ldr	r3, [r4, #0]
 80091d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80091d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091d8:	d119      	bne.n	800920e <_scanf_float+0x3a2>
 80091da:	9b01      	ldr	r3, [sp, #4]
 80091dc:	454b      	cmp	r3, r9
 80091de:	eba3 0209 	sub.w	r2, r3, r9
 80091e2:	d121      	bne.n	8009228 <_scanf_float+0x3bc>
 80091e4:	2200      	movs	r2, #0
 80091e6:	4659      	mov	r1, fp
 80091e8:	4640      	mov	r0, r8
 80091ea:	f000 fed3 	bl	8009f94 <_strtod_r>
 80091ee:	6822      	ldr	r2, [r4, #0]
 80091f0:	9b03      	ldr	r3, [sp, #12]
 80091f2:	f012 0f02 	tst.w	r2, #2
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	d021      	beq.n	800923e <_scanf_float+0x3d2>
 80091fa:	9903      	ldr	r1, [sp, #12]
 80091fc:	1d1a      	adds	r2, r3, #4
 80091fe:	600a      	str	r2, [r1, #0]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	ed83 0b00 	vstr	d0, [r3]
 8009206:	68e3      	ldr	r3, [r4, #12]
 8009208:	3301      	adds	r3, #1
 800920a:	60e3      	str	r3, [r4, #12]
 800920c:	e66f      	b.n	8008eee <_scanf_float+0x82>
 800920e:	9b04      	ldr	r3, [sp, #16]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d0e7      	beq.n	80091e4 <_scanf_float+0x378>
 8009214:	9905      	ldr	r1, [sp, #20]
 8009216:	230a      	movs	r3, #10
 8009218:	462a      	mov	r2, r5
 800921a:	3101      	adds	r1, #1
 800921c:	4640      	mov	r0, r8
 800921e:	f000 ff41 	bl	800a0a4 <_strtol_r>
 8009222:	9b04      	ldr	r3, [sp, #16]
 8009224:	9e05      	ldr	r6, [sp, #20]
 8009226:	1ac2      	subs	r2, r0, r3
 8009228:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800922c:	429e      	cmp	r6, r3
 800922e:	bf28      	it	cs
 8009230:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009234:	490e      	ldr	r1, [pc, #56]	; (8009270 <_scanf_float+0x404>)
 8009236:	4630      	mov	r0, r6
 8009238:	f000 f824 	bl	8009284 <siprintf>
 800923c:	e7d2      	b.n	80091e4 <_scanf_float+0x378>
 800923e:	9903      	ldr	r1, [sp, #12]
 8009240:	f012 0f04 	tst.w	r2, #4
 8009244:	f103 0204 	add.w	r2, r3, #4
 8009248:	600a      	str	r2, [r1, #0]
 800924a:	d1d9      	bne.n	8009200 <_scanf_float+0x394>
 800924c:	eeb4 0b40 	vcmp.f64	d0, d0
 8009250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009254:	681e      	ldr	r6, [r3, #0]
 8009256:	d705      	bvc.n	8009264 <_scanf_float+0x3f8>
 8009258:	4806      	ldr	r0, [pc, #24]	; (8009274 <_scanf_float+0x408>)
 800925a:	f000 f80d 	bl	8009278 <nanf>
 800925e:	ed86 0a00 	vstr	s0, [r6]
 8009262:	e7d0      	b.n	8009206 <_scanf_float+0x39a>
 8009264:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009268:	e7f9      	b.n	800925e <_scanf_float+0x3f2>
 800926a:	2500      	movs	r5, #0
 800926c:	e63f      	b.n	8008eee <_scanf_float+0x82>
 800926e:	bf00      	nop
 8009270:	0800d76e 	.word	0x0800d76e
 8009274:	0800db93 	.word	0x0800db93

08009278 <nanf>:
 8009278:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009280 <nanf+0x8>
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	7fc00000 	.word	0x7fc00000

08009284 <siprintf>:
 8009284:	b40e      	push	{r1, r2, r3}
 8009286:	b500      	push	{lr}
 8009288:	b09c      	sub	sp, #112	; 0x70
 800928a:	ab1d      	add	r3, sp, #116	; 0x74
 800928c:	9002      	str	r0, [sp, #8]
 800928e:	9006      	str	r0, [sp, #24]
 8009290:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009294:	4809      	ldr	r0, [pc, #36]	; (80092bc <siprintf+0x38>)
 8009296:	9107      	str	r1, [sp, #28]
 8009298:	9104      	str	r1, [sp, #16]
 800929a:	4909      	ldr	r1, [pc, #36]	; (80092c0 <siprintf+0x3c>)
 800929c:	f853 2b04 	ldr.w	r2, [r3], #4
 80092a0:	9105      	str	r1, [sp, #20]
 80092a2:	6800      	ldr	r0, [r0, #0]
 80092a4:	9301      	str	r3, [sp, #4]
 80092a6:	a902      	add	r1, sp, #8
 80092a8:	f002 feda 	bl	800c060 <_svfiprintf_r>
 80092ac:	9b02      	ldr	r3, [sp, #8]
 80092ae:	2200      	movs	r2, #0
 80092b0:	701a      	strb	r2, [r3, #0]
 80092b2:	b01c      	add	sp, #112	; 0x70
 80092b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092b8:	b003      	add	sp, #12
 80092ba:	4770      	bx	lr
 80092bc:	2000004c 	.word	0x2000004c
 80092c0:	ffff0208 	.word	0xffff0208

080092c4 <siscanf>:
 80092c4:	b40e      	push	{r1, r2, r3}
 80092c6:	b510      	push	{r4, lr}
 80092c8:	b09f      	sub	sp, #124	; 0x7c
 80092ca:	ac21      	add	r4, sp, #132	; 0x84
 80092cc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80092d0:	f854 2b04 	ldr.w	r2, [r4], #4
 80092d4:	9201      	str	r2, [sp, #4]
 80092d6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80092da:	9004      	str	r0, [sp, #16]
 80092dc:	9008      	str	r0, [sp, #32]
 80092de:	f7f6 ffb9 	bl	8000254 <strlen>
 80092e2:	4b0c      	ldr	r3, [pc, #48]	; (8009314 <siscanf+0x50>)
 80092e4:	9005      	str	r0, [sp, #20]
 80092e6:	9009      	str	r0, [sp, #36]	; 0x24
 80092e8:	930d      	str	r3, [sp, #52]	; 0x34
 80092ea:	480b      	ldr	r0, [pc, #44]	; (8009318 <siscanf+0x54>)
 80092ec:	9a01      	ldr	r2, [sp, #4]
 80092ee:	6800      	ldr	r0, [r0, #0]
 80092f0:	9403      	str	r4, [sp, #12]
 80092f2:	2300      	movs	r3, #0
 80092f4:	9311      	str	r3, [sp, #68]	; 0x44
 80092f6:	9316      	str	r3, [sp, #88]	; 0x58
 80092f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80092fc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009300:	a904      	add	r1, sp, #16
 8009302:	4623      	mov	r3, r4
 8009304:	f003 f806 	bl	800c314 <__ssvfiscanf_r>
 8009308:	b01f      	add	sp, #124	; 0x7c
 800930a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800930e:	b003      	add	sp, #12
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	0800933f 	.word	0x0800933f
 8009318:	2000004c 	.word	0x2000004c

0800931c <__sread>:
 800931c:	b510      	push	{r4, lr}
 800931e:	460c      	mov	r4, r1
 8009320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009324:	f003 fac0 	bl	800c8a8 <_read_r>
 8009328:	2800      	cmp	r0, #0
 800932a:	bfab      	itete	ge
 800932c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800932e:	89a3      	ldrhlt	r3, [r4, #12]
 8009330:	181b      	addge	r3, r3, r0
 8009332:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009336:	bfac      	ite	ge
 8009338:	6563      	strge	r3, [r4, #84]	; 0x54
 800933a:	81a3      	strhlt	r3, [r4, #12]
 800933c:	bd10      	pop	{r4, pc}

0800933e <__seofread>:
 800933e:	2000      	movs	r0, #0
 8009340:	4770      	bx	lr

08009342 <__swrite>:
 8009342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009346:	461f      	mov	r7, r3
 8009348:	898b      	ldrh	r3, [r1, #12]
 800934a:	05db      	lsls	r3, r3, #23
 800934c:	4605      	mov	r5, r0
 800934e:	460c      	mov	r4, r1
 8009350:	4616      	mov	r6, r2
 8009352:	d505      	bpl.n	8009360 <__swrite+0x1e>
 8009354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009358:	2302      	movs	r3, #2
 800935a:	2200      	movs	r2, #0
 800935c:	f002 f836 	bl	800b3cc <_lseek_r>
 8009360:	89a3      	ldrh	r3, [r4, #12]
 8009362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800936a:	81a3      	strh	r3, [r4, #12]
 800936c:	4632      	mov	r2, r6
 800936e:	463b      	mov	r3, r7
 8009370:	4628      	mov	r0, r5
 8009372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009376:	f000 be97 	b.w	800a0a8 <_write_r>

0800937a <__sseek>:
 800937a:	b510      	push	{r4, lr}
 800937c:	460c      	mov	r4, r1
 800937e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009382:	f002 f823 	bl	800b3cc <_lseek_r>
 8009386:	1c43      	adds	r3, r0, #1
 8009388:	89a3      	ldrh	r3, [r4, #12]
 800938a:	bf15      	itete	ne
 800938c:	6560      	strne	r0, [r4, #84]	; 0x54
 800938e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009392:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009396:	81a3      	strheq	r3, [r4, #12]
 8009398:	bf18      	it	ne
 800939a:	81a3      	strhne	r3, [r4, #12]
 800939c:	bd10      	pop	{r4, pc}

0800939e <__sclose>:
 800939e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a2:	f000 be93 	b.w	800a0cc <_close_r>

080093a6 <strncmp>:
 80093a6:	b510      	push	{r4, lr}
 80093a8:	b17a      	cbz	r2, 80093ca <strncmp+0x24>
 80093aa:	4603      	mov	r3, r0
 80093ac:	3901      	subs	r1, #1
 80093ae:	1884      	adds	r4, r0, r2
 80093b0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80093b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80093b8:	4290      	cmp	r0, r2
 80093ba:	d101      	bne.n	80093c0 <strncmp+0x1a>
 80093bc:	42a3      	cmp	r3, r4
 80093be:	d101      	bne.n	80093c4 <strncmp+0x1e>
 80093c0:	1a80      	subs	r0, r0, r2
 80093c2:	bd10      	pop	{r4, pc}
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d1f3      	bne.n	80093b0 <strncmp+0xa>
 80093c8:	e7fa      	b.n	80093c0 <strncmp+0x1a>
 80093ca:	4610      	mov	r0, r2
 80093cc:	e7f9      	b.n	80093c2 <strncmp+0x1c>

080093ce <strncpy>:
 80093ce:	b510      	push	{r4, lr}
 80093d0:	3901      	subs	r1, #1
 80093d2:	4603      	mov	r3, r0
 80093d4:	b132      	cbz	r2, 80093e4 <strncpy+0x16>
 80093d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80093da:	f803 4b01 	strb.w	r4, [r3], #1
 80093de:	3a01      	subs	r2, #1
 80093e0:	2c00      	cmp	r4, #0
 80093e2:	d1f7      	bne.n	80093d4 <strncpy+0x6>
 80093e4:	441a      	add	r2, r3
 80093e6:	2100      	movs	r1, #0
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d100      	bne.n	80093ee <strncpy+0x20>
 80093ec:	bd10      	pop	{r4, pc}
 80093ee:	f803 1b01 	strb.w	r1, [r3], #1
 80093f2:	e7f9      	b.n	80093e8 <strncpy+0x1a>

080093f4 <sulp>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	4604      	mov	r4, r0
 80093f8:	460d      	mov	r5, r1
 80093fa:	4616      	mov	r6, r2
 80093fc:	ec45 4b10 	vmov	d0, r4, r5
 8009400:	f002 fb90 	bl	800bb24 <__ulp>
 8009404:	b17e      	cbz	r6, 8009426 <sulp+0x32>
 8009406:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800940a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800940e:	2b00      	cmp	r3, #0
 8009410:	dd09      	ble.n	8009426 <sulp+0x32>
 8009412:	051b      	lsls	r3, r3, #20
 8009414:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8009418:	2000      	movs	r0, #0
 800941a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800941e:	ec41 0b17 	vmov	d7, r0, r1
 8009422:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009426:	bd70      	pop	{r4, r5, r6, pc}

08009428 <_strtod_l>:
 8009428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	ed2d 8b0e 	vpush	{d8-d14}
 8009430:	b097      	sub	sp, #92	; 0x5c
 8009432:	461f      	mov	r7, r3
 8009434:	2300      	movs	r3, #0
 8009436:	9312      	str	r3, [sp, #72]	; 0x48
 8009438:	4ba1      	ldr	r3, [pc, #644]	; (80096c0 <_strtod_l+0x298>)
 800943a:	920d      	str	r2, [sp, #52]	; 0x34
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	9307      	str	r3, [sp, #28]
 8009440:	4604      	mov	r4, r0
 8009442:	4618      	mov	r0, r3
 8009444:	468b      	mov	fp, r1
 8009446:	f7f6 ff05 	bl	8000254 <strlen>
 800944a:	f04f 0800 	mov.w	r8, #0
 800944e:	4605      	mov	r5, r0
 8009450:	f04f 0900 	mov.w	r9, #0
 8009454:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8009458:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800945a:	7813      	ldrb	r3, [r2, #0]
 800945c:	2b2b      	cmp	r3, #43	; 0x2b
 800945e:	d04d      	beq.n	80094fc <_strtod_l+0xd4>
 8009460:	d83a      	bhi.n	80094d8 <_strtod_l+0xb0>
 8009462:	2b0d      	cmp	r3, #13
 8009464:	d833      	bhi.n	80094ce <_strtod_l+0xa6>
 8009466:	2b08      	cmp	r3, #8
 8009468:	d833      	bhi.n	80094d2 <_strtod_l+0xaa>
 800946a:	2b00      	cmp	r3, #0
 800946c:	d03d      	beq.n	80094ea <_strtod_l+0xc2>
 800946e:	2300      	movs	r3, #0
 8009470:	9308      	str	r3, [sp, #32]
 8009472:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8009474:	7833      	ldrb	r3, [r6, #0]
 8009476:	2b30      	cmp	r3, #48	; 0x30
 8009478:	f040 80b0 	bne.w	80095dc <_strtod_l+0x1b4>
 800947c:	7873      	ldrb	r3, [r6, #1]
 800947e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009482:	2b58      	cmp	r3, #88	; 0x58
 8009484:	d167      	bne.n	8009556 <_strtod_l+0x12e>
 8009486:	9b08      	ldr	r3, [sp, #32]
 8009488:	9301      	str	r3, [sp, #4]
 800948a:	ab12      	add	r3, sp, #72	; 0x48
 800948c:	9702      	str	r7, [sp, #8]
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	4a8c      	ldr	r2, [pc, #560]	; (80096c4 <_strtod_l+0x29c>)
 8009492:	ab13      	add	r3, sp, #76	; 0x4c
 8009494:	a911      	add	r1, sp, #68	; 0x44
 8009496:	4620      	mov	r0, r4
 8009498:	f001 fc8c 	bl	800adb4 <__gethex>
 800949c:	f010 0507 	ands.w	r5, r0, #7
 80094a0:	4607      	mov	r7, r0
 80094a2:	d005      	beq.n	80094b0 <_strtod_l+0x88>
 80094a4:	2d06      	cmp	r5, #6
 80094a6:	d12b      	bne.n	8009500 <_strtod_l+0xd8>
 80094a8:	3601      	adds	r6, #1
 80094aa:	2300      	movs	r3, #0
 80094ac:	9611      	str	r6, [sp, #68]	; 0x44
 80094ae:	9308      	str	r3, [sp, #32]
 80094b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f040 854e 	bne.w	8009f54 <_strtod_l+0xb2c>
 80094b8:	9b08      	ldr	r3, [sp, #32]
 80094ba:	b1e3      	cbz	r3, 80094f6 <_strtod_l+0xce>
 80094bc:	ec49 8b17 	vmov	d7, r8, r9
 80094c0:	eeb1 0b47 	vneg.f64	d0, d7
 80094c4:	b017      	add	sp, #92	; 0x5c
 80094c6:	ecbd 8b0e 	vpop	{d8-d14}
 80094ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ce:	2b20      	cmp	r3, #32
 80094d0:	d1cd      	bne.n	800946e <_strtod_l+0x46>
 80094d2:	3201      	adds	r2, #1
 80094d4:	9211      	str	r2, [sp, #68]	; 0x44
 80094d6:	e7bf      	b.n	8009458 <_strtod_l+0x30>
 80094d8:	2b2d      	cmp	r3, #45	; 0x2d
 80094da:	d1c8      	bne.n	800946e <_strtod_l+0x46>
 80094dc:	2301      	movs	r3, #1
 80094de:	9308      	str	r3, [sp, #32]
 80094e0:	1c53      	adds	r3, r2, #1
 80094e2:	9311      	str	r3, [sp, #68]	; 0x44
 80094e4:	7853      	ldrb	r3, [r2, #1]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1c3      	bne.n	8009472 <_strtod_l+0x4a>
 80094ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094ec:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f040 852d 	bne.w	8009f50 <_strtod_l+0xb28>
 80094f6:	ec49 8b10 	vmov	d0, r8, r9
 80094fa:	e7e3      	b.n	80094c4 <_strtod_l+0x9c>
 80094fc:	2300      	movs	r3, #0
 80094fe:	e7ee      	b.n	80094de <_strtod_l+0xb6>
 8009500:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009502:	b13a      	cbz	r2, 8009514 <_strtod_l+0xec>
 8009504:	2135      	movs	r1, #53	; 0x35
 8009506:	a814      	add	r0, sp, #80	; 0x50
 8009508:	f002 fc14 	bl	800bd34 <__copybits>
 800950c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800950e:	4620      	mov	r0, r4
 8009510:	f001 ffd6 	bl	800b4c0 <_Bfree>
 8009514:	3d01      	subs	r5, #1
 8009516:	2d04      	cmp	r5, #4
 8009518:	d806      	bhi.n	8009528 <_strtod_l+0x100>
 800951a:	e8df f005 	tbb	[pc, r5]
 800951e:	030a      	.short	0x030a
 8009520:	1714      	.short	0x1714
 8009522:	0a          	.byte	0x0a
 8009523:	00          	.byte	0x00
 8009524:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8009528:	073f      	lsls	r7, r7, #28
 800952a:	d5c1      	bpl.n	80094b0 <_strtod_l+0x88>
 800952c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009530:	e7be      	b.n	80094b0 <_strtod_l+0x88>
 8009532:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8009536:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009538:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800953c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009540:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009544:	e7f0      	b.n	8009528 <_strtod_l+0x100>
 8009546:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80096c8 <_strtod_l+0x2a0>
 800954a:	e7ed      	b.n	8009528 <_strtod_l+0x100>
 800954c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009550:	f04f 38ff 	mov.w	r8, #4294967295
 8009554:	e7e8      	b.n	8009528 <_strtod_l+0x100>
 8009556:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009558:	1c5a      	adds	r2, r3, #1
 800955a:	9211      	str	r2, [sp, #68]	; 0x44
 800955c:	785b      	ldrb	r3, [r3, #1]
 800955e:	2b30      	cmp	r3, #48	; 0x30
 8009560:	d0f9      	beq.n	8009556 <_strtod_l+0x12e>
 8009562:	2b00      	cmp	r3, #0
 8009564:	d0a4      	beq.n	80094b0 <_strtod_l+0x88>
 8009566:	2301      	movs	r3, #1
 8009568:	f04f 0a00 	mov.w	sl, #0
 800956c:	9304      	str	r3, [sp, #16]
 800956e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009570:	930a      	str	r3, [sp, #40]	; 0x28
 8009572:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009576:	f8cd a018 	str.w	sl, [sp, #24]
 800957a:	220a      	movs	r2, #10
 800957c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800957e:	7807      	ldrb	r7, [r0, #0]
 8009580:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009584:	b2d9      	uxtb	r1, r3
 8009586:	2909      	cmp	r1, #9
 8009588:	d92a      	bls.n	80095e0 <_strtod_l+0x1b8>
 800958a:	9907      	ldr	r1, [sp, #28]
 800958c:	462a      	mov	r2, r5
 800958e:	f7ff ff0a 	bl	80093a6 <strncmp>
 8009592:	2800      	cmp	r0, #0
 8009594:	d033      	beq.n	80095fe <_strtod_l+0x1d6>
 8009596:	2000      	movs	r0, #0
 8009598:	9b06      	ldr	r3, [sp, #24]
 800959a:	463a      	mov	r2, r7
 800959c:	4601      	mov	r1, r0
 800959e:	4607      	mov	r7, r0
 80095a0:	2a65      	cmp	r2, #101	; 0x65
 80095a2:	d001      	beq.n	80095a8 <_strtod_l+0x180>
 80095a4:	2a45      	cmp	r2, #69	; 0x45
 80095a6:	d117      	bne.n	80095d8 <_strtod_l+0x1b0>
 80095a8:	b91b      	cbnz	r3, 80095b2 <_strtod_l+0x18a>
 80095aa:	9b04      	ldr	r3, [sp, #16]
 80095ac:	4303      	orrs	r3, r0
 80095ae:	d09c      	beq.n	80094ea <_strtod_l+0xc2>
 80095b0:	2300      	movs	r3, #0
 80095b2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80095b6:	f10b 0201 	add.w	r2, fp, #1
 80095ba:	9211      	str	r2, [sp, #68]	; 0x44
 80095bc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80095c0:	2a2b      	cmp	r2, #43	; 0x2b
 80095c2:	d071      	beq.n	80096a8 <_strtod_l+0x280>
 80095c4:	2a2d      	cmp	r2, #45	; 0x2d
 80095c6:	d077      	beq.n	80096b8 <_strtod_l+0x290>
 80095c8:	f04f 0e00 	mov.w	lr, #0
 80095cc:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80095d0:	2d09      	cmp	r5, #9
 80095d2:	d97f      	bls.n	80096d4 <_strtod_l+0x2ac>
 80095d4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80095d8:	2500      	movs	r5, #0
 80095da:	e09b      	b.n	8009714 <_strtod_l+0x2ec>
 80095dc:	2300      	movs	r3, #0
 80095de:	e7c3      	b.n	8009568 <_strtod_l+0x140>
 80095e0:	9906      	ldr	r1, [sp, #24]
 80095e2:	2908      	cmp	r1, #8
 80095e4:	bfdd      	ittte	le
 80095e6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80095e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80095ec:	9309      	strle	r3, [sp, #36]	; 0x24
 80095ee:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80095f2:	9b06      	ldr	r3, [sp, #24]
 80095f4:	3001      	adds	r0, #1
 80095f6:	3301      	adds	r3, #1
 80095f8:	9306      	str	r3, [sp, #24]
 80095fa:	9011      	str	r0, [sp, #68]	; 0x44
 80095fc:	e7be      	b.n	800957c <_strtod_l+0x154>
 80095fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009600:	195a      	adds	r2, r3, r5
 8009602:	9211      	str	r2, [sp, #68]	; 0x44
 8009604:	5d5a      	ldrb	r2, [r3, r5]
 8009606:	9b06      	ldr	r3, [sp, #24]
 8009608:	b3a3      	cbz	r3, 8009674 <_strtod_l+0x24c>
 800960a:	4607      	mov	r7, r0
 800960c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009610:	2909      	cmp	r1, #9
 8009612:	d912      	bls.n	800963a <_strtod_l+0x212>
 8009614:	2101      	movs	r1, #1
 8009616:	e7c3      	b.n	80095a0 <_strtod_l+0x178>
 8009618:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800961a:	1c5a      	adds	r2, r3, #1
 800961c:	9211      	str	r2, [sp, #68]	; 0x44
 800961e:	785a      	ldrb	r2, [r3, #1]
 8009620:	3001      	adds	r0, #1
 8009622:	2a30      	cmp	r2, #48	; 0x30
 8009624:	d0f8      	beq.n	8009618 <_strtod_l+0x1f0>
 8009626:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800962a:	2b08      	cmp	r3, #8
 800962c:	f200 8497 	bhi.w	8009f5e <_strtod_l+0xb36>
 8009630:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009632:	930a      	str	r3, [sp, #40]	; 0x28
 8009634:	4607      	mov	r7, r0
 8009636:	2000      	movs	r0, #0
 8009638:	4603      	mov	r3, r0
 800963a:	3a30      	subs	r2, #48	; 0x30
 800963c:	f100 0101 	add.w	r1, r0, #1
 8009640:	d012      	beq.n	8009668 <_strtod_l+0x240>
 8009642:	440f      	add	r7, r1
 8009644:	eb00 0c03 	add.w	ip, r0, r3
 8009648:	4619      	mov	r1, r3
 800964a:	250a      	movs	r5, #10
 800964c:	4561      	cmp	r1, ip
 800964e:	d113      	bne.n	8009678 <_strtod_l+0x250>
 8009650:	1819      	adds	r1, r3, r0
 8009652:	2908      	cmp	r1, #8
 8009654:	f103 0301 	add.w	r3, r3, #1
 8009658:	4403      	add	r3, r0
 800965a:	dc1c      	bgt.n	8009696 <_strtod_l+0x26e>
 800965c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800965e:	210a      	movs	r1, #10
 8009660:	fb01 2200 	mla	r2, r1, r0, r2
 8009664:	9209      	str	r2, [sp, #36]	; 0x24
 8009666:	2100      	movs	r1, #0
 8009668:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800966a:	1c50      	adds	r0, r2, #1
 800966c:	9011      	str	r0, [sp, #68]	; 0x44
 800966e:	7852      	ldrb	r2, [r2, #1]
 8009670:	4608      	mov	r0, r1
 8009672:	e7cb      	b.n	800960c <_strtod_l+0x1e4>
 8009674:	9806      	ldr	r0, [sp, #24]
 8009676:	e7d4      	b.n	8009622 <_strtod_l+0x1fa>
 8009678:	2908      	cmp	r1, #8
 800967a:	dc04      	bgt.n	8009686 <_strtod_l+0x25e>
 800967c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800967e:	436e      	muls	r6, r5
 8009680:	9609      	str	r6, [sp, #36]	; 0x24
 8009682:	3101      	adds	r1, #1
 8009684:	e7e2      	b.n	800964c <_strtod_l+0x224>
 8009686:	f101 0e01 	add.w	lr, r1, #1
 800968a:	f1be 0f10 	cmp.w	lr, #16
 800968e:	bfd8      	it	le
 8009690:	fb05 fa0a 	mulle.w	sl, r5, sl
 8009694:	e7f5      	b.n	8009682 <_strtod_l+0x25a>
 8009696:	2b10      	cmp	r3, #16
 8009698:	bfdc      	itt	le
 800969a:	210a      	movle	r1, #10
 800969c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80096a0:	e7e1      	b.n	8009666 <_strtod_l+0x23e>
 80096a2:	2700      	movs	r7, #0
 80096a4:	2101      	movs	r1, #1
 80096a6:	e780      	b.n	80095aa <_strtod_l+0x182>
 80096a8:	f04f 0e00 	mov.w	lr, #0
 80096ac:	f10b 0202 	add.w	r2, fp, #2
 80096b0:	9211      	str	r2, [sp, #68]	; 0x44
 80096b2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80096b6:	e789      	b.n	80095cc <_strtod_l+0x1a4>
 80096b8:	f04f 0e01 	mov.w	lr, #1
 80096bc:	e7f6      	b.n	80096ac <_strtod_l+0x284>
 80096be:	bf00      	nop
 80096c0:	0800d9c0 	.word	0x0800d9c0
 80096c4:	0800d774 	.word	0x0800d774
 80096c8:	7ff00000 	.word	0x7ff00000
 80096cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80096ce:	1c55      	adds	r5, r2, #1
 80096d0:	9511      	str	r5, [sp, #68]	; 0x44
 80096d2:	7852      	ldrb	r2, [r2, #1]
 80096d4:	2a30      	cmp	r2, #48	; 0x30
 80096d6:	d0f9      	beq.n	80096cc <_strtod_l+0x2a4>
 80096d8:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80096dc:	2d08      	cmp	r5, #8
 80096de:	f63f af7b 	bhi.w	80095d8 <_strtod_l+0x1b0>
 80096e2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80096e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80096e8:	9207      	str	r2, [sp, #28]
 80096ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80096ec:	1c55      	adds	r5, r2, #1
 80096ee:	9511      	str	r5, [sp, #68]	; 0x44
 80096f0:	7852      	ldrb	r2, [r2, #1]
 80096f2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80096f6:	2e09      	cmp	r6, #9
 80096f8:	d937      	bls.n	800976a <_strtod_l+0x342>
 80096fa:	9e07      	ldr	r6, [sp, #28]
 80096fc:	1bad      	subs	r5, r5, r6
 80096fe:	2d08      	cmp	r5, #8
 8009700:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009704:	dc02      	bgt.n	800970c <_strtod_l+0x2e4>
 8009706:	4565      	cmp	r5, ip
 8009708:	bfa8      	it	ge
 800970a:	4665      	movge	r5, ip
 800970c:	f1be 0f00 	cmp.w	lr, #0
 8009710:	d000      	beq.n	8009714 <_strtod_l+0x2ec>
 8009712:	426d      	negs	r5, r5
 8009714:	2b00      	cmp	r3, #0
 8009716:	d14d      	bne.n	80097b4 <_strtod_l+0x38c>
 8009718:	9b04      	ldr	r3, [sp, #16]
 800971a:	4303      	orrs	r3, r0
 800971c:	f47f aec8 	bne.w	80094b0 <_strtod_l+0x88>
 8009720:	2900      	cmp	r1, #0
 8009722:	f47f aee2 	bne.w	80094ea <_strtod_l+0xc2>
 8009726:	2a69      	cmp	r2, #105	; 0x69
 8009728:	d027      	beq.n	800977a <_strtod_l+0x352>
 800972a:	dc24      	bgt.n	8009776 <_strtod_l+0x34e>
 800972c:	2a49      	cmp	r2, #73	; 0x49
 800972e:	d024      	beq.n	800977a <_strtod_l+0x352>
 8009730:	2a4e      	cmp	r2, #78	; 0x4e
 8009732:	f47f aeda 	bne.w	80094ea <_strtod_l+0xc2>
 8009736:	4996      	ldr	r1, [pc, #600]	; (8009990 <_strtod_l+0x568>)
 8009738:	a811      	add	r0, sp, #68	; 0x44
 800973a:	f001 fd93 	bl	800b264 <__match>
 800973e:	2800      	cmp	r0, #0
 8009740:	f43f aed3 	beq.w	80094ea <_strtod_l+0xc2>
 8009744:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	2b28      	cmp	r3, #40	; 0x28
 800974a:	d12d      	bne.n	80097a8 <_strtod_l+0x380>
 800974c:	4991      	ldr	r1, [pc, #580]	; (8009994 <_strtod_l+0x56c>)
 800974e:	aa14      	add	r2, sp, #80	; 0x50
 8009750:	a811      	add	r0, sp, #68	; 0x44
 8009752:	f001 fd9b 	bl	800b28c <__hexnan>
 8009756:	2805      	cmp	r0, #5
 8009758:	d126      	bne.n	80097a8 <_strtod_l+0x380>
 800975a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800975c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009760:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009764:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009768:	e6a2      	b.n	80094b0 <_strtod_l+0x88>
 800976a:	250a      	movs	r5, #10
 800976c:	fb05 250c 	mla	r5, r5, ip, r2
 8009770:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8009774:	e7b9      	b.n	80096ea <_strtod_l+0x2c2>
 8009776:	2a6e      	cmp	r2, #110	; 0x6e
 8009778:	e7db      	b.n	8009732 <_strtod_l+0x30a>
 800977a:	4987      	ldr	r1, [pc, #540]	; (8009998 <_strtod_l+0x570>)
 800977c:	a811      	add	r0, sp, #68	; 0x44
 800977e:	f001 fd71 	bl	800b264 <__match>
 8009782:	2800      	cmp	r0, #0
 8009784:	f43f aeb1 	beq.w	80094ea <_strtod_l+0xc2>
 8009788:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800978a:	4984      	ldr	r1, [pc, #528]	; (800999c <_strtod_l+0x574>)
 800978c:	3b01      	subs	r3, #1
 800978e:	a811      	add	r0, sp, #68	; 0x44
 8009790:	9311      	str	r3, [sp, #68]	; 0x44
 8009792:	f001 fd67 	bl	800b264 <__match>
 8009796:	b910      	cbnz	r0, 800979e <_strtod_l+0x376>
 8009798:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800979a:	3301      	adds	r3, #1
 800979c:	9311      	str	r3, [sp, #68]	; 0x44
 800979e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80099b0 <_strtod_l+0x588>
 80097a2:	f04f 0800 	mov.w	r8, #0
 80097a6:	e683      	b.n	80094b0 <_strtod_l+0x88>
 80097a8:	487d      	ldr	r0, [pc, #500]	; (80099a0 <_strtod_l+0x578>)
 80097aa:	f003 f891 	bl	800c8d0 <nan>
 80097ae:	ec59 8b10 	vmov	r8, r9, d0
 80097b2:	e67d      	b.n	80094b0 <_strtod_l+0x88>
 80097b4:	1bea      	subs	r2, r5, r7
 80097b6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80097ba:	9207      	str	r2, [sp, #28]
 80097bc:	9a06      	ldr	r2, [sp, #24]
 80097be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80097c2:	2a00      	cmp	r2, #0
 80097c4:	bf08      	it	eq
 80097c6:	461a      	moveq	r2, r3
 80097c8:	2b10      	cmp	r3, #16
 80097ca:	9206      	str	r2, [sp, #24]
 80097cc:	461a      	mov	r2, r3
 80097ce:	bfa8      	it	ge
 80097d0:	2210      	movge	r2, #16
 80097d2:	2b09      	cmp	r3, #9
 80097d4:	ec59 8b17 	vmov	r8, r9, d7
 80097d8:	dd0c      	ble.n	80097f4 <_strtod_l+0x3cc>
 80097da:	4972      	ldr	r1, [pc, #456]	; (80099a4 <_strtod_l+0x57c>)
 80097dc:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80097e0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80097e4:	ee06 aa90 	vmov	s13, sl
 80097e8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80097ec:	eea7 6b05 	vfma.f64	d6, d7, d5
 80097f0:	ec59 8b16 	vmov	r8, r9, d6
 80097f4:	2b0f      	cmp	r3, #15
 80097f6:	dc36      	bgt.n	8009866 <_strtod_l+0x43e>
 80097f8:	9907      	ldr	r1, [sp, #28]
 80097fa:	2900      	cmp	r1, #0
 80097fc:	f43f ae58 	beq.w	80094b0 <_strtod_l+0x88>
 8009800:	dd23      	ble.n	800984a <_strtod_l+0x422>
 8009802:	2916      	cmp	r1, #22
 8009804:	dc0b      	bgt.n	800981e <_strtod_l+0x3f6>
 8009806:	4b67      	ldr	r3, [pc, #412]	; (80099a4 <_strtod_l+0x57c>)
 8009808:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800980c:	ed93 7b00 	vldr	d7, [r3]
 8009810:	ec49 8b16 	vmov	d6, r8, r9
 8009814:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009818:	ec59 8b17 	vmov	r8, r9, d7
 800981c:	e648      	b.n	80094b0 <_strtod_l+0x88>
 800981e:	9807      	ldr	r0, [sp, #28]
 8009820:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8009824:	4281      	cmp	r1, r0
 8009826:	db1e      	blt.n	8009866 <_strtod_l+0x43e>
 8009828:	4a5e      	ldr	r2, [pc, #376]	; (80099a4 <_strtod_l+0x57c>)
 800982a:	f1c3 030f 	rsb	r3, r3, #15
 800982e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009832:	ed91 7b00 	vldr	d7, [r1]
 8009836:	ec49 8b16 	vmov	d6, r8, r9
 800983a:	1ac3      	subs	r3, r0, r3
 800983c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009840:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009844:	ed92 6b00 	vldr	d6, [r2]
 8009848:	e7e4      	b.n	8009814 <_strtod_l+0x3ec>
 800984a:	9907      	ldr	r1, [sp, #28]
 800984c:	3116      	adds	r1, #22
 800984e:	db0a      	blt.n	8009866 <_strtod_l+0x43e>
 8009850:	4b54      	ldr	r3, [pc, #336]	; (80099a4 <_strtod_l+0x57c>)
 8009852:	1b7d      	subs	r5, r7, r5
 8009854:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009858:	ed95 7b00 	vldr	d7, [r5]
 800985c:	ec49 8b16 	vmov	d6, r8, r9
 8009860:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009864:	e7d8      	b.n	8009818 <_strtod_l+0x3f0>
 8009866:	9907      	ldr	r1, [sp, #28]
 8009868:	1a9a      	subs	r2, r3, r2
 800986a:	440a      	add	r2, r1
 800986c:	2a00      	cmp	r2, #0
 800986e:	dd6f      	ble.n	8009950 <_strtod_l+0x528>
 8009870:	f012 000f 	ands.w	r0, r2, #15
 8009874:	d00a      	beq.n	800988c <_strtod_l+0x464>
 8009876:	494b      	ldr	r1, [pc, #300]	; (80099a4 <_strtod_l+0x57c>)
 8009878:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800987c:	ed91 7b00 	vldr	d7, [r1]
 8009880:	ec49 8b16 	vmov	d6, r8, r9
 8009884:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009888:	ec59 8b17 	vmov	r8, r9, d7
 800988c:	f032 020f 	bics.w	r2, r2, #15
 8009890:	d04f      	beq.n	8009932 <_strtod_l+0x50a>
 8009892:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8009896:	dd22      	ble.n	80098de <_strtod_l+0x4b6>
 8009898:	2500      	movs	r5, #0
 800989a:	462e      	mov	r6, r5
 800989c:	9506      	str	r5, [sp, #24]
 800989e:	462f      	mov	r7, r5
 80098a0:	2322      	movs	r3, #34	; 0x22
 80098a2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80099b0 <_strtod_l+0x588>
 80098a6:	6023      	str	r3, [r4, #0]
 80098a8:	f04f 0800 	mov.w	r8, #0
 80098ac:	9b06      	ldr	r3, [sp, #24]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f43f adfe 	beq.w	80094b0 <_strtod_l+0x88>
 80098b4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80098b6:	4620      	mov	r0, r4
 80098b8:	f001 fe02 	bl	800b4c0 <_Bfree>
 80098bc:	4639      	mov	r1, r7
 80098be:	4620      	mov	r0, r4
 80098c0:	f001 fdfe 	bl	800b4c0 <_Bfree>
 80098c4:	4631      	mov	r1, r6
 80098c6:	4620      	mov	r0, r4
 80098c8:	f001 fdfa 	bl	800b4c0 <_Bfree>
 80098cc:	9906      	ldr	r1, [sp, #24]
 80098ce:	4620      	mov	r0, r4
 80098d0:	f001 fdf6 	bl	800b4c0 <_Bfree>
 80098d4:	4629      	mov	r1, r5
 80098d6:	4620      	mov	r0, r4
 80098d8:	f001 fdf2 	bl	800b4c0 <_Bfree>
 80098dc:	e5e8      	b.n	80094b0 <_strtod_l+0x88>
 80098de:	2000      	movs	r0, #0
 80098e0:	ec49 8b17 	vmov	d7, r8, r9
 80098e4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80099a8 <_strtod_l+0x580>
 80098e8:	1112      	asrs	r2, r2, #4
 80098ea:	4601      	mov	r1, r0
 80098ec:	2a01      	cmp	r2, #1
 80098ee:	dc23      	bgt.n	8009938 <_strtod_l+0x510>
 80098f0:	b108      	cbz	r0, 80098f6 <_strtod_l+0x4ce>
 80098f2:	ec59 8b17 	vmov	r8, r9, d7
 80098f6:	4a2c      	ldr	r2, [pc, #176]	; (80099a8 <_strtod_l+0x580>)
 80098f8:	482c      	ldr	r0, [pc, #176]	; (80099ac <_strtod_l+0x584>)
 80098fa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80098fe:	ed92 7b00 	vldr	d7, [r2]
 8009902:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009906:	ec49 8b16 	vmov	d6, r8, r9
 800990a:	4a29      	ldr	r2, [pc, #164]	; (80099b0 <_strtod_l+0x588>)
 800990c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009910:	ee17 1a90 	vmov	r1, s15
 8009914:	400a      	ands	r2, r1
 8009916:	4282      	cmp	r2, r0
 8009918:	ec59 8b17 	vmov	r8, r9, d7
 800991c:	d8bc      	bhi.n	8009898 <_strtod_l+0x470>
 800991e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8009922:	4282      	cmp	r2, r0
 8009924:	bf86      	itte	hi
 8009926:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80099b4 <_strtod_l+0x58c>
 800992a:	f04f 38ff 	movhi.w	r8, #4294967295
 800992e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8009932:	2200      	movs	r2, #0
 8009934:	9204      	str	r2, [sp, #16]
 8009936:	e078      	b.n	8009a2a <_strtod_l+0x602>
 8009938:	07d6      	lsls	r6, r2, #31
 800993a:	d504      	bpl.n	8009946 <_strtod_l+0x51e>
 800993c:	ed9c 6b00 	vldr	d6, [ip]
 8009940:	2001      	movs	r0, #1
 8009942:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009946:	3101      	adds	r1, #1
 8009948:	1052      	asrs	r2, r2, #1
 800994a:	f10c 0c08 	add.w	ip, ip, #8
 800994e:	e7cd      	b.n	80098ec <_strtod_l+0x4c4>
 8009950:	d0ef      	beq.n	8009932 <_strtod_l+0x50a>
 8009952:	4252      	negs	r2, r2
 8009954:	f012 000f 	ands.w	r0, r2, #15
 8009958:	d00a      	beq.n	8009970 <_strtod_l+0x548>
 800995a:	4912      	ldr	r1, [pc, #72]	; (80099a4 <_strtod_l+0x57c>)
 800995c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009960:	ed91 7b00 	vldr	d7, [r1]
 8009964:	ec49 8b16 	vmov	d6, r8, r9
 8009968:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800996c:	ec59 8b17 	vmov	r8, r9, d7
 8009970:	1112      	asrs	r2, r2, #4
 8009972:	d0de      	beq.n	8009932 <_strtod_l+0x50a>
 8009974:	2a1f      	cmp	r2, #31
 8009976:	dd1f      	ble.n	80099b8 <_strtod_l+0x590>
 8009978:	2500      	movs	r5, #0
 800997a:	462e      	mov	r6, r5
 800997c:	9506      	str	r5, [sp, #24]
 800997e:	462f      	mov	r7, r5
 8009980:	2322      	movs	r3, #34	; 0x22
 8009982:	f04f 0800 	mov.w	r8, #0
 8009986:	f04f 0900 	mov.w	r9, #0
 800998a:	6023      	str	r3, [r4, #0]
 800998c:	e78e      	b.n	80098ac <_strtod_l+0x484>
 800998e:	bf00      	nop
 8009990:	0800d749 	.word	0x0800d749
 8009994:	0800d788 	.word	0x0800d788
 8009998:	0800d741 	.word	0x0800d741
 800999c:	0800d8cc 	.word	0x0800d8cc
 80099a0:	0800db93 	.word	0x0800db93
 80099a4:	0800da58 	.word	0x0800da58
 80099a8:	0800da30 	.word	0x0800da30
 80099ac:	7ca00000 	.word	0x7ca00000
 80099b0:	7ff00000 	.word	0x7ff00000
 80099b4:	7fefffff 	.word	0x7fefffff
 80099b8:	f012 0110 	ands.w	r1, r2, #16
 80099bc:	bf18      	it	ne
 80099be:	216a      	movne	r1, #106	; 0x6a
 80099c0:	9104      	str	r1, [sp, #16]
 80099c2:	ec49 8b17 	vmov	d7, r8, r9
 80099c6:	49be      	ldr	r1, [pc, #760]	; (8009cc0 <_strtod_l+0x898>)
 80099c8:	2000      	movs	r0, #0
 80099ca:	07d6      	lsls	r6, r2, #31
 80099cc:	d504      	bpl.n	80099d8 <_strtod_l+0x5b0>
 80099ce:	ed91 6b00 	vldr	d6, [r1]
 80099d2:	2001      	movs	r0, #1
 80099d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80099d8:	1052      	asrs	r2, r2, #1
 80099da:	f101 0108 	add.w	r1, r1, #8
 80099de:	d1f4      	bne.n	80099ca <_strtod_l+0x5a2>
 80099e0:	b108      	cbz	r0, 80099e6 <_strtod_l+0x5be>
 80099e2:	ec59 8b17 	vmov	r8, r9, d7
 80099e6:	9a04      	ldr	r2, [sp, #16]
 80099e8:	b1c2      	cbz	r2, 8009a1c <_strtod_l+0x5f4>
 80099ea:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80099ee:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80099f2:	2a00      	cmp	r2, #0
 80099f4:	4648      	mov	r0, r9
 80099f6:	dd11      	ble.n	8009a1c <_strtod_l+0x5f4>
 80099f8:	2a1f      	cmp	r2, #31
 80099fa:	f340 812e 	ble.w	8009c5a <_strtod_l+0x832>
 80099fe:	2a34      	cmp	r2, #52	; 0x34
 8009a00:	bfde      	ittt	le
 8009a02:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8009a06:	f04f 32ff 	movle.w	r2, #4294967295
 8009a0a:	fa02 f101 	lslle.w	r1, r2, r1
 8009a0e:	f04f 0800 	mov.w	r8, #0
 8009a12:	bfcc      	ite	gt
 8009a14:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009a18:	ea01 0900 	andle.w	r9, r1, r0
 8009a1c:	ec49 8b17 	vmov	d7, r8, r9
 8009a20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a28:	d0a6      	beq.n	8009978 <_strtod_l+0x550>
 8009a2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a2c:	9200      	str	r2, [sp, #0]
 8009a2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009a30:	9a06      	ldr	r2, [sp, #24]
 8009a32:	4620      	mov	r0, r4
 8009a34:	f001 fdac 	bl	800b590 <__s2b>
 8009a38:	9006      	str	r0, [sp, #24]
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	f43f af2c 	beq.w	8009898 <_strtod_l+0x470>
 8009a40:	9b07      	ldr	r3, [sp, #28]
 8009a42:	1b7d      	subs	r5, r7, r5
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	bfb4      	ite	lt
 8009a48:	462b      	movlt	r3, r5
 8009a4a:	2300      	movge	r3, #0
 8009a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a4e:	9b07      	ldr	r3, [sp, #28]
 8009a50:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8009ca0 <_strtod_l+0x878>
 8009a54:	ed9f ab94 	vldr	d10, [pc, #592]	; 8009ca8 <_strtod_l+0x880>
 8009a58:	ed9f bb95 	vldr	d11, [pc, #596]	; 8009cb0 <_strtod_l+0x888>
 8009a5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009a60:	2500      	movs	r5, #0
 8009a62:	930c      	str	r3, [sp, #48]	; 0x30
 8009a64:	462e      	mov	r6, r5
 8009a66:	9b06      	ldr	r3, [sp, #24]
 8009a68:	4620      	mov	r0, r4
 8009a6a:	6859      	ldr	r1, [r3, #4]
 8009a6c:	f001 fce8 	bl	800b440 <_Balloc>
 8009a70:	4607      	mov	r7, r0
 8009a72:	2800      	cmp	r0, #0
 8009a74:	f43f af14 	beq.w	80098a0 <_strtod_l+0x478>
 8009a78:	9b06      	ldr	r3, [sp, #24]
 8009a7a:	691a      	ldr	r2, [r3, #16]
 8009a7c:	3202      	adds	r2, #2
 8009a7e:	f103 010c 	add.w	r1, r3, #12
 8009a82:	0092      	lsls	r2, r2, #2
 8009a84:	300c      	adds	r0, #12
 8009a86:	f001 fccd 	bl	800b424 <memcpy>
 8009a8a:	ec49 8b10 	vmov	d0, r8, r9
 8009a8e:	aa14      	add	r2, sp, #80	; 0x50
 8009a90:	a913      	add	r1, sp, #76	; 0x4c
 8009a92:	4620      	mov	r0, r4
 8009a94:	f002 f8c2 	bl	800bc1c <__d2b>
 8009a98:	ec49 8b18 	vmov	d8, r8, r9
 8009a9c:	9012      	str	r0, [sp, #72]	; 0x48
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	f43f aefe 	beq.w	80098a0 <_strtod_l+0x478>
 8009aa4:	2101      	movs	r1, #1
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f001 fe0c 	bl	800b6c4 <__i2b>
 8009aac:	4606      	mov	r6, r0
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	f43f aef6 	beq.w	80098a0 <_strtod_l+0x478>
 8009ab4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ab6:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	bfab      	itete	ge
 8009abc:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8009abe:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8009ac0:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8009ac4:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8009ac8:	bfac      	ite	ge
 8009aca:	eb03 0b02 	addge.w	fp, r3, r2
 8009ace:	eba2 0a03 	sublt.w	sl, r2, r3
 8009ad2:	9a04      	ldr	r2, [sp, #16]
 8009ad4:	1a9b      	subs	r3, r3, r2
 8009ad6:	440b      	add	r3, r1
 8009ad8:	4a7a      	ldr	r2, [pc, #488]	; (8009cc4 <_strtod_l+0x89c>)
 8009ada:	3b01      	subs	r3, #1
 8009adc:	4293      	cmp	r3, r2
 8009ade:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8009ae2:	f280 80cd 	bge.w	8009c80 <_strtod_l+0x858>
 8009ae6:	1ad2      	subs	r2, r2, r3
 8009ae8:	2a1f      	cmp	r2, #31
 8009aea:	eba1 0102 	sub.w	r1, r1, r2
 8009aee:	f04f 0001 	mov.w	r0, #1
 8009af2:	f300 80b9 	bgt.w	8009c68 <_strtod_l+0x840>
 8009af6:	fa00 f302 	lsl.w	r3, r0, r2
 8009afa:	930b      	str	r3, [sp, #44]	; 0x2c
 8009afc:	2300      	movs	r3, #0
 8009afe:	930a      	str	r3, [sp, #40]	; 0x28
 8009b00:	eb0b 0301 	add.w	r3, fp, r1
 8009b04:	9a04      	ldr	r2, [sp, #16]
 8009b06:	459b      	cmp	fp, r3
 8009b08:	448a      	add	sl, r1
 8009b0a:	4492      	add	sl, r2
 8009b0c:	465a      	mov	r2, fp
 8009b0e:	bfa8      	it	ge
 8009b10:	461a      	movge	r2, r3
 8009b12:	4552      	cmp	r2, sl
 8009b14:	bfa8      	it	ge
 8009b16:	4652      	movge	r2, sl
 8009b18:	2a00      	cmp	r2, #0
 8009b1a:	bfc2      	ittt	gt
 8009b1c:	1a9b      	subgt	r3, r3, r2
 8009b1e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8009b22:	ebab 0b02 	subgt.w	fp, fp, r2
 8009b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b28:	2a00      	cmp	r2, #0
 8009b2a:	dd18      	ble.n	8009b5e <_strtod_l+0x736>
 8009b2c:	4631      	mov	r1, r6
 8009b2e:	4620      	mov	r0, r4
 8009b30:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b32:	f001 fe87 	bl	800b844 <__pow5mult>
 8009b36:	4606      	mov	r6, r0
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	f43f aeb1 	beq.w	80098a0 <_strtod_l+0x478>
 8009b3e:	4601      	mov	r1, r0
 8009b40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b42:	4620      	mov	r0, r4
 8009b44:	f001 fdd4 	bl	800b6f0 <__multiply>
 8009b48:	900e      	str	r0, [sp, #56]	; 0x38
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	f43f aea8 	beq.w	80098a0 <_strtod_l+0x478>
 8009b50:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009b52:	4620      	mov	r0, r4
 8009b54:	f001 fcb4 	bl	800b4c0 <_Bfree>
 8009b58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b5c:	9212      	str	r2, [sp, #72]	; 0x48
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f300 8093 	bgt.w	8009c8a <_strtod_l+0x862>
 8009b64:	9b07      	ldr	r3, [sp, #28]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	dd08      	ble.n	8009b7c <_strtod_l+0x754>
 8009b6a:	4639      	mov	r1, r7
 8009b6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b6e:	4620      	mov	r0, r4
 8009b70:	f001 fe68 	bl	800b844 <__pow5mult>
 8009b74:	4607      	mov	r7, r0
 8009b76:	2800      	cmp	r0, #0
 8009b78:	f43f ae92 	beq.w	80098a0 <_strtod_l+0x478>
 8009b7c:	f1ba 0f00 	cmp.w	sl, #0
 8009b80:	dd08      	ble.n	8009b94 <_strtod_l+0x76c>
 8009b82:	4639      	mov	r1, r7
 8009b84:	4652      	mov	r2, sl
 8009b86:	4620      	mov	r0, r4
 8009b88:	f001 feb6 	bl	800b8f8 <__lshift>
 8009b8c:	4607      	mov	r7, r0
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	f43f ae86 	beq.w	80098a0 <_strtod_l+0x478>
 8009b94:	f1bb 0f00 	cmp.w	fp, #0
 8009b98:	dd08      	ble.n	8009bac <_strtod_l+0x784>
 8009b9a:	4631      	mov	r1, r6
 8009b9c:	465a      	mov	r2, fp
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	f001 feaa 	bl	800b8f8 <__lshift>
 8009ba4:	4606      	mov	r6, r0
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	f43f ae7a 	beq.w	80098a0 <_strtod_l+0x478>
 8009bac:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009bae:	463a      	mov	r2, r7
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	f001 ff2d 	bl	800ba10 <__mdiff>
 8009bb6:	4605      	mov	r5, r0
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	f43f ae71 	beq.w	80098a0 <_strtod_l+0x478>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8009bc4:	60c3      	str	r3, [r0, #12]
 8009bc6:	4631      	mov	r1, r6
 8009bc8:	f001 ff06 	bl	800b9d8 <__mcmp>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	da7d      	bge.n	8009ccc <_strtod_l+0x8a4>
 8009bd0:	ea5a 0308 	orrs.w	r3, sl, r8
 8009bd4:	f040 80a3 	bne.w	8009d1e <_strtod_l+0x8f6>
 8009bd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f040 809e 	bne.w	8009d1e <_strtod_l+0x8f6>
 8009be2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009be6:	0d1b      	lsrs	r3, r3, #20
 8009be8:	051b      	lsls	r3, r3, #20
 8009bea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009bee:	f240 8096 	bls.w	8009d1e <_strtod_l+0x8f6>
 8009bf2:	696b      	ldr	r3, [r5, #20]
 8009bf4:	b91b      	cbnz	r3, 8009bfe <_strtod_l+0x7d6>
 8009bf6:	692b      	ldr	r3, [r5, #16]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	f340 8090 	ble.w	8009d1e <_strtod_l+0x8f6>
 8009bfe:	4629      	mov	r1, r5
 8009c00:	2201      	movs	r2, #1
 8009c02:	4620      	mov	r0, r4
 8009c04:	f001 fe78 	bl	800b8f8 <__lshift>
 8009c08:	4631      	mov	r1, r6
 8009c0a:	4605      	mov	r5, r0
 8009c0c:	f001 fee4 	bl	800b9d8 <__mcmp>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	f340 8084 	ble.w	8009d1e <_strtod_l+0x8f6>
 8009c16:	9904      	ldr	r1, [sp, #16]
 8009c18:	4a2b      	ldr	r2, [pc, #172]	; (8009cc8 <_strtod_l+0x8a0>)
 8009c1a:	464b      	mov	r3, r9
 8009c1c:	2900      	cmp	r1, #0
 8009c1e:	f000 809d 	beq.w	8009d5c <_strtod_l+0x934>
 8009c22:	ea02 0109 	and.w	r1, r2, r9
 8009c26:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009c2a:	f300 8097 	bgt.w	8009d5c <_strtod_l+0x934>
 8009c2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009c32:	f77f aea5 	ble.w	8009980 <_strtod_l+0x558>
 8009c36:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009cb8 <_strtod_l+0x890>
 8009c3a:	ec49 8b16 	vmov	d6, r8, r9
 8009c3e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009c42:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009c46:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	bf08      	it	eq
 8009c4e:	2322      	moveq	r3, #34	; 0x22
 8009c50:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009c54:	bf08      	it	eq
 8009c56:	6023      	streq	r3, [r4, #0]
 8009c58:	e62c      	b.n	80098b4 <_strtod_l+0x48c>
 8009c5a:	f04f 31ff 	mov.w	r1, #4294967295
 8009c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8009c62:	ea02 0808 	and.w	r8, r2, r8
 8009c66:	e6d9      	b.n	8009a1c <_strtod_l+0x5f4>
 8009c68:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009c6c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009c70:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009c74:	33e2      	adds	r3, #226	; 0xe2
 8009c76:	fa00 f303 	lsl.w	r3, r0, r3
 8009c7a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8009c7e:	e73f      	b.n	8009b00 <_strtod_l+0x6d8>
 8009c80:	2200      	movs	r2, #0
 8009c82:	2301      	movs	r3, #1
 8009c84:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009c88:	e73a      	b.n	8009b00 <_strtod_l+0x6d8>
 8009c8a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f001 fe32 	bl	800b8f8 <__lshift>
 8009c94:	9012      	str	r0, [sp, #72]	; 0x48
 8009c96:	2800      	cmp	r0, #0
 8009c98:	f47f af64 	bne.w	8009b64 <_strtod_l+0x73c>
 8009c9c:	e600      	b.n	80098a0 <_strtod_l+0x478>
 8009c9e:	bf00      	nop
 8009ca0:	94a03595 	.word	0x94a03595
 8009ca4:	3fcfffff 	.word	0x3fcfffff
 8009ca8:	94a03595 	.word	0x94a03595
 8009cac:	3fdfffff 	.word	0x3fdfffff
 8009cb0:	35afe535 	.word	0x35afe535
 8009cb4:	3fe00000 	.word	0x3fe00000
 8009cb8:	00000000 	.word	0x00000000
 8009cbc:	39500000 	.word	0x39500000
 8009cc0:	0800d7a0 	.word	0x0800d7a0
 8009cc4:	fffffc02 	.word	0xfffffc02
 8009cc8:	7ff00000 	.word	0x7ff00000
 8009ccc:	46cb      	mov	fp, r9
 8009cce:	d15f      	bne.n	8009d90 <_strtod_l+0x968>
 8009cd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009cd4:	f1ba 0f00 	cmp.w	sl, #0
 8009cd8:	d02a      	beq.n	8009d30 <_strtod_l+0x908>
 8009cda:	4aa7      	ldr	r2, [pc, #668]	; (8009f78 <_strtod_l+0xb50>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d12b      	bne.n	8009d38 <_strtod_l+0x910>
 8009ce0:	9b04      	ldr	r3, [sp, #16]
 8009ce2:	4642      	mov	r2, r8
 8009ce4:	b1fb      	cbz	r3, 8009d26 <_strtod_l+0x8fe>
 8009ce6:	4ba5      	ldr	r3, [pc, #660]	; (8009f7c <_strtod_l+0xb54>)
 8009ce8:	ea09 0303 	and.w	r3, r9, r3
 8009cec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8009cf4:	d81a      	bhi.n	8009d2c <_strtod_l+0x904>
 8009cf6:	0d1b      	lsrs	r3, r3, #20
 8009cf8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d119      	bne.n	8009d38 <_strtod_l+0x910>
 8009d04:	4b9e      	ldr	r3, [pc, #632]	; (8009f80 <_strtod_l+0xb58>)
 8009d06:	459b      	cmp	fp, r3
 8009d08:	d102      	bne.n	8009d10 <_strtod_l+0x8e8>
 8009d0a:	3201      	adds	r2, #1
 8009d0c:	f43f adc8 	beq.w	80098a0 <_strtod_l+0x478>
 8009d10:	4b9a      	ldr	r3, [pc, #616]	; (8009f7c <_strtod_l+0xb54>)
 8009d12:	ea0b 0303 	and.w	r3, fp, r3
 8009d16:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009d1a:	f04f 0800 	mov.w	r8, #0
 8009d1e:	9b04      	ldr	r3, [sp, #16]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d188      	bne.n	8009c36 <_strtod_l+0x80e>
 8009d24:	e5c6      	b.n	80098b4 <_strtod_l+0x48c>
 8009d26:	f04f 33ff 	mov.w	r3, #4294967295
 8009d2a:	e7e9      	b.n	8009d00 <_strtod_l+0x8d8>
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	e7e7      	b.n	8009d00 <_strtod_l+0x8d8>
 8009d30:	ea53 0308 	orrs.w	r3, r3, r8
 8009d34:	f43f af6f 	beq.w	8009c16 <_strtod_l+0x7ee>
 8009d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d3a:	b1cb      	cbz	r3, 8009d70 <_strtod_l+0x948>
 8009d3c:	ea13 0f0b 	tst.w	r3, fp
 8009d40:	d0ed      	beq.n	8009d1e <_strtod_l+0x8f6>
 8009d42:	9a04      	ldr	r2, [sp, #16]
 8009d44:	4640      	mov	r0, r8
 8009d46:	4649      	mov	r1, r9
 8009d48:	f1ba 0f00 	cmp.w	sl, #0
 8009d4c:	d014      	beq.n	8009d78 <_strtod_l+0x950>
 8009d4e:	f7ff fb51 	bl	80093f4 <sulp>
 8009d52:	ee38 7b00 	vadd.f64	d7, d8, d0
 8009d56:	ec59 8b17 	vmov	r8, r9, d7
 8009d5a:	e7e0      	b.n	8009d1e <_strtod_l+0x8f6>
 8009d5c:	4013      	ands	r3, r2
 8009d5e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009d62:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009d66:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009d6a:	f04f 38ff 	mov.w	r8, #4294967295
 8009d6e:	e7d6      	b.n	8009d1e <_strtod_l+0x8f6>
 8009d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d72:	ea13 0f08 	tst.w	r3, r8
 8009d76:	e7e3      	b.n	8009d40 <_strtod_l+0x918>
 8009d78:	f7ff fb3c 	bl	80093f4 <sulp>
 8009d7c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8009d80:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d88:	ec59 8b10 	vmov	r8, r9, d0
 8009d8c:	d1c7      	bne.n	8009d1e <_strtod_l+0x8f6>
 8009d8e:	e5f7      	b.n	8009980 <_strtod_l+0x558>
 8009d90:	4631      	mov	r1, r6
 8009d92:	4628      	mov	r0, r5
 8009d94:	f001 ff9e 	bl	800bcd4 <__ratio>
 8009d98:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8009d9c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009da4:	d865      	bhi.n	8009e72 <_strtod_l+0xa4a>
 8009da6:	f1ba 0f00 	cmp.w	sl, #0
 8009daa:	d042      	beq.n	8009e32 <_strtod_l+0xa0a>
 8009dac:	4b75      	ldr	r3, [pc, #468]	; (8009f84 <_strtod_l+0xb5c>)
 8009dae:	2200      	movs	r2, #0
 8009db0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8009db4:	4871      	ldr	r0, [pc, #452]	; (8009f7c <_strtod_l+0xb54>)
 8009db6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8009f90 <_strtod_l+0xb68>
 8009dba:	ea0b 0100 	and.w	r1, fp, r0
 8009dbe:	4561      	cmp	r1, ip
 8009dc0:	f040 808e 	bne.w	8009ee0 <_strtod_l+0xab8>
 8009dc4:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009dc8:	ec49 8b10 	vmov	d0, r8, r9
 8009dcc:	ec43 2b1c 	vmov	d12, r2, r3
 8009dd0:	910a      	str	r1, [sp, #40]	; 0x28
 8009dd2:	f001 fea7 	bl	800bb24 <__ulp>
 8009dd6:	ec49 8b1e 	vmov	d14, r8, r9
 8009dda:	4868      	ldr	r0, [pc, #416]	; (8009f7c <_strtod_l+0xb54>)
 8009ddc:	eeac eb00 	vfma.f64	d14, d12, d0
 8009de0:	ee1e 3a90 	vmov	r3, s29
 8009de4:	4a68      	ldr	r2, [pc, #416]	; (8009f88 <_strtod_l+0xb60>)
 8009de6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009de8:	4018      	ands	r0, r3
 8009dea:	4290      	cmp	r0, r2
 8009dec:	ec59 8b1e 	vmov	r8, r9, d14
 8009df0:	d94e      	bls.n	8009e90 <_strtod_l+0xa68>
 8009df2:	ee18 3a90 	vmov	r3, s17
 8009df6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d104      	bne.n	8009e08 <_strtod_l+0x9e0>
 8009dfe:	ee18 3a10 	vmov	r3, s16
 8009e02:	3301      	adds	r3, #1
 8009e04:	f43f ad4c 	beq.w	80098a0 <_strtod_l+0x478>
 8009e08:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009f80 <_strtod_l+0xb58>
 8009e0c:	f04f 38ff 	mov.w	r8, #4294967295
 8009e10:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009e12:	4620      	mov	r0, r4
 8009e14:	f001 fb54 	bl	800b4c0 <_Bfree>
 8009e18:	4639      	mov	r1, r7
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f001 fb50 	bl	800b4c0 <_Bfree>
 8009e20:	4631      	mov	r1, r6
 8009e22:	4620      	mov	r0, r4
 8009e24:	f001 fb4c 	bl	800b4c0 <_Bfree>
 8009e28:	4629      	mov	r1, r5
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	f001 fb48 	bl	800b4c0 <_Bfree>
 8009e30:	e619      	b.n	8009a66 <_strtod_l+0x63e>
 8009e32:	f1b8 0f00 	cmp.w	r8, #0
 8009e36:	d112      	bne.n	8009e5e <_strtod_l+0xa36>
 8009e38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e3c:	b9b3      	cbnz	r3, 8009e6c <_strtod_l+0xa44>
 8009e3e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009e42:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e4a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009e4e:	bf58      	it	pl
 8009e50:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8009e54:	eeb1 7b4d 	vneg.f64	d7, d13
 8009e58:	ec53 2b17 	vmov	r2, r3, d7
 8009e5c:	e7aa      	b.n	8009db4 <_strtod_l+0x98c>
 8009e5e:	f1b8 0f01 	cmp.w	r8, #1
 8009e62:	d103      	bne.n	8009e6c <_strtod_l+0xa44>
 8009e64:	f1b9 0f00 	cmp.w	r9, #0
 8009e68:	f43f ad8a 	beq.w	8009980 <_strtod_l+0x558>
 8009e6c:	4b47      	ldr	r3, [pc, #284]	; (8009f8c <_strtod_l+0xb64>)
 8009e6e:	2200      	movs	r2, #0
 8009e70:	e79e      	b.n	8009db0 <_strtod_l+0x988>
 8009e72:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009e76:	ee20 db0d 	vmul.f64	d13, d0, d13
 8009e7a:	f1ba 0f00 	cmp.w	sl, #0
 8009e7e:	d104      	bne.n	8009e8a <_strtod_l+0xa62>
 8009e80:	eeb1 7b4d 	vneg.f64	d7, d13
 8009e84:	ec53 2b17 	vmov	r2, r3, d7
 8009e88:	e794      	b.n	8009db4 <_strtod_l+0x98c>
 8009e8a:	eeb0 7b4d 	vmov.f64	d7, d13
 8009e8e:	e7f9      	b.n	8009e84 <_strtod_l+0xa5c>
 8009e90:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009e94:	9b04      	ldr	r3, [sp, #16]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1ba      	bne.n	8009e10 <_strtod_l+0x9e8>
 8009e9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e9e:	0d1b      	lsrs	r3, r3, #20
 8009ea0:	051b      	lsls	r3, r3, #20
 8009ea2:	4299      	cmp	r1, r3
 8009ea4:	d1b4      	bne.n	8009e10 <_strtod_l+0x9e8>
 8009ea6:	ec51 0b1d 	vmov	r0, r1, d13
 8009eaa:	f7f6 fc05 	bl	80006b8 <__aeabi_d2lz>
 8009eae:	f7f6 fbbd 	bl	800062c <__aeabi_l2d>
 8009eb2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009eb6:	ec41 0b17 	vmov	d7, r0, r1
 8009eba:	ea43 0308 	orr.w	r3, r3, r8
 8009ebe:	ea53 030a 	orrs.w	r3, r3, sl
 8009ec2:	ee3d db47 	vsub.f64	d13, d13, d7
 8009ec6:	d03c      	beq.n	8009f42 <_strtod_l+0xb1a>
 8009ec8:	eeb4 dbca 	vcmpe.f64	d13, d10
 8009ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ed0:	f53f acf0 	bmi.w	80098b4 <_strtod_l+0x48c>
 8009ed4:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8009ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009edc:	dd98      	ble.n	8009e10 <_strtod_l+0x9e8>
 8009ede:	e4e9      	b.n	80098b4 <_strtod_l+0x48c>
 8009ee0:	9804      	ldr	r0, [sp, #16]
 8009ee2:	b1f0      	cbz	r0, 8009f22 <_strtod_l+0xafa>
 8009ee4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009ee8:	d81b      	bhi.n	8009f22 <_strtod_l+0xafa>
 8009eea:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8009f70 <_strtod_l+0xb48>
 8009eee:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8009ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ef6:	d811      	bhi.n	8009f1c <_strtod_l+0xaf4>
 8009ef8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8009efc:	ee1d 3a10 	vmov	r3, s26
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	bf38      	it	cc
 8009f04:	2301      	movcc	r3, #1
 8009f06:	ee0d 3a10 	vmov	s26, r3
 8009f0a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8009f0e:	f1ba 0f00 	cmp.w	sl, #0
 8009f12:	d113      	bne.n	8009f3c <_strtod_l+0xb14>
 8009f14:	eeb1 7b4d 	vneg.f64	d7, d13
 8009f18:	ec53 2b17 	vmov	r2, r3, d7
 8009f1c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8009f20:	1a43      	subs	r3, r0, r1
 8009f22:	eeb0 0b48 	vmov.f64	d0, d8
 8009f26:	ec43 2b1c 	vmov	d12, r2, r3
 8009f2a:	910a      	str	r1, [sp, #40]	; 0x28
 8009f2c:	f001 fdfa 	bl	800bb24 <__ulp>
 8009f30:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009f32:	eeac 8b00 	vfma.f64	d8, d12, d0
 8009f36:	ec59 8b18 	vmov	r8, r9, d8
 8009f3a:	e7ab      	b.n	8009e94 <_strtod_l+0xa6c>
 8009f3c:	eeb0 7b4d 	vmov.f64	d7, d13
 8009f40:	e7ea      	b.n	8009f18 <_strtod_l+0xaf0>
 8009f42:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8009f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f4a:	f57f af61 	bpl.w	8009e10 <_strtod_l+0x9e8>
 8009f4e:	e4b1      	b.n	80098b4 <_strtod_l+0x48c>
 8009f50:	2300      	movs	r3, #0
 8009f52:	9308      	str	r3, [sp, #32]
 8009f54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f58:	6013      	str	r3, [r2, #0]
 8009f5a:	f7ff baad 	b.w	80094b8 <_strtod_l+0x90>
 8009f5e:	2a65      	cmp	r2, #101	; 0x65
 8009f60:	f43f ab9f 	beq.w	80096a2 <_strtod_l+0x27a>
 8009f64:	2a45      	cmp	r2, #69	; 0x45
 8009f66:	f43f ab9c 	beq.w	80096a2 <_strtod_l+0x27a>
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	f7ff bbd4 	b.w	8009718 <_strtod_l+0x2f0>
 8009f70:	ffc00000 	.word	0xffc00000
 8009f74:	41dfffff 	.word	0x41dfffff
 8009f78:	000fffff 	.word	0x000fffff
 8009f7c:	7ff00000 	.word	0x7ff00000
 8009f80:	7fefffff 	.word	0x7fefffff
 8009f84:	3ff00000 	.word	0x3ff00000
 8009f88:	7c9fffff 	.word	0x7c9fffff
 8009f8c:	bff00000 	.word	0xbff00000
 8009f90:	7fe00000 	.word	0x7fe00000

08009f94 <_strtod_r>:
 8009f94:	4b01      	ldr	r3, [pc, #4]	; (8009f9c <_strtod_r+0x8>)
 8009f96:	f7ff ba47 	b.w	8009428 <_strtod_l>
 8009f9a:	bf00      	nop
 8009f9c:	200000b4 	.word	0x200000b4

08009fa0 <_strtol_l.constprop.0>:
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fa6:	d001      	beq.n	8009fac <_strtol_l.constprop.0+0xc>
 8009fa8:	2b24      	cmp	r3, #36	; 0x24
 8009faa:	d906      	bls.n	8009fba <_strtol_l.constprop.0+0x1a>
 8009fac:	f7fe faea 	bl	8008584 <__errno>
 8009fb0:	2316      	movs	r3, #22
 8009fb2:	6003      	str	r3, [r0, #0]
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a0a0 <_strtol_l.constprop.0+0x100>
 8009fbe:	460d      	mov	r5, r1
 8009fc0:	462e      	mov	r6, r5
 8009fc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fc6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009fca:	f017 0708 	ands.w	r7, r7, #8
 8009fce:	d1f7      	bne.n	8009fc0 <_strtol_l.constprop.0+0x20>
 8009fd0:	2c2d      	cmp	r4, #45	; 0x2d
 8009fd2:	d132      	bne.n	800a03a <_strtol_l.constprop.0+0x9a>
 8009fd4:	782c      	ldrb	r4, [r5, #0]
 8009fd6:	2701      	movs	r7, #1
 8009fd8:	1cb5      	adds	r5, r6, #2
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d05b      	beq.n	800a096 <_strtol_l.constprop.0+0xf6>
 8009fde:	2b10      	cmp	r3, #16
 8009fe0:	d109      	bne.n	8009ff6 <_strtol_l.constprop.0+0x56>
 8009fe2:	2c30      	cmp	r4, #48	; 0x30
 8009fe4:	d107      	bne.n	8009ff6 <_strtol_l.constprop.0+0x56>
 8009fe6:	782c      	ldrb	r4, [r5, #0]
 8009fe8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009fec:	2c58      	cmp	r4, #88	; 0x58
 8009fee:	d14d      	bne.n	800a08c <_strtol_l.constprop.0+0xec>
 8009ff0:	786c      	ldrb	r4, [r5, #1]
 8009ff2:	2310      	movs	r3, #16
 8009ff4:	3502      	adds	r5, #2
 8009ff6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009ffa:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ffe:	f04f 0c00 	mov.w	ip, #0
 800a002:	fbb8 f9f3 	udiv	r9, r8, r3
 800a006:	4666      	mov	r6, ip
 800a008:	fb03 8a19 	mls	sl, r3, r9, r8
 800a00c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a010:	f1be 0f09 	cmp.w	lr, #9
 800a014:	d816      	bhi.n	800a044 <_strtol_l.constprop.0+0xa4>
 800a016:	4674      	mov	r4, lr
 800a018:	42a3      	cmp	r3, r4
 800a01a:	dd24      	ble.n	800a066 <_strtol_l.constprop.0+0xc6>
 800a01c:	f1bc 0f00 	cmp.w	ip, #0
 800a020:	db1e      	blt.n	800a060 <_strtol_l.constprop.0+0xc0>
 800a022:	45b1      	cmp	r9, r6
 800a024:	d31c      	bcc.n	800a060 <_strtol_l.constprop.0+0xc0>
 800a026:	d101      	bne.n	800a02c <_strtol_l.constprop.0+0x8c>
 800a028:	45a2      	cmp	sl, r4
 800a02a:	db19      	blt.n	800a060 <_strtol_l.constprop.0+0xc0>
 800a02c:	fb06 4603 	mla	r6, r6, r3, r4
 800a030:	f04f 0c01 	mov.w	ip, #1
 800a034:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a038:	e7e8      	b.n	800a00c <_strtol_l.constprop.0+0x6c>
 800a03a:	2c2b      	cmp	r4, #43	; 0x2b
 800a03c:	bf04      	itt	eq
 800a03e:	782c      	ldrbeq	r4, [r5, #0]
 800a040:	1cb5      	addeq	r5, r6, #2
 800a042:	e7ca      	b.n	8009fda <_strtol_l.constprop.0+0x3a>
 800a044:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a048:	f1be 0f19 	cmp.w	lr, #25
 800a04c:	d801      	bhi.n	800a052 <_strtol_l.constprop.0+0xb2>
 800a04e:	3c37      	subs	r4, #55	; 0x37
 800a050:	e7e2      	b.n	800a018 <_strtol_l.constprop.0+0x78>
 800a052:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a056:	f1be 0f19 	cmp.w	lr, #25
 800a05a:	d804      	bhi.n	800a066 <_strtol_l.constprop.0+0xc6>
 800a05c:	3c57      	subs	r4, #87	; 0x57
 800a05e:	e7db      	b.n	800a018 <_strtol_l.constprop.0+0x78>
 800a060:	f04f 3cff 	mov.w	ip, #4294967295
 800a064:	e7e6      	b.n	800a034 <_strtol_l.constprop.0+0x94>
 800a066:	f1bc 0f00 	cmp.w	ip, #0
 800a06a:	da05      	bge.n	800a078 <_strtol_l.constprop.0+0xd8>
 800a06c:	2322      	movs	r3, #34	; 0x22
 800a06e:	6003      	str	r3, [r0, #0]
 800a070:	4646      	mov	r6, r8
 800a072:	b942      	cbnz	r2, 800a086 <_strtol_l.constprop.0+0xe6>
 800a074:	4630      	mov	r0, r6
 800a076:	e79e      	b.n	8009fb6 <_strtol_l.constprop.0+0x16>
 800a078:	b107      	cbz	r7, 800a07c <_strtol_l.constprop.0+0xdc>
 800a07a:	4276      	negs	r6, r6
 800a07c:	2a00      	cmp	r2, #0
 800a07e:	d0f9      	beq.n	800a074 <_strtol_l.constprop.0+0xd4>
 800a080:	f1bc 0f00 	cmp.w	ip, #0
 800a084:	d000      	beq.n	800a088 <_strtol_l.constprop.0+0xe8>
 800a086:	1e69      	subs	r1, r5, #1
 800a088:	6011      	str	r1, [r2, #0]
 800a08a:	e7f3      	b.n	800a074 <_strtol_l.constprop.0+0xd4>
 800a08c:	2430      	movs	r4, #48	; 0x30
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1b1      	bne.n	8009ff6 <_strtol_l.constprop.0+0x56>
 800a092:	2308      	movs	r3, #8
 800a094:	e7af      	b.n	8009ff6 <_strtol_l.constprop.0+0x56>
 800a096:	2c30      	cmp	r4, #48	; 0x30
 800a098:	d0a5      	beq.n	8009fe6 <_strtol_l.constprop.0+0x46>
 800a09a:	230a      	movs	r3, #10
 800a09c:	e7ab      	b.n	8009ff6 <_strtol_l.constprop.0+0x56>
 800a09e:	bf00      	nop
 800a0a0:	0800d7c9 	.word	0x0800d7c9

0800a0a4 <_strtol_r>:
 800a0a4:	f7ff bf7c 	b.w	8009fa0 <_strtol_l.constprop.0>

0800a0a8 <_write_r>:
 800a0a8:	b538      	push	{r3, r4, r5, lr}
 800a0aa:	4d07      	ldr	r5, [pc, #28]	; (800a0c8 <_write_r+0x20>)
 800a0ac:	4604      	mov	r4, r0
 800a0ae:	4608      	mov	r0, r1
 800a0b0:	4611      	mov	r1, r2
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	602a      	str	r2, [r5, #0]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	f7f7 ff87 	bl	8001fca <_write>
 800a0bc:	1c43      	adds	r3, r0, #1
 800a0be:	d102      	bne.n	800a0c6 <_write_r+0x1e>
 800a0c0:	682b      	ldr	r3, [r5, #0]
 800a0c2:	b103      	cbz	r3, 800a0c6 <_write_r+0x1e>
 800a0c4:	6023      	str	r3, [r4, #0]
 800a0c6:	bd38      	pop	{r3, r4, r5, pc}
 800a0c8:	200008c0 	.word	0x200008c0

0800a0cc <_close_r>:
 800a0cc:	b538      	push	{r3, r4, r5, lr}
 800a0ce:	4d06      	ldr	r5, [pc, #24]	; (800a0e8 <_close_r+0x1c>)
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	4608      	mov	r0, r1
 800a0d6:	602b      	str	r3, [r5, #0]
 800a0d8:	f7f7 ff93 	bl	8002002 <_close>
 800a0dc:	1c43      	adds	r3, r0, #1
 800a0de:	d102      	bne.n	800a0e6 <_close_r+0x1a>
 800a0e0:	682b      	ldr	r3, [r5, #0]
 800a0e2:	b103      	cbz	r3, 800a0e6 <_close_r+0x1a>
 800a0e4:	6023      	str	r3, [r4, #0]
 800a0e6:	bd38      	pop	{r3, r4, r5, pc}
 800a0e8:	200008c0 	.word	0x200008c0

0800a0ec <quorem>:
 800a0ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f0:	6903      	ldr	r3, [r0, #16]
 800a0f2:	690c      	ldr	r4, [r1, #16]
 800a0f4:	42a3      	cmp	r3, r4
 800a0f6:	4607      	mov	r7, r0
 800a0f8:	f2c0 8081 	blt.w	800a1fe <quorem+0x112>
 800a0fc:	3c01      	subs	r4, #1
 800a0fe:	f101 0814 	add.w	r8, r1, #20
 800a102:	f100 0514 	add.w	r5, r0, #20
 800a106:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a10a:	9301      	str	r3, [sp, #4]
 800a10c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a110:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a114:	3301      	adds	r3, #1
 800a116:	429a      	cmp	r2, r3
 800a118:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a11c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a120:	fbb2 f6f3 	udiv	r6, r2, r3
 800a124:	d331      	bcc.n	800a18a <quorem+0x9e>
 800a126:	f04f 0e00 	mov.w	lr, #0
 800a12a:	4640      	mov	r0, r8
 800a12c:	46ac      	mov	ip, r5
 800a12e:	46f2      	mov	sl, lr
 800a130:	f850 2b04 	ldr.w	r2, [r0], #4
 800a134:	b293      	uxth	r3, r2
 800a136:	fb06 e303 	mla	r3, r6, r3, lr
 800a13a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a13e:	b29b      	uxth	r3, r3
 800a140:	ebaa 0303 	sub.w	r3, sl, r3
 800a144:	f8dc a000 	ldr.w	sl, [ip]
 800a148:	0c12      	lsrs	r2, r2, #16
 800a14a:	fa13 f38a 	uxtah	r3, r3, sl
 800a14e:	fb06 e202 	mla	r2, r6, r2, lr
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	9b00      	ldr	r3, [sp, #0]
 800a156:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a15a:	b292      	uxth	r2, r2
 800a15c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a160:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a164:	f8bd 3000 	ldrh.w	r3, [sp]
 800a168:	4581      	cmp	r9, r0
 800a16a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a16e:	f84c 3b04 	str.w	r3, [ip], #4
 800a172:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a176:	d2db      	bcs.n	800a130 <quorem+0x44>
 800a178:	f855 300b 	ldr.w	r3, [r5, fp]
 800a17c:	b92b      	cbnz	r3, 800a18a <quorem+0x9e>
 800a17e:	9b01      	ldr	r3, [sp, #4]
 800a180:	3b04      	subs	r3, #4
 800a182:	429d      	cmp	r5, r3
 800a184:	461a      	mov	r2, r3
 800a186:	d32e      	bcc.n	800a1e6 <quorem+0xfa>
 800a188:	613c      	str	r4, [r7, #16]
 800a18a:	4638      	mov	r0, r7
 800a18c:	f001 fc24 	bl	800b9d8 <__mcmp>
 800a190:	2800      	cmp	r0, #0
 800a192:	db24      	blt.n	800a1de <quorem+0xf2>
 800a194:	3601      	adds	r6, #1
 800a196:	4628      	mov	r0, r5
 800a198:	f04f 0c00 	mov.w	ip, #0
 800a19c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1a0:	f8d0 e000 	ldr.w	lr, [r0]
 800a1a4:	b293      	uxth	r3, r2
 800a1a6:	ebac 0303 	sub.w	r3, ip, r3
 800a1aa:	0c12      	lsrs	r2, r2, #16
 800a1ac:	fa13 f38e 	uxtah	r3, r3, lr
 800a1b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a1b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1be:	45c1      	cmp	r9, r8
 800a1c0:	f840 3b04 	str.w	r3, [r0], #4
 800a1c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a1c8:	d2e8      	bcs.n	800a19c <quorem+0xb0>
 800a1ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1d2:	b922      	cbnz	r2, 800a1de <quorem+0xf2>
 800a1d4:	3b04      	subs	r3, #4
 800a1d6:	429d      	cmp	r5, r3
 800a1d8:	461a      	mov	r2, r3
 800a1da:	d30a      	bcc.n	800a1f2 <quorem+0x106>
 800a1dc:	613c      	str	r4, [r7, #16]
 800a1de:	4630      	mov	r0, r6
 800a1e0:	b003      	add	sp, #12
 800a1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e6:	6812      	ldr	r2, [r2, #0]
 800a1e8:	3b04      	subs	r3, #4
 800a1ea:	2a00      	cmp	r2, #0
 800a1ec:	d1cc      	bne.n	800a188 <quorem+0x9c>
 800a1ee:	3c01      	subs	r4, #1
 800a1f0:	e7c7      	b.n	800a182 <quorem+0x96>
 800a1f2:	6812      	ldr	r2, [r2, #0]
 800a1f4:	3b04      	subs	r3, #4
 800a1f6:	2a00      	cmp	r2, #0
 800a1f8:	d1f0      	bne.n	800a1dc <quorem+0xf0>
 800a1fa:	3c01      	subs	r4, #1
 800a1fc:	e7eb      	b.n	800a1d6 <quorem+0xea>
 800a1fe:	2000      	movs	r0, #0
 800a200:	e7ee      	b.n	800a1e0 <quorem+0xf4>
 800a202:	0000      	movs	r0, r0
 800a204:	0000      	movs	r0, r0
	...

0800a208 <_dtoa_r>:
 800a208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a20c:	ed2d 8b02 	vpush	{d8}
 800a210:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a212:	b091      	sub	sp, #68	; 0x44
 800a214:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a218:	ec59 8b10 	vmov	r8, r9, d0
 800a21c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a21e:	9106      	str	r1, [sp, #24]
 800a220:	4606      	mov	r6, r0
 800a222:	9208      	str	r2, [sp, #32]
 800a224:	930c      	str	r3, [sp, #48]	; 0x30
 800a226:	b975      	cbnz	r5, 800a246 <_dtoa_r+0x3e>
 800a228:	2010      	movs	r0, #16
 800a22a:	f001 f8e1 	bl	800b3f0 <malloc>
 800a22e:	4602      	mov	r2, r0
 800a230:	6270      	str	r0, [r6, #36]	; 0x24
 800a232:	b920      	cbnz	r0, 800a23e <_dtoa_r+0x36>
 800a234:	4baa      	ldr	r3, [pc, #680]	; (800a4e0 <_dtoa_r+0x2d8>)
 800a236:	21ea      	movs	r1, #234	; 0xea
 800a238:	48aa      	ldr	r0, [pc, #680]	; (800a4e4 <_dtoa_r+0x2dc>)
 800a23a:	f002 fc55 	bl	800cae8 <__assert_func>
 800a23e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a242:	6005      	str	r5, [r0, #0]
 800a244:	60c5      	str	r5, [r0, #12]
 800a246:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a248:	6819      	ldr	r1, [r3, #0]
 800a24a:	b151      	cbz	r1, 800a262 <_dtoa_r+0x5a>
 800a24c:	685a      	ldr	r2, [r3, #4]
 800a24e:	604a      	str	r2, [r1, #4]
 800a250:	2301      	movs	r3, #1
 800a252:	4093      	lsls	r3, r2
 800a254:	608b      	str	r3, [r1, #8]
 800a256:	4630      	mov	r0, r6
 800a258:	f001 f932 	bl	800b4c0 <_Bfree>
 800a25c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a25e:	2200      	movs	r2, #0
 800a260:	601a      	str	r2, [r3, #0]
 800a262:	f1b9 0300 	subs.w	r3, r9, #0
 800a266:	bfbb      	ittet	lt
 800a268:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a26c:	9303      	strlt	r3, [sp, #12]
 800a26e:	2300      	movge	r3, #0
 800a270:	2201      	movlt	r2, #1
 800a272:	bfac      	ite	ge
 800a274:	6023      	strge	r3, [r4, #0]
 800a276:	6022      	strlt	r2, [r4, #0]
 800a278:	4b9b      	ldr	r3, [pc, #620]	; (800a4e8 <_dtoa_r+0x2e0>)
 800a27a:	9c03      	ldr	r4, [sp, #12]
 800a27c:	43a3      	bics	r3, r4
 800a27e:	d11c      	bne.n	800a2ba <_dtoa_r+0xb2>
 800a280:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a282:	f242 730f 	movw	r3, #9999	; 0x270f
 800a286:	6013      	str	r3, [r2, #0]
 800a288:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a28c:	ea53 0308 	orrs.w	r3, r3, r8
 800a290:	f000 84fd 	beq.w	800ac8e <_dtoa_r+0xa86>
 800a294:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a296:	b963      	cbnz	r3, 800a2b2 <_dtoa_r+0xaa>
 800a298:	4b94      	ldr	r3, [pc, #592]	; (800a4ec <_dtoa_r+0x2e4>)
 800a29a:	e01f      	b.n	800a2dc <_dtoa_r+0xd4>
 800a29c:	4b94      	ldr	r3, [pc, #592]	; (800a4f0 <_dtoa_r+0x2e8>)
 800a29e:	9301      	str	r3, [sp, #4]
 800a2a0:	3308      	adds	r3, #8
 800a2a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a2a4:	6013      	str	r3, [r2, #0]
 800a2a6:	9801      	ldr	r0, [sp, #4]
 800a2a8:	b011      	add	sp, #68	; 0x44
 800a2aa:	ecbd 8b02 	vpop	{d8}
 800a2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b2:	4b8e      	ldr	r3, [pc, #568]	; (800a4ec <_dtoa_r+0x2e4>)
 800a2b4:	9301      	str	r3, [sp, #4]
 800a2b6:	3303      	adds	r3, #3
 800a2b8:	e7f3      	b.n	800a2a2 <_dtoa_r+0x9a>
 800a2ba:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a2be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2c6:	d10b      	bne.n	800a2e0 <_dtoa_r+0xd8>
 800a2c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	6013      	str	r3, [r2, #0]
 800a2ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f000 84d9 	beq.w	800ac88 <_dtoa_r+0xa80>
 800a2d6:	4887      	ldr	r0, [pc, #540]	; (800a4f4 <_dtoa_r+0x2ec>)
 800a2d8:	6018      	str	r0, [r3, #0]
 800a2da:	1e43      	subs	r3, r0, #1
 800a2dc:	9301      	str	r3, [sp, #4]
 800a2de:	e7e2      	b.n	800a2a6 <_dtoa_r+0x9e>
 800a2e0:	a90f      	add	r1, sp, #60	; 0x3c
 800a2e2:	aa0e      	add	r2, sp, #56	; 0x38
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	eeb0 0b48 	vmov.f64	d0, d8
 800a2ea:	f001 fc97 	bl	800bc1c <__d2b>
 800a2ee:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a2f2:	4605      	mov	r5, r0
 800a2f4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a2f6:	2900      	cmp	r1, #0
 800a2f8:	d046      	beq.n	800a388 <_dtoa_r+0x180>
 800a2fa:	ee18 4a90 	vmov	r4, s17
 800a2fe:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a302:	ec53 2b18 	vmov	r2, r3, d8
 800a306:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a30a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a30e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a312:	2400      	movs	r4, #0
 800a314:	ec43 2b16 	vmov	d6, r2, r3
 800a318:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a31c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a4c8 <_dtoa_r+0x2c0>
 800a320:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a324:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800a4d0 <_dtoa_r+0x2c8>
 800a328:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a32c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a4d8 <_dtoa_r+0x2d0>
 800a330:	ee07 1a90 	vmov	s15, r1
 800a334:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a338:	eeb0 7b46 	vmov.f64	d7, d6
 800a33c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a340:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a344:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a34c:	ee16 ba90 	vmov	fp, s13
 800a350:	940a      	str	r4, [sp, #40]	; 0x28
 800a352:	d508      	bpl.n	800a366 <_dtoa_r+0x15e>
 800a354:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a358:	eeb4 6b47 	vcmp.f64	d6, d7
 800a35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a360:	bf18      	it	ne
 800a362:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a366:	f1bb 0f16 	cmp.w	fp, #22
 800a36a:	d82f      	bhi.n	800a3cc <_dtoa_r+0x1c4>
 800a36c:	4b62      	ldr	r3, [pc, #392]	; (800a4f8 <_dtoa_r+0x2f0>)
 800a36e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a372:	ed93 7b00 	vldr	d7, [r3]
 800a376:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a37e:	d501      	bpl.n	800a384 <_dtoa_r+0x17c>
 800a380:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a384:	2300      	movs	r3, #0
 800a386:	e022      	b.n	800a3ce <_dtoa_r+0x1c6>
 800a388:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a38a:	4401      	add	r1, r0
 800a38c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a390:	2b20      	cmp	r3, #32
 800a392:	bfc1      	itttt	gt
 800a394:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a398:	fa04 f303 	lslgt.w	r3, r4, r3
 800a39c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a3a0:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a3a4:	bfd6      	itet	le
 800a3a6:	f1c3 0320 	rsble	r3, r3, #32
 800a3aa:	ea43 0808 	orrgt.w	r8, r3, r8
 800a3ae:	fa08 f803 	lslle.w	r8, r8, r3
 800a3b2:	ee07 8a90 	vmov	s15, r8
 800a3b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a3ba:	3901      	subs	r1, #1
 800a3bc:	ee17 4a90 	vmov	r4, s15
 800a3c0:	ec53 2b17 	vmov	r2, r3, d7
 800a3c4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a3c8:	2401      	movs	r4, #1
 800a3ca:	e7a3      	b.n	800a314 <_dtoa_r+0x10c>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3d0:	1a43      	subs	r3, r0, r1
 800a3d2:	1e5a      	subs	r2, r3, #1
 800a3d4:	bf45      	ittet	mi
 800a3d6:	f1c3 0301 	rsbmi	r3, r3, #1
 800a3da:	9304      	strmi	r3, [sp, #16]
 800a3dc:	2300      	movpl	r3, #0
 800a3de:	2300      	movmi	r3, #0
 800a3e0:	9205      	str	r2, [sp, #20]
 800a3e2:	bf54      	ite	pl
 800a3e4:	9304      	strpl	r3, [sp, #16]
 800a3e6:	9305      	strmi	r3, [sp, #20]
 800a3e8:	f1bb 0f00 	cmp.w	fp, #0
 800a3ec:	db18      	blt.n	800a420 <_dtoa_r+0x218>
 800a3ee:	9b05      	ldr	r3, [sp, #20]
 800a3f0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800a3f4:	445b      	add	r3, fp
 800a3f6:	9305      	str	r3, [sp, #20]
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	9a06      	ldr	r2, [sp, #24]
 800a3fc:	2a09      	cmp	r2, #9
 800a3fe:	d849      	bhi.n	800a494 <_dtoa_r+0x28c>
 800a400:	2a05      	cmp	r2, #5
 800a402:	bfc4      	itt	gt
 800a404:	3a04      	subgt	r2, #4
 800a406:	9206      	strgt	r2, [sp, #24]
 800a408:	9a06      	ldr	r2, [sp, #24]
 800a40a:	f1a2 0202 	sub.w	r2, r2, #2
 800a40e:	bfcc      	ite	gt
 800a410:	2400      	movgt	r4, #0
 800a412:	2401      	movle	r4, #1
 800a414:	2a03      	cmp	r2, #3
 800a416:	d848      	bhi.n	800a4aa <_dtoa_r+0x2a2>
 800a418:	e8df f002 	tbb	[pc, r2]
 800a41c:	3a2c2e0b 	.word	0x3a2c2e0b
 800a420:	9b04      	ldr	r3, [sp, #16]
 800a422:	2200      	movs	r2, #0
 800a424:	eba3 030b 	sub.w	r3, r3, fp
 800a428:	9304      	str	r3, [sp, #16]
 800a42a:	9209      	str	r2, [sp, #36]	; 0x24
 800a42c:	f1cb 0300 	rsb	r3, fp, #0
 800a430:	e7e3      	b.n	800a3fa <_dtoa_r+0x1f2>
 800a432:	2200      	movs	r2, #0
 800a434:	9207      	str	r2, [sp, #28]
 800a436:	9a08      	ldr	r2, [sp, #32]
 800a438:	2a00      	cmp	r2, #0
 800a43a:	dc39      	bgt.n	800a4b0 <_dtoa_r+0x2a8>
 800a43c:	f04f 0a01 	mov.w	sl, #1
 800a440:	46d1      	mov	r9, sl
 800a442:	4652      	mov	r2, sl
 800a444:	f8cd a020 	str.w	sl, [sp, #32]
 800a448:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a44a:	2100      	movs	r1, #0
 800a44c:	6079      	str	r1, [r7, #4]
 800a44e:	2004      	movs	r0, #4
 800a450:	f100 0c14 	add.w	ip, r0, #20
 800a454:	4594      	cmp	ip, r2
 800a456:	6879      	ldr	r1, [r7, #4]
 800a458:	d92f      	bls.n	800a4ba <_dtoa_r+0x2b2>
 800a45a:	4630      	mov	r0, r6
 800a45c:	930d      	str	r3, [sp, #52]	; 0x34
 800a45e:	f000 ffef 	bl	800b440 <_Balloc>
 800a462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a464:	9001      	str	r0, [sp, #4]
 800a466:	4602      	mov	r2, r0
 800a468:	2800      	cmp	r0, #0
 800a46a:	d149      	bne.n	800a500 <_dtoa_r+0x2f8>
 800a46c:	4b23      	ldr	r3, [pc, #140]	; (800a4fc <_dtoa_r+0x2f4>)
 800a46e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a472:	e6e1      	b.n	800a238 <_dtoa_r+0x30>
 800a474:	2201      	movs	r2, #1
 800a476:	e7dd      	b.n	800a434 <_dtoa_r+0x22c>
 800a478:	2200      	movs	r2, #0
 800a47a:	9207      	str	r2, [sp, #28]
 800a47c:	9a08      	ldr	r2, [sp, #32]
 800a47e:	eb0b 0a02 	add.w	sl, fp, r2
 800a482:	f10a 0901 	add.w	r9, sl, #1
 800a486:	464a      	mov	r2, r9
 800a488:	2a01      	cmp	r2, #1
 800a48a:	bfb8      	it	lt
 800a48c:	2201      	movlt	r2, #1
 800a48e:	e7db      	b.n	800a448 <_dtoa_r+0x240>
 800a490:	2201      	movs	r2, #1
 800a492:	e7f2      	b.n	800a47a <_dtoa_r+0x272>
 800a494:	2401      	movs	r4, #1
 800a496:	2200      	movs	r2, #0
 800a498:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a49c:	f04f 3aff 	mov.w	sl, #4294967295
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	46d1      	mov	r9, sl
 800a4a4:	2212      	movs	r2, #18
 800a4a6:	9108      	str	r1, [sp, #32]
 800a4a8:	e7ce      	b.n	800a448 <_dtoa_r+0x240>
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	9207      	str	r2, [sp, #28]
 800a4ae:	e7f5      	b.n	800a49c <_dtoa_r+0x294>
 800a4b0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a4b4:	46d1      	mov	r9, sl
 800a4b6:	4652      	mov	r2, sl
 800a4b8:	e7c6      	b.n	800a448 <_dtoa_r+0x240>
 800a4ba:	3101      	adds	r1, #1
 800a4bc:	6079      	str	r1, [r7, #4]
 800a4be:	0040      	lsls	r0, r0, #1
 800a4c0:	e7c6      	b.n	800a450 <_dtoa_r+0x248>
 800a4c2:	bf00      	nop
 800a4c4:	f3af 8000 	nop.w
 800a4c8:	636f4361 	.word	0x636f4361
 800a4cc:	3fd287a7 	.word	0x3fd287a7
 800a4d0:	8b60c8b3 	.word	0x8b60c8b3
 800a4d4:	3fc68a28 	.word	0x3fc68a28
 800a4d8:	509f79fb 	.word	0x509f79fb
 800a4dc:	3fd34413 	.word	0x3fd34413
 800a4e0:	0800d8d6 	.word	0x0800d8d6
 800a4e4:	0800d8ed 	.word	0x0800d8ed
 800a4e8:	7ff00000 	.word	0x7ff00000
 800a4ec:	0800d8d2 	.word	0x0800d8d2
 800a4f0:	0800d8c9 	.word	0x0800d8c9
 800a4f4:	0800db42 	.word	0x0800db42
 800a4f8:	0800da58 	.word	0x0800da58
 800a4fc:	0800d948 	.word	0x0800d948
 800a500:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a502:	9901      	ldr	r1, [sp, #4]
 800a504:	6011      	str	r1, [r2, #0]
 800a506:	f1b9 0f0e 	cmp.w	r9, #14
 800a50a:	d86c      	bhi.n	800a5e6 <_dtoa_r+0x3de>
 800a50c:	2c00      	cmp	r4, #0
 800a50e:	d06a      	beq.n	800a5e6 <_dtoa_r+0x3de>
 800a510:	f1bb 0f00 	cmp.w	fp, #0
 800a514:	f340 80a0 	ble.w	800a658 <_dtoa_r+0x450>
 800a518:	49c1      	ldr	r1, [pc, #772]	; (800a820 <_dtoa_r+0x618>)
 800a51a:	f00b 020f 	and.w	r2, fp, #15
 800a51e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a522:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a526:	ed92 7b00 	vldr	d7, [r2]
 800a52a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a52e:	f000 8087 	beq.w	800a640 <_dtoa_r+0x438>
 800a532:	4abc      	ldr	r2, [pc, #752]	; (800a824 <_dtoa_r+0x61c>)
 800a534:	ed92 6b08 	vldr	d6, [r2, #32]
 800a538:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a53c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a540:	f001 010f 	and.w	r1, r1, #15
 800a544:	2203      	movs	r2, #3
 800a546:	48b7      	ldr	r0, [pc, #732]	; (800a824 <_dtoa_r+0x61c>)
 800a548:	2900      	cmp	r1, #0
 800a54a:	d17b      	bne.n	800a644 <_dtoa_r+0x43c>
 800a54c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a550:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a554:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a558:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a55a:	2900      	cmp	r1, #0
 800a55c:	f000 80a2 	beq.w	800a6a4 <_dtoa_r+0x49c>
 800a560:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a564:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a568:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a570:	f140 8098 	bpl.w	800a6a4 <_dtoa_r+0x49c>
 800a574:	f1b9 0f00 	cmp.w	r9, #0
 800a578:	f000 8094 	beq.w	800a6a4 <_dtoa_r+0x49c>
 800a57c:	f1ba 0f00 	cmp.w	sl, #0
 800a580:	dd2f      	ble.n	800a5e2 <_dtoa_r+0x3da>
 800a582:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a586:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a58a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a58e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a592:	3201      	adds	r2, #1
 800a594:	4650      	mov	r0, sl
 800a596:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a59a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a59e:	ee07 2a90 	vmov	s15, r2
 800a5a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a5a6:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a5aa:	ee15 4a90 	vmov	r4, s11
 800a5ae:	ec52 1b15 	vmov	r1, r2, d5
 800a5b2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	d177      	bne.n	800a6aa <_dtoa_r+0x4a2>
 800a5ba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a5be:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a5c2:	ec42 1b17 	vmov	d7, r1, r2
 800a5c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5ce:	f300 8263 	bgt.w	800aa98 <_dtoa_r+0x890>
 800a5d2:	eeb1 7b47 	vneg.f64	d7, d7
 800a5d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5de:	f100 8258 	bmi.w	800aa92 <_dtoa_r+0x88a>
 800a5e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a5e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5e8:	2a00      	cmp	r2, #0
 800a5ea:	f2c0 811d 	blt.w	800a828 <_dtoa_r+0x620>
 800a5ee:	f1bb 0f0e 	cmp.w	fp, #14
 800a5f2:	f300 8119 	bgt.w	800a828 <_dtoa_r+0x620>
 800a5f6:	4b8a      	ldr	r3, [pc, #552]	; (800a820 <_dtoa_r+0x618>)
 800a5f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a5fc:	ed93 6b00 	vldr	d6, [r3]
 800a600:	9b08      	ldr	r3, [sp, #32]
 800a602:	2b00      	cmp	r3, #0
 800a604:	f280 80b7 	bge.w	800a776 <_dtoa_r+0x56e>
 800a608:	f1b9 0f00 	cmp.w	r9, #0
 800a60c:	f300 80b3 	bgt.w	800a776 <_dtoa_r+0x56e>
 800a610:	f040 823f 	bne.w	800aa92 <_dtoa_r+0x88a>
 800a614:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a618:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a61c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a620:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a628:	464c      	mov	r4, r9
 800a62a:	464f      	mov	r7, r9
 800a62c:	f280 8215 	bge.w	800aa5a <_dtoa_r+0x852>
 800a630:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a634:	2331      	movs	r3, #49	; 0x31
 800a636:	f808 3b01 	strb.w	r3, [r8], #1
 800a63a:	f10b 0b01 	add.w	fp, fp, #1
 800a63e:	e211      	b.n	800aa64 <_dtoa_r+0x85c>
 800a640:	2202      	movs	r2, #2
 800a642:	e780      	b.n	800a546 <_dtoa_r+0x33e>
 800a644:	07cc      	lsls	r4, r1, #31
 800a646:	d504      	bpl.n	800a652 <_dtoa_r+0x44a>
 800a648:	ed90 6b00 	vldr	d6, [r0]
 800a64c:	3201      	adds	r2, #1
 800a64e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a652:	1049      	asrs	r1, r1, #1
 800a654:	3008      	adds	r0, #8
 800a656:	e777      	b.n	800a548 <_dtoa_r+0x340>
 800a658:	d022      	beq.n	800a6a0 <_dtoa_r+0x498>
 800a65a:	f1cb 0100 	rsb	r1, fp, #0
 800a65e:	4a70      	ldr	r2, [pc, #448]	; (800a820 <_dtoa_r+0x618>)
 800a660:	f001 000f 	and.w	r0, r1, #15
 800a664:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a668:	ed92 7b00 	vldr	d7, [r2]
 800a66c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a670:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a674:	486b      	ldr	r0, [pc, #428]	; (800a824 <_dtoa_r+0x61c>)
 800a676:	1109      	asrs	r1, r1, #4
 800a678:	2400      	movs	r4, #0
 800a67a:	2202      	movs	r2, #2
 800a67c:	b929      	cbnz	r1, 800a68a <_dtoa_r+0x482>
 800a67e:	2c00      	cmp	r4, #0
 800a680:	f43f af6a 	beq.w	800a558 <_dtoa_r+0x350>
 800a684:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a688:	e766      	b.n	800a558 <_dtoa_r+0x350>
 800a68a:	07cf      	lsls	r7, r1, #31
 800a68c:	d505      	bpl.n	800a69a <_dtoa_r+0x492>
 800a68e:	ed90 6b00 	vldr	d6, [r0]
 800a692:	3201      	adds	r2, #1
 800a694:	2401      	movs	r4, #1
 800a696:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a69a:	1049      	asrs	r1, r1, #1
 800a69c:	3008      	adds	r0, #8
 800a69e:	e7ed      	b.n	800a67c <_dtoa_r+0x474>
 800a6a0:	2202      	movs	r2, #2
 800a6a2:	e759      	b.n	800a558 <_dtoa_r+0x350>
 800a6a4:	465f      	mov	r7, fp
 800a6a6:	4648      	mov	r0, r9
 800a6a8:	e775      	b.n	800a596 <_dtoa_r+0x38e>
 800a6aa:	ec42 1b17 	vmov	d7, r1, r2
 800a6ae:	4a5c      	ldr	r2, [pc, #368]	; (800a820 <_dtoa_r+0x618>)
 800a6b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a6b4:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a6b8:	9a01      	ldr	r2, [sp, #4]
 800a6ba:	1814      	adds	r4, r2, r0
 800a6bc:	9a07      	ldr	r2, [sp, #28]
 800a6be:	b352      	cbz	r2, 800a716 <_dtoa_r+0x50e>
 800a6c0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a6c4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a6c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a6cc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a6d0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a6d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a6d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a6dc:	ee14 2a90 	vmov	r2, s9
 800a6e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a6e4:	3230      	adds	r2, #48	; 0x30
 800a6e6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a6ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6f2:	f808 2b01 	strb.w	r2, [r8], #1
 800a6f6:	d439      	bmi.n	800a76c <_dtoa_r+0x564>
 800a6f8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a6fc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a704:	d472      	bmi.n	800a7ec <_dtoa_r+0x5e4>
 800a706:	45a0      	cmp	r8, r4
 800a708:	f43f af6b 	beq.w	800a5e2 <_dtoa_r+0x3da>
 800a70c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a710:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a714:	e7e0      	b.n	800a6d8 <_dtoa_r+0x4d0>
 800a716:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a71a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a71e:	4621      	mov	r1, r4
 800a720:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a724:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a728:	ee14 2a90 	vmov	r2, s9
 800a72c:	3230      	adds	r2, #48	; 0x30
 800a72e:	f808 2b01 	strb.w	r2, [r8], #1
 800a732:	45a0      	cmp	r8, r4
 800a734:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a738:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a73c:	d118      	bne.n	800a770 <_dtoa_r+0x568>
 800a73e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a742:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a746:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a74e:	dc4d      	bgt.n	800a7ec <_dtoa_r+0x5e4>
 800a750:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a754:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a75c:	f57f af41 	bpl.w	800a5e2 <_dtoa_r+0x3da>
 800a760:	4688      	mov	r8, r1
 800a762:	3901      	subs	r1, #1
 800a764:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a768:	2b30      	cmp	r3, #48	; 0x30
 800a76a:	d0f9      	beq.n	800a760 <_dtoa_r+0x558>
 800a76c:	46bb      	mov	fp, r7
 800a76e:	e02a      	b.n	800a7c6 <_dtoa_r+0x5be>
 800a770:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a774:	e7d6      	b.n	800a724 <_dtoa_r+0x51c>
 800a776:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a77a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a77e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a782:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a786:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a78a:	ee15 3a10 	vmov	r3, s10
 800a78e:	3330      	adds	r3, #48	; 0x30
 800a790:	f808 3b01 	strb.w	r3, [r8], #1
 800a794:	9b01      	ldr	r3, [sp, #4]
 800a796:	eba8 0303 	sub.w	r3, r8, r3
 800a79a:	4599      	cmp	r9, r3
 800a79c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a7a0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a7a4:	d133      	bne.n	800a80e <_dtoa_r+0x606>
 800a7a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a7aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7b2:	dc1a      	bgt.n	800a7ea <_dtoa_r+0x5e2>
 800a7b4:	eeb4 7b46 	vcmp.f64	d7, d6
 800a7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7bc:	d103      	bne.n	800a7c6 <_dtoa_r+0x5be>
 800a7be:	ee15 3a10 	vmov	r3, s10
 800a7c2:	07d9      	lsls	r1, r3, #31
 800a7c4:	d411      	bmi.n	800a7ea <_dtoa_r+0x5e2>
 800a7c6:	4629      	mov	r1, r5
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	f000 fe79 	bl	800b4c0 <_Bfree>
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7d2:	f888 3000 	strb.w	r3, [r8]
 800a7d6:	f10b 0301 	add.w	r3, fp, #1
 800a7da:	6013      	str	r3, [r2, #0]
 800a7dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	f43f ad61 	beq.w	800a2a6 <_dtoa_r+0x9e>
 800a7e4:	f8c3 8000 	str.w	r8, [r3]
 800a7e8:	e55d      	b.n	800a2a6 <_dtoa_r+0x9e>
 800a7ea:	465f      	mov	r7, fp
 800a7ec:	4643      	mov	r3, r8
 800a7ee:	4698      	mov	r8, r3
 800a7f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7f4:	2a39      	cmp	r2, #57	; 0x39
 800a7f6:	d106      	bne.n	800a806 <_dtoa_r+0x5fe>
 800a7f8:	9a01      	ldr	r2, [sp, #4]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d1f7      	bne.n	800a7ee <_dtoa_r+0x5e6>
 800a7fe:	9901      	ldr	r1, [sp, #4]
 800a800:	2230      	movs	r2, #48	; 0x30
 800a802:	3701      	adds	r7, #1
 800a804:	700a      	strb	r2, [r1, #0]
 800a806:	781a      	ldrb	r2, [r3, #0]
 800a808:	3201      	adds	r2, #1
 800a80a:	701a      	strb	r2, [r3, #0]
 800a80c:	e7ae      	b.n	800a76c <_dtoa_r+0x564>
 800a80e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a812:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a81a:	d1b2      	bne.n	800a782 <_dtoa_r+0x57a>
 800a81c:	e7d3      	b.n	800a7c6 <_dtoa_r+0x5be>
 800a81e:	bf00      	nop
 800a820:	0800da58 	.word	0x0800da58
 800a824:	0800da30 	.word	0x0800da30
 800a828:	9907      	ldr	r1, [sp, #28]
 800a82a:	2900      	cmp	r1, #0
 800a82c:	f000 80d0 	beq.w	800a9d0 <_dtoa_r+0x7c8>
 800a830:	9906      	ldr	r1, [sp, #24]
 800a832:	2901      	cmp	r1, #1
 800a834:	f300 80b4 	bgt.w	800a9a0 <_dtoa_r+0x798>
 800a838:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a83a:	2900      	cmp	r1, #0
 800a83c:	f000 80ac 	beq.w	800a998 <_dtoa_r+0x790>
 800a840:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a844:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a848:	461c      	mov	r4, r3
 800a84a:	930a      	str	r3, [sp, #40]	; 0x28
 800a84c:	9b04      	ldr	r3, [sp, #16]
 800a84e:	4413      	add	r3, r2
 800a850:	9304      	str	r3, [sp, #16]
 800a852:	9b05      	ldr	r3, [sp, #20]
 800a854:	2101      	movs	r1, #1
 800a856:	4413      	add	r3, r2
 800a858:	4630      	mov	r0, r6
 800a85a:	9305      	str	r3, [sp, #20]
 800a85c:	f000 ff32 	bl	800b6c4 <__i2b>
 800a860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a862:	4607      	mov	r7, r0
 800a864:	f1b8 0f00 	cmp.w	r8, #0
 800a868:	dd0d      	ble.n	800a886 <_dtoa_r+0x67e>
 800a86a:	9a05      	ldr	r2, [sp, #20]
 800a86c:	2a00      	cmp	r2, #0
 800a86e:	dd0a      	ble.n	800a886 <_dtoa_r+0x67e>
 800a870:	4542      	cmp	r2, r8
 800a872:	9904      	ldr	r1, [sp, #16]
 800a874:	bfa8      	it	ge
 800a876:	4642      	movge	r2, r8
 800a878:	1a89      	subs	r1, r1, r2
 800a87a:	9104      	str	r1, [sp, #16]
 800a87c:	9905      	ldr	r1, [sp, #20]
 800a87e:	eba8 0802 	sub.w	r8, r8, r2
 800a882:	1a8a      	subs	r2, r1, r2
 800a884:	9205      	str	r2, [sp, #20]
 800a886:	b303      	cbz	r3, 800a8ca <_dtoa_r+0x6c2>
 800a888:	9a07      	ldr	r2, [sp, #28]
 800a88a:	2a00      	cmp	r2, #0
 800a88c:	f000 80a5 	beq.w	800a9da <_dtoa_r+0x7d2>
 800a890:	2c00      	cmp	r4, #0
 800a892:	dd13      	ble.n	800a8bc <_dtoa_r+0x6b4>
 800a894:	4639      	mov	r1, r7
 800a896:	4622      	mov	r2, r4
 800a898:	4630      	mov	r0, r6
 800a89a:	930d      	str	r3, [sp, #52]	; 0x34
 800a89c:	f000 ffd2 	bl	800b844 <__pow5mult>
 800a8a0:	462a      	mov	r2, r5
 800a8a2:	4601      	mov	r1, r0
 800a8a4:	4607      	mov	r7, r0
 800a8a6:	4630      	mov	r0, r6
 800a8a8:	f000 ff22 	bl	800b6f0 <__multiply>
 800a8ac:	4629      	mov	r1, r5
 800a8ae:	900a      	str	r0, [sp, #40]	; 0x28
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	f000 fe05 	bl	800b4c0 <_Bfree>
 800a8b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8ba:	4615      	mov	r5, r2
 800a8bc:	1b1a      	subs	r2, r3, r4
 800a8be:	d004      	beq.n	800a8ca <_dtoa_r+0x6c2>
 800a8c0:	4629      	mov	r1, r5
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	f000 ffbe 	bl	800b844 <__pow5mult>
 800a8c8:	4605      	mov	r5, r0
 800a8ca:	2101      	movs	r1, #1
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	f000 fef9 	bl	800b6c4 <__i2b>
 800a8d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	f340 8081 	ble.w	800a9de <_dtoa_r+0x7d6>
 800a8dc:	461a      	mov	r2, r3
 800a8de:	4601      	mov	r1, r0
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	f000 ffaf 	bl	800b844 <__pow5mult>
 800a8e6:	9b06      	ldr	r3, [sp, #24]
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	dd7a      	ble.n	800a9e4 <_dtoa_r+0x7dc>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	930a      	str	r3, [sp, #40]	; 0x28
 800a8f2:	6922      	ldr	r2, [r4, #16]
 800a8f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a8f8:	6910      	ldr	r0, [r2, #16]
 800a8fa:	f000 fe93 	bl	800b624 <__hi0bits>
 800a8fe:	f1c0 0020 	rsb	r0, r0, #32
 800a902:	9b05      	ldr	r3, [sp, #20]
 800a904:	4418      	add	r0, r3
 800a906:	f010 001f 	ands.w	r0, r0, #31
 800a90a:	f000 808c 	beq.w	800aa26 <_dtoa_r+0x81e>
 800a90e:	f1c0 0220 	rsb	r2, r0, #32
 800a912:	2a04      	cmp	r2, #4
 800a914:	f340 8085 	ble.w	800aa22 <_dtoa_r+0x81a>
 800a918:	f1c0 001c 	rsb	r0, r0, #28
 800a91c:	9b04      	ldr	r3, [sp, #16]
 800a91e:	4403      	add	r3, r0
 800a920:	9304      	str	r3, [sp, #16]
 800a922:	9b05      	ldr	r3, [sp, #20]
 800a924:	4403      	add	r3, r0
 800a926:	4480      	add	r8, r0
 800a928:	9305      	str	r3, [sp, #20]
 800a92a:	9b04      	ldr	r3, [sp, #16]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	dd05      	ble.n	800a93c <_dtoa_r+0x734>
 800a930:	4629      	mov	r1, r5
 800a932:	461a      	mov	r2, r3
 800a934:	4630      	mov	r0, r6
 800a936:	f000 ffdf 	bl	800b8f8 <__lshift>
 800a93a:	4605      	mov	r5, r0
 800a93c:	9b05      	ldr	r3, [sp, #20]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	dd05      	ble.n	800a94e <_dtoa_r+0x746>
 800a942:	4621      	mov	r1, r4
 800a944:	461a      	mov	r2, r3
 800a946:	4630      	mov	r0, r6
 800a948:	f000 ffd6 	bl	800b8f8 <__lshift>
 800a94c:	4604      	mov	r4, r0
 800a94e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a950:	2b00      	cmp	r3, #0
 800a952:	d06a      	beq.n	800aa2a <_dtoa_r+0x822>
 800a954:	4621      	mov	r1, r4
 800a956:	4628      	mov	r0, r5
 800a958:	f001 f83e 	bl	800b9d8 <__mcmp>
 800a95c:	2800      	cmp	r0, #0
 800a95e:	da64      	bge.n	800aa2a <_dtoa_r+0x822>
 800a960:	2300      	movs	r3, #0
 800a962:	4629      	mov	r1, r5
 800a964:	220a      	movs	r2, #10
 800a966:	4630      	mov	r0, r6
 800a968:	f000 fdcc 	bl	800b504 <__multadd>
 800a96c:	9b07      	ldr	r3, [sp, #28]
 800a96e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a972:	4605      	mov	r5, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	f000 8191 	beq.w	800ac9c <_dtoa_r+0xa94>
 800a97a:	4639      	mov	r1, r7
 800a97c:	2300      	movs	r3, #0
 800a97e:	220a      	movs	r2, #10
 800a980:	4630      	mov	r0, r6
 800a982:	f000 fdbf 	bl	800b504 <__multadd>
 800a986:	f1ba 0f00 	cmp.w	sl, #0
 800a98a:	4607      	mov	r7, r0
 800a98c:	f300 808d 	bgt.w	800aaaa <_dtoa_r+0x8a2>
 800a990:	9b06      	ldr	r3, [sp, #24]
 800a992:	2b02      	cmp	r3, #2
 800a994:	dc50      	bgt.n	800aa38 <_dtoa_r+0x830>
 800a996:	e088      	b.n	800aaaa <_dtoa_r+0x8a2>
 800a998:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a99a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a99e:	e751      	b.n	800a844 <_dtoa_r+0x63c>
 800a9a0:	f109 34ff 	add.w	r4, r9, #4294967295
 800a9a4:	42a3      	cmp	r3, r4
 800a9a6:	bfbf      	itttt	lt
 800a9a8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800a9aa:	1ae3      	sublt	r3, r4, r3
 800a9ac:	18d2      	addlt	r2, r2, r3
 800a9ae:	9209      	strlt	r2, [sp, #36]	; 0x24
 800a9b0:	bfb6      	itet	lt
 800a9b2:	4623      	movlt	r3, r4
 800a9b4:	1b1c      	subge	r4, r3, r4
 800a9b6:	2400      	movlt	r4, #0
 800a9b8:	f1b9 0f00 	cmp.w	r9, #0
 800a9bc:	bfb5      	itete	lt
 800a9be:	9a04      	ldrlt	r2, [sp, #16]
 800a9c0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a9c4:	eba2 0809 	sublt.w	r8, r2, r9
 800a9c8:	464a      	movge	r2, r9
 800a9ca:	bfb8      	it	lt
 800a9cc:	2200      	movlt	r2, #0
 800a9ce:	e73c      	b.n	800a84a <_dtoa_r+0x642>
 800a9d0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a9d4:	9f07      	ldr	r7, [sp, #28]
 800a9d6:	461c      	mov	r4, r3
 800a9d8:	e744      	b.n	800a864 <_dtoa_r+0x65c>
 800a9da:	461a      	mov	r2, r3
 800a9dc:	e770      	b.n	800a8c0 <_dtoa_r+0x6b8>
 800a9de:	9b06      	ldr	r3, [sp, #24]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	dc18      	bgt.n	800aa16 <_dtoa_r+0x80e>
 800a9e4:	9b02      	ldr	r3, [sp, #8]
 800a9e6:	b9b3      	cbnz	r3, 800aa16 <_dtoa_r+0x80e>
 800a9e8:	9b03      	ldr	r3, [sp, #12]
 800a9ea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a9ee:	b9a2      	cbnz	r2, 800aa1a <_dtoa_r+0x812>
 800a9f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a9f4:	0d12      	lsrs	r2, r2, #20
 800a9f6:	0512      	lsls	r2, r2, #20
 800a9f8:	b18a      	cbz	r2, 800aa1e <_dtoa_r+0x816>
 800a9fa:	9b04      	ldr	r3, [sp, #16]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	9304      	str	r3, [sp, #16]
 800aa00:	9b05      	ldr	r3, [sp, #20]
 800aa02:	3301      	adds	r3, #1
 800aa04:	9305      	str	r3, [sp, #20]
 800aa06:	2301      	movs	r3, #1
 800aa08:	930a      	str	r3, [sp, #40]	; 0x28
 800aa0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f47f af70 	bne.w	800a8f2 <_dtoa_r+0x6ea>
 800aa12:	2001      	movs	r0, #1
 800aa14:	e775      	b.n	800a902 <_dtoa_r+0x6fa>
 800aa16:	2300      	movs	r3, #0
 800aa18:	e7f6      	b.n	800aa08 <_dtoa_r+0x800>
 800aa1a:	9b02      	ldr	r3, [sp, #8]
 800aa1c:	e7f4      	b.n	800aa08 <_dtoa_r+0x800>
 800aa1e:	920a      	str	r2, [sp, #40]	; 0x28
 800aa20:	e7f3      	b.n	800aa0a <_dtoa_r+0x802>
 800aa22:	d082      	beq.n	800a92a <_dtoa_r+0x722>
 800aa24:	4610      	mov	r0, r2
 800aa26:	301c      	adds	r0, #28
 800aa28:	e778      	b.n	800a91c <_dtoa_r+0x714>
 800aa2a:	f1b9 0f00 	cmp.w	r9, #0
 800aa2e:	dc37      	bgt.n	800aaa0 <_dtoa_r+0x898>
 800aa30:	9b06      	ldr	r3, [sp, #24]
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	dd34      	ble.n	800aaa0 <_dtoa_r+0x898>
 800aa36:	46ca      	mov	sl, r9
 800aa38:	f1ba 0f00 	cmp.w	sl, #0
 800aa3c:	d10d      	bne.n	800aa5a <_dtoa_r+0x852>
 800aa3e:	4621      	mov	r1, r4
 800aa40:	4653      	mov	r3, sl
 800aa42:	2205      	movs	r2, #5
 800aa44:	4630      	mov	r0, r6
 800aa46:	f000 fd5d 	bl	800b504 <__multadd>
 800aa4a:	4601      	mov	r1, r0
 800aa4c:	4604      	mov	r4, r0
 800aa4e:	4628      	mov	r0, r5
 800aa50:	f000 ffc2 	bl	800b9d8 <__mcmp>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	f73f adeb 	bgt.w	800a630 <_dtoa_r+0x428>
 800aa5a:	9b08      	ldr	r3, [sp, #32]
 800aa5c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aa60:	ea6f 0b03 	mvn.w	fp, r3
 800aa64:	f04f 0900 	mov.w	r9, #0
 800aa68:	4621      	mov	r1, r4
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f000 fd28 	bl	800b4c0 <_Bfree>
 800aa70:	2f00      	cmp	r7, #0
 800aa72:	f43f aea8 	beq.w	800a7c6 <_dtoa_r+0x5be>
 800aa76:	f1b9 0f00 	cmp.w	r9, #0
 800aa7a:	d005      	beq.n	800aa88 <_dtoa_r+0x880>
 800aa7c:	45b9      	cmp	r9, r7
 800aa7e:	d003      	beq.n	800aa88 <_dtoa_r+0x880>
 800aa80:	4649      	mov	r1, r9
 800aa82:	4630      	mov	r0, r6
 800aa84:	f000 fd1c 	bl	800b4c0 <_Bfree>
 800aa88:	4639      	mov	r1, r7
 800aa8a:	4630      	mov	r0, r6
 800aa8c:	f000 fd18 	bl	800b4c0 <_Bfree>
 800aa90:	e699      	b.n	800a7c6 <_dtoa_r+0x5be>
 800aa92:	2400      	movs	r4, #0
 800aa94:	4627      	mov	r7, r4
 800aa96:	e7e0      	b.n	800aa5a <_dtoa_r+0x852>
 800aa98:	46bb      	mov	fp, r7
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	4607      	mov	r7, r0
 800aa9e:	e5c7      	b.n	800a630 <_dtoa_r+0x428>
 800aaa0:	9b07      	ldr	r3, [sp, #28]
 800aaa2:	46ca      	mov	sl, r9
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f000 8100 	beq.w	800acaa <_dtoa_r+0xaa2>
 800aaaa:	f1b8 0f00 	cmp.w	r8, #0
 800aaae:	dd05      	ble.n	800aabc <_dtoa_r+0x8b4>
 800aab0:	4639      	mov	r1, r7
 800aab2:	4642      	mov	r2, r8
 800aab4:	4630      	mov	r0, r6
 800aab6:	f000 ff1f 	bl	800b8f8 <__lshift>
 800aaba:	4607      	mov	r7, r0
 800aabc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d05d      	beq.n	800ab7e <_dtoa_r+0x976>
 800aac2:	6879      	ldr	r1, [r7, #4]
 800aac4:	4630      	mov	r0, r6
 800aac6:	f000 fcbb 	bl	800b440 <_Balloc>
 800aaca:	4680      	mov	r8, r0
 800aacc:	b928      	cbnz	r0, 800aada <_dtoa_r+0x8d2>
 800aace:	4b82      	ldr	r3, [pc, #520]	; (800acd8 <_dtoa_r+0xad0>)
 800aad0:	4602      	mov	r2, r0
 800aad2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aad6:	f7ff bbaf 	b.w	800a238 <_dtoa_r+0x30>
 800aada:	693a      	ldr	r2, [r7, #16]
 800aadc:	3202      	adds	r2, #2
 800aade:	0092      	lsls	r2, r2, #2
 800aae0:	f107 010c 	add.w	r1, r7, #12
 800aae4:	300c      	adds	r0, #12
 800aae6:	f000 fc9d 	bl	800b424 <memcpy>
 800aaea:	2201      	movs	r2, #1
 800aaec:	4641      	mov	r1, r8
 800aaee:	4630      	mov	r0, r6
 800aaf0:	f000 ff02 	bl	800b8f8 <__lshift>
 800aaf4:	9b01      	ldr	r3, [sp, #4]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	9304      	str	r3, [sp, #16]
 800aafa:	9b01      	ldr	r3, [sp, #4]
 800aafc:	4453      	add	r3, sl
 800aafe:	9308      	str	r3, [sp, #32]
 800ab00:	9b02      	ldr	r3, [sp, #8]
 800ab02:	f003 0301 	and.w	r3, r3, #1
 800ab06:	46b9      	mov	r9, r7
 800ab08:	9307      	str	r3, [sp, #28]
 800ab0a:	4607      	mov	r7, r0
 800ab0c:	9b04      	ldr	r3, [sp, #16]
 800ab0e:	4621      	mov	r1, r4
 800ab10:	3b01      	subs	r3, #1
 800ab12:	4628      	mov	r0, r5
 800ab14:	9302      	str	r3, [sp, #8]
 800ab16:	f7ff fae9 	bl	800a0ec <quorem>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	3330      	adds	r3, #48	; 0x30
 800ab1e:	9005      	str	r0, [sp, #20]
 800ab20:	4649      	mov	r1, r9
 800ab22:	4628      	mov	r0, r5
 800ab24:	9309      	str	r3, [sp, #36]	; 0x24
 800ab26:	f000 ff57 	bl	800b9d8 <__mcmp>
 800ab2a:	463a      	mov	r2, r7
 800ab2c:	4682      	mov	sl, r0
 800ab2e:	4621      	mov	r1, r4
 800ab30:	4630      	mov	r0, r6
 800ab32:	f000 ff6d 	bl	800ba10 <__mdiff>
 800ab36:	68c2      	ldr	r2, [r0, #12]
 800ab38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab3a:	4680      	mov	r8, r0
 800ab3c:	bb0a      	cbnz	r2, 800ab82 <_dtoa_r+0x97a>
 800ab3e:	4601      	mov	r1, r0
 800ab40:	4628      	mov	r0, r5
 800ab42:	f000 ff49 	bl	800b9d8 <__mcmp>
 800ab46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab48:	4602      	mov	r2, r0
 800ab4a:	4641      	mov	r1, r8
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800ab52:	f000 fcb5 	bl	800b4c0 <_Bfree>
 800ab56:	9b06      	ldr	r3, [sp, #24]
 800ab58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab5a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ab5e:	ea43 0102 	orr.w	r1, r3, r2
 800ab62:	9b07      	ldr	r3, [sp, #28]
 800ab64:	430b      	orrs	r3, r1
 800ab66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab68:	d10d      	bne.n	800ab86 <_dtoa_r+0x97e>
 800ab6a:	2b39      	cmp	r3, #57	; 0x39
 800ab6c:	d029      	beq.n	800abc2 <_dtoa_r+0x9ba>
 800ab6e:	f1ba 0f00 	cmp.w	sl, #0
 800ab72:	dd01      	ble.n	800ab78 <_dtoa_r+0x970>
 800ab74:	9b05      	ldr	r3, [sp, #20]
 800ab76:	3331      	adds	r3, #49	; 0x31
 800ab78:	9a02      	ldr	r2, [sp, #8]
 800ab7a:	7013      	strb	r3, [r2, #0]
 800ab7c:	e774      	b.n	800aa68 <_dtoa_r+0x860>
 800ab7e:	4638      	mov	r0, r7
 800ab80:	e7b8      	b.n	800aaf4 <_dtoa_r+0x8ec>
 800ab82:	2201      	movs	r2, #1
 800ab84:	e7e1      	b.n	800ab4a <_dtoa_r+0x942>
 800ab86:	f1ba 0f00 	cmp.w	sl, #0
 800ab8a:	db06      	blt.n	800ab9a <_dtoa_r+0x992>
 800ab8c:	9906      	ldr	r1, [sp, #24]
 800ab8e:	ea41 0a0a 	orr.w	sl, r1, sl
 800ab92:	9907      	ldr	r1, [sp, #28]
 800ab94:	ea5a 0101 	orrs.w	r1, sl, r1
 800ab98:	d120      	bne.n	800abdc <_dtoa_r+0x9d4>
 800ab9a:	2a00      	cmp	r2, #0
 800ab9c:	ddec      	ble.n	800ab78 <_dtoa_r+0x970>
 800ab9e:	4629      	mov	r1, r5
 800aba0:	2201      	movs	r2, #1
 800aba2:	4630      	mov	r0, r6
 800aba4:	9304      	str	r3, [sp, #16]
 800aba6:	f000 fea7 	bl	800b8f8 <__lshift>
 800abaa:	4621      	mov	r1, r4
 800abac:	4605      	mov	r5, r0
 800abae:	f000 ff13 	bl	800b9d8 <__mcmp>
 800abb2:	2800      	cmp	r0, #0
 800abb4:	9b04      	ldr	r3, [sp, #16]
 800abb6:	dc02      	bgt.n	800abbe <_dtoa_r+0x9b6>
 800abb8:	d1de      	bne.n	800ab78 <_dtoa_r+0x970>
 800abba:	07da      	lsls	r2, r3, #31
 800abbc:	d5dc      	bpl.n	800ab78 <_dtoa_r+0x970>
 800abbe:	2b39      	cmp	r3, #57	; 0x39
 800abc0:	d1d8      	bne.n	800ab74 <_dtoa_r+0x96c>
 800abc2:	9a02      	ldr	r2, [sp, #8]
 800abc4:	2339      	movs	r3, #57	; 0x39
 800abc6:	7013      	strb	r3, [r2, #0]
 800abc8:	4643      	mov	r3, r8
 800abca:	4698      	mov	r8, r3
 800abcc:	3b01      	subs	r3, #1
 800abce:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800abd2:	2a39      	cmp	r2, #57	; 0x39
 800abd4:	d051      	beq.n	800ac7a <_dtoa_r+0xa72>
 800abd6:	3201      	adds	r2, #1
 800abd8:	701a      	strb	r2, [r3, #0]
 800abda:	e745      	b.n	800aa68 <_dtoa_r+0x860>
 800abdc:	2a00      	cmp	r2, #0
 800abde:	dd03      	ble.n	800abe8 <_dtoa_r+0x9e0>
 800abe0:	2b39      	cmp	r3, #57	; 0x39
 800abe2:	d0ee      	beq.n	800abc2 <_dtoa_r+0x9ba>
 800abe4:	3301      	adds	r3, #1
 800abe6:	e7c7      	b.n	800ab78 <_dtoa_r+0x970>
 800abe8:	9a04      	ldr	r2, [sp, #16]
 800abea:	9908      	ldr	r1, [sp, #32]
 800abec:	f802 3c01 	strb.w	r3, [r2, #-1]
 800abf0:	428a      	cmp	r2, r1
 800abf2:	d02b      	beq.n	800ac4c <_dtoa_r+0xa44>
 800abf4:	4629      	mov	r1, r5
 800abf6:	2300      	movs	r3, #0
 800abf8:	220a      	movs	r2, #10
 800abfa:	4630      	mov	r0, r6
 800abfc:	f000 fc82 	bl	800b504 <__multadd>
 800ac00:	45b9      	cmp	r9, r7
 800ac02:	4605      	mov	r5, r0
 800ac04:	f04f 0300 	mov.w	r3, #0
 800ac08:	f04f 020a 	mov.w	r2, #10
 800ac0c:	4649      	mov	r1, r9
 800ac0e:	4630      	mov	r0, r6
 800ac10:	d107      	bne.n	800ac22 <_dtoa_r+0xa1a>
 800ac12:	f000 fc77 	bl	800b504 <__multadd>
 800ac16:	4681      	mov	r9, r0
 800ac18:	4607      	mov	r7, r0
 800ac1a:	9b04      	ldr	r3, [sp, #16]
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	9304      	str	r3, [sp, #16]
 800ac20:	e774      	b.n	800ab0c <_dtoa_r+0x904>
 800ac22:	f000 fc6f 	bl	800b504 <__multadd>
 800ac26:	4639      	mov	r1, r7
 800ac28:	4681      	mov	r9, r0
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	220a      	movs	r2, #10
 800ac2e:	4630      	mov	r0, r6
 800ac30:	f000 fc68 	bl	800b504 <__multadd>
 800ac34:	4607      	mov	r7, r0
 800ac36:	e7f0      	b.n	800ac1a <_dtoa_r+0xa12>
 800ac38:	f1ba 0f00 	cmp.w	sl, #0
 800ac3c:	9a01      	ldr	r2, [sp, #4]
 800ac3e:	bfcc      	ite	gt
 800ac40:	46d0      	movgt	r8, sl
 800ac42:	f04f 0801 	movle.w	r8, #1
 800ac46:	4490      	add	r8, r2
 800ac48:	f04f 0900 	mov.w	r9, #0
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	2201      	movs	r2, #1
 800ac50:	4630      	mov	r0, r6
 800ac52:	9302      	str	r3, [sp, #8]
 800ac54:	f000 fe50 	bl	800b8f8 <__lshift>
 800ac58:	4621      	mov	r1, r4
 800ac5a:	4605      	mov	r5, r0
 800ac5c:	f000 febc 	bl	800b9d8 <__mcmp>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	dcb1      	bgt.n	800abc8 <_dtoa_r+0x9c0>
 800ac64:	d102      	bne.n	800ac6c <_dtoa_r+0xa64>
 800ac66:	9b02      	ldr	r3, [sp, #8]
 800ac68:	07db      	lsls	r3, r3, #31
 800ac6a:	d4ad      	bmi.n	800abc8 <_dtoa_r+0x9c0>
 800ac6c:	4643      	mov	r3, r8
 800ac6e:	4698      	mov	r8, r3
 800ac70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac74:	2a30      	cmp	r2, #48	; 0x30
 800ac76:	d0fa      	beq.n	800ac6e <_dtoa_r+0xa66>
 800ac78:	e6f6      	b.n	800aa68 <_dtoa_r+0x860>
 800ac7a:	9a01      	ldr	r2, [sp, #4]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d1a4      	bne.n	800abca <_dtoa_r+0x9c2>
 800ac80:	f10b 0b01 	add.w	fp, fp, #1
 800ac84:	2331      	movs	r3, #49	; 0x31
 800ac86:	e778      	b.n	800ab7a <_dtoa_r+0x972>
 800ac88:	4b14      	ldr	r3, [pc, #80]	; (800acdc <_dtoa_r+0xad4>)
 800ac8a:	f7ff bb27 	b.w	800a2dc <_dtoa_r+0xd4>
 800ac8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f47f ab03 	bne.w	800a29c <_dtoa_r+0x94>
 800ac96:	4b12      	ldr	r3, [pc, #72]	; (800ace0 <_dtoa_r+0xad8>)
 800ac98:	f7ff bb20 	b.w	800a2dc <_dtoa_r+0xd4>
 800ac9c:	f1ba 0f00 	cmp.w	sl, #0
 800aca0:	dc03      	bgt.n	800acaa <_dtoa_r+0xaa2>
 800aca2:	9b06      	ldr	r3, [sp, #24]
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	f73f aec7 	bgt.w	800aa38 <_dtoa_r+0x830>
 800acaa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800acae:	4621      	mov	r1, r4
 800acb0:	4628      	mov	r0, r5
 800acb2:	f7ff fa1b 	bl	800a0ec <quorem>
 800acb6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800acba:	f808 3b01 	strb.w	r3, [r8], #1
 800acbe:	9a01      	ldr	r2, [sp, #4]
 800acc0:	eba8 0202 	sub.w	r2, r8, r2
 800acc4:	4592      	cmp	sl, r2
 800acc6:	ddb7      	ble.n	800ac38 <_dtoa_r+0xa30>
 800acc8:	4629      	mov	r1, r5
 800acca:	2300      	movs	r3, #0
 800accc:	220a      	movs	r2, #10
 800acce:	4630      	mov	r0, r6
 800acd0:	f000 fc18 	bl	800b504 <__multadd>
 800acd4:	4605      	mov	r5, r0
 800acd6:	e7ea      	b.n	800acae <_dtoa_r+0xaa6>
 800acd8:	0800d948 	.word	0x0800d948
 800acdc:	0800db41 	.word	0x0800db41
 800ace0:	0800d8c9 	.word	0x0800d8c9

0800ace4 <rshift>:
 800ace4:	6903      	ldr	r3, [r0, #16]
 800ace6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800acea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800acee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800acf2:	f100 0414 	add.w	r4, r0, #20
 800acf6:	dd45      	ble.n	800ad84 <rshift+0xa0>
 800acf8:	f011 011f 	ands.w	r1, r1, #31
 800acfc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ad00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ad04:	d10c      	bne.n	800ad20 <rshift+0x3c>
 800ad06:	f100 0710 	add.w	r7, r0, #16
 800ad0a:	4629      	mov	r1, r5
 800ad0c:	42b1      	cmp	r1, r6
 800ad0e:	d334      	bcc.n	800ad7a <rshift+0x96>
 800ad10:	1a9b      	subs	r3, r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	1eea      	subs	r2, r5, #3
 800ad16:	4296      	cmp	r6, r2
 800ad18:	bf38      	it	cc
 800ad1a:	2300      	movcc	r3, #0
 800ad1c:	4423      	add	r3, r4
 800ad1e:	e015      	b.n	800ad4c <rshift+0x68>
 800ad20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ad24:	f1c1 0820 	rsb	r8, r1, #32
 800ad28:	40cf      	lsrs	r7, r1
 800ad2a:	f105 0e04 	add.w	lr, r5, #4
 800ad2e:	46a1      	mov	r9, r4
 800ad30:	4576      	cmp	r6, lr
 800ad32:	46f4      	mov	ip, lr
 800ad34:	d815      	bhi.n	800ad62 <rshift+0x7e>
 800ad36:	1a9a      	subs	r2, r3, r2
 800ad38:	0092      	lsls	r2, r2, #2
 800ad3a:	3a04      	subs	r2, #4
 800ad3c:	3501      	adds	r5, #1
 800ad3e:	42ae      	cmp	r6, r5
 800ad40:	bf38      	it	cc
 800ad42:	2200      	movcc	r2, #0
 800ad44:	18a3      	adds	r3, r4, r2
 800ad46:	50a7      	str	r7, [r4, r2]
 800ad48:	b107      	cbz	r7, 800ad4c <rshift+0x68>
 800ad4a:	3304      	adds	r3, #4
 800ad4c:	1b1a      	subs	r2, r3, r4
 800ad4e:	42a3      	cmp	r3, r4
 800ad50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ad54:	bf08      	it	eq
 800ad56:	2300      	moveq	r3, #0
 800ad58:	6102      	str	r2, [r0, #16]
 800ad5a:	bf08      	it	eq
 800ad5c:	6143      	streq	r3, [r0, #20]
 800ad5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad62:	f8dc c000 	ldr.w	ip, [ip]
 800ad66:	fa0c fc08 	lsl.w	ip, ip, r8
 800ad6a:	ea4c 0707 	orr.w	r7, ip, r7
 800ad6e:	f849 7b04 	str.w	r7, [r9], #4
 800ad72:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ad76:	40cf      	lsrs	r7, r1
 800ad78:	e7da      	b.n	800ad30 <rshift+0x4c>
 800ad7a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ad7e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ad82:	e7c3      	b.n	800ad0c <rshift+0x28>
 800ad84:	4623      	mov	r3, r4
 800ad86:	e7e1      	b.n	800ad4c <rshift+0x68>

0800ad88 <__hexdig_fun>:
 800ad88:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ad8c:	2b09      	cmp	r3, #9
 800ad8e:	d802      	bhi.n	800ad96 <__hexdig_fun+0xe>
 800ad90:	3820      	subs	r0, #32
 800ad92:	b2c0      	uxtb	r0, r0
 800ad94:	4770      	bx	lr
 800ad96:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ad9a:	2b05      	cmp	r3, #5
 800ad9c:	d801      	bhi.n	800ada2 <__hexdig_fun+0x1a>
 800ad9e:	3847      	subs	r0, #71	; 0x47
 800ada0:	e7f7      	b.n	800ad92 <__hexdig_fun+0xa>
 800ada2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ada6:	2b05      	cmp	r3, #5
 800ada8:	d801      	bhi.n	800adae <__hexdig_fun+0x26>
 800adaa:	3827      	subs	r0, #39	; 0x27
 800adac:	e7f1      	b.n	800ad92 <__hexdig_fun+0xa>
 800adae:	2000      	movs	r0, #0
 800adb0:	4770      	bx	lr
	...

0800adb4 <__gethex>:
 800adb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb8:	ed2d 8b02 	vpush	{d8}
 800adbc:	b089      	sub	sp, #36	; 0x24
 800adbe:	ee08 0a10 	vmov	s16, r0
 800adc2:	9304      	str	r3, [sp, #16]
 800adc4:	4bb4      	ldr	r3, [pc, #720]	; (800b098 <__gethex+0x2e4>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	9301      	str	r3, [sp, #4]
 800adca:	4618      	mov	r0, r3
 800adcc:	468b      	mov	fp, r1
 800adce:	4690      	mov	r8, r2
 800add0:	f7f5 fa40 	bl	8000254 <strlen>
 800add4:	9b01      	ldr	r3, [sp, #4]
 800add6:	f8db 2000 	ldr.w	r2, [fp]
 800adda:	4403      	add	r3, r0
 800addc:	4682      	mov	sl, r0
 800adde:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ade2:	9305      	str	r3, [sp, #20]
 800ade4:	1c93      	adds	r3, r2, #2
 800ade6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800adea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800adee:	32fe      	adds	r2, #254	; 0xfe
 800adf0:	18d1      	adds	r1, r2, r3
 800adf2:	461f      	mov	r7, r3
 800adf4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800adf8:	9100      	str	r1, [sp, #0]
 800adfa:	2830      	cmp	r0, #48	; 0x30
 800adfc:	d0f8      	beq.n	800adf0 <__gethex+0x3c>
 800adfe:	f7ff ffc3 	bl	800ad88 <__hexdig_fun>
 800ae02:	4604      	mov	r4, r0
 800ae04:	2800      	cmp	r0, #0
 800ae06:	d13a      	bne.n	800ae7e <__gethex+0xca>
 800ae08:	9901      	ldr	r1, [sp, #4]
 800ae0a:	4652      	mov	r2, sl
 800ae0c:	4638      	mov	r0, r7
 800ae0e:	f7fe faca 	bl	80093a6 <strncmp>
 800ae12:	4605      	mov	r5, r0
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d168      	bne.n	800aeea <__gethex+0x136>
 800ae18:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ae1c:	eb07 060a 	add.w	r6, r7, sl
 800ae20:	f7ff ffb2 	bl	800ad88 <__hexdig_fun>
 800ae24:	2800      	cmp	r0, #0
 800ae26:	d062      	beq.n	800aeee <__gethex+0x13a>
 800ae28:	4633      	mov	r3, r6
 800ae2a:	7818      	ldrb	r0, [r3, #0]
 800ae2c:	2830      	cmp	r0, #48	; 0x30
 800ae2e:	461f      	mov	r7, r3
 800ae30:	f103 0301 	add.w	r3, r3, #1
 800ae34:	d0f9      	beq.n	800ae2a <__gethex+0x76>
 800ae36:	f7ff ffa7 	bl	800ad88 <__hexdig_fun>
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	fab0 f480 	clz	r4, r0
 800ae40:	0964      	lsrs	r4, r4, #5
 800ae42:	4635      	mov	r5, r6
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	463a      	mov	r2, r7
 800ae48:	4616      	mov	r6, r2
 800ae4a:	3201      	adds	r2, #1
 800ae4c:	7830      	ldrb	r0, [r6, #0]
 800ae4e:	f7ff ff9b 	bl	800ad88 <__hexdig_fun>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	d1f8      	bne.n	800ae48 <__gethex+0x94>
 800ae56:	9901      	ldr	r1, [sp, #4]
 800ae58:	4652      	mov	r2, sl
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	f7fe faa3 	bl	80093a6 <strncmp>
 800ae60:	b980      	cbnz	r0, 800ae84 <__gethex+0xd0>
 800ae62:	b94d      	cbnz	r5, 800ae78 <__gethex+0xc4>
 800ae64:	eb06 050a 	add.w	r5, r6, sl
 800ae68:	462a      	mov	r2, r5
 800ae6a:	4616      	mov	r6, r2
 800ae6c:	3201      	adds	r2, #1
 800ae6e:	7830      	ldrb	r0, [r6, #0]
 800ae70:	f7ff ff8a 	bl	800ad88 <__hexdig_fun>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d1f8      	bne.n	800ae6a <__gethex+0xb6>
 800ae78:	1bad      	subs	r5, r5, r6
 800ae7a:	00ad      	lsls	r5, r5, #2
 800ae7c:	e004      	b.n	800ae88 <__gethex+0xd4>
 800ae7e:	2400      	movs	r4, #0
 800ae80:	4625      	mov	r5, r4
 800ae82:	e7e0      	b.n	800ae46 <__gethex+0x92>
 800ae84:	2d00      	cmp	r5, #0
 800ae86:	d1f7      	bne.n	800ae78 <__gethex+0xc4>
 800ae88:	7833      	ldrb	r3, [r6, #0]
 800ae8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ae8e:	2b50      	cmp	r3, #80	; 0x50
 800ae90:	d13b      	bne.n	800af0a <__gethex+0x156>
 800ae92:	7873      	ldrb	r3, [r6, #1]
 800ae94:	2b2b      	cmp	r3, #43	; 0x2b
 800ae96:	d02c      	beq.n	800aef2 <__gethex+0x13e>
 800ae98:	2b2d      	cmp	r3, #45	; 0x2d
 800ae9a:	d02e      	beq.n	800aefa <__gethex+0x146>
 800ae9c:	1c71      	adds	r1, r6, #1
 800ae9e:	f04f 0900 	mov.w	r9, #0
 800aea2:	7808      	ldrb	r0, [r1, #0]
 800aea4:	f7ff ff70 	bl	800ad88 <__hexdig_fun>
 800aea8:	1e43      	subs	r3, r0, #1
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	2b18      	cmp	r3, #24
 800aeae:	d82c      	bhi.n	800af0a <__gethex+0x156>
 800aeb0:	f1a0 0210 	sub.w	r2, r0, #16
 800aeb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aeb8:	f7ff ff66 	bl	800ad88 <__hexdig_fun>
 800aebc:	1e43      	subs	r3, r0, #1
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	2b18      	cmp	r3, #24
 800aec2:	d91d      	bls.n	800af00 <__gethex+0x14c>
 800aec4:	f1b9 0f00 	cmp.w	r9, #0
 800aec8:	d000      	beq.n	800aecc <__gethex+0x118>
 800aeca:	4252      	negs	r2, r2
 800aecc:	4415      	add	r5, r2
 800aece:	f8cb 1000 	str.w	r1, [fp]
 800aed2:	b1e4      	cbz	r4, 800af0e <__gethex+0x15a>
 800aed4:	9b00      	ldr	r3, [sp, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	bf14      	ite	ne
 800aeda:	2700      	movne	r7, #0
 800aedc:	2706      	moveq	r7, #6
 800aede:	4638      	mov	r0, r7
 800aee0:	b009      	add	sp, #36	; 0x24
 800aee2:	ecbd 8b02 	vpop	{d8}
 800aee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeea:	463e      	mov	r6, r7
 800aeec:	4625      	mov	r5, r4
 800aeee:	2401      	movs	r4, #1
 800aef0:	e7ca      	b.n	800ae88 <__gethex+0xd4>
 800aef2:	f04f 0900 	mov.w	r9, #0
 800aef6:	1cb1      	adds	r1, r6, #2
 800aef8:	e7d3      	b.n	800aea2 <__gethex+0xee>
 800aefa:	f04f 0901 	mov.w	r9, #1
 800aefe:	e7fa      	b.n	800aef6 <__gethex+0x142>
 800af00:	230a      	movs	r3, #10
 800af02:	fb03 0202 	mla	r2, r3, r2, r0
 800af06:	3a10      	subs	r2, #16
 800af08:	e7d4      	b.n	800aeb4 <__gethex+0x100>
 800af0a:	4631      	mov	r1, r6
 800af0c:	e7df      	b.n	800aece <__gethex+0x11a>
 800af0e:	1bf3      	subs	r3, r6, r7
 800af10:	3b01      	subs	r3, #1
 800af12:	4621      	mov	r1, r4
 800af14:	2b07      	cmp	r3, #7
 800af16:	dc0b      	bgt.n	800af30 <__gethex+0x17c>
 800af18:	ee18 0a10 	vmov	r0, s16
 800af1c:	f000 fa90 	bl	800b440 <_Balloc>
 800af20:	4604      	mov	r4, r0
 800af22:	b940      	cbnz	r0, 800af36 <__gethex+0x182>
 800af24:	4b5d      	ldr	r3, [pc, #372]	; (800b09c <__gethex+0x2e8>)
 800af26:	4602      	mov	r2, r0
 800af28:	21de      	movs	r1, #222	; 0xde
 800af2a:	485d      	ldr	r0, [pc, #372]	; (800b0a0 <__gethex+0x2ec>)
 800af2c:	f001 fddc 	bl	800cae8 <__assert_func>
 800af30:	3101      	adds	r1, #1
 800af32:	105b      	asrs	r3, r3, #1
 800af34:	e7ee      	b.n	800af14 <__gethex+0x160>
 800af36:	f100 0914 	add.w	r9, r0, #20
 800af3a:	f04f 0b00 	mov.w	fp, #0
 800af3e:	f1ca 0301 	rsb	r3, sl, #1
 800af42:	f8cd 9008 	str.w	r9, [sp, #8]
 800af46:	f8cd b000 	str.w	fp, [sp]
 800af4a:	9306      	str	r3, [sp, #24]
 800af4c:	42b7      	cmp	r7, r6
 800af4e:	d340      	bcc.n	800afd2 <__gethex+0x21e>
 800af50:	9802      	ldr	r0, [sp, #8]
 800af52:	9b00      	ldr	r3, [sp, #0]
 800af54:	f840 3b04 	str.w	r3, [r0], #4
 800af58:	eba0 0009 	sub.w	r0, r0, r9
 800af5c:	1080      	asrs	r0, r0, #2
 800af5e:	0146      	lsls	r6, r0, #5
 800af60:	6120      	str	r0, [r4, #16]
 800af62:	4618      	mov	r0, r3
 800af64:	f000 fb5e 	bl	800b624 <__hi0bits>
 800af68:	1a30      	subs	r0, r6, r0
 800af6a:	f8d8 6000 	ldr.w	r6, [r8]
 800af6e:	42b0      	cmp	r0, r6
 800af70:	dd63      	ble.n	800b03a <__gethex+0x286>
 800af72:	1b87      	subs	r7, r0, r6
 800af74:	4639      	mov	r1, r7
 800af76:	4620      	mov	r0, r4
 800af78:	f000 feff 	bl	800bd7a <__any_on>
 800af7c:	4682      	mov	sl, r0
 800af7e:	b1a8      	cbz	r0, 800afac <__gethex+0x1f8>
 800af80:	1e7b      	subs	r3, r7, #1
 800af82:	1159      	asrs	r1, r3, #5
 800af84:	f003 021f 	and.w	r2, r3, #31
 800af88:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800af8c:	f04f 0a01 	mov.w	sl, #1
 800af90:	fa0a f202 	lsl.w	r2, sl, r2
 800af94:	420a      	tst	r2, r1
 800af96:	d009      	beq.n	800afac <__gethex+0x1f8>
 800af98:	4553      	cmp	r3, sl
 800af9a:	dd05      	ble.n	800afa8 <__gethex+0x1f4>
 800af9c:	1eb9      	subs	r1, r7, #2
 800af9e:	4620      	mov	r0, r4
 800afa0:	f000 feeb 	bl	800bd7a <__any_on>
 800afa4:	2800      	cmp	r0, #0
 800afa6:	d145      	bne.n	800b034 <__gethex+0x280>
 800afa8:	f04f 0a02 	mov.w	sl, #2
 800afac:	4639      	mov	r1, r7
 800afae:	4620      	mov	r0, r4
 800afb0:	f7ff fe98 	bl	800ace4 <rshift>
 800afb4:	443d      	add	r5, r7
 800afb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800afba:	42ab      	cmp	r3, r5
 800afbc:	da4c      	bge.n	800b058 <__gethex+0x2a4>
 800afbe:	ee18 0a10 	vmov	r0, s16
 800afc2:	4621      	mov	r1, r4
 800afc4:	f000 fa7c 	bl	800b4c0 <_Bfree>
 800afc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800afca:	2300      	movs	r3, #0
 800afcc:	6013      	str	r3, [r2, #0]
 800afce:	27a3      	movs	r7, #163	; 0xa3
 800afd0:	e785      	b.n	800aede <__gethex+0x12a>
 800afd2:	1e73      	subs	r3, r6, #1
 800afd4:	9a05      	ldr	r2, [sp, #20]
 800afd6:	9303      	str	r3, [sp, #12]
 800afd8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800afdc:	4293      	cmp	r3, r2
 800afde:	d019      	beq.n	800b014 <__gethex+0x260>
 800afe0:	f1bb 0f20 	cmp.w	fp, #32
 800afe4:	d107      	bne.n	800aff6 <__gethex+0x242>
 800afe6:	9b02      	ldr	r3, [sp, #8]
 800afe8:	9a00      	ldr	r2, [sp, #0]
 800afea:	f843 2b04 	str.w	r2, [r3], #4
 800afee:	9302      	str	r3, [sp, #8]
 800aff0:	2300      	movs	r3, #0
 800aff2:	9300      	str	r3, [sp, #0]
 800aff4:	469b      	mov	fp, r3
 800aff6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800affa:	f7ff fec5 	bl	800ad88 <__hexdig_fun>
 800affe:	9b00      	ldr	r3, [sp, #0]
 800b000:	f000 000f 	and.w	r0, r0, #15
 800b004:	fa00 f00b 	lsl.w	r0, r0, fp
 800b008:	4303      	orrs	r3, r0
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	f10b 0b04 	add.w	fp, fp, #4
 800b010:	9b03      	ldr	r3, [sp, #12]
 800b012:	e00d      	b.n	800b030 <__gethex+0x27c>
 800b014:	9b03      	ldr	r3, [sp, #12]
 800b016:	9a06      	ldr	r2, [sp, #24]
 800b018:	4413      	add	r3, r2
 800b01a:	42bb      	cmp	r3, r7
 800b01c:	d3e0      	bcc.n	800afe0 <__gethex+0x22c>
 800b01e:	4618      	mov	r0, r3
 800b020:	9901      	ldr	r1, [sp, #4]
 800b022:	9307      	str	r3, [sp, #28]
 800b024:	4652      	mov	r2, sl
 800b026:	f7fe f9be 	bl	80093a6 <strncmp>
 800b02a:	9b07      	ldr	r3, [sp, #28]
 800b02c:	2800      	cmp	r0, #0
 800b02e:	d1d7      	bne.n	800afe0 <__gethex+0x22c>
 800b030:	461e      	mov	r6, r3
 800b032:	e78b      	b.n	800af4c <__gethex+0x198>
 800b034:	f04f 0a03 	mov.w	sl, #3
 800b038:	e7b8      	b.n	800afac <__gethex+0x1f8>
 800b03a:	da0a      	bge.n	800b052 <__gethex+0x29e>
 800b03c:	1a37      	subs	r7, r6, r0
 800b03e:	4621      	mov	r1, r4
 800b040:	ee18 0a10 	vmov	r0, s16
 800b044:	463a      	mov	r2, r7
 800b046:	f000 fc57 	bl	800b8f8 <__lshift>
 800b04a:	1bed      	subs	r5, r5, r7
 800b04c:	4604      	mov	r4, r0
 800b04e:	f100 0914 	add.w	r9, r0, #20
 800b052:	f04f 0a00 	mov.w	sl, #0
 800b056:	e7ae      	b.n	800afb6 <__gethex+0x202>
 800b058:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b05c:	42a8      	cmp	r0, r5
 800b05e:	dd72      	ble.n	800b146 <__gethex+0x392>
 800b060:	1b45      	subs	r5, r0, r5
 800b062:	42ae      	cmp	r6, r5
 800b064:	dc36      	bgt.n	800b0d4 <__gethex+0x320>
 800b066:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	d02a      	beq.n	800b0c4 <__gethex+0x310>
 800b06e:	2b03      	cmp	r3, #3
 800b070:	d02c      	beq.n	800b0cc <__gethex+0x318>
 800b072:	2b01      	cmp	r3, #1
 800b074:	d11c      	bne.n	800b0b0 <__gethex+0x2fc>
 800b076:	42ae      	cmp	r6, r5
 800b078:	d11a      	bne.n	800b0b0 <__gethex+0x2fc>
 800b07a:	2e01      	cmp	r6, #1
 800b07c:	d112      	bne.n	800b0a4 <__gethex+0x2f0>
 800b07e:	9a04      	ldr	r2, [sp, #16]
 800b080:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b084:	6013      	str	r3, [r2, #0]
 800b086:	2301      	movs	r3, #1
 800b088:	6123      	str	r3, [r4, #16]
 800b08a:	f8c9 3000 	str.w	r3, [r9]
 800b08e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b090:	2762      	movs	r7, #98	; 0x62
 800b092:	601c      	str	r4, [r3, #0]
 800b094:	e723      	b.n	800aede <__gethex+0x12a>
 800b096:	bf00      	nop
 800b098:	0800d9c0 	.word	0x0800d9c0
 800b09c:	0800d948 	.word	0x0800d948
 800b0a0:	0800d959 	.word	0x0800d959
 800b0a4:	1e71      	subs	r1, r6, #1
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f000 fe67 	bl	800bd7a <__any_on>
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d1e6      	bne.n	800b07e <__gethex+0x2ca>
 800b0b0:	ee18 0a10 	vmov	r0, s16
 800b0b4:	4621      	mov	r1, r4
 800b0b6:	f000 fa03 	bl	800b4c0 <_Bfree>
 800b0ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b0bc:	2300      	movs	r3, #0
 800b0be:	6013      	str	r3, [r2, #0]
 800b0c0:	2750      	movs	r7, #80	; 0x50
 800b0c2:	e70c      	b.n	800aede <__gethex+0x12a>
 800b0c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d1f2      	bne.n	800b0b0 <__gethex+0x2fc>
 800b0ca:	e7d8      	b.n	800b07e <__gethex+0x2ca>
 800b0cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1d5      	bne.n	800b07e <__gethex+0x2ca>
 800b0d2:	e7ed      	b.n	800b0b0 <__gethex+0x2fc>
 800b0d4:	1e6f      	subs	r7, r5, #1
 800b0d6:	f1ba 0f00 	cmp.w	sl, #0
 800b0da:	d131      	bne.n	800b140 <__gethex+0x38c>
 800b0dc:	b127      	cbz	r7, 800b0e8 <__gethex+0x334>
 800b0de:	4639      	mov	r1, r7
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	f000 fe4a 	bl	800bd7a <__any_on>
 800b0e6:	4682      	mov	sl, r0
 800b0e8:	117b      	asrs	r3, r7, #5
 800b0ea:	2101      	movs	r1, #1
 800b0ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b0f0:	f007 071f 	and.w	r7, r7, #31
 800b0f4:	fa01 f707 	lsl.w	r7, r1, r7
 800b0f8:	421f      	tst	r7, r3
 800b0fa:	4629      	mov	r1, r5
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	bf18      	it	ne
 800b100:	f04a 0a02 	orrne.w	sl, sl, #2
 800b104:	1b76      	subs	r6, r6, r5
 800b106:	f7ff fded 	bl	800ace4 <rshift>
 800b10a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b10e:	2702      	movs	r7, #2
 800b110:	f1ba 0f00 	cmp.w	sl, #0
 800b114:	d048      	beq.n	800b1a8 <__gethex+0x3f4>
 800b116:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b11a:	2b02      	cmp	r3, #2
 800b11c:	d015      	beq.n	800b14a <__gethex+0x396>
 800b11e:	2b03      	cmp	r3, #3
 800b120:	d017      	beq.n	800b152 <__gethex+0x39e>
 800b122:	2b01      	cmp	r3, #1
 800b124:	d109      	bne.n	800b13a <__gethex+0x386>
 800b126:	f01a 0f02 	tst.w	sl, #2
 800b12a:	d006      	beq.n	800b13a <__gethex+0x386>
 800b12c:	f8d9 0000 	ldr.w	r0, [r9]
 800b130:	ea4a 0a00 	orr.w	sl, sl, r0
 800b134:	f01a 0f01 	tst.w	sl, #1
 800b138:	d10e      	bne.n	800b158 <__gethex+0x3a4>
 800b13a:	f047 0710 	orr.w	r7, r7, #16
 800b13e:	e033      	b.n	800b1a8 <__gethex+0x3f4>
 800b140:	f04f 0a01 	mov.w	sl, #1
 800b144:	e7d0      	b.n	800b0e8 <__gethex+0x334>
 800b146:	2701      	movs	r7, #1
 800b148:	e7e2      	b.n	800b110 <__gethex+0x35c>
 800b14a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b14c:	f1c3 0301 	rsb	r3, r3, #1
 800b150:	9315      	str	r3, [sp, #84]	; 0x54
 800b152:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b154:	2b00      	cmp	r3, #0
 800b156:	d0f0      	beq.n	800b13a <__gethex+0x386>
 800b158:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b15c:	f104 0314 	add.w	r3, r4, #20
 800b160:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b164:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b168:	f04f 0c00 	mov.w	ip, #0
 800b16c:	4618      	mov	r0, r3
 800b16e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b172:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b176:	d01c      	beq.n	800b1b2 <__gethex+0x3fe>
 800b178:	3201      	adds	r2, #1
 800b17a:	6002      	str	r2, [r0, #0]
 800b17c:	2f02      	cmp	r7, #2
 800b17e:	f104 0314 	add.w	r3, r4, #20
 800b182:	d13f      	bne.n	800b204 <__gethex+0x450>
 800b184:	f8d8 2000 	ldr.w	r2, [r8]
 800b188:	3a01      	subs	r2, #1
 800b18a:	42b2      	cmp	r2, r6
 800b18c:	d10a      	bne.n	800b1a4 <__gethex+0x3f0>
 800b18e:	1171      	asrs	r1, r6, #5
 800b190:	2201      	movs	r2, #1
 800b192:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b196:	f006 061f 	and.w	r6, r6, #31
 800b19a:	fa02 f606 	lsl.w	r6, r2, r6
 800b19e:	421e      	tst	r6, r3
 800b1a0:	bf18      	it	ne
 800b1a2:	4617      	movne	r7, r2
 800b1a4:	f047 0720 	orr.w	r7, r7, #32
 800b1a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b1aa:	601c      	str	r4, [r3, #0]
 800b1ac:	9b04      	ldr	r3, [sp, #16]
 800b1ae:	601d      	str	r5, [r3, #0]
 800b1b0:	e695      	b.n	800aede <__gethex+0x12a>
 800b1b2:	4299      	cmp	r1, r3
 800b1b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b1b8:	d8d8      	bhi.n	800b16c <__gethex+0x3b8>
 800b1ba:	68a3      	ldr	r3, [r4, #8]
 800b1bc:	459b      	cmp	fp, r3
 800b1be:	db19      	blt.n	800b1f4 <__gethex+0x440>
 800b1c0:	6861      	ldr	r1, [r4, #4]
 800b1c2:	ee18 0a10 	vmov	r0, s16
 800b1c6:	3101      	adds	r1, #1
 800b1c8:	f000 f93a 	bl	800b440 <_Balloc>
 800b1cc:	4681      	mov	r9, r0
 800b1ce:	b918      	cbnz	r0, 800b1d8 <__gethex+0x424>
 800b1d0:	4b1a      	ldr	r3, [pc, #104]	; (800b23c <__gethex+0x488>)
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	2184      	movs	r1, #132	; 0x84
 800b1d6:	e6a8      	b.n	800af2a <__gethex+0x176>
 800b1d8:	6922      	ldr	r2, [r4, #16]
 800b1da:	3202      	adds	r2, #2
 800b1dc:	f104 010c 	add.w	r1, r4, #12
 800b1e0:	0092      	lsls	r2, r2, #2
 800b1e2:	300c      	adds	r0, #12
 800b1e4:	f000 f91e 	bl	800b424 <memcpy>
 800b1e8:	4621      	mov	r1, r4
 800b1ea:	ee18 0a10 	vmov	r0, s16
 800b1ee:	f000 f967 	bl	800b4c0 <_Bfree>
 800b1f2:	464c      	mov	r4, r9
 800b1f4:	6923      	ldr	r3, [r4, #16]
 800b1f6:	1c5a      	adds	r2, r3, #1
 800b1f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b1fc:	6122      	str	r2, [r4, #16]
 800b1fe:	2201      	movs	r2, #1
 800b200:	615a      	str	r2, [r3, #20]
 800b202:	e7bb      	b.n	800b17c <__gethex+0x3c8>
 800b204:	6922      	ldr	r2, [r4, #16]
 800b206:	455a      	cmp	r2, fp
 800b208:	dd0b      	ble.n	800b222 <__gethex+0x46e>
 800b20a:	2101      	movs	r1, #1
 800b20c:	4620      	mov	r0, r4
 800b20e:	f7ff fd69 	bl	800ace4 <rshift>
 800b212:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b216:	3501      	adds	r5, #1
 800b218:	42ab      	cmp	r3, r5
 800b21a:	f6ff aed0 	blt.w	800afbe <__gethex+0x20a>
 800b21e:	2701      	movs	r7, #1
 800b220:	e7c0      	b.n	800b1a4 <__gethex+0x3f0>
 800b222:	f016 061f 	ands.w	r6, r6, #31
 800b226:	d0fa      	beq.n	800b21e <__gethex+0x46a>
 800b228:	4453      	add	r3, sl
 800b22a:	f1c6 0620 	rsb	r6, r6, #32
 800b22e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b232:	f000 f9f7 	bl	800b624 <__hi0bits>
 800b236:	42b0      	cmp	r0, r6
 800b238:	dbe7      	blt.n	800b20a <__gethex+0x456>
 800b23a:	e7f0      	b.n	800b21e <__gethex+0x46a>
 800b23c:	0800d948 	.word	0x0800d948

0800b240 <L_shift>:
 800b240:	f1c2 0208 	rsb	r2, r2, #8
 800b244:	0092      	lsls	r2, r2, #2
 800b246:	b570      	push	{r4, r5, r6, lr}
 800b248:	f1c2 0620 	rsb	r6, r2, #32
 800b24c:	6843      	ldr	r3, [r0, #4]
 800b24e:	6804      	ldr	r4, [r0, #0]
 800b250:	fa03 f506 	lsl.w	r5, r3, r6
 800b254:	432c      	orrs	r4, r5
 800b256:	40d3      	lsrs	r3, r2
 800b258:	6004      	str	r4, [r0, #0]
 800b25a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b25e:	4288      	cmp	r0, r1
 800b260:	d3f4      	bcc.n	800b24c <L_shift+0xc>
 800b262:	bd70      	pop	{r4, r5, r6, pc}

0800b264 <__match>:
 800b264:	b530      	push	{r4, r5, lr}
 800b266:	6803      	ldr	r3, [r0, #0]
 800b268:	3301      	adds	r3, #1
 800b26a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b26e:	b914      	cbnz	r4, 800b276 <__match+0x12>
 800b270:	6003      	str	r3, [r0, #0]
 800b272:	2001      	movs	r0, #1
 800b274:	bd30      	pop	{r4, r5, pc}
 800b276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b27a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b27e:	2d19      	cmp	r5, #25
 800b280:	bf98      	it	ls
 800b282:	3220      	addls	r2, #32
 800b284:	42a2      	cmp	r2, r4
 800b286:	d0f0      	beq.n	800b26a <__match+0x6>
 800b288:	2000      	movs	r0, #0
 800b28a:	e7f3      	b.n	800b274 <__match+0x10>

0800b28c <__hexnan>:
 800b28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b290:	680b      	ldr	r3, [r1, #0]
 800b292:	115e      	asrs	r6, r3, #5
 800b294:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b298:	f013 031f 	ands.w	r3, r3, #31
 800b29c:	b087      	sub	sp, #28
 800b29e:	bf18      	it	ne
 800b2a0:	3604      	addne	r6, #4
 800b2a2:	2500      	movs	r5, #0
 800b2a4:	1f37      	subs	r7, r6, #4
 800b2a6:	4690      	mov	r8, r2
 800b2a8:	6802      	ldr	r2, [r0, #0]
 800b2aa:	9301      	str	r3, [sp, #4]
 800b2ac:	4682      	mov	sl, r0
 800b2ae:	f846 5c04 	str.w	r5, [r6, #-4]
 800b2b2:	46b9      	mov	r9, r7
 800b2b4:	463c      	mov	r4, r7
 800b2b6:	9502      	str	r5, [sp, #8]
 800b2b8:	46ab      	mov	fp, r5
 800b2ba:	7851      	ldrb	r1, [r2, #1]
 800b2bc:	1c53      	adds	r3, r2, #1
 800b2be:	9303      	str	r3, [sp, #12]
 800b2c0:	b341      	cbz	r1, 800b314 <__hexnan+0x88>
 800b2c2:	4608      	mov	r0, r1
 800b2c4:	9205      	str	r2, [sp, #20]
 800b2c6:	9104      	str	r1, [sp, #16]
 800b2c8:	f7ff fd5e 	bl	800ad88 <__hexdig_fun>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d14f      	bne.n	800b370 <__hexnan+0xe4>
 800b2d0:	9904      	ldr	r1, [sp, #16]
 800b2d2:	9a05      	ldr	r2, [sp, #20]
 800b2d4:	2920      	cmp	r1, #32
 800b2d6:	d818      	bhi.n	800b30a <__hexnan+0x7e>
 800b2d8:	9b02      	ldr	r3, [sp, #8]
 800b2da:	459b      	cmp	fp, r3
 800b2dc:	dd13      	ble.n	800b306 <__hexnan+0x7a>
 800b2de:	454c      	cmp	r4, r9
 800b2e0:	d206      	bcs.n	800b2f0 <__hexnan+0x64>
 800b2e2:	2d07      	cmp	r5, #7
 800b2e4:	dc04      	bgt.n	800b2f0 <__hexnan+0x64>
 800b2e6:	462a      	mov	r2, r5
 800b2e8:	4649      	mov	r1, r9
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f7ff ffa8 	bl	800b240 <L_shift>
 800b2f0:	4544      	cmp	r4, r8
 800b2f2:	d950      	bls.n	800b396 <__hexnan+0x10a>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	f1a4 0904 	sub.w	r9, r4, #4
 800b2fa:	f844 3c04 	str.w	r3, [r4, #-4]
 800b2fe:	f8cd b008 	str.w	fp, [sp, #8]
 800b302:	464c      	mov	r4, r9
 800b304:	461d      	mov	r5, r3
 800b306:	9a03      	ldr	r2, [sp, #12]
 800b308:	e7d7      	b.n	800b2ba <__hexnan+0x2e>
 800b30a:	2929      	cmp	r1, #41	; 0x29
 800b30c:	d156      	bne.n	800b3bc <__hexnan+0x130>
 800b30e:	3202      	adds	r2, #2
 800b310:	f8ca 2000 	str.w	r2, [sl]
 800b314:	f1bb 0f00 	cmp.w	fp, #0
 800b318:	d050      	beq.n	800b3bc <__hexnan+0x130>
 800b31a:	454c      	cmp	r4, r9
 800b31c:	d206      	bcs.n	800b32c <__hexnan+0xa0>
 800b31e:	2d07      	cmp	r5, #7
 800b320:	dc04      	bgt.n	800b32c <__hexnan+0xa0>
 800b322:	462a      	mov	r2, r5
 800b324:	4649      	mov	r1, r9
 800b326:	4620      	mov	r0, r4
 800b328:	f7ff ff8a 	bl	800b240 <L_shift>
 800b32c:	4544      	cmp	r4, r8
 800b32e:	d934      	bls.n	800b39a <__hexnan+0x10e>
 800b330:	f1a8 0204 	sub.w	r2, r8, #4
 800b334:	4623      	mov	r3, r4
 800b336:	f853 1b04 	ldr.w	r1, [r3], #4
 800b33a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b33e:	429f      	cmp	r7, r3
 800b340:	d2f9      	bcs.n	800b336 <__hexnan+0xaa>
 800b342:	1b3b      	subs	r3, r7, r4
 800b344:	f023 0303 	bic.w	r3, r3, #3
 800b348:	3304      	adds	r3, #4
 800b34a:	3401      	adds	r4, #1
 800b34c:	3e03      	subs	r6, #3
 800b34e:	42b4      	cmp	r4, r6
 800b350:	bf88      	it	hi
 800b352:	2304      	movhi	r3, #4
 800b354:	4443      	add	r3, r8
 800b356:	2200      	movs	r2, #0
 800b358:	f843 2b04 	str.w	r2, [r3], #4
 800b35c:	429f      	cmp	r7, r3
 800b35e:	d2fb      	bcs.n	800b358 <__hexnan+0xcc>
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	b91b      	cbnz	r3, 800b36c <__hexnan+0xe0>
 800b364:	4547      	cmp	r7, r8
 800b366:	d127      	bne.n	800b3b8 <__hexnan+0x12c>
 800b368:	2301      	movs	r3, #1
 800b36a:	603b      	str	r3, [r7, #0]
 800b36c:	2005      	movs	r0, #5
 800b36e:	e026      	b.n	800b3be <__hexnan+0x132>
 800b370:	3501      	adds	r5, #1
 800b372:	2d08      	cmp	r5, #8
 800b374:	f10b 0b01 	add.w	fp, fp, #1
 800b378:	dd06      	ble.n	800b388 <__hexnan+0xfc>
 800b37a:	4544      	cmp	r4, r8
 800b37c:	d9c3      	bls.n	800b306 <__hexnan+0x7a>
 800b37e:	2300      	movs	r3, #0
 800b380:	f844 3c04 	str.w	r3, [r4, #-4]
 800b384:	2501      	movs	r5, #1
 800b386:	3c04      	subs	r4, #4
 800b388:	6822      	ldr	r2, [r4, #0]
 800b38a:	f000 000f 	and.w	r0, r0, #15
 800b38e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b392:	6022      	str	r2, [r4, #0]
 800b394:	e7b7      	b.n	800b306 <__hexnan+0x7a>
 800b396:	2508      	movs	r5, #8
 800b398:	e7b5      	b.n	800b306 <__hexnan+0x7a>
 800b39a:	9b01      	ldr	r3, [sp, #4]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d0df      	beq.n	800b360 <__hexnan+0xd4>
 800b3a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a4:	f1c3 0320 	rsb	r3, r3, #32
 800b3a8:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b3b0:	401a      	ands	r2, r3
 800b3b2:	f846 2c04 	str.w	r2, [r6, #-4]
 800b3b6:	e7d3      	b.n	800b360 <__hexnan+0xd4>
 800b3b8:	3f04      	subs	r7, #4
 800b3ba:	e7d1      	b.n	800b360 <__hexnan+0xd4>
 800b3bc:	2004      	movs	r0, #4
 800b3be:	b007      	add	sp, #28
 800b3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b3c4 <_localeconv_r>:
 800b3c4:	4800      	ldr	r0, [pc, #0]	; (800b3c8 <_localeconv_r+0x4>)
 800b3c6:	4770      	bx	lr
 800b3c8:	200001a4 	.word	0x200001a4

0800b3cc <_lseek_r>:
 800b3cc:	b538      	push	{r3, r4, r5, lr}
 800b3ce:	4d07      	ldr	r5, [pc, #28]	; (800b3ec <_lseek_r+0x20>)
 800b3d0:	4604      	mov	r4, r0
 800b3d2:	4608      	mov	r0, r1
 800b3d4:	4611      	mov	r1, r2
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	602a      	str	r2, [r5, #0]
 800b3da:	461a      	mov	r2, r3
 800b3dc:	f7f6 fe38 	bl	8002050 <_lseek>
 800b3e0:	1c43      	adds	r3, r0, #1
 800b3e2:	d102      	bne.n	800b3ea <_lseek_r+0x1e>
 800b3e4:	682b      	ldr	r3, [r5, #0]
 800b3e6:	b103      	cbz	r3, 800b3ea <_lseek_r+0x1e>
 800b3e8:	6023      	str	r3, [r4, #0]
 800b3ea:	bd38      	pop	{r3, r4, r5, pc}
 800b3ec:	200008c0 	.word	0x200008c0

0800b3f0 <malloc>:
 800b3f0:	4b02      	ldr	r3, [pc, #8]	; (800b3fc <malloc+0xc>)
 800b3f2:	4601      	mov	r1, r0
 800b3f4:	6818      	ldr	r0, [r3, #0]
 800b3f6:	f000 bd63 	b.w	800bec0 <_malloc_r>
 800b3fa:	bf00      	nop
 800b3fc:	2000004c 	.word	0x2000004c

0800b400 <__ascii_mbtowc>:
 800b400:	b082      	sub	sp, #8
 800b402:	b901      	cbnz	r1, 800b406 <__ascii_mbtowc+0x6>
 800b404:	a901      	add	r1, sp, #4
 800b406:	b142      	cbz	r2, 800b41a <__ascii_mbtowc+0x1a>
 800b408:	b14b      	cbz	r3, 800b41e <__ascii_mbtowc+0x1e>
 800b40a:	7813      	ldrb	r3, [r2, #0]
 800b40c:	600b      	str	r3, [r1, #0]
 800b40e:	7812      	ldrb	r2, [r2, #0]
 800b410:	1e10      	subs	r0, r2, #0
 800b412:	bf18      	it	ne
 800b414:	2001      	movne	r0, #1
 800b416:	b002      	add	sp, #8
 800b418:	4770      	bx	lr
 800b41a:	4610      	mov	r0, r2
 800b41c:	e7fb      	b.n	800b416 <__ascii_mbtowc+0x16>
 800b41e:	f06f 0001 	mvn.w	r0, #1
 800b422:	e7f8      	b.n	800b416 <__ascii_mbtowc+0x16>

0800b424 <memcpy>:
 800b424:	440a      	add	r2, r1
 800b426:	4291      	cmp	r1, r2
 800b428:	f100 33ff 	add.w	r3, r0, #4294967295
 800b42c:	d100      	bne.n	800b430 <memcpy+0xc>
 800b42e:	4770      	bx	lr
 800b430:	b510      	push	{r4, lr}
 800b432:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b436:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b43a:	4291      	cmp	r1, r2
 800b43c:	d1f9      	bne.n	800b432 <memcpy+0xe>
 800b43e:	bd10      	pop	{r4, pc}

0800b440 <_Balloc>:
 800b440:	b570      	push	{r4, r5, r6, lr}
 800b442:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b444:	4604      	mov	r4, r0
 800b446:	460d      	mov	r5, r1
 800b448:	b976      	cbnz	r6, 800b468 <_Balloc+0x28>
 800b44a:	2010      	movs	r0, #16
 800b44c:	f7ff ffd0 	bl	800b3f0 <malloc>
 800b450:	4602      	mov	r2, r0
 800b452:	6260      	str	r0, [r4, #36]	; 0x24
 800b454:	b920      	cbnz	r0, 800b460 <_Balloc+0x20>
 800b456:	4b18      	ldr	r3, [pc, #96]	; (800b4b8 <_Balloc+0x78>)
 800b458:	4818      	ldr	r0, [pc, #96]	; (800b4bc <_Balloc+0x7c>)
 800b45a:	2166      	movs	r1, #102	; 0x66
 800b45c:	f001 fb44 	bl	800cae8 <__assert_func>
 800b460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b464:	6006      	str	r6, [r0, #0]
 800b466:	60c6      	str	r6, [r0, #12]
 800b468:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b46a:	68f3      	ldr	r3, [r6, #12]
 800b46c:	b183      	cbz	r3, 800b490 <_Balloc+0x50>
 800b46e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b470:	68db      	ldr	r3, [r3, #12]
 800b472:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b476:	b9b8      	cbnz	r0, 800b4a8 <_Balloc+0x68>
 800b478:	2101      	movs	r1, #1
 800b47a:	fa01 f605 	lsl.w	r6, r1, r5
 800b47e:	1d72      	adds	r2, r6, #5
 800b480:	0092      	lsls	r2, r2, #2
 800b482:	4620      	mov	r0, r4
 800b484:	f000 fc9a 	bl	800bdbc <_calloc_r>
 800b488:	b160      	cbz	r0, 800b4a4 <_Balloc+0x64>
 800b48a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b48e:	e00e      	b.n	800b4ae <_Balloc+0x6e>
 800b490:	2221      	movs	r2, #33	; 0x21
 800b492:	2104      	movs	r1, #4
 800b494:	4620      	mov	r0, r4
 800b496:	f000 fc91 	bl	800bdbc <_calloc_r>
 800b49a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b49c:	60f0      	str	r0, [r6, #12]
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d1e4      	bne.n	800b46e <_Balloc+0x2e>
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	bd70      	pop	{r4, r5, r6, pc}
 800b4a8:	6802      	ldr	r2, [r0, #0]
 800b4aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4b4:	e7f7      	b.n	800b4a6 <_Balloc+0x66>
 800b4b6:	bf00      	nop
 800b4b8:	0800d8d6 	.word	0x0800d8d6
 800b4bc:	0800d9d4 	.word	0x0800d9d4

0800b4c0 <_Bfree>:
 800b4c0:	b570      	push	{r4, r5, r6, lr}
 800b4c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b4c4:	4605      	mov	r5, r0
 800b4c6:	460c      	mov	r4, r1
 800b4c8:	b976      	cbnz	r6, 800b4e8 <_Bfree+0x28>
 800b4ca:	2010      	movs	r0, #16
 800b4cc:	f7ff ff90 	bl	800b3f0 <malloc>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	6268      	str	r0, [r5, #36]	; 0x24
 800b4d4:	b920      	cbnz	r0, 800b4e0 <_Bfree+0x20>
 800b4d6:	4b09      	ldr	r3, [pc, #36]	; (800b4fc <_Bfree+0x3c>)
 800b4d8:	4809      	ldr	r0, [pc, #36]	; (800b500 <_Bfree+0x40>)
 800b4da:	218a      	movs	r1, #138	; 0x8a
 800b4dc:	f001 fb04 	bl	800cae8 <__assert_func>
 800b4e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4e4:	6006      	str	r6, [r0, #0]
 800b4e6:	60c6      	str	r6, [r0, #12]
 800b4e8:	b13c      	cbz	r4, 800b4fa <_Bfree+0x3a>
 800b4ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b4ec:	6862      	ldr	r2, [r4, #4]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4f4:	6021      	str	r1, [r4, #0]
 800b4f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b4fa:	bd70      	pop	{r4, r5, r6, pc}
 800b4fc:	0800d8d6 	.word	0x0800d8d6
 800b500:	0800d9d4 	.word	0x0800d9d4

0800b504 <__multadd>:
 800b504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b508:	690d      	ldr	r5, [r1, #16]
 800b50a:	4607      	mov	r7, r0
 800b50c:	460c      	mov	r4, r1
 800b50e:	461e      	mov	r6, r3
 800b510:	f101 0c14 	add.w	ip, r1, #20
 800b514:	2000      	movs	r0, #0
 800b516:	f8dc 3000 	ldr.w	r3, [ip]
 800b51a:	b299      	uxth	r1, r3
 800b51c:	fb02 6101 	mla	r1, r2, r1, r6
 800b520:	0c1e      	lsrs	r6, r3, #16
 800b522:	0c0b      	lsrs	r3, r1, #16
 800b524:	fb02 3306 	mla	r3, r2, r6, r3
 800b528:	b289      	uxth	r1, r1
 800b52a:	3001      	adds	r0, #1
 800b52c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b530:	4285      	cmp	r5, r0
 800b532:	f84c 1b04 	str.w	r1, [ip], #4
 800b536:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b53a:	dcec      	bgt.n	800b516 <__multadd+0x12>
 800b53c:	b30e      	cbz	r6, 800b582 <__multadd+0x7e>
 800b53e:	68a3      	ldr	r3, [r4, #8]
 800b540:	42ab      	cmp	r3, r5
 800b542:	dc19      	bgt.n	800b578 <__multadd+0x74>
 800b544:	6861      	ldr	r1, [r4, #4]
 800b546:	4638      	mov	r0, r7
 800b548:	3101      	adds	r1, #1
 800b54a:	f7ff ff79 	bl	800b440 <_Balloc>
 800b54e:	4680      	mov	r8, r0
 800b550:	b928      	cbnz	r0, 800b55e <__multadd+0x5a>
 800b552:	4602      	mov	r2, r0
 800b554:	4b0c      	ldr	r3, [pc, #48]	; (800b588 <__multadd+0x84>)
 800b556:	480d      	ldr	r0, [pc, #52]	; (800b58c <__multadd+0x88>)
 800b558:	21b5      	movs	r1, #181	; 0xb5
 800b55a:	f001 fac5 	bl	800cae8 <__assert_func>
 800b55e:	6922      	ldr	r2, [r4, #16]
 800b560:	3202      	adds	r2, #2
 800b562:	f104 010c 	add.w	r1, r4, #12
 800b566:	0092      	lsls	r2, r2, #2
 800b568:	300c      	adds	r0, #12
 800b56a:	f7ff ff5b 	bl	800b424 <memcpy>
 800b56e:	4621      	mov	r1, r4
 800b570:	4638      	mov	r0, r7
 800b572:	f7ff ffa5 	bl	800b4c0 <_Bfree>
 800b576:	4644      	mov	r4, r8
 800b578:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b57c:	3501      	adds	r5, #1
 800b57e:	615e      	str	r6, [r3, #20]
 800b580:	6125      	str	r5, [r4, #16]
 800b582:	4620      	mov	r0, r4
 800b584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b588:	0800d948 	.word	0x0800d948
 800b58c:	0800d9d4 	.word	0x0800d9d4

0800b590 <__s2b>:
 800b590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b594:	460c      	mov	r4, r1
 800b596:	4615      	mov	r5, r2
 800b598:	461f      	mov	r7, r3
 800b59a:	2209      	movs	r2, #9
 800b59c:	3308      	adds	r3, #8
 800b59e:	4606      	mov	r6, r0
 800b5a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5a4:	2100      	movs	r1, #0
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	db09      	blt.n	800b5c0 <__s2b+0x30>
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	f7ff ff47 	bl	800b440 <_Balloc>
 800b5b2:	b940      	cbnz	r0, 800b5c6 <__s2b+0x36>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	4b19      	ldr	r3, [pc, #100]	; (800b61c <__s2b+0x8c>)
 800b5b8:	4819      	ldr	r0, [pc, #100]	; (800b620 <__s2b+0x90>)
 800b5ba:	21ce      	movs	r1, #206	; 0xce
 800b5bc:	f001 fa94 	bl	800cae8 <__assert_func>
 800b5c0:	0052      	lsls	r2, r2, #1
 800b5c2:	3101      	adds	r1, #1
 800b5c4:	e7f0      	b.n	800b5a8 <__s2b+0x18>
 800b5c6:	9b08      	ldr	r3, [sp, #32]
 800b5c8:	6143      	str	r3, [r0, #20]
 800b5ca:	2d09      	cmp	r5, #9
 800b5cc:	f04f 0301 	mov.w	r3, #1
 800b5d0:	6103      	str	r3, [r0, #16]
 800b5d2:	dd16      	ble.n	800b602 <__s2b+0x72>
 800b5d4:	f104 0909 	add.w	r9, r4, #9
 800b5d8:	46c8      	mov	r8, r9
 800b5da:	442c      	add	r4, r5
 800b5dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b5e0:	4601      	mov	r1, r0
 800b5e2:	3b30      	subs	r3, #48	; 0x30
 800b5e4:	220a      	movs	r2, #10
 800b5e6:	4630      	mov	r0, r6
 800b5e8:	f7ff ff8c 	bl	800b504 <__multadd>
 800b5ec:	45a0      	cmp	r8, r4
 800b5ee:	d1f5      	bne.n	800b5dc <__s2b+0x4c>
 800b5f0:	f1a5 0408 	sub.w	r4, r5, #8
 800b5f4:	444c      	add	r4, r9
 800b5f6:	1b2d      	subs	r5, r5, r4
 800b5f8:	1963      	adds	r3, r4, r5
 800b5fa:	42bb      	cmp	r3, r7
 800b5fc:	db04      	blt.n	800b608 <__s2b+0x78>
 800b5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b602:	340a      	adds	r4, #10
 800b604:	2509      	movs	r5, #9
 800b606:	e7f6      	b.n	800b5f6 <__s2b+0x66>
 800b608:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b60c:	4601      	mov	r1, r0
 800b60e:	3b30      	subs	r3, #48	; 0x30
 800b610:	220a      	movs	r2, #10
 800b612:	4630      	mov	r0, r6
 800b614:	f7ff ff76 	bl	800b504 <__multadd>
 800b618:	e7ee      	b.n	800b5f8 <__s2b+0x68>
 800b61a:	bf00      	nop
 800b61c:	0800d948 	.word	0x0800d948
 800b620:	0800d9d4 	.word	0x0800d9d4

0800b624 <__hi0bits>:
 800b624:	0c03      	lsrs	r3, r0, #16
 800b626:	041b      	lsls	r3, r3, #16
 800b628:	b9d3      	cbnz	r3, 800b660 <__hi0bits+0x3c>
 800b62a:	0400      	lsls	r0, r0, #16
 800b62c:	2310      	movs	r3, #16
 800b62e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b632:	bf04      	itt	eq
 800b634:	0200      	lsleq	r0, r0, #8
 800b636:	3308      	addeq	r3, #8
 800b638:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b63c:	bf04      	itt	eq
 800b63e:	0100      	lsleq	r0, r0, #4
 800b640:	3304      	addeq	r3, #4
 800b642:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b646:	bf04      	itt	eq
 800b648:	0080      	lsleq	r0, r0, #2
 800b64a:	3302      	addeq	r3, #2
 800b64c:	2800      	cmp	r0, #0
 800b64e:	db05      	blt.n	800b65c <__hi0bits+0x38>
 800b650:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b654:	f103 0301 	add.w	r3, r3, #1
 800b658:	bf08      	it	eq
 800b65a:	2320      	moveq	r3, #32
 800b65c:	4618      	mov	r0, r3
 800b65e:	4770      	bx	lr
 800b660:	2300      	movs	r3, #0
 800b662:	e7e4      	b.n	800b62e <__hi0bits+0xa>

0800b664 <__lo0bits>:
 800b664:	6803      	ldr	r3, [r0, #0]
 800b666:	f013 0207 	ands.w	r2, r3, #7
 800b66a:	4601      	mov	r1, r0
 800b66c:	d00b      	beq.n	800b686 <__lo0bits+0x22>
 800b66e:	07da      	lsls	r2, r3, #31
 800b670:	d423      	bmi.n	800b6ba <__lo0bits+0x56>
 800b672:	0798      	lsls	r0, r3, #30
 800b674:	bf49      	itett	mi
 800b676:	085b      	lsrmi	r3, r3, #1
 800b678:	089b      	lsrpl	r3, r3, #2
 800b67a:	2001      	movmi	r0, #1
 800b67c:	600b      	strmi	r3, [r1, #0]
 800b67e:	bf5c      	itt	pl
 800b680:	600b      	strpl	r3, [r1, #0]
 800b682:	2002      	movpl	r0, #2
 800b684:	4770      	bx	lr
 800b686:	b298      	uxth	r0, r3
 800b688:	b9a8      	cbnz	r0, 800b6b6 <__lo0bits+0x52>
 800b68a:	0c1b      	lsrs	r3, r3, #16
 800b68c:	2010      	movs	r0, #16
 800b68e:	b2da      	uxtb	r2, r3
 800b690:	b90a      	cbnz	r2, 800b696 <__lo0bits+0x32>
 800b692:	3008      	adds	r0, #8
 800b694:	0a1b      	lsrs	r3, r3, #8
 800b696:	071a      	lsls	r2, r3, #28
 800b698:	bf04      	itt	eq
 800b69a:	091b      	lsreq	r3, r3, #4
 800b69c:	3004      	addeq	r0, #4
 800b69e:	079a      	lsls	r2, r3, #30
 800b6a0:	bf04      	itt	eq
 800b6a2:	089b      	lsreq	r3, r3, #2
 800b6a4:	3002      	addeq	r0, #2
 800b6a6:	07da      	lsls	r2, r3, #31
 800b6a8:	d403      	bmi.n	800b6b2 <__lo0bits+0x4e>
 800b6aa:	085b      	lsrs	r3, r3, #1
 800b6ac:	f100 0001 	add.w	r0, r0, #1
 800b6b0:	d005      	beq.n	800b6be <__lo0bits+0x5a>
 800b6b2:	600b      	str	r3, [r1, #0]
 800b6b4:	4770      	bx	lr
 800b6b6:	4610      	mov	r0, r2
 800b6b8:	e7e9      	b.n	800b68e <__lo0bits+0x2a>
 800b6ba:	2000      	movs	r0, #0
 800b6bc:	4770      	bx	lr
 800b6be:	2020      	movs	r0, #32
 800b6c0:	4770      	bx	lr
	...

0800b6c4 <__i2b>:
 800b6c4:	b510      	push	{r4, lr}
 800b6c6:	460c      	mov	r4, r1
 800b6c8:	2101      	movs	r1, #1
 800b6ca:	f7ff feb9 	bl	800b440 <_Balloc>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	b928      	cbnz	r0, 800b6de <__i2b+0x1a>
 800b6d2:	4b05      	ldr	r3, [pc, #20]	; (800b6e8 <__i2b+0x24>)
 800b6d4:	4805      	ldr	r0, [pc, #20]	; (800b6ec <__i2b+0x28>)
 800b6d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b6da:	f001 fa05 	bl	800cae8 <__assert_func>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	6144      	str	r4, [r0, #20]
 800b6e2:	6103      	str	r3, [r0, #16]
 800b6e4:	bd10      	pop	{r4, pc}
 800b6e6:	bf00      	nop
 800b6e8:	0800d948 	.word	0x0800d948
 800b6ec:	0800d9d4 	.word	0x0800d9d4

0800b6f0 <__multiply>:
 800b6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f4:	4691      	mov	r9, r2
 800b6f6:	690a      	ldr	r2, [r1, #16]
 800b6f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	bfb8      	it	lt
 800b700:	460b      	movlt	r3, r1
 800b702:	460c      	mov	r4, r1
 800b704:	bfbc      	itt	lt
 800b706:	464c      	movlt	r4, r9
 800b708:	4699      	movlt	r9, r3
 800b70a:	6927      	ldr	r7, [r4, #16]
 800b70c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b710:	68a3      	ldr	r3, [r4, #8]
 800b712:	6861      	ldr	r1, [r4, #4]
 800b714:	eb07 060a 	add.w	r6, r7, sl
 800b718:	42b3      	cmp	r3, r6
 800b71a:	b085      	sub	sp, #20
 800b71c:	bfb8      	it	lt
 800b71e:	3101      	addlt	r1, #1
 800b720:	f7ff fe8e 	bl	800b440 <_Balloc>
 800b724:	b930      	cbnz	r0, 800b734 <__multiply+0x44>
 800b726:	4602      	mov	r2, r0
 800b728:	4b44      	ldr	r3, [pc, #272]	; (800b83c <__multiply+0x14c>)
 800b72a:	4845      	ldr	r0, [pc, #276]	; (800b840 <__multiply+0x150>)
 800b72c:	f240 115d 	movw	r1, #349	; 0x15d
 800b730:	f001 f9da 	bl	800cae8 <__assert_func>
 800b734:	f100 0514 	add.w	r5, r0, #20
 800b738:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b73c:	462b      	mov	r3, r5
 800b73e:	2200      	movs	r2, #0
 800b740:	4543      	cmp	r3, r8
 800b742:	d321      	bcc.n	800b788 <__multiply+0x98>
 800b744:	f104 0314 	add.w	r3, r4, #20
 800b748:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b74c:	f109 0314 	add.w	r3, r9, #20
 800b750:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b754:	9202      	str	r2, [sp, #8]
 800b756:	1b3a      	subs	r2, r7, r4
 800b758:	3a15      	subs	r2, #21
 800b75a:	f022 0203 	bic.w	r2, r2, #3
 800b75e:	3204      	adds	r2, #4
 800b760:	f104 0115 	add.w	r1, r4, #21
 800b764:	428f      	cmp	r7, r1
 800b766:	bf38      	it	cc
 800b768:	2204      	movcc	r2, #4
 800b76a:	9201      	str	r2, [sp, #4]
 800b76c:	9a02      	ldr	r2, [sp, #8]
 800b76e:	9303      	str	r3, [sp, #12]
 800b770:	429a      	cmp	r2, r3
 800b772:	d80c      	bhi.n	800b78e <__multiply+0x9e>
 800b774:	2e00      	cmp	r6, #0
 800b776:	dd03      	ble.n	800b780 <__multiply+0x90>
 800b778:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d05a      	beq.n	800b836 <__multiply+0x146>
 800b780:	6106      	str	r6, [r0, #16]
 800b782:	b005      	add	sp, #20
 800b784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b788:	f843 2b04 	str.w	r2, [r3], #4
 800b78c:	e7d8      	b.n	800b740 <__multiply+0x50>
 800b78e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b792:	f1ba 0f00 	cmp.w	sl, #0
 800b796:	d024      	beq.n	800b7e2 <__multiply+0xf2>
 800b798:	f104 0e14 	add.w	lr, r4, #20
 800b79c:	46a9      	mov	r9, r5
 800b79e:	f04f 0c00 	mov.w	ip, #0
 800b7a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b7a6:	f8d9 1000 	ldr.w	r1, [r9]
 800b7aa:	fa1f fb82 	uxth.w	fp, r2
 800b7ae:	b289      	uxth	r1, r1
 800b7b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800b7b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b7b8:	f8d9 2000 	ldr.w	r2, [r9]
 800b7bc:	4461      	add	r1, ip
 800b7be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b7c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800b7c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b7ca:	b289      	uxth	r1, r1
 800b7cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b7d0:	4577      	cmp	r7, lr
 800b7d2:	f849 1b04 	str.w	r1, [r9], #4
 800b7d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b7da:	d8e2      	bhi.n	800b7a2 <__multiply+0xb2>
 800b7dc:	9a01      	ldr	r2, [sp, #4]
 800b7de:	f845 c002 	str.w	ip, [r5, r2]
 800b7e2:	9a03      	ldr	r2, [sp, #12]
 800b7e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b7e8:	3304      	adds	r3, #4
 800b7ea:	f1b9 0f00 	cmp.w	r9, #0
 800b7ee:	d020      	beq.n	800b832 <__multiply+0x142>
 800b7f0:	6829      	ldr	r1, [r5, #0]
 800b7f2:	f104 0c14 	add.w	ip, r4, #20
 800b7f6:	46ae      	mov	lr, r5
 800b7f8:	f04f 0a00 	mov.w	sl, #0
 800b7fc:	f8bc b000 	ldrh.w	fp, [ip]
 800b800:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b804:	fb09 220b 	mla	r2, r9, fp, r2
 800b808:	4492      	add	sl, r2
 800b80a:	b289      	uxth	r1, r1
 800b80c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b810:	f84e 1b04 	str.w	r1, [lr], #4
 800b814:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b818:	f8be 1000 	ldrh.w	r1, [lr]
 800b81c:	0c12      	lsrs	r2, r2, #16
 800b81e:	fb09 1102 	mla	r1, r9, r2, r1
 800b822:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b826:	4567      	cmp	r7, ip
 800b828:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b82c:	d8e6      	bhi.n	800b7fc <__multiply+0x10c>
 800b82e:	9a01      	ldr	r2, [sp, #4]
 800b830:	50a9      	str	r1, [r5, r2]
 800b832:	3504      	adds	r5, #4
 800b834:	e79a      	b.n	800b76c <__multiply+0x7c>
 800b836:	3e01      	subs	r6, #1
 800b838:	e79c      	b.n	800b774 <__multiply+0x84>
 800b83a:	bf00      	nop
 800b83c:	0800d948 	.word	0x0800d948
 800b840:	0800d9d4 	.word	0x0800d9d4

0800b844 <__pow5mult>:
 800b844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b848:	4615      	mov	r5, r2
 800b84a:	f012 0203 	ands.w	r2, r2, #3
 800b84e:	4606      	mov	r6, r0
 800b850:	460f      	mov	r7, r1
 800b852:	d007      	beq.n	800b864 <__pow5mult+0x20>
 800b854:	4c25      	ldr	r4, [pc, #148]	; (800b8ec <__pow5mult+0xa8>)
 800b856:	3a01      	subs	r2, #1
 800b858:	2300      	movs	r3, #0
 800b85a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b85e:	f7ff fe51 	bl	800b504 <__multadd>
 800b862:	4607      	mov	r7, r0
 800b864:	10ad      	asrs	r5, r5, #2
 800b866:	d03d      	beq.n	800b8e4 <__pow5mult+0xa0>
 800b868:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b86a:	b97c      	cbnz	r4, 800b88c <__pow5mult+0x48>
 800b86c:	2010      	movs	r0, #16
 800b86e:	f7ff fdbf 	bl	800b3f0 <malloc>
 800b872:	4602      	mov	r2, r0
 800b874:	6270      	str	r0, [r6, #36]	; 0x24
 800b876:	b928      	cbnz	r0, 800b884 <__pow5mult+0x40>
 800b878:	4b1d      	ldr	r3, [pc, #116]	; (800b8f0 <__pow5mult+0xac>)
 800b87a:	481e      	ldr	r0, [pc, #120]	; (800b8f4 <__pow5mult+0xb0>)
 800b87c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b880:	f001 f932 	bl	800cae8 <__assert_func>
 800b884:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b888:	6004      	str	r4, [r0, #0]
 800b88a:	60c4      	str	r4, [r0, #12]
 800b88c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b890:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b894:	b94c      	cbnz	r4, 800b8aa <__pow5mult+0x66>
 800b896:	f240 2171 	movw	r1, #625	; 0x271
 800b89a:	4630      	mov	r0, r6
 800b89c:	f7ff ff12 	bl	800b6c4 <__i2b>
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	6003      	str	r3, [r0, #0]
 800b8aa:	f04f 0900 	mov.w	r9, #0
 800b8ae:	07eb      	lsls	r3, r5, #31
 800b8b0:	d50a      	bpl.n	800b8c8 <__pow5mult+0x84>
 800b8b2:	4639      	mov	r1, r7
 800b8b4:	4622      	mov	r2, r4
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	f7ff ff1a 	bl	800b6f0 <__multiply>
 800b8bc:	4639      	mov	r1, r7
 800b8be:	4680      	mov	r8, r0
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	f7ff fdfd 	bl	800b4c0 <_Bfree>
 800b8c6:	4647      	mov	r7, r8
 800b8c8:	106d      	asrs	r5, r5, #1
 800b8ca:	d00b      	beq.n	800b8e4 <__pow5mult+0xa0>
 800b8cc:	6820      	ldr	r0, [r4, #0]
 800b8ce:	b938      	cbnz	r0, 800b8e0 <__pow5mult+0x9c>
 800b8d0:	4622      	mov	r2, r4
 800b8d2:	4621      	mov	r1, r4
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	f7ff ff0b 	bl	800b6f0 <__multiply>
 800b8da:	6020      	str	r0, [r4, #0]
 800b8dc:	f8c0 9000 	str.w	r9, [r0]
 800b8e0:	4604      	mov	r4, r0
 800b8e2:	e7e4      	b.n	800b8ae <__pow5mult+0x6a>
 800b8e4:	4638      	mov	r0, r7
 800b8e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ea:	bf00      	nop
 800b8ec:	0800db20 	.word	0x0800db20
 800b8f0:	0800d8d6 	.word	0x0800d8d6
 800b8f4:	0800d9d4 	.word	0x0800d9d4

0800b8f8 <__lshift>:
 800b8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8fc:	460c      	mov	r4, r1
 800b8fe:	6849      	ldr	r1, [r1, #4]
 800b900:	6923      	ldr	r3, [r4, #16]
 800b902:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b906:	68a3      	ldr	r3, [r4, #8]
 800b908:	4607      	mov	r7, r0
 800b90a:	4691      	mov	r9, r2
 800b90c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b910:	f108 0601 	add.w	r6, r8, #1
 800b914:	42b3      	cmp	r3, r6
 800b916:	db0b      	blt.n	800b930 <__lshift+0x38>
 800b918:	4638      	mov	r0, r7
 800b91a:	f7ff fd91 	bl	800b440 <_Balloc>
 800b91e:	4605      	mov	r5, r0
 800b920:	b948      	cbnz	r0, 800b936 <__lshift+0x3e>
 800b922:	4602      	mov	r2, r0
 800b924:	4b2a      	ldr	r3, [pc, #168]	; (800b9d0 <__lshift+0xd8>)
 800b926:	482b      	ldr	r0, [pc, #172]	; (800b9d4 <__lshift+0xdc>)
 800b928:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b92c:	f001 f8dc 	bl	800cae8 <__assert_func>
 800b930:	3101      	adds	r1, #1
 800b932:	005b      	lsls	r3, r3, #1
 800b934:	e7ee      	b.n	800b914 <__lshift+0x1c>
 800b936:	2300      	movs	r3, #0
 800b938:	f100 0114 	add.w	r1, r0, #20
 800b93c:	f100 0210 	add.w	r2, r0, #16
 800b940:	4618      	mov	r0, r3
 800b942:	4553      	cmp	r3, sl
 800b944:	db37      	blt.n	800b9b6 <__lshift+0xbe>
 800b946:	6920      	ldr	r0, [r4, #16]
 800b948:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b94c:	f104 0314 	add.w	r3, r4, #20
 800b950:	f019 091f 	ands.w	r9, r9, #31
 800b954:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b958:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b95c:	d02f      	beq.n	800b9be <__lshift+0xc6>
 800b95e:	f1c9 0e20 	rsb	lr, r9, #32
 800b962:	468a      	mov	sl, r1
 800b964:	f04f 0c00 	mov.w	ip, #0
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	fa02 f209 	lsl.w	r2, r2, r9
 800b96e:	ea42 020c 	orr.w	r2, r2, ip
 800b972:	f84a 2b04 	str.w	r2, [sl], #4
 800b976:	f853 2b04 	ldr.w	r2, [r3], #4
 800b97a:	4298      	cmp	r0, r3
 800b97c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b980:	d8f2      	bhi.n	800b968 <__lshift+0x70>
 800b982:	1b03      	subs	r3, r0, r4
 800b984:	3b15      	subs	r3, #21
 800b986:	f023 0303 	bic.w	r3, r3, #3
 800b98a:	3304      	adds	r3, #4
 800b98c:	f104 0215 	add.w	r2, r4, #21
 800b990:	4290      	cmp	r0, r2
 800b992:	bf38      	it	cc
 800b994:	2304      	movcc	r3, #4
 800b996:	f841 c003 	str.w	ip, [r1, r3]
 800b99a:	f1bc 0f00 	cmp.w	ip, #0
 800b99e:	d001      	beq.n	800b9a4 <__lshift+0xac>
 800b9a0:	f108 0602 	add.w	r6, r8, #2
 800b9a4:	3e01      	subs	r6, #1
 800b9a6:	4638      	mov	r0, r7
 800b9a8:	612e      	str	r6, [r5, #16]
 800b9aa:	4621      	mov	r1, r4
 800b9ac:	f7ff fd88 	bl	800b4c0 <_Bfree>
 800b9b0:	4628      	mov	r0, r5
 800b9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b9ba:	3301      	adds	r3, #1
 800b9bc:	e7c1      	b.n	800b942 <__lshift+0x4a>
 800b9be:	3904      	subs	r1, #4
 800b9c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b9c8:	4298      	cmp	r0, r3
 800b9ca:	d8f9      	bhi.n	800b9c0 <__lshift+0xc8>
 800b9cc:	e7ea      	b.n	800b9a4 <__lshift+0xac>
 800b9ce:	bf00      	nop
 800b9d0:	0800d948 	.word	0x0800d948
 800b9d4:	0800d9d4 	.word	0x0800d9d4

0800b9d8 <__mcmp>:
 800b9d8:	b530      	push	{r4, r5, lr}
 800b9da:	6902      	ldr	r2, [r0, #16]
 800b9dc:	690c      	ldr	r4, [r1, #16]
 800b9de:	1b12      	subs	r2, r2, r4
 800b9e0:	d10e      	bne.n	800ba00 <__mcmp+0x28>
 800b9e2:	f100 0314 	add.w	r3, r0, #20
 800b9e6:	3114      	adds	r1, #20
 800b9e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b9ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b9f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b9f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b9f8:	42a5      	cmp	r5, r4
 800b9fa:	d003      	beq.n	800ba04 <__mcmp+0x2c>
 800b9fc:	d305      	bcc.n	800ba0a <__mcmp+0x32>
 800b9fe:	2201      	movs	r2, #1
 800ba00:	4610      	mov	r0, r2
 800ba02:	bd30      	pop	{r4, r5, pc}
 800ba04:	4283      	cmp	r3, r0
 800ba06:	d3f3      	bcc.n	800b9f0 <__mcmp+0x18>
 800ba08:	e7fa      	b.n	800ba00 <__mcmp+0x28>
 800ba0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba0e:	e7f7      	b.n	800ba00 <__mcmp+0x28>

0800ba10 <__mdiff>:
 800ba10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba14:	460c      	mov	r4, r1
 800ba16:	4606      	mov	r6, r0
 800ba18:	4611      	mov	r1, r2
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	4690      	mov	r8, r2
 800ba1e:	f7ff ffdb 	bl	800b9d8 <__mcmp>
 800ba22:	1e05      	subs	r5, r0, #0
 800ba24:	d110      	bne.n	800ba48 <__mdiff+0x38>
 800ba26:	4629      	mov	r1, r5
 800ba28:	4630      	mov	r0, r6
 800ba2a:	f7ff fd09 	bl	800b440 <_Balloc>
 800ba2e:	b930      	cbnz	r0, 800ba3e <__mdiff+0x2e>
 800ba30:	4b3a      	ldr	r3, [pc, #232]	; (800bb1c <__mdiff+0x10c>)
 800ba32:	4602      	mov	r2, r0
 800ba34:	f240 2132 	movw	r1, #562	; 0x232
 800ba38:	4839      	ldr	r0, [pc, #228]	; (800bb20 <__mdiff+0x110>)
 800ba3a:	f001 f855 	bl	800cae8 <__assert_func>
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba48:	bfa4      	itt	ge
 800ba4a:	4643      	movge	r3, r8
 800ba4c:	46a0      	movge	r8, r4
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ba54:	bfa6      	itte	ge
 800ba56:	461c      	movge	r4, r3
 800ba58:	2500      	movge	r5, #0
 800ba5a:	2501      	movlt	r5, #1
 800ba5c:	f7ff fcf0 	bl	800b440 <_Balloc>
 800ba60:	b920      	cbnz	r0, 800ba6c <__mdiff+0x5c>
 800ba62:	4b2e      	ldr	r3, [pc, #184]	; (800bb1c <__mdiff+0x10c>)
 800ba64:	4602      	mov	r2, r0
 800ba66:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ba6a:	e7e5      	b.n	800ba38 <__mdiff+0x28>
 800ba6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ba70:	6926      	ldr	r6, [r4, #16]
 800ba72:	60c5      	str	r5, [r0, #12]
 800ba74:	f104 0914 	add.w	r9, r4, #20
 800ba78:	f108 0514 	add.w	r5, r8, #20
 800ba7c:	f100 0e14 	add.w	lr, r0, #20
 800ba80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ba84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ba88:	f108 0210 	add.w	r2, r8, #16
 800ba8c:	46f2      	mov	sl, lr
 800ba8e:	2100      	movs	r1, #0
 800ba90:	f859 3b04 	ldr.w	r3, [r9], #4
 800ba94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ba98:	fa1f f883 	uxth.w	r8, r3
 800ba9c:	fa11 f18b 	uxtah	r1, r1, fp
 800baa0:	0c1b      	lsrs	r3, r3, #16
 800baa2:	eba1 0808 	sub.w	r8, r1, r8
 800baa6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800baaa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800baae:	fa1f f888 	uxth.w	r8, r8
 800bab2:	1419      	asrs	r1, r3, #16
 800bab4:	454e      	cmp	r6, r9
 800bab6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800baba:	f84a 3b04 	str.w	r3, [sl], #4
 800babe:	d8e7      	bhi.n	800ba90 <__mdiff+0x80>
 800bac0:	1b33      	subs	r3, r6, r4
 800bac2:	3b15      	subs	r3, #21
 800bac4:	f023 0303 	bic.w	r3, r3, #3
 800bac8:	3304      	adds	r3, #4
 800baca:	3415      	adds	r4, #21
 800bacc:	42a6      	cmp	r6, r4
 800bace:	bf38      	it	cc
 800bad0:	2304      	movcc	r3, #4
 800bad2:	441d      	add	r5, r3
 800bad4:	4473      	add	r3, lr
 800bad6:	469e      	mov	lr, r3
 800bad8:	462e      	mov	r6, r5
 800bada:	4566      	cmp	r6, ip
 800badc:	d30e      	bcc.n	800bafc <__mdiff+0xec>
 800bade:	f10c 0203 	add.w	r2, ip, #3
 800bae2:	1b52      	subs	r2, r2, r5
 800bae4:	f022 0203 	bic.w	r2, r2, #3
 800bae8:	3d03      	subs	r5, #3
 800baea:	45ac      	cmp	ip, r5
 800baec:	bf38      	it	cc
 800baee:	2200      	movcc	r2, #0
 800baf0:	441a      	add	r2, r3
 800baf2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800baf6:	b17b      	cbz	r3, 800bb18 <__mdiff+0x108>
 800baf8:	6107      	str	r7, [r0, #16]
 800bafa:	e7a3      	b.n	800ba44 <__mdiff+0x34>
 800bafc:	f856 8b04 	ldr.w	r8, [r6], #4
 800bb00:	fa11 f288 	uxtah	r2, r1, r8
 800bb04:	1414      	asrs	r4, r2, #16
 800bb06:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bb0a:	b292      	uxth	r2, r2
 800bb0c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bb10:	f84e 2b04 	str.w	r2, [lr], #4
 800bb14:	1421      	asrs	r1, r4, #16
 800bb16:	e7e0      	b.n	800bada <__mdiff+0xca>
 800bb18:	3f01      	subs	r7, #1
 800bb1a:	e7ea      	b.n	800baf2 <__mdiff+0xe2>
 800bb1c:	0800d948 	.word	0x0800d948
 800bb20:	0800d9d4 	.word	0x0800d9d4

0800bb24 <__ulp>:
 800bb24:	b082      	sub	sp, #8
 800bb26:	ed8d 0b00 	vstr	d0, [sp]
 800bb2a:	9b01      	ldr	r3, [sp, #4]
 800bb2c:	4912      	ldr	r1, [pc, #72]	; (800bb78 <__ulp+0x54>)
 800bb2e:	4019      	ands	r1, r3
 800bb30:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bb34:	2900      	cmp	r1, #0
 800bb36:	dd05      	ble.n	800bb44 <__ulp+0x20>
 800bb38:	2200      	movs	r2, #0
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	ec43 2b10 	vmov	d0, r2, r3
 800bb40:	b002      	add	sp, #8
 800bb42:	4770      	bx	lr
 800bb44:	4249      	negs	r1, r1
 800bb46:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bb4a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bb4e:	f04f 0200 	mov.w	r2, #0
 800bb52:	f04f 0300 	mov.w	r3, #0
 800bb56:	da04      	bge.n	800bb62 <__ulp+0x3e>
 800bb58:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bb5c:	fa41 f300 	asr.w	r3, r1, r0
 800bb60:	e7ec      	b.n	800bb3c <__ulp+0x18>
 800bb62:	f1a0 0114 	sub.w	r1, r0, #20
 800bb66:	291e      	cmp	r1, #30
 800bb68:	bfda      	itte	le
 800bb6a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bb6e:	fa20 f101 	lsrle.w	r1, r0, r1
 800bb72:	2101      	movgt	r1, #1
 800bb74:	460a      	mov	r2, r1
 800bb76:	e7e1      	b.n	800bb3c <__ulp+0x18>
 800bb78:	7ff00000 	.word	0x7ff00000

0800bb7c <__b2d>:
 800bb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb7e:	6905      	ldr	r5, [r0, #16]
 800bb80:	f100 0714 	add.w	r7, r0, #20
 800bb84:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bb88:	1f2e      	subs	r6, r5, #4
 800bb8a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bb8e:	4620      	mov	r0, r4
 800bb90:	f7ff fd48 	bl	800b624 <__hi0bits>
 800bb94:	f1c0 0320 	rsb	r3, r0, #32
 800bb98:	280a      	cmp	r0, #10
 800bb9a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bc18 <__b2d+0x9c>
 800bb9e:	600b      	str	r3, [r1, #0]
 800bba0:	dc14      	bgt.n	800bbcc <__b2d+0x50>
 800bba2:	f1c0 0e0b 	rsb	lr, r0, #11
 800bba6:	fa24 f10e 	lsr.w	r1, r4, lr
 800bbaa:	42b7      	cmp	r7, r6
 800bbac:	ea41 030c 	orr.w	r3, r1, ip
 800bbb0:	bf34      	ite	cc
 800bbb2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bbb6:	2100      	movcs	r1, #0
 800bbb8:	3015      	adds	r0, #21
 800bbba:	fa04 f000 	lsl.w	r0, r4, r0
 800bbbe:	fa21 f10e 	lsr.w	r1, r1, lr
 800bbc2:	ea40 0201 	orr.w	r2, r0, r1
 800bbc6:	ec43 2b10 	vmov	d0, r2, r3
 800bbca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbcc:	42b7      	cmp	r7, r6
 800bbce:	bf3a      	itte	cc
 800bbd0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bbd4:	f1a5 0608 	subcc.w	r6, r5, #8
 800bbd8:	2100      	movcs	r1, #0
 800bbda:	380b      	subs	r0, #11
 800bbdc:	d017      	beq.n	800bc0e <__b2d+0x92>
 800bbde:	f1c0 0c20 	rsb	ip, r0, #32
 800bbe2:	fa04 f500 	lsl.w	r5, r4, r0
 800bbe6:	42be      	cmp	r6, r7
 800bbe8:	fa21 f40c 	lsr.w	r4, r1, ip
 800bbec:	ea45 0504 	orr.w	r5, r5, r4
 800bbf0:	bf8c      	ite	hi
 800bbf2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bbf6:	2400      	movls	r4, #0
 800bbf8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bbfc:	fa01 f000 	lsl.w	r0, r1, r0
 800bc00:	fa24 f40c 	lsr.w	r4, r4, ip
 800bc04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bc08:	ea40 0204 	orr.w	r2, r0, r4
 800bc0c:	e7db      	b.n	800bbc6 <__b2d+0x4a>
 800bc0e:	ea44 030c 	orr.w	r3, r4, ip
 800bc12:	460a      	mov	r2, r1
 800bc14:	e7d7      	b.n	800bbc6 <__b2d+0x4a>
 800bc16:	bf00      	nop
 800bc18:	3ff00000 	.word	0x3ff00000

0800bc1c <__d2b>:
 800bc1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc20:	4689      	mov	r9, r1
 800bc22:	2101      	movs	r1, #1
 800bc24:	ec57 6b10 	vmov	r6, r7, d0
 800bc28:	4690      	mov	r8, r2
 800bc2a:	f7ff fc09 	bl	800b440 <_Balloc>
 800bc2e:	4604      	mov	r4, r0
 800bc30:	b930      	cbnz	r0, 800bc40 <__d2b+0x24>
 800bc32:	4602      	mov	r2, r0
 800bc34:	4b25      	ldr	r3, [pc, #148]	; (800bccc <__d2b+0xb0>)
 800bc36:	4826      	ldr	r0, [pc, #152]	; (800bcd0 <__d2b+0xb4>)
 800bc38:	f240 310a 	movw	r1, #778	; 0x30a
 800bc3c:	f000 ff54 	bl	800cae8 <__assert_func>
 800bc40:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bc44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc48:	bb35      	cbnz	r5, 800bc98 <__d2b+0x7c>
 800bc4a:	2e00      	cmp	r6, #0
 800bc4c:	9301      	str	r3, [sp, #4]
 800bc4e:	d028      	beq.n	800bca2 <__d2b+0x86>
 800bc50:	4668      	mov	r0, sp
 800bc52:	9600      	str	r6, [sp, #0]
 800bc54:	f7ff fd06 	bl	800b664 <__lo0bits>
 800bc58:	9900      	ldr	r1, [sp, #0]
 800bc5a:	b300      	cbz	r0, 800bc9e <__d2b+0x82>
 800bc5c:	9a01      	ldr	r2, [sp, #4]
 800bc5e:	f1c0 0320 	rsb	r3, r0, #32
 800bc62:	fa02 f303 	lsl.w	r3, r2, r3
 800bc66:	430b      	orrs	r3, r1
 800bc68:	40c2      	lsrs	r2, r0
 800bc6a:	6163      	str	r3, [r4, #20]
 800bc6c:	9201      	str	r2, [sp, #4]
 800bc6e:	9b01      	ldr	r3, [sp, #4]
 800bc70:	61a3      	str	r3, [r4, #24]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	bf14      	ite	ne
 800bc76:	2202      	movne	r2, #2
 800bc78:	2201      	moveq	r2, #1
 800bc7a:	6122      	str	r2, [r4, #16]
 800bc7c:	b1d5      	cbz	r5, 800bcb4 <__d2b+0x98>
 800bc7e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bc82:	4405      	add	r5, r0
 800bc84:	f8c9 5000 	str.w	r5, [r9]
 800bc88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bc8c:	f8c8 0000 	str.w	r0, [r8]
 800bc90:	4620      	mov	r0, r4
 800bc92:	b003      	add	sp, #12
 800bc94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc9c:	e7d5      	b.n	800bc4a <__d2b+0x2e>
 800bc9e:	6161      	str	r1, [r4, #20]
 800bca0:	e7e5      	b.n	800bc6e <__d2b+0x52>
 800bca2:	a801      	add	r0, sp, #4
 800bca4:	f7ff fcde 	bl	800b664 <__lo0bits>
 800bca8:	9b01      	ldr	r3, [sp, #4]
 800bcaa:	6163      	str	r3, [r4, #20]
 800bcac:	2201      	movs	r2, #1
 800bcae:	6122      	str	r2, [r4, #16]
 800bcb0:	3020      	adds	r0, #32
 800bcb2:	e7e3      	b.n	800bc7c <__d2b+0x60>
 800bcb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bcb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bcbc:	f8c9 0000 	str.w	r0, [r9]
 800bcc0:	6918      	ldr	r0, [r3, #16]
 800bcc2:	f7ff fcaf 	bl	800b624 <__hi0bits>
 800bcc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bcca:	e7df      	b.n	800bc8c <__d2b+0x70>
 800bccc:	0800d948 	.word	0x0800d948
 800bcd0:	0800d9d4 	.word	0x0800d9d4

0800bcd4 <__ratio>:
 800bcd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd8:	4688      	mov	r8, r1
 800bcda:	4669      	mov	r1, sp
 800bcdc:	4681      	mov	r9, r0
 800bcde:	f7ff ff4d 	bl	800bb7c <__b2d>
 800bce2:	a901      	add	r1, sp, #4
 800bce4:	4640      	mov	r0, r8
 800bce6:	ec55 4b10 	vmov	r4, r5, d0
 800bcea:	ee10 aa10 	vmov	sl, s0
 800bcee:	f7ff ff45 	bl	800bb7c <__b2d>
 800bcf2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bcf6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bcfa:	1a59      	subs	r1, r3, r1
 800bcfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd00:	1ad3      	subs	r3, r2, r3
 800bd02:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bd06:	ec57 6b10 	vmov	r6, r7, d0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	bfd6      	itet	le
 800bd0e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bd12:	462a      	movgt	r2, r5
 800bd14:	463a      	movle	r2, r7
 800bd16:	46ab      	mov	fp, r5
 800bd18:	bfd6      	itet	le
 800bd1a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800bd1e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bd22:	ee00 3a90 	vmovle	s1, r3
 800bd26:	ec4b ab17 	vmov	d7, sl, fp
 800bd2a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800bd2e:	b003      	add	sp, #12
 800bd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bd34 <__copybits>:
 800bd34:	3901      	subs	r1, #1
 800bd36:	b570      	push	{r4, r5, r6, lr}
 800bd38:	1149      	asrs	r1, r1, #5
 800bd3a:	6914      	ldr	r4, [r2, #16]
 800bd3c:	3101      	adds	r1, #1
 800bd3e:	f102 0314 	add.w	r3, r2, #20
 800bd42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bd46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bd4a:	1f05      	subs	r5, r0, #4
 800bd4c:	42a3      	cmp	r3, r4
 800bd4e:	d30c      	bcc.n	800bd6a <__copybits+0x36>
 800bd50:	1aa3      	subs	r3, r4, r2
 800bd52:	3b11      	subs	r3, #17
 800bd54:	f023 0303 	bic.w	r3, r3, #3
 800bd58:	3211      	adds	r2, #17
 800bd5a:	42a2      	cmp	r2, r4
 800bd5c:	bf88      	it	hi
 800bd5e:	2300      	movhi	r3, #0
 800bd60:	4418      	add	r0, r3
 800bd62:	2300      	movs	r3, #0
 800bd64:	4288      	cmp	r0, r1
 800bd66:	d305      	bcc.n	800bd74 <__copybits+0x40>
 800bd68:	bd70      	pop	{r4, r5, r6, pc}
 800bd6a:	f853 6b04 	ldr.w	r6, [r3], #4
 800bd6e:	f845 6f04 	str.w	r6, [r5, #4]!
 800bd72:	e7eb      	b.n	800bd4c <__copybits+0x18>
 800bd74:	f840 3b04 	str.w	r3, [r0], #4
 800bd78:	e7f4      	b.n	800bd64 <__copybits+0x30>

0800bd7a <__any_on>:
 800bd7a:	f100 0214 	add.w	r2, r0, #20
 800bd7e:	6900      	ldr	r0, [r0, #16]
 800bd80:	114b      	asrs	r3, r1, #5
 800bd82:	4298      	cmp	r0, r3
 800bd84:	b510      	push	{r4, lr}
 800bd86:	db11      	blt.n	800bdac <__any_on+0x32>
 800bd88:	dd0a      	ble.n	800bda0 <__any_on+0x26>
 800bd8a:	f011 011f 	ands.w	r1, r1, #31
 800bd8e:	d007      	beq.n	800bda0 <__any_on+0x26>
 800bd90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bd94:	fa24 f001 	lsr.w	r0, r4, r1
 800bd98:	fa00 f101 	lsl.w	r1, r0, r1
 800bd9c:	428c      	cmp	r4, r1
 800bd9e:	d10b      	bne.n	800bdb8 <__any_on+0x3e>
 800bda0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d803      	bhi.n	800bdb0 <__any_on+0x36>
 800bda8:	2000      	movs	r0, #0
 800bdaa:	bd10      	pop	{r4, pc}
 800bdac:	4603      	mov	r3, r0
 800bdae:	e7f7      	b.n	800bda0 <__any_on+0x26>
 800bdb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bdb4:	2900      	cmp	r1, #0
 800bdb6:	d0f5      	beq.n	800bda4 <__any_on+0x2a>
 800bdb8:	2001      	movs	r0, #1
 800bdba:	e7f6      	b.n	800bdaa <__any_on+0x30>

0800bdbc <_calloc_r>:
 800bdbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bdbe:	fba1 2402 	umull	r2, r4, r1, r2
 800bdc2:	b94c      	cbnz	r4, 800bdd8 <_calloc_r+0x1c>
 800bdc4:	4611      	mov	r1, r2
 800bdc6:	9201      	str	r2, [sp, #4]
 800bdc8:	f000 f87a 	bl	800bec0 <_malloc_r>
 800bdcc:	9a01      	ldr	r2, [sp, #4]
 800bdce:	4605      	mov	r5, r0
 800bdd0:	b930      	cbnz	r0, 800bde0 <_calloc_r+0x24>
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	b003      	add	sp, #12
 800bdd6:	bd30      	pop	{r4, r5, pc}
 800bdd8:	220c      	movs	r2, #12
 800bdda:	6002      	str	r2, [r0, #0]
 800bddc:	2500      	movs	r5, #0
 800bdde:	e7f8      	b.n	800bdd2 <_calloc_r+0x16>
 800bde0:	4621      	mov	r1, r4
 800bde2:	f7fc fbf9 	bl	80085d8 <memset>
 800bde6:	e7f4      	b.n	800bdd2 <_calloc_r+0x16>

0800bde8 <_free_r>:
 800bde8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bdea:	2900      	cmp	r1, #0
 800bdec:	d044      	beq.n	800be78 <_free_r+0x90>
 800bdee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdf2:	9001      	str	r0, [sp, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	f1a1 0404 	sub.w	r4, r1, #4
 800bdfa:	bfb8      	it	lt
 800bdfc:	18e4      	addlt	r4, r4, r3
 800bdfe:	f001 f877 	bl	800cef0 <__malloc_lock>
 800be02:	4a1e      	ldr	r2, [pc, #120]	; (800be7c <_free_r+0x94>)
 800be04:	9801      	ldr	r0, [sp, #4]
 800be06:	6813      	ldr	r3, [r2, #0]
 800be08:	b933      	cbnz	r3, 800be18 <_free_r+0x30>
 800be0a:	6063      	str	r3, [r4, #4]
 800be0c:	6014      	str	r4, [r2, #0]
 800be0e:	b003      	add	sp, #12
 800be10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be14:	f001 b872 	b.w	800cefc <__malloc_unlock>
 800be18:	42a3      	cmp	r3, r4
 800be1a:	d908      	bls.n	800be2e <_free_r+0x46>
 800be1c:	6825      	ldr	r5, [r4, #0]
 800be1e:	1961      	adds	r1, r4, r5
 800be20:	428b      	cmp	r3, r1
 800be22:	bf01      	itttt	eq
 800be24:	6819      	ldreq	r1, [r3, #0]
 800be26:	685b      	ldreq	r3, [r3, #4]
 800be28:	1949      	addeq	r1, r1, r5
 800be2a:	6021      	streq	r1, [r4, #0]
 800be2c:	e7ed      	b.n	800be0a <_free_r+0x22>
 800be2e:	461a      	mov	r2, r3
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	b10b      	cbz	r3, 800be38 <_free_r+0x50>
 800be34:	42a3      	cmp	r3, r4
 800be36:	d9fa      	bls.n	800be2e <_free_r+0x46>
 800be38:	6811      	ldr	r1, [r2, #0]
 800be3a:	1855      	adds	r5, r2, r1
 800be3c:	42a5      	cmp	r5, r4
 800be3e:	d10b      	bne.n	800be58 <_free_r+0x70>
 800be40:	6824      	ldr	r4, [r4, #0]
 800be42:	4421      	add	r1, r4
 800be44:	1854      	adds	r4, r2, r1
 800be46:	42a3      	cmp	r3, r4
 800be48:	6011      	str	r1, [r2, #0]
 800be4a:	d1e0      	bne.n	800be0e <_free_r+0x26>
 800be4c:	681c      	ldr	r4, [r3, #0]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	6053      	str	r3, [r2, #4]
 800be52:	4421      	add	r1, r4
 800be54:	6011      	str	r1, [r2, #0]
 800be56:	e7da      	b.n	800be0e <_free_r+0x26>
 800be58:	d902      	bls.n	800be60 <_free_r+0x78>
 800be5a:	230c      	movs	r3, #12
 800be5c:	6003      	str	r3, [r0, #0]
 800be5e:	e7d6      	b.n	800be0e <_free_r+0x26>
 800be60:	6825      	ldr	r5, [r4, #0]
 800be62:	1961      	adds	r1, r4, r5
 800be64:	428b      	cmp	r3, r1
 800be66:	bf04      	itt	eq
 800be68:	6819      	ldreq	r1, [r3, #0]
 800be6a:	685b      	ldreq	r3, [r3, #4]
 800be6c:	6063      	str	r3, [r4, #4]
 800be6e:	bf04      	itt	eq
 800be70:	1949      	addeq	r1, r1, r5
 800be72:	6021      	streq	r1, [r4, #0]
 800be74:	6054      	str	r4, [r2, #4]
 800be76:	e7ca      	b.n	800be0e <_free_r+0x26>
 800be78:	b003      	add	sp, #12
 800be7a:	bd30      	pop	{r4, r5, pc}
 800be7c:	200008b8 	.word	0x200008b8

0800be80 <sbrk_aligned>:
 800be80:	b570      	push	{r4, r5, r6, lr}
 800be82:	4e0e      	ldr	r6, [pc, #56]	; (800bebc <sbrk_aligned+0x3c>)
 800be84:	460c      	mov	r4, r1
 800be86:	6831      	ldr	r1, [r6, #0]
 800be88:	4605      	mov	r5, r0
 800be8a:	b911      	cbnz	r1, 800be92 <sbrk_aligned+0x12>
 800be8c:	f000 fd28 	bl	800c8e0 <_sbrk_r>
 800be90:	6030      	str	r0, [r6, #0]
 800be92:	4621      	mov	r1, r4
 800be94:	4628      	mov	r0, r5
 800be96:	f000 fd23 	bl	800c8e0 <_sbrk_r>
 800be9a:	1c43      	adds	r3, r0, #1
 800be9c:	d00a      	beq.n	800beb4 <sbrk_aligned+0x34>
 800be9e:	1cc4      	adds	r4, r0, #3
 800bea0:	f024 0403 	bic.w	r4, r4, #3
 800bea4:	42a0      	cmp	r0, r4
 800bea6:	d007      	beq.n	800beb8 <sbrk_aligned+0x38>
 800bea8:	1a21      	subs	r1, r4, r0
 800beaa:	4628      	mov	r0, r5
 800beac:	f000 fd18 	bl	800c8e0 <_sbrk_r>
 800beb0:	3001      	adds	r0, #1
 800beb2:	d101      	bne.n	800beb8 <sbrk_aligned+0x38>
 800beb4:	f04f 34ff 	mov.w	r4, #4294967295
 800beb8:	4620      	mov	r0, r4
 800beba:	bd70      	pop	{r4, r5, r6, pc}
 800bebc:	200008bc 	.word	0x200008bc

0800bec0 <_malloc_r>:
 800bec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bec4:	1ccd      	adds	r5, r1, #3
 800bec6:	f025 0503 	bic.w	r5, r5, #3
 800beca:	3508      	adds	r5, #8
 800becc:	2d0c      	cmp	r5, #12
 800bece:	bf38      	it	cc
 800bed0:	250c      	movcc	r5, #12
 800bed2:	2d00      	cmp	r5, #0
 800bed4:	4607      	mov	r7, r0
 800bed6:	db01      	blt.n	800bedc <_malloc_r+0x1c>
 800bed8:	42a9      	cmp	r1, r5
 800beda:	d905      	bls.n	800bee8 <_malloc_r+0x28>
 800bedc:	230c      	movs	r3, #12
 800bede:	603b      	str	r3, [r7, #0]
 800bee0:	2600      	movs	r6, #0
 800bee2:	4630      	mov	r0, r6
 800bee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bee8:	4e2e      	ldr	r6, [pc, #184]	; (800bfa4 <_malloc_r+0xe4>)
 800beea:	f001 f801 	bl	800cef0 <__malloc_lock>
 800beee:	6833      	ldr	r3, [r6, #0]
 800bef0:	461c      	mov	r4, r3
 800bef2:	bb34      	cbnz	r4, 800bf42 <_malloc_r+0x82>
 800bef4:	4629      	mov	r1, r5
 800bef6:	4638      	mov	r0, r7
 800bef8:	f7ff ffc2 	bl	800be80 <sbrk_aligned>
 800befc:	1c43      	adds	r3, r0, #1
 800befe:	4604      	mov	r4, r0
 800bf00:	d14d      	bne.n	800bf9e <_malloc_r+0xde>
 800bf02:	6834      	ldr	r4, [r6, #0]
 800bf04:	4626      	mov	r6, r4
 800bf06:	2e00      	cmp	r6, #0
 800bf08:	d140      	bne.n	800bf8c <_malloc_r+0xcc>
 800bf0a:	6823      	ldr	r3, [r4, #0]
 800bf0c:	4631      	mov	r1, r6
 800bf0e:	4638      	mov	r0, r7
 800bf10:	eb04 0803 	add.w	r8, r4, r3
 800bf14:	f000 fce4 	bl	800c8e0 <_sbrk_r>
 800bf18:	4580      	cmp	r8, r0
 800bf1a:	d13a      	bne.n	800bf92 <_malloc_r+0xd2>
 800bf1c:	6821      	ldr	r1, [r4, #0]
 800bf1e:	3503      	adds	r5, #3
 800bf20:	1a6d      	subs	r5, r5, r1
 800bf22:	f025 0503 	bic.w	r5, r5, #3
 800bf26:	3508      	adds	r5, #8
 800bf28:	2d0c      	cmp	r5, #12
 800bf2a:	bf38      	it	cc
 800bf2c:	250c      	movcc	r5, #12
 800bf2e:	4629      	mov	r1, r5
 800bf30:	4638      	mov	r0, r7
 800bf32:	f7ff ffa5 	bl	800be80 <sbrk_aligned>
 800bf36:	3001      	adds	r0, #1
 800bf38:	d02b      	beq.n	800bf92 <_malloc_r+0xd2>
 800bf3a:	6823      	ldr	r3, [r4, #0]
 800bf3c:	442b      	add	r3, r5
 800bf3e:	6023      	str	r3, [r4, #0]
 800bf40:	e00e      	b.n	800bf60 <_malloc_r+0xa0>
 800bf42:	6822      	ldr	r2, [r4, #0]
 800bf44:	1b52      	subs	r2, r2, r5
 800bf46:	d41e      	bmi.n	800bf86 <_malloc_r+0xc6>
 800bf48:	2a0b      	cmp	r2, #11
 800bf4a:	d916      	bls.n	800bf7a <_malloc_r+0xba>
 800bf4c:	1961      	adds	r1, r4, r5
 800bf4e:	42a3      	cmp	r3, r4
 800bf50:	6025      	str	r5, [r4, #0]
 800bf52:	bf18      	it	ne
 800bf54:	6059      	strne	r1, [r3, #4]
 800bf56:	6863      	ldr	r3, [r4, #4]
 800bf58:	bf08      	it	eq
 800bf5a:	6031      	streq	r1, [r6, #0]
 800bf5c:	5162      	str	r2, [r4, r5]
 800bf5e:	604b      	str	r3, [r1, #4]
 800bf60:	4638      	mov	r0, r7
 800bf62:	f104 060b 	add.w	r6, r4, #11
 800bf66:	f000 ffc9 	bl	800cefc <__malloc_unlock>
 800bf6a:	f026 0607 	bic.w	r6, r6, #7
 800bf6e:	1d23      	adds	r3, r4, #4
 800bf70:	1af2      	subs	r2, r6, r3
 800bf72:	d0b6      	beq.n	800bee2 <_malloc_r+0x22>
 800bf74:	1b9b      	subs	r3, r3, r6
 800bf76:	50a3      	str	r3, [r4, r2]
 800bf78:	e7b3      	b.n	800bee2 <_malloc_r+0x22>
 800bf7a:	6862      	ldr	r2, [r4, #4]
 800bf7c:	42a3      	cmp	r3, r4
 800bf7e:	bf0c      	ite	eq
 800bf80:	6032      	streq	r2, [r6, #0]
 800bf82:	605a      	strne	r2, [r3, #4]
 800bf84:	e7ec      	b.n	800bf60 <_malloc_r+0xa0>
 800bf86:	4623      	mov	r3, r4
 800bf88:	6864      	ldr	r4, [r4, #4]
 800bf8a:	e7b2      	b.n	800bef2 <_malloc_r+0x32>
 800bf8c:	4634      	mov	r4, r6
 800bf8e:	6876      	ldr	r6, [r6, #4]
 800bf90:	e7b9      	b.n	800bf06 <_malloc_r+0x46>
 800bf92:	230c      	movs	r3, #12
 800bf94:	603b      	str	r3, [r7, #0]
 800bf96:	4638      	mov	r0, r7
 800bf98:	f000 ffb0 	bl	800cefc <__malloc_unlock>
 800bf9c:	e7a1      	b.n	800bee2 <_malloc_r+0x22>
 800bf9e:	6025      	str	r5, [r4, #0]
 800bfa0:	e7de      	b.n	800bf60 <_malloc_r+0xa0>
 800bfa2:	bf00      	nop
 800bfa4:	200008b8 	.word	0x200008b8

0800bfa8 <__ssputs_r>:
 800bfa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfac:	688e      	ldr	r6, [r1, #8]
 800bfae:	429e      	cmp	r6, r3
 800bfb0:	4682      	mov	sl, r0
 800bfb2:	460c      	mov	r4, r1
 800bfb4:	4690      	mov	r8, r2
 800bfb6:	461f      	mov	r7, r3
 800bfb8:	d838      	bhi.n	800c02c <__ssputs_r+0x84>
 800bfba:	898a      	ldrh	r2, [r1, #12]
 800bfbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bfc0:	d032      	beq.n	800c028 <__ssputs_r+0x80>
 800bfc2:	6825      	ldr	r5, [r4, #0]
 800bfc4:	6909      	ldr	r1, [r1, #16]
 800bfc6:	eba5 0901 	sub.w	r9, r5, r1
 800bfca:	6965      	ldr	r5, [r4, #20]
 800bfcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bfd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	444b      	add	r3, r9
 800bfd8:	106d      	asrs	r5, r5, #1
 800bfda:	429d      	cmp	r5, r3
 800bfdc:	bf38      	it	cc
 800bfde:	461d      	movcc	r5, r3
 800bfe0:	0553      	lsls	r3, r2, #21
 800bfe2:	d531      	bpl.n	800c048 <__ssputs_r+0xa0>
 800bfe4:	4629      	mov	r1, r5
 800bfe6:	f7ff ff6b 	bl	800bec0 <_malloc_r>
 800bfea:	4606      	mov	r6, r0
 800bfec:	b950      	cbnz	r0, 800c004 <__ssputs_r+0x5c>
 800bfee:	230c      	movs	r3, #12
 800bff0:	f8ca 3000 	str.w	r3, [sl]
 800bff4:	89a3      	ldrh	r3, [r4, #12]
 800bff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bffa:	81a3      	strh	r3, [r4, #12]
 800bffc:	f04f 30ff 	mov.w	r0, #4294967295
 800c000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c004:	6921      	ldr	r1, [r4, #16]
 800c006:	464a      	mov	r2, r9
 800c008:	f7ff fa0c 	bl	800b424 <memcpy>
 800c00c:	89a3      	ldrh	r3, [r4, #12]
 800c00e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c016:	81a3      	strh	r3, [r4, #12]
 800c018:	6126      	str	r6, [r4, #16]
 800c01a:	6165      	str	r5, [r4, #20]
 800c01c:	444e      	add	r6, r9
 800c01e:	eba5 0509 	sub.w	r5, r5, r9
 800c022:	6026      	str	r6, [r4, #0]
 800c024:	60a5      	str	r5, [r4, #8]
 800c026:	463e      	mov	r6, r7
 800c028:	42be      	cmp	r6, r7
 800c02a:	d900      	bls.n	800c02e <__ssputs_r+0x86>
 800c02c:	463e      	mov	r6, r7
 800c02e:	6820      	ldr	r0, [r4, #0]
 800c030:	4632      	mov	r2, r6
 800c032:	4641      	mov	r1, r8
 800c034:	f000 ff42 	bl	800cebc <memmove>
 800c038:	68a3      	ldr	r3, [r4, #8]
 800c03a:	1b9b      	subs	r3, r3, r6
 800c03c:	60a3      	str	r3, [r4, #8]
 800c03e:	6823      	ldr	r3, [r4, #0]
 800c040:	4433      	add	r3, r6
 800c042:	6023      	str	r3, [r4, #0]
 800c044:	2000      	movs	r0, #0
 800c046:	e7db      	b.n	800c000 <__ssputs_r+0x58>
 800c048:	462a      	mov	r2, r5
 800c04a:	f000 ff5d 	bl	800cf08 <_realloc_r>
 800c04e:	4606      	mov	r6, r0
 800c050:	2800      	cmp	r0, #0
 800c052:	d1e1      	bne.n	800c018 <__ssputs_r+0x70>
 800c054:	6921      	ldr	r1, [r4, #16]
 800c056:	4650      	mov	r0, sl
 800c058:	f7ff fec6 	bl	800bde8 <_free_r>
 800c05c:	e7c7      	b.n	800bfee <__ssputs_r+0x46>
	...

0800c060 <_svfiprintf_r>:
 800c060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c064:	4698      	mov	r8, r3
 800c066:	898b      	ldrh	r3, [r1, #12]
 800c068:	061b      	lsls	r3, r3, #24
 800c06a:	b09d      	sub	sp, #116	; 0x74
 800c06c:	4607      	mov	r7, r0
 800c06e:	460d      	mov	r5, r1
 800c070:	4614      	mov	r4, r2
 800c072:	d50e      	bpl.n	800c092 <_svfiprintf_r+0x32>
 800c074:	690b      	ldr	r3, [r1, #16]
 800c076:	b963      	cbnz	r3, 800c092 <_svfiprintf_r+0x32>
 800c078:	2140      	movs	r1, #64	; 0x40
 800c07a:	f7ff ff21 	bl	800bec0 <_malloc_r>
 800c07e:	6028      	str	r0, [r5, #0]
 800c080:	6128      	str	r0, [r5, #16]
 800c082:	b920      	cbnz	r0, 800c08e <_svfiprintf_r+0x2e>
 800c084:	230c      	movs	r3, #12
 800c086:	603b      	str	r3, [r7, #0]
 800c088:	f04f 30ff 	mov.w	r0, #4294967295
 800c08c:	e0d1      	b.n	800c232 <_svfiprintf_r+0x1d2>
 800c08e:	2340      	movs	r3, #64	; 0x40
 800c090:	616b      	str	r3, [r5, #20]
 800c092:	2300      	movs	r3, #0
 800c094:	9309      	str	r3, [sp, #36]	; 0x24
 800c096:	2320      	movs	r3, #32
 800c098:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c09c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0a0:	2330      	movs	r3, #48	; 0x30
 800c0a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c24c <_svfiprintf_r+0x1ec>
 800c0a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0aa:	f04f 0901 	mov.w	r9, #1
 800c0ae:	4623      	mov	r3, r4
 800c0b0:	469a      	mov	sl, r3
 800c0b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0b6:	b10a      	cbz	r2, 800c0bc <_svfiprintf_r+0x5c>
 800c0b8:	2a25      	cmp	r2, #37	; 0x25
 800c0ba:	d1f9      	bne.n	800c0b0 <_svfiprintf_r+0x50>
 800c0bc:	ebba 0b04 	subs.w	fp, sl, r4
 800c0c0:	d00b      	beq.n	800c0da <_svfiprintf_r+0x7a>
 800c0c2:	465b      	mov	r3, fp
 800c0c4:	4622      	mov	r2, r4
 800c0c6:	4629      	mov	r1, r5
 800c0c8:	4638      	mov	r0, r7
 800c0ca:	f7ff ff6d 	bl	800bfa8 <__ssputs_r>
 800c0ce:	3001      	adds	r0, #1
 800c0d0:	f000 80aa 	beq.w	800c228 <_svfiprintf_r+0x1c8>
 800c0d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0d6:	445a      	add	r2, fp
 800c0d8:	9209      	str	r2, [sp, #36]	; 0x24
 800c0da:	f89a 3000 	ldrb.w	r3, [sl]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	f000 80a2 	beq.w	800c228 <_svfiprintf_r+0x1c8>
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0ee:	f10a 0a01 	add.w	sl, sl, #1
 800c0f2:	9304      	str	r3, [sp, #16]
 800c0f4:	9307      	str	r3, [sp, #28]
 800c0f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0fa:	931a      	str	r3, [sp, #104]	; 0x68
 800c0fc:	4654      	mov	r4, sl
 800c0fe:	2205      	movs	r2, #5
 800c100:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c104:	4851      	ldr	r0, [pc, #324]	; (800c24c <_svfiprintf_r+0x1ec>)
 800c106:	f7f4 f8b3 	bl	8000270 <memchr>
 800c10a:	9a04      	ldr	r2, [sp, #16]
 800c10c:	b9d8      	cbnz	r0, 800c146 <_svfiprintf_r+0xe6>
 800c10e:	06d0      	lsls	r0, r2, #27
 800c110:	bf44      	itt	mi
 800c112:	2320      	movmi	r3, #32
 800c114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c118:	0711      	lsls	r1, r2, #28
 800c11a:	bf44      	itt	mi
 800c11c:	232b      	movmi	r3, #43	; 0x2b
 800c11e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c122:	f89a 3000 	ldrb.w	r3, [sl]
 800c126:	2b2a      	cmp	r3, #42	; 0x2a
 800c128:	d015      	beq.n	800c156 <_svfiprintf_r+0xf6>
 800c12a:	9a07      	ldr	r2, [sp, #28]
 800c12c:	4654      	mov	r4, sl
 800c12e:	2000      	movs	r0, #0
 800c130:	f04f 0c0a 	mov.w	ip, #10
 800c134:	4621      	mov	r1, r4
 800c136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c13a:	3b30      	subs	r3, #48	; 0x30
 800c13c:	2b09      	cmp	r3, #9
 800c13e:	d94e      	bls.n	800c1de <_svfiprintf_r+0x17e>
 800c140:	b1b0      	cbz	r0, 800c170 <_svfiprintf_r+0x110>
 800c142:	9207      	str	r2, [sp, #28]
 800c144:	e014      	b.n	800c170 <_svfiprintf_r+0x110>
 800c146:	eba0 0308 	sub.w	r3, r0, r8
 800c14a:	fa09 f303 	lsl.w	r3, r9, r3
 800c14e:	4313      	orrs	r3, r2
 800c150:	9304      	str	r3, [sp, #16]
 800c152:	46a2      	mov	sl, r4
 800c154:	e7d2      	b.n	800c0fc <_svfiprintf_r+0x9c>
 800c156:	9b03      	ldr	r3, [sp, #12]
 800c158:	1d19      	adds	r1, r3, #4
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	9103      	str	r1, [sp, #12]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	bfbb      	ittet	lt
 800c162:	425b      	neglt	r3, r3
 800c164:	f042 0202 	orrlt.w	r2, r2, #2
 800c168:	9307      	strge	r3, [sp, #28]
 800c16a:	9307      	strlt	r3, [sp, #28]
 800c16c:	bfb8      	it	lt
 800c16e:	9204      	strlt	r2, [sp, #16]
 800c170:	7823      	ldrb	r3, [r4, #0]
 800c172:	2b2e      	cmp	r3, #46	; 0x2e
 800c174:	d10c      	bne.n	800c190 <_svfiprintf_r+0x130>
 800c176:	7863      	ldrb	r3, [r4, #1]
 800c178:	2b2a      	cmp	r3, #42	; 0x2a
 800c17a:	d135      	bne.n	800c1e8 <_svfiprintf_r+0x188>
 800c17c:	9b03      	ldr	r3, [sp, #12]
 800c17e:	1d1a      	adds	r2, r3, #4
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	9203      	str	r2, [sp, #12]
 800c184:	2b00      	cmp	r3, #0
 800c186:	bfb8      	it	lt
 800c188:	f04f 33ff 	movlt.w	r3, #4294967295
 800c18c:	3402      	adds	r4, #2
 800c18e:	9305      	str	r3, [sp, #20]
 800c190:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c25c <_svfiprintf_r+0x1fc>
 800c194:	7821      	ldrb	r1, [r4, #0]
 800c196:	2203      	movs	r2, #3
 800c198:	4650      	mov	r0, sl
 800c19a:	f7f4 f869 	bl	8000270 <memchr>
 800c19e:	b140      	cbz	r0, 800c1b2 <_svfiprintf_r+0x152>
 800c1a0:	2340      	movs	r3, #64	; 0x40
 800c1a2:	eba0 000a 	sub.w	r0, r0, sl
 800c1a6:	fa03 f000 	lsl.w	r0, r3, r0
 800c1aa:	9b04      	ldr	r3, [sp, #16]
 800c1ac:	4303      	orrs	r3, r0
 800c1ae:	3401      	adds	r4, #1
 800c1b0:	9304      	str	r3, [sp, #16]
 800c1b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1b6:	4826      	ldr	r0, [pc, #152]	; (800c250 <_svfiprintf_r+0x1f0>)
 800c1b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1bc:	2206      	movs	r2, #6
 800c1be:	f7f4 f857 	bl	8000270 <memchr>
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	d038      	beq.n	800c238 <_svfiprintf_r+0x1d8>
 800c1c6:	4b23      	ldr	r3, [pc, #140]	; (800c254 <_svfiprintf_r+0x1f4>)
 800c1c8:	bb1b      	cbnz	r3, 800c212 <_svfiprintf_r+0x1b2>
 800c1ca:	9b03      	ldr	r3, [sp, #12]
 800c1cc:	3307      	adds	r3, #7
 800c1ce:	f023 0307 	bic.w	r3, r3, #7
 800c1d2:	3308      	adds	r3, #8
 800c1d4:	9303      	str	r3, [sp, #12]
 800c1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1d8:	4433      	add	r3, r6
 800c1da:	9309      	str	r3, [sp, #36]	; 0x24
 800c1dc:	e767      	b.n	800c0ae <_svfiprintf_r+0x4e>
 800c1de:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1e2:	460c      	mov	r4, r1
 800c1e4:	2001      	movs	r0, #1
 800c1e6:	e7a5      	b.n	800c134 <_svfiprintf_r+0xd4>
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	3401      	adds	r4, #1
 800c1ec:	9305      	str	r3, [sp, #20]
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	f04f 0c0a 	mov.w	ip, #10
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1fa:	3a30      	subs	r2, #48	; 0x30
 800c1fc:	2a09      	cmp	r2, #9
 800c1fe:	d903      	bls.n	800c208 <_svfiprintf_r+0x1a8>
 800c200:	2b00      	cmp	r3, #0
 800c202:	d0c5      	beq.n	800c190 <_svfiprintf_r+0x130>
 800c204:	9105      	str	r1, [sp, #20]
 800c206:	e7c3      	b.n	800c190 <_svfiprintf_r+0x130>
 800c208:	fb0c 2101 	mla	r1, ip, r1, r2
 800c20c:	4604      	mov	r4, r0
 800c20e:	2301      	movs	r3, #1
 800c210:	e7f0      	b.n	800c1f4 <_svfiprintf_r+0x194>
 800c212:	ab03      	add	r3, sp, #12
 800c214:	9300      	str	r3, [sp, #0]
 800c216:	462a      	mov	r2, r5
 800c218:	4b0f      	ldr	r3, [pc, #60]	; (800c258 <_svfiprintf_r+0x1f8>)
 800c21a:	a904      	add	r1, sp, #16
 800c21c:	4638      	mov	r0, r7
 800c21e:	f7fc fa73 	bl	8008708 <_printf_float>
 800c222:	1c42      	adds	r2, r0, #1
 800c224:	4606      	mov	r6, r0
 800c226:	d1d6      	bne.n	800c1d6 <_svfiprintf_r+0x176>
 800c228:	89ab      	ldrh	r3, [r5, #12]
 800c22a:	065b      	lsls	r3, r3, #25
 800c22c:	f53f af2c 	bmi.w	800c088 <_svfiprintf_r+0x28>
 800c230:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c232:	b01d      	add	sp, #116	; 0x74
 800c234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c238:	ab03      	add	r3, sp, #12
 800c23a:	9300      	str	r3, [sp, #0]
 800c23c:	462a      	mov	r2, r5
 800c23e:	4b06      	ldr	r3, [pc, #24]	; (800c258 <_svfiprintf_r+0x1f8>)
 800c240:	a904      	add	r1, sp, #16
 800c242:	4638      	mov	r0, r7
 800c244:	f7fc fcec 	bl	8008c20 <_printf_i>
 800c248:	e7eb      	b.n	800c222 <_svfiprintf_r+0x1c2>
 800c24a:	bf00      	nop
 800c24c:	0800db2c 	.word	0x0800db2c
 800c250:	0800db36 	.word	0x0800db36
 800c254:	08008709 	.word	0x08008709
 800c258:	0800bfa9 	.word	0x0800bfa9
 800c25c:	0800db32 	.word	0x0800db32

0800c260 <_sungetc_r>:
 800c260:	b538      	push	{r3, r4, r5, lr}
 800c262:	1c4b      	adds	r3, r1, #1
 800c264:	4614      	mov	r4, r2
 800c266:	d103      	bne.n	800c270 <_sungetc_r+0x10>
 800c268:	f04f 35ff 	mov.w	r5, #4294967295
 800c26c:	4628      	mov	r0, r5
 800c26e:	bd38      	pop	{r3, r4, r5, pc}
 800c270:	8993      	ldrh	r3, [r2, #12]
 800c272:	f023 0320 	bic.w	r3, r3, #32
 800c276:	8193      	strh	r3, [r2, #12]
 800c278:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c27a:	6852      	ldr	r2, [r2, #4]
 800c27c:	b2cd      	uxtb	r5, r1
 800c27e:	b18b      	cbz	r3, 800c2a4 <_sungetc_r+0x44>
 800c280:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c282:	4293      	cmp	r3, r2
 800c284:	dd08      	ble.n	800c298 <_sungetc_r+0x38>
 800c286:	6823      	ldr	r3, [r4, #0]
 800c288:	1e5a      	subs	r2, r3, #1
 800c28a:	6022      	str	r2, [r4, #0]
 800c28c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c290:	6863      	ldr	r3, [r4, #4]
 800c292:	3301      	adds	r3, #1
 800c294:	6063      	str	r3, [r4, #4]
 800c296:	e7e9      	b.n	800c26c <_sungetc_r+0xc>
 800c298:	4621      	mov	r1, r4
 800c29a:	f000 fbdd 	bl	800ca58 <__submore>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	d0f1      	beq.n	800c286 <_sungetc_r+0x26>
 800c2a2:	e7e1      	b.n	800c268 <_sungetc_r+0x8>
 800c2a4:	6921      	ldr	r1, [r4, #16]
 800c2a6:	6823      	ldr	r3, [r4, #0]
 800c2a8:	b151      	cbz	r1, 800c2c0 <_sungetc_r+0x60>
 800c2aa:	4299      	cmp	r1, r3
 800c2ac:	d208      	bcs.n	800c2c0 <_sungetc_r+0x60>
 800c2ae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c2b2:	42a9      	cmp	r1, r5
 800c2b4:	d104      	bne.n	800c2c0 <_sungetc_r+0x60>
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	3201      	adds	r2, #1
 800c2ba:	6023      	str	r3, [r4, #0]
 800c2bc:	6062      	str	r2, [r4, #4]
 800c2be:	e7d5      	b.n	800c26c <_sungetc_r+0xc>
 800c2c0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c2c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2c8:	6363      	str	r3, [r4, #52]	; 0x34
 800c2ca:	2303      	movs	r3, #3
 800c2cc:	63a3      	str	r3, [r4, #56]	; 0x38
 800c2ce:	4623      	mov	r3, r4
 800c2d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c2d4:	6023      	str	r3, [r4, #0]
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e7dc      	b.n	800c294 <_sungetc_r+0x34>

0800c2da <__ssrefill_r>:
 800c2da:	b510      	push	{r4, lr}
 800c2dc:	460c      	mov	r4, r1
 800c2de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c2e0:	b169      	cbz	r1, 800c2fe <__ssrefill_r+0x24>
 800c2e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2e6:	4299      	cmp	r1, r3
 800c2e8:	d001      	beq.n	800c2ee <__ssrefill_r+0x14>
 800c2ea:	f7ff fd7d 	bl	800bde8 <_free_r>
 800c2ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2f0:	6063      	str	r3, [r4, #4]
 800c2f2:	2000      	movs	r0, #0
 800c2f4:	6360      	str	r0, [r4, #52]	; 0x34
 800c2f6:	b113      	cbz	r3, 800c2fe <__ssrefill_r+0x24>
 800c2f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c2fa:	6023      	str	r3, [r4, #0]
 800c2fc:	bd10      	pop	{r4, pc}
 800c2fe:	6923      	ldr	r3, [r4, #16]
 800c300:	6023      	str	r3, [r4, #0]
 800c302:	2300      	movs	r3, #0
 800c304:	6063      	str	r3, [r4, #4]
 800c306:	89a3      	ldrh	r3, [r4, #12]
 800c308:	f043 0320 	orr.w	r3, r3, #32
 800c30c:	81a3      	strh	r3, [r4, #12]
 800c30e:	f04f 30ff 	mov.w	r0, #4294967295
 800c312:	e7f3      	b.n	800c2fc <__ssrefill_r+0x22>

0800c314 <__ssvfiscanf_r>:
 800c314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c318:	460c      	mov	r4, r1
 800c31a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c31e:	2100      	movs	r1, #0
 800c320:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c324:	49a6      	ldr	r1, [pc, #664]	; (800c5c0 <__ssvfiscanf_r+0x2ac>)
 800c326:	91a0      	str	r1, [sp, #640]	; 0x280
 800c328:	f10d 0804 	add.w	r8, sp, #4
 800c32c:	49a5      	ldr	r1, [pc, #660]	; (800c5c4 <__ssvfiscanf_r+0x2b0>)
 800c32e:	4fa6      	ldr	r7, [pc, #664]	; (800c5c8 <__ssvfiscanf_r+0x2b4>)
 800c330:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c5cc <__ssvfiscanf_r+0x2b8>
 800c334:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c338:	4606      	mov	r6, r0
 800c33a:	91a1      	str	r1, [sp, #644]	; 0x284
 800c33c:	9300      	str	r3, [sp, #0]
 800c33e:	7813      	ldrb	r3, [r2, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	f000 815a 	beq.w	800c5fa <__ssvfiscanf_r+0x2e6>
 800c346:	5dd9      	ldrb	r1, [r3, r7]
 800c348:	f011 0108 	ands.w	r1, r1, #8
 800c34c:	f102 0501 	add.w	r5, r2, #1
 800c350:	d019      	beq.n	800c386 <__ssvfiscanf_r+0x72>
 800c352:	6863      	ldr	r3, [r4, #4]
 800c354:	2b00      	cmp	r3, #0
 800c356:	dd0f      	ble.n	800c378 <__ssvfiscanf_r+0x64>
 800c358:	6823      	ldr	r3, [r4, #0]
 800c35a:	781a      	ldrb	r2, [r3, #0]
 800c35c:	5cba      	ldrb	r2, [r7, r2]
 800c35e:	0712      	lsls	r2, r2, #28
 800c360:	d401      	bmi.n	800c366 <__ssvfiscanf_r+0x52>
 800c362:	462a      	mov	r2, r5
 800c364:	e7eb      	b.n	800c33e <__ssvfiscanf_r+0x2a>
 800c366:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c368:	3201      	adds	r2, #1
 800c36a:	9245      	str	r2, [sp, #276]	; 0x114
 800c36c:	6862      	ldr	r2, [r4, #4]
 800c36e:	3301      	adds	r3, #1
 800c370:	3a01      	subs	r2, #1
 800c372:	6062      	str	r2, [r4, #4]
 800c374:	6023      	str	r3, [r4, #0]
 800c376:	e7ec      	b.n	800c352 <__ssvfiscanf_r+0x3e>
 800c378:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c37a:	4621      	mov	r1, r4
 800c37c:	4630      	mov	r0, r6
 800c37e:	4798      	blx	r3
 800c380:	2800      	cmp	r0, #0
 800c382:	d0e9      	beq.n	800c358 <__ssvfiscanf_r+0x44>
 800c384:	e7ed      	b.n	800c362 <__ssvfiscanf_r+0x4e>
 800c386:	2b25      	cmp	r3, #37	; 0x25
 800c388:	d012      	beq.n	800c3b0 <__ssvfiscanf_r+0x9c>
 800c38a:	469a      	mov	sl, r3
 800c38c:	6863      	ldr	r3, [r4, #4]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	f340 8091 	ble.w	800c4b6 <__ssvfiscanf_r+0x1a2>
 800c394:	6822      	ldr	r2, [r4, #0]
 800c396:	7813      	ldrb	r3, [r2, #0]
 800c398:	4553      	cmp	r3, sl
 800c39a:	f040 812e 	bne.w	800c5fa <__ssvfiscanf_r+0x2e6>
 800c39e:	6863      	ldr	r3, [r4, #4]
 800c3a0:	3b01      	subs	r3, #1
 800c3a2:	6063      	str	r3, [r4, #4]
 800c3a4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c3a6:	3201      	adds	r2, #1
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	6022      	str	r2, [r4, #0]
 800c3ac:	9345      	str	r3, [sp, #276]	; 0x114
 800c3ae:	e7d8      	b.n	800c362 <__ssvfiscanf_r+0x4e>
 800c3b0:	9141      	str	r1, [sp, #260]	; 0x104
 800c3b2:	9143      	str	r1, [sp, #268]	; 0x10c
 800c3b4:	7853      	ldrb	r3, [r2, #1]
 800c3b6:	2b2a      	cmp	r3, #42	; 0x2a
 800c3b8:	bf02      	ittt	eq
 800c3ba:	2310      	moveq	r3, #16
 800c3bc:	1c95      	addeq	r5, r2, #2
 800c3be:	9341      	streq	r3, [sp, #260]	; 0x104
 800c3c0:	220a      	movs	r2, #10
 800c3c2:	46aa      	mov	sl, r5
 800c3c4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c3c8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c3cc:	2b09      	cmp	r3, #9
 800c3ce:	d91d      	bls.n	800c40c <__ssvfiscanf_r+0xf8>
 800c3d0:	487e      	ldr	r0, [pc, #504]	; (800c5cc <__ssvfiscanf_r+0x2b8>)
 800c3d2:	2203      	movs	r2, #3
 800c3d4:	f7f3 ff4c 	bl	8000270 <memchr>
 800c3d8:	b140      	cbz	r0, 800c3ec <__ssvfiscanf_r+0xd8>
 800c3da:	2301      	movs	r3, #1
 800c3dc:	eba0 0009 	sub.w	r0, r0, r9
 800c3e0:	fa03 f000 	lsl.w	r0, r3, r0
 800c3e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c3e6:	4318      	orrs	r0, r3
 800c3e8:	9041      	str	r0, [sp, #260]	; 0x104
 800c3ea:	4655      	mov	r5, sl
 800c3ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c3f0:	2b78      	cmp	r3, #120	; 0x78
 800c3f2:	d806      	bhi.n	800c402 <__ssvfiscanf_r+0xee>
 800c3f4:	2b57      	cmp	r3, #87	; 0x57
 800c3f6:	d810      	bhi.n	800c41a <__ssvfiscanf_r+0x106>
 800c3f8:	2b25      	cmp	r3, #37	; 0x25
 800c3fa:	d0c6      	beq.n	800c38a <__ssvfiscanf_r+0x76>
 800c3fc:	d856      	bhi.n	800c4ac <__ssvfiscanf_r+0x198>
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d064      	beq.n	800c4cc <__ssvfiscanf_r+0x1b8>
 800c402:	2303      	movs	r3, #3
 800c404:	9347      	str	r3, [sp, #284]	; 0x11c
 800c406:	230a      	movs	r3, #10
 800c408:	9342      	str	r3, [sp, #264]	; 0x108
 800c40a:	e071      	b.n	800c4f0 <__ssvfiscanf_r+0x1dc>
 800c40c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c40e:	fb02 1103 	mla	r1, r2, r3, r1
 800c412:	3930      	subs	r1, #48	; 0x30
 800c414:	9143      	str	r1, [sp, #268]	; 0x10c
 800c416:	4655      	mov	r5, sl
 800c418:	e7d3      	b.n	800c3c2 <__ssvfiscanf_r+0xae>
 800c41a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c41e:	2a20      	cmp	r2, #32
 800c420:	d8ef      	bhi.n	800c402 <__ssvfiscanf_r+0xee>
 800c422:	a101      	add	r1, pc, #4	; (adr r1, 800c428 <__ssvfiscanf_r+0x114>)
 800c424:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c428:	0800c4db 	.word	0x0800c4db
 800c42c:	0800c403 	.word	0x0800c403
 800c430:	0800c403 	.word	0x0800c403
 800c434:	0800c539 	.word	0x0800c539
 800c438:	0800c403 	.word	0x0800c403
 800c43c:	0800c403 	.word	0x0800c403
 800c440:	0800c403 	.word	0x0800c403
 800c444:	0800c403 	.word	0x0800c403
 800c448:	0800c403 	.word	0x0800c403
 800c44c:	0800c403 	.word	0x0800c403
 800c450:	0800c403 	.word	0x0800c403
 800c454:	0800c54f 	.word	0x0800c54f
 800c458:	0800c525 	.word	0x0800c525
 800c45c:	0800c4b3 	.word	0x0800c4b3
 800c460:	0800c4b3 	.word	0x0800c4b3
 800c464:	0800c4b3 	.word	0x0800c4b3
 800c468:	0800c403 	.word	0x0800c403
 800c46c:	0800c529 	.word	0x0800c529
 800c470:	0800c403 	.word	0x0800c403
 800c474:	0800c403 	.word	0x0800c403
 800c478:	0800c403 	.word	0x0800c403
 800c47c:	0800c403 	.word	0x0800c403
 800c480:	0800c55f 	.word	0x0800c55f
 800c484:	0800c531 	.word	0x0800c531
 800c488:	0800c4d3 	.word	0x0800c4d3
 800c48c:	0800c403 	.word	0x0800c403
 800c490:	0800c403 	.word	0x0800c403
 800c494:	0800c55b 	.word	0x0800c55b
 800c498:	0800c403 	.word	0x0800c403
 800c49c:	0800c525 	.word	0x0800c525
 800c4a0:	0800c403 	.word	0x0800c403
 800c4a4:	0800c403 	.word	0x0800c403
 800c4a8:	0800c4db 	.word	0x0800c4db
 800c4ac:	3b45      	subs	r3, #69	; 0x45
 800c4ae:	2b02      	cmp	r3, #2
 800c4b0:	d8a7      	bhi.n	800c402 <__ssvfiscanf_r+0xee>
 800c4b2:	2305      	movs	r3, #5
 800c4b4:	e01b      	b.n	800c4ee <__ssvfiscanf_r+0x1da>
 800c4b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c4b8:	4621      	mov	r1, r4
 800c4ba:	4630      	mov	r0, r6
 800c4bc:	4798      	blx	r3
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	f43f af68 	beq.w	800c394 <__ssvfiscanf_r+0x80>
 800c4c4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	f040 808d 	bne.w	800c5e6 <__ssvfiscanf_r+0x2d2>
 800c4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d0:	e08f      	b.n	800c5f2 <__ssvfiscanf_r+0x2de>
 800c4d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c4d4:	f042 0220 	orr.w	r2, r2, #32
 800c4d8:	9241      	str	r2, [sp, #260]	; 0x104
 800c4da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c4dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c4e0:	9241      	str	r2, [sp, #260]	; 0x104
 800c4e2:	2210      	movs	r2, #16
 800c4e4:	2b6f      	cmp	r3, #111	; 0x6f
 800c4e6:	9242      	str	r2, [sp, #264]	; 0x108
 800c4e8:	bf34      	ite	cc
 800c4ea:	2303      	movcc	r3, #3
 800c4ec:	2304      	movcs	r3, #4
 800c4ee:	9347      	str	r3, [sp, #284]	; 0x11c
 800c4f0:	6863      	ldr	r3, [r4, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	dd42      	ble.n	800c57c <__ssvfiscanf_r+0x268>
 800c4f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c4f8:	0659      	lsls	r1, r3, #25
 800c4fa:	d404      	bmi.n	800c506 <__ssvfiscanf_r+0x1f2>
 800c4fc:	6823      	ldr	r3, [r4, #0]
 800c4fe:	781a      	ldrb	r2, [r3, #0]
 800c500:	5cba      	ldrb	r2, [r7, r2]
 800c502:	0712      	lsls	r2, r2, #28
 800c504:	d441      	bmi.n	800c58a <__ssvfiscanf_r+0x276>
 800c506:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c508:	2b02      	cmp	r3, #2
 800c50a:	dc50      	bgt.n	800c5ae <__ssvfiscanf_r+0x29a>
 800c50c:	466b      	mov	r3, sp
 800c50e:	4622      	mov	r2, r4
 800c510:	a941      	add	r1, sp, #260	; 0x104
 800c512:	4630      	mov	r0, r6
 800c514:	f000 f876 	bl	800c604 <_scanf_chars>
 800c518:	2801      	cmp	r0, #1
 800c51a:	d06e      	beq.n	800c5fa <__ssvfiscanf_r+0x2e6>
 800c51c:	2802      	cmp	r0, #2
 800c51e:	f47f af20 	bne.w	800c362 <__ssvfiscanf_r+0x4e>
 800c522:	e7cf      	b.n	800c4c4 <__ssvfiscanf_r+0x1b0>
 800c524:	220a      	movs	r2, #10
 800c526:	e7dd      	b.n	800c4e4 <__ssvfiscanf_r+0x1d0>
 800c528:	2300      	movs	r3, #0
 800c52a:	9342      	str	r3, [sp, #264]	; 0x108
 800c52c:	2303      	movs	r3, #3
 800c52e:	e7de      	b.n	800c4ee <__ssvfiscanf_r+0x1da>
 800c530:	2308      	movs	r3, #8
 800c532:	9342      	str	r3, [sp, #264]	; 0x108
 800c534:	2304      	movs	r3, #4
 800c536:	e7da      	b.n	800c4ee <__ssvfiscanf_r+0x1da>
 800c538:	4629      	mov	r1, r5
 800c53a:	4640      	mov	r0, r8
 800c53c:	f000 f9e0 	bl	800c900 <__sccl>
 800c540:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c546:	9341      	str	r3, [sp, #260]	; 0x104
 800c548:	4605      	mov	r5, r0
 800c54a:	2301      	movs	r3, #1
 800c54c:	e7cf      	b.n	800c4ee <__ssvfiscanf_r+0x1da>
 800c54e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c554:	9341      	str	r3, [sp, #260]	; 0x104
 800c556:	2300      	movs	r3, #0
 800c558:	e7c9      	b.n	800c4ee <__ssvfiscanf_r+0x1da>
 800c55a:	2302      	movs	r3, #2
 800c55c:	e7c7      	b.n	800c4ee <__ssvfiscanf_r+0x1da>
 800c55e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c560:	06c3      	lsls	r3, r0, #27
 800c562:	f53f aefe 	bmi.w	800c362 <__ssvfiscanf_r+0x4e>
 800c566:	9b00      	ldr	r3, [sp, #0]
 800c568:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c56a:	1d19      	adds	r1, r3, #4
 800c56c:	9100      	str	r1, [sp, #0]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f010 0f01 	tst.w	r0, #1
 800c574:	bf14      	ite	ne
 800c576:	801a      	strhne	r2, [r3, #0]
 800c578:	601a      	streq	r2, [r3, #0]
 800c57a:	e6f2      	b.n	800c362 <__ssvfiscanf_r+0x4e>
 800c57c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c57e:	4621      	mov	r1, r4
 800c580:	4630      	mov	r0, r6
 800c582:	4798      	blx	r3
 800c584:	2800      	cmp	r0, #0
 800c586:	d0b6      	beq.n	800c4f6 <__ssvfiscanf_r+0x1e2>
 800c588:	e79c      	b.n	800c4c4 <__ssvfiscanf_r+0x1b0>
 800c58a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c58c:	3201      	adds	r2, #1
 800c58e:	9245      	str	r2, [sp, #276]	; 0x114
 800c590:	6862      	ldr	r2, [r4, #4]
 800c592:	3a01      	subs	r2, #1
 800c594:	2a00      	cmp	r2, #0
 800c596:	6062      	str	r2, [r4, #4]
 800c598:	dd02      	ble.n	800c5a0 <__ssvfiscanf_r+0x28c>
 800c59a:	3301      	adds	r3, #1
 800c59c:	6023      	str	r3, [r4, #0]
 800c59e:	e7ad      	b.n	800c4fc <__ssvfiscanf_r+0x1e8>
 800c5a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c5a2:	4621      	mov	r1, r4
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	4798      	blx	r3
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	d0a7      	beq.n	800c4fc <__ssvfiscanf_r+0x1e8>
 800c5ac:	e78a      	b.n	800c4c4 <__ssvfiscanf_r+0x1b0>
 800c5ae:	2b04      	cmp	r3, #4
 800c5b0:	dc0e      	bgt.n	800c5d0 <__ssvfiscanf_r+0x2bc>
 800c5b2:	466b      	mov	r3, sp
 800c5b4:	4622      	mov	r2, r4
 800c5b6:	a941      	add	r1, sp, #260	; 0x104
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	f000 f87d 	bl	800c6b8 <_scanf_i>
 800c5be:	e7ab      	b.n	800c518 <__ssvfiscanf_r+0x204>
 800c5c0:	0800c261 	.word	0x0800c261
 800c5c4:	0800c2db 	.word	0x0800c2db
 800c5c8:	0800d7c9 	.word	0x0800d7c9
 800c5cc:	0800db32 	.word	0x0800db32
 800c5d0:	4b0b      	ldr	r3, [pc, #44]	; (800c600 <__ssvfiscanf_r+0x2ec>)
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f43f aec5 	beq.w	800c362 <__ssvfiscanf_r+0x4e>
 800c5d8:	466b      	mov	r3, sp
 800c5da:	4622      	mov	r2, r4
 800c5dc:	a941      	add	r1, sp, #260	; 0x104
 800c5de:	4630      	mov	r0, r6
 800c5e0:	f7fc fc44 	bl	8008e6c <_scanf_float>
 800c5e4:	e798      	b.n	800c518 <__ssvfiscanf_r+0x204>
 800c5e6:	89a3      	ldrh	r3, [r4, #12]
 800c5e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c5ec:	bf18      	it	ne
 800c5ee:	f04f 30ff 	movne.w	r0, #4294967295
 800c5f2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c5f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5fa:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c5fc:	e7f9      	b.n	800c5f2 <__ssvfiscanf_r+0x2de>
 800c5fe:	bf00      	nop
 800c600:	08008e6d 	.word	0x08008e6d

0800c604 <_scanf_chars>:
 800c604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c608:	4615      	mov	r5, r2
 800c60a:	688a      	ldr	r2, [r1, #8]
 800c60c:	4680      	mov	r8, r0
 800c60e:	460c      	mov	r4, r1
 800c610:	b932      	cbnz	r2, 800c620 <_scanf_chars+0x1c>
 800c612:	698a      	ldr	r2, [r1, #24]
 800c614:	2a00      	cmp	r2, #0
 800c616:	bf0c      	ite	eq
 800c618:	2201      	moveq	r2, #1
 800c61a:	f04f 32ff 	movne.w	r2, #4294967295
 800c61e:	608a      	str	r2, [r1, #8]
 800c620:	6822      	ldr	r2, [r4, #0]
 800c622:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c6b4 <_scanf_chars+0xb0>
 800c626:	06d1      	lsls	r1, r2, #27
 800c628:	bf5f      	itttt	pl
 800c62a:	681a      	ldrpl	r2, [r3, #0]
 800c62c:	1d11      	addpl	r1, r2, #4
 800c62e:	6019      	strpl	r1, [r3, #0]
 800c630:	6816      	ldrpl	r6, [r2, #0]
 800c632:	2700      	movs	r7, #0
 800c634:	69a0      	ldr	r0, [r4, #24]
 800c636:	b188      	cbz	r0, 800c65c <_scanf_chars+0x58>
 800c638:	2801      	cmp	r0, #1
 800c63a:	d107      	bne.n	800c64c <_scanf_chars+0x48>
 800c63c:	682a      	ldr	r2, [r5, #0]
 800c63e:	7811      	ldrb	r1, [r2, #0]
 800c640:	6962      	ldr	r2, [r4, #20]
 800c642:	5c52      	ldrb	r2, [r2, r1]
 800c644:	b952      	cbnz	r2, 800c65c <_scanf_chars+0x58>
 800c646:	2f00      	cmp	r7, #0
 800c648:	d031      	beq.n	800c6ae <_scanf_chars+0xaa>
 800c64a:	e022      	b.n	800c692 <_scanf_chars+0x8e>
 800c64c:	2802      	cmp	r0, #2
 800c64e:	d120      	bne.n	800c692 <_scanf_chars+0x8e>
 800c650:	682b      	ldr	r3, [r5, #0]
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c658:	071b      	lsls	r3, r3, #28
 800c65a:	d41a      	bmi.n	800c692 <_scanf_chars+0x8e>
 800c65c:	6823      	ldr	r3, [r4, #0]
 800c65e:	06da      	lsls	r2, r3, #27
 800c660:	bf5e      	ittt	pl
 800c662:	682b      	ldrpl	r3, [r5, #0]
 800c664:	781b      	ldrbpl	r3, [r3, #0]
 800c666:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c66a:	682a      	ldr	r2, [r5, #0]
 800c66c:	686b      	ldr	r3, [r5, #4]
 800c66e:	3201      	adds	r2, #1
 800c670:	602a      	str	r2, [r5, #0]
 800c672:	68a2      	ldr	r2, [r4, #8]
 800c674:	3b01      	subs	r3, #1
 800c676:	3a01      	subs	r2, #1
 800c678:	606b      	str	r3, [r5, #4]
 800c67a:	3701      	adds	r7, #1
 800c67c:	60a2      	str	r2, [r4, #8]
 800c67e:	b142      	cbz	r2, 800c692 <_scanf_chars+0x8e>
 800c680:	2b00      	cmp	r3, #0
 800c682:	dcd7      	bgt.n	800c634 <_scanf_chars+0x30>
 800c684:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c688:	4629      	mov	r1, r5
 800c68a:	4640      	mov	r0, r8
 800c68c:	4798      	blx	r3
 800c68e:	2800      	cmp	r0, #0
 800c690:	d0d0      	beq.n	800c634 <_scanf_chars+0x30>
 800c692:	6823      	ldr	r3, [r4, #0]
 800c694:	f013 0310 	ands.w	r3, r3, #16
 800c698:	d105      	bne.n	800c6a6 <_scanf_chars+0xa2>
 800c69a:	68e2      	ldr	r2, [r4, #12]
 800c69c:	3201      	adds	r2, #1
 800c69e:	60e2      	str	r2, [r4, #12]
 800c6a0:	69a2      	ldr	r2, [r4, #24]
 800c6a2:	b102      	cbz	r2, 800c6a6 <_scanf_chars+0xa2>
 800c6a4:	7033      	strb	r3, [r6, #0]
 800c6a6:	6923      	ldr	r3, [r4, #16]
 800c6a8:	443b      	add	r3, r7
 800c6aa:	6123      	str	r3, [r4, #16]
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6b2:	bf00      	nop
 800c6b4:	0800d7c9 	.word	0x0800d7c9

0800c6b8 <_scanf_i>:
 800c6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6bc:	4698      	mov	r8, r3
 800c6be:	4b76      	ldr	r3, [pc, #472]	; (800c898 <_scanf_i+0x1e0>)
 800c6c0:	460c      	mov	r4, r1
 800c6c2:	4682      	mov	sl, r0
 800c6c4:	4616      	mov	r6, r2
 800c6c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c6ca:	b087      	sub	sp, #28
 800c6cc:	ab03      	add	r3, sp, #12
 800c6ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c6d2:	4b72      	ldr	r3, [pc, #456]	; (800c89c <_scanf_i+0x1e4>)
 800c6d4:	69a1      	ldr	r1, [r4, #24]
 800c6d6:	4a72      	ldr	r2, [pc, #456]	; (800c8a0 <_scanf_i+0x1e8>)
 800c6d8:	2903      	cmp	r1, #3
 800c6da:	bf18      	it	ne
 800c6dc:	461a      	movne	r2, r3
 800c6de:	68a3      	ldr	r3, [r4, #8]
 800c6e0:	9201      	str	r2, [sp, #4]
 800c6e2:	1e5a      	subs	r2, r3, #1
 800c6e4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c6e8:	bf88      	it	hi
 800c6ea:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c6ee:	4627      	mov	r7, r4
 800c6f0:	bf82      	ittt	hi
 800c6f2:	eb03 0905 	addhi.w	r9, r3, r5
 800c6f6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c6fa:	60a3      	strhi	r3, [r4, #8]
 800c6fc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c700:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c704:	bf98      	it	ls
 800c706:	f04f 0900 	movls.w	r9, #0
 800c70a:	6023      	str	r3, [r4, #0]
 800c70c:	463d      	mov	r5, r7
 800c70e:	f04f 0b00 	mov.w	fp, #0
 800c712:	6831      	ldr	r1, [r6, #0]
 800c714:	ab03      	add	r3, sp, #12
 800c716:	7809      	ldrb	r1, [r1, #0]
 800c718:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c71c:	2202      	movs	r2, #2
 800c71e:	f7f3 fda7 	bl	8000270 <memchr>
 800c722:	b328      	cbz	r0, 800c770 <_scanf_i+0xb8>
 800c724:	f1bb 0f01 	cmp.w	fp, #1
 800c728:	d159      	bne.n	800c7de <_scanf_i+0x126>
 800c72a:	6862      	ldr	r2, [r4, #4]
 800c72c:	b92a      	cbnz	r2, 800c73a <_scanf_i+0x82>
 800c72e:	6822      	ldr	r2, [r4, #0]
 800c730:	2308      	movs	r3, #8
 800c732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c736:	6063      	str	r3, [r4, #4]
 800c738:	6022      	str	r2, [r4, #0]
 800c73a:	6822      	ldr	r2, [r4, #0]
 800c73c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c740:	6022      	str	r2, [r4, #0]
 800c742:	68a2      	ldr	r2, [r4, #8]
 800c744:	1e51      	subs	r1, r2, #1
 800c746:	60a1      	str	r1, [r4, #8]
 800c748:	b192      	cbz	r2, 800c770 <_scanf_i+0xb8>
 800c74a:	6832      	ldr	r2, [r6, #0]
 800c74c:	1c51      	adds	r1, r2, #1
 800c74e:	6031      	str	r1, [r6, #0]
 800c750:	7812      	ldrb	r2, [r2, #0]
 800c752:	f805 2b01 	strb.w	r2, [r5], #1
 800c756:	6872      	ldr	r2, [r6, #4]
 800c758:	3a01      	subs	r2, #1
 800c75a:	2a00      	cmp	r2, #0
 800c75c:	6072      	str	r2, [r6, #4]
 800c75e:	dc07      	bgt.n	800c770 <_scanf_i+0xb8>
 800c760:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c764:	4631      	mov	r1, r6
 800c766:	4650      	mov	r0, sl
 800c768:	4790      	blx	r2
 800c76a:	2800      	cmp	r0, #0
 800c76c:	f040 8085 	bne.w	800c87a <_scanf_i+0x1c2>
 800c770:	f10b 0b01 	add.w	fp, fp, #1
 800c774:	f1bb 0f03 	cmp.w	fp, #3
 800c778:	d1cb      	bne.n	800c712 <_scanf_i+0x5a>
 800c77a:	6863      	ldr	r3, [r4, #4]
 800c77c:	b90b      	cbnz	r3, 800c782 <_scanf_i+0xca>
 800c77e:	230a      	movs	r3, #10
 800c780:	6063      	str	r3, [r4, #4]
 800c782:	6863      	ldr	r3, [r4, #4]
 800c784:	4947      	ldr	r1, [pc, #284]	; (800c8a4 <_scanf_i+0x1ec>)
 800c786:	6960      	ldr	r0, [r4, #20]
 800c788:	1ac9      	subs	r1, r1, r3
 800c78a:	f000 f8b9 	bl	800c900 <__sccl>
 800c78e:	f04f 0b00 	mov.w	fp, #0
 800c792:	68a3      	ldr	r3, [r4, #8]
 800c794:	6822      	ldr	r2, [r4, #0]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d03d      	beq.n	800c816 <_scanf_i+0x15e>
 800c79a:	6831      	ldr	r1, [r6, #0]
 800c79c:	6960      	ldr	r0, [r4, #20]
 800c79e:	f891 c000 	ldrb.w	ip, [r1]
 800c7a2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	d035      	beq.n	800c816 <_scanf_i+0x15e>
 800c7aa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c7ae:	d124      	bne.n	800c7fa <_scanf_i+0x142>
 800c7b0:	0510      	lsls	r0, r2, #20
 800c7b2:	d522      	bpl.n	800c7fa <_scanf_i+0x142>
 800c7b4:	f10b 0b01 	add.w	fp, fp, #1
 800c7b8:	f1b9 0f00 	cmp.w	r9, #0
 800c7bc:	d003      	beq.n	800c7c6 <_scanf_i+0x10e>
 800c7be:	3301      	adds	r3, #1
 800c7c0:	f109 39ff 	add.w	r9, r9, #4294967295
 800c7c4:	60a3      	str	r3, [r4, #8]
 800c7c6:	6873      	ldr	r3, [r6, #4]
 800c7c8:	3b01      	subs	r3, #1
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	6073      	str	r3, [r6, #4]
 800c7ce:	dd1b      	ble.n	800c808 <_scanf_i+0x150>
 800c7d0:	6833      	ldr	r3, [r6, #0]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	6033      	str	r3, [r6, #0]
 800c7d6:	68a3      	ldr	r3, [r4, #8]
 800c7d8:	3b01      	subs	r3, #1
 800c7da:	60a3      	str	r3, [r4, #8]
 800c7dc:	e7d9      	b.n	800c792 <_scanf_i+0xda>
 800c7de:	f1bb 0f02 	cmp.w	fp, #2
 800c7e2:	d1ae      	bne.n	800c742 <_scanf_i+0x8a>
 800c7e4:	6822      	ldr	r2, [r4, #0]
 800c7e6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c7ea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c7ee:	d1bf      	bne.n	800c770 <_scanf_i+0xb8>
 800c7f0:	2310      	movs	r3, #16
 800c7f2:	6063      	str	r3, [r4, #4]
 800c7f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c7f8:	e7a2      	b.n	800c740 <_scanf_i+0x88>
 800c7fa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c7fe:	6022      	str	r2, [r4, #0]
 800c800:	780b      	ldrb	r3, [r1, #0]
 800c802:	f805 3b01 	strb.w	r3, [r5], #1
 800c806:	e7de      	b.n	800c7c6 <_scanf_i+0x10e>
 800c808:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c80c:	4631      	mov	r1, r6
 800c80e:	4650      	mov	r0, sl
 800c810:	4798      	blx	r3
 800c812:	2800      	cmp	r0, #0
 800c814:	d0df      	beq.n	800c7d6 <_scanf_i+0x11e>
 800c816:	6823      	ldr	r3, [r4, #0]
 800c818:	05db      	lsls	r3, r3, #23
 800c81a:	d50d      	bpl.n	800c838 <_scanf_i+0x180>
 800c81c:	42bd      	cmp	r5, r7
 800c81e:	d909      	bls.n	800c834 <_scanf_i+0x17c>
 800c820:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c824:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c828:	4632      	mov	r2, r6
 800c82a:	4650      	mov	r0, sl
 800c82c:	4798      	blx	r3
 800c82e:	f105 39ff 	add.w	r9, r5, #4294967295
 800c832:	464d      	mov	r5, r9
 800c834:	42bd      	cmp	r5, r7
 800c836:	d02d      	beq.n	800c894 <_scanf_i+0x1dc>
 800c838:	6822      	ldr	r2, [r4, #0]
 800c83a:	f012 0210 	ands.w	r2, r2, #16
 800c83e:	d113      	bne.n	800c868 <_scanf_i+0x1b0>
 800c840:	702a      	strb	r2, [r5, #0]
 800c842:	6863      	ldr	r3, [r4, #4]
 800c844:	9e01      	ldr	r6, [sp, #4]
 800c846:	4639      	mov	r1, r7
 800c848:	4650      	mov	r0, sl
 800c84a:	47b0      	blx	r6
 800c84c:	6821      	ldr	r1, [r4, #0]
 800c84e:	f8d8 3000 	ldr.w	r3, [r8]
 800c852:	f011 0f20 	tst.w	r1, #32
 800c856:	d013      	beq.n	800c880 <_scanf_i+0x1c8>
 800c858:	1d1a      	adds	r2, r3, #4
 800c85a:	f8c8 2000 	str.w	r2, [r8]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	6018      	str	r0, [r3, #0]
 800c862:	68e3      	ldr	r3, [r4, #12]
 800c864:	3301      	adds	r3, #1
 800c866:	60e3      	str	r3, [r4, #12]
 800c868:	1bed      	subs	r5, r5, r7
 800c86a:	44ab      	add	fp, r5
 800c86c:	6925      	ldr	r5, [r4, #16]
 800c86e:	445d      	add	r5, fp
 800c870:	6125      	str	r5, [r4, #16]
 800c872:	2000      	movs	r0, #0
 800c874:	b007      	add	sp, #28
 800c876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c87a:	f04f 0b00 	mov.w	fp, #0
 800c87e:	e7ca      	b.n	800c816 <_scanf_i+0x15e>
 800c880:	1d1a      	adds	r2, r3, #4
 800c882:	f8c8 2000 	str.w	r2, [r8]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f011 0f01 	tst.w	r1, #1
 800c88c:	bf14      	ite	ne
 800c88e:	8018      	strhne	r0, [r3, #0]
 800c890:	6018      	streq	r0, [r3, #0]
 800c892:	e7e6      	b.n	800c862 <_scanf_i+0x1aa>
 800c894:	2001      	movs	r0, #1
 800c896:	e7ed      	b.n	800c874 <_scanf_i+0x1bc>
 800c898:	0800d70c 	.word	0x0800d70c
 800c89c:	0800ca55 	.word	0x0800ca55
 800c8a0:	0800a0a5 	.word	0x0800a0a5
 800c8a4:	0800db56 	.word	0x0800db56

0800c8a8 <_read_r>:
 800c8a8:	b538      	push	{r3, r4, r5, lr}
 800c8aa:	4d07      	ldr	r5, [pc, #28]	; (800c8c8 <_read_r+0x20>)
 800c8ac:	4604      	mov	r4, r0
 800c8ae:	4608      	mov	r0, r1
 800c8b0:	4611      	mov	r1, r2
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	602a      	str	r2, [r5, #0]
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	f7f5 fb6a 	bl	8001f90 <_read>
 800c8bc:	1c43      	adds	r3, r0, #1
 800c8be:	d102      	bne.n	800c8c6 <_read_r+0x1e>
 800c8c0:	682b      	ldr	r3, [r5, #0]
 800c8c2:	b103      	cbz	r3, 800c8c6 <_read_r+0x1e>
 800c8c4:	6023      	str	r3, [r4, #0]
 800c8c6:	bd38      	pop	{r3, r4, r5, pc}
 800c8c8:	200008c0 	.word	0x200008c0
 800c8cc:	00000000 	.word	0x00000000

0800c8d0 <nan>:
 800c8d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c8d8 <nan+0x8>
 800c8d4:	4770      	bx	lr
 800c8d6:	bf00      	nop
 800c8d8:	00000000 	.word	0x00000000
 800c8dc:	7ff80000 	.word	0x7ff80000

0800c8e0 <_sbrk_r>:
 800c8e0:	b538      	push	{r3, r4, r5, lr}
 800c8e2:	4d06      	ldr	r5, [pc, #24]	; (800c8fc <_sbrk_r+0x1c>)
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	4608      	mov	r0, r1
 800c8ea:	602b      	str	r3, [r5, #0]
 800c8ec:	f7f5 fbbe 	bl	800206c <_sbrk>
 800c8f0:	1c43      	adds	r3, r0, #1
 800c8f2:	d102      	bne.n	800c8fa <_sbrk_r+0x1a>
 800c8f4:	682b      	ldr	r3, [r5, #0]
 800c8f6:	b103      	cbz	r3, 800c8fa <_sbrk_r+0x1a>
 800c8f8:	6023      	str	r3, [r4, #0]
 800c8fa:	bd38      	pop	{r3, r4, r5, pc}
 800c8fc:	200008c0 	.word	0x200008c0

0800c900 <__sccl>:
 800c900:	b570      	push	{r4, r5, r6, lr}
 800c902:	780b      	ldrb	r3, [r1, #0]
 800c904:	4604      	mov	r4, r0
 800c906:	2b5e      	cmp	r3, #94	; 0x5e
 800c908:	bf0b      	itete	eq
 800c90a:	784b      	ldrbeq	r3, [r1, #1]
 800c90c:	1c48      	addne	r0, r1, #1
 800c90e:	1c88      	addeq	r0, r1, #2
 800c910:	2200      	movne	r2, #0
 800c912:	bf08      	it	eq
 800c914:	2201      	moveq	r2, #1
 800c916:	1e61      	subs	r1, r4, #1
 800c918:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c91c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c920:	42a9      	cmp	r1, r5
 800c922:	d1fb      	bne.n	800c91c <__sccl+0x1c>
 800c924:	b90b      	cbnz	r3, 800c92a <__sccl+0x2a>
 800c926:	3801      	subs	r0, #1
 800c928:	bd70      	pop	{r4, r5, r6, pc}
 800c92a:	f082 0201 	eor.w	r2, r2, #1
 800c92e:	54e2      	strb	r2, [r4, r3]
 800c930:	4605      	mov	r5, r0
 800c932:	4628      	mov	r0, r5
 800c934:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c938:	292d      	cmp	r1, #45	; 0x2d
 800c93a:	d006      	beq.n	800c94a <__sccl+0x4a>
 800c93c:	295d      	cmp	r1, #93	; 0x5d
 800c93e:	d0f3      	beq.n	800c928 <__sccl+0x28>
 800c940:	b909      	cbnz	r1, 800c946 <__sccl+0x46>
 800c942:	4628      	mov	r0, r5
 800c944:	e7f0      	b.n	800c928 <__sccl+0x28>
 800c946:	460b      	mov	r3, r1
 800c948:	e7f1      	b.n	800c92e <__sccl+0x2e>
 800c94a:	786e      	ldrb	r6, [r5, #1]
 800c94c:	2e5d      	cmp	r6, #93	; 0x5d
 800c94e:	d0fa      	beq.n	800c946 <__sccl+0x46>
 800c950:	42b3      	cmp	r3, r6
 800c952:	dcf8      	bgt.n	800c946 <__sccl+0x46>
 800c954:	3502      	adds	r5, #2
 800c956:	4619      	mov	r1, r3
 800c958:	3101      	adds	r1, #1
 800c95a:	428e      	cmp	r6, r1
 800c95c:	5462      	strb	r2, [r4, r1]
 800c95e:	dcfb      	bgt.n	800c958 <__sccl+0x58>
 800c960:	1af1      	subs	r1, r6, r3
 800c962:	3901      	subs	r1, #1
 800c964:	1c58      	adds	r0, r3, #1
 800c966:	42b3      	cmp	r3, r6
 800c968:	bfa8      	it	ge
 800c96a:	2100      	movge	r1, #0
 800c96c:	1843      	adds	r3, r0, r1
 800c96e:	e7e0      	b.n	800c932 <__sccl+0x32>

0800c970 <_strtoul_l.constprop.0>:
 800c970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c974:	4f36      	ldr	r7, [pc, #216]	; (800ca50 <_strtoul_l.constprop.0+0xe0>)
 800c976:	4686      	mov	lr, r0
 800c978:	460d      	mov	r5, r1
 800c97a:	4628      	mov	r0, r5
 800c97c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c980:	5de6      	ldrb	r6, [r4, r7]
 800c982:	f016 0608 	ands.w	r6, r6, #8
 800c986:	d1f8      	bne.n	800c97a <_strtoul_l.constprop.0+0xa>
 800c988:	2c2d      	cmp	r4, #45	; 0x2d
 800c98a:	d12f      	bne.n	800c9ec <_strtoul_l.constprop.0+0x7c>
 800c98c:	782c      	ldrb	r4, [r5, #0]
 800c98e:	2601      	movs	r6, #1
 800c990:	1c85      	adds	r5, r0, #2
 800c992:	2b00      	cmp	r3, #0
 800c994:	d057      	beq.n	800ca46 <_strtoul_l.constprop.0+0xd6>
 800c996:	2b10      	cmp	r3, #16
 800c998:	d109      	bne.n	800c9ae <_strtoul_l.constprop.0+0x3e>
 800c99a:	2c30      	cmp	r4, #48	; 0x30
 800c99c:	d107      	bne.n	800c9ae <_strtoul_l.constprop.0+0x3e>
 800c99e:	7828      	ldrb	r0, [r5, #0]
 800c9a0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c9a4:	2858      	cmp	r0, #88	; 0x58
 800c9a6:	d149      	bne.n	800ca3c <_strtoul_l.constprop.0+0xcc>
 800c9a8:	786c      	ldrb	r4, [r5, #1]
 800c9aa:	2310      	movs	r3, #16
 800c9ac:	3502      	adds	r5, #2
 800c9ae:	f04f 38ff 	mov.w	r8, #4294967295
 800c9b2:	2700      	movs	r7, #0
 800c9b4:	fbb8 f8f3 	udiv	r8, r8, r3
 800c9b8:	fb03 f908 	mul.w	r9, r3, r8
 800c9bc:	ea6f 0909 	mvn.w	r9, r9
 800c9c0:	4638      	mov	r0, r7
 800c9c2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c9c6:	f1bc 0f09 	cmp.w	ip, #9
 800c9ca:	d814      	bhi.n	800c9f6 <_strtoul_l.constprop.0+0x86>
 800c9cc:	4664      	mov	r4, ip
 800c9ce:	42a3      	cmp	r3, r4
 800c9d0:	dd22      	ble.n	800ca18 <_strtoul_l.constprop.0+0xa8>
 800c9d2:	2f00      	cmp	r7, #0
 800c9d4:	db1d      	blt.n	800ca12 <_strtoul_l.constprop.0+0xa2>
 800c9d6:	4580      	cmp	r8, r0
 800c9d8:	d31b      	bcc.n	800ca12 <_strtoul_l.constprop.0+0xa2>
 800c9da:	d101      	bne.n	800c9e0 <_strtoul_l.constprop.0+0x70>
 800c9dc:	45a1      	cmp	r9, r4
 800c9de:	db18      	blt.n	800ca12 <_strtoul_l.constprop.0+0xa2>
 800c9e0:	fb00 4003 	mla	r0, r0, r3, r4
 800c9e4:	2701      	movs	r7, #1
 800c9e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9ea:	e7ea      	b.n	800c9c2 <_strtoul_l.constprop.0+0x52>
 800c9ec:	2c2b      	cmp	r4, #43	; 0x2b
 800c9ee:	bf04      	itt	eq
 800c9f0:	782c      	ldrbeq	r4, [r5, #0]
 800c9f2:	1c85      	addeq	r5, r0, #2
 800c9f4:	e7cd      	b.n	800c992 <_strtoul_l.constprop.0+0x22>
 800c9f6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c9fa:	f1bc 0f19 	cmp.w	ip, #25
 800c9fe:	d801      	bhi.n	800ca04 <_strtoul_l.constprop.0+0x94>
 800ca00:	3c37      	subs	r4, #55	; 0x37
 800ca02:	e7e4      	b.n	800c9ce <_strtoul_l.constprop.0+0x5e>
 800ca04:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ca08:	f1bc 0f19 	cmp.w	ip, #25
 800ca0c:	d804      	bhi.n	800ca18 <_strtoul_l.constprop.0+0xa8>
 800ca0e:	3c57      	subs	r4, #87	; 0x57
 800ca10:	e7dd      	b.n	800c9ce <_strtoul_l.constprop.0+0x5e>
 800ca12:	f04f 37ff 	mov.w	r7, #4294967295
 800ca16:	e7e6      	b.n	800c9e6 <_strtoul_l.constprop.0+0x76>
 800ca18:	2f00      	cmp	r7, #0
 800ca1a:	da07      	bge.n	800ca2c <_strtoul_l.constprop.0+0xbc>
 800ca1c:	2322      	movs	r3, #34	; 0x22
 800ca1e:	f8ce 3000 	str.w	r3, [lr]
 800ca22:	f04f 30ff 	mov.w	r0, #4294967295
 800ca26:	b932      	cbnz	r2, 800ca36 <_strtoul_l.constprop.0+0xc6>
 800ca28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca2c:	b106      	cbz	r6, 800ca30 <_strtoul_l.constprop.0+0xc0>
 800ca2e:	4240      	negs	r0, r0
 800ca30:	2a00      	cmp	r2, #0
 800ca32:	d0f9      	beq.n	800ca28 <_strtoul_l.constprop.0+0xb8>
 800ca34:	b107      	cbz	r7, 800ca38 <_strtoul_l.constprop.0+0xc8>
 800ca36:	1e69      	subs	r1, r5, #1
 800ca38:	6011      	str	r1, [r2, #0]
 800ca3a:	e7f5      	b.n	800ca28 <_strtoul_l.constprop.0+0xb8>
 800ca3c:	2430      	movs	r4, #48	; 0x30
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d1b5      	bne.n	800c9ae <_strtoul_l.constprop.0+0x3e>
 800ca42:	2308      	movs	r3, #8
 800ca44:	e7b3      	b.n	800c9ae <_strtoul_l.constprop.0+0x3e>
 800ca46:	2c30      	cmp	r4, #48	; 0x30
 800ca48:	d0a9      	beq.n	800c99e <_strtoul_l.constprop.0+0x2e>
 800ca4a:	230a      	movs	r3, #10
 800ca4c:	e7af      	b.n	800c9ae <_strtoul_l.constprop.0+0x3e>
 800ca4e:	bf00      	nop
 800ca50:	0800d7c9 	.word	0x0800d7c9

0800ca54 <_strtoul_r>:
 800ca54:	f7ff bf8c 	b.w	800c970 <_strtoul_l.constprop.0>

0800ca58 <__submore>:
 800ca58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca5c:	460c      	mov	r4, r1
 800ca5e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ca60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca64:	4299      	cmp	r1, r3
 800ca66:	d11d      	bne.n	800caa4 <__submore+0x4c>
 800ca68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ca6c:	f7ff fa28 	bl	800bec0 <_malloc_r>
 800ca70:	b918      	cbnz	r0, 800ca7a <__submore+0x22>
 800ca72:	f04f 30ff 	mov.w	r0, #4294967295
 800ca76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca7e:	63a3      	str	r3, [r4, #56]	; 0x38
 800ca80:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ca84:	6360      	str	r0, [r4, #52]	; 0x34
 800ca86:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ca8a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ca8e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ca92:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ca96:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ca9a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ca9e:	6020      	str	r0, [r4, #0]
 800caa0:	2000      	movs	r0, #0
 800caa2:	e7e8      	b.n	800ca76 <__submore+0x1e>
 800caa4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800caa6:	0077      	lsls	r7, r6, #1
 800caa8:	463a      	mov	r2, r7
 800caaa:	f000 fa2d 	bl	800cf08 <_realloc_r>
 800caae:	4605      	mov	r5, r0
 800cab0:	2800      	cmp	r0, #0
 800cab2:	d0de      	beq.n	800ca72 <__submore+0x1a>
 800cab4:	eb00 0806 	add.w	r8, r0, r6
 800cab8:	4601      	mov	r1, r0
 800caba:	4632      	mov	r2, r6
 800cabc:	4640      	mov	r0, r8
 800cabe:	f7fe fcb1 	bl	800b424 <memcpy>
 800cac2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cac6:	f8c4 8000 	str.w	r8, [r4]
 800caca:	e7e9      	b.n	800caa0 <__submore+0x48>

0800cacc <__ascii_wctomb>:
 800cacc:	b149      	cbz	r1, 800cae2 <__ascii_wctomb+0x16>
 800cace:	2aff      	cmp	r2, #255	; 0xff
 800cad0:	bf85      	ittet	hi
 800cad2:	238a      	movhi	r3, #138	; 0x8a
 800cad4:	6003      	strhi	r3, [r0, #0]
 800cad6:	700a      	strbls	r2, [r1, #0]
 800cad8:	f04f 30ff 	movhi.w	r0, #4294967295
 800cadc:	bf98      	it	ls
 800cade:	2001      	movls	r0, #1
 800cae0:	4770      	bx	lr
 800cae2:	4608      	mov	r0, r1
 800cae4:	4770      	bx	lr
	...

0800cae8 <__assert_func>:
 800cae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800caea:	4614      	mov	r4, r2
 800caec:	461a      	mov	r2, r3
 800caee:	4b09      	ldr	r3, [pc, #36]	; (800cb14 <__assert_func+0x2c>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4605      	mov	r5, r0
 800caf4:	68d8      	ldr	r0, [r3, #12]
 800caf6:	b14c      	cbz	r4, 800cb0c <__assert_func+0x24>
 800caf8:	4b07      	ldr	r3, [pc, #28]	; (800cb18 <__assert_func+0x30>)
 800cafa:	9100      	str	r1, [sp, #0]
 800cafc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb00:	4906      	ldr	r1, [pc, #24]	; (800cb1c <__assert_func+0x34>)
 800cb02:	462b      	mov	r3, r5
 800cb04:	f000 f9a6 	bl	800ce54 <fiprintf>
 800cb08:	f000 fc46 	bl	800d398 <abort>
 800cb0c:	4b04      	ldr	r3, [pc, #16]	; (800cb20 <__assert_func+0x38>)
 800cb0e:	461c      	mov	r4, r3
 800cb10:	e7f3      	b.n	800cafa <__assert_func+0x12>
 800cb12:	bf00      	nop
 800cb14:	2000004c 	.word	0x2000004c
 800cb18:	0800db58 	.word	0x0800db58
 800cb1c:	0800db65 	.word	0x0800db65
 800cb20:	0800db93 	.word	0x0800db93

0800cb24 <__sflush_r>:
 800cb24:	898a      	ldrh	r2, [r1, #12]
 800cb26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb2a:	4605      	mov	r5, r0
 800cb2c:	0710      	lsls	r0, r2, #28
 800cb2e:	460c      	mov	r4, r1
 800cb30:	d458      	bmi.n	800cbe4 <__sflush_r+0xc0>
 800cb32:	684b      	ldr	r3, [r1, #4]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	dc05      	bgt.n	800cb44 <__sflush_r+0x20>
 800cb38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	dc02      	bgt.n	800cb44 <__sflush_r+0x20>
 800cb3e:	2000      	movs	r0, #0
 800cb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb46:	2e00      	cmp	r6, #0
 800cb48:	d0f9      	beq.n	800cb3e <__sflush_r+0x1a>
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb50:	682f      	ldr	r7, [r5, #0]
 800cb52:	602b      	str	r3, [r5, #0]
 800cb54:	d032      	beq.n	800cbbc <__sflush_r+0x98>
 800cb56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb58:	89a3      	ldrh	r3, [r4, #12]
 800cb5a:	075a      	lsls	r2, r3, #29
 800cb5c:	d505      	bpl.n	800cb6a <__sflush_r+0x46>
 800cb5e:	6863      	ldr	r3, [r4, #4]
 800cb60:	1ac0      	subs	r0, r0, r3
 800cb62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb64:	b10b      	cbz	r3, 800cb6a <__sflush_r+0x46>
 800cb66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb68:	1ac0      	subs	r0, r0, r3
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	4602      	mov	r2, r0
 800cb6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb70:	6a21      	ldr	r1, [r4, #32]
 800cb72:	4628      	mov	r0, r5
 800cb74:	47b0      	blx	r6
 800cb76:	1c43      	adds	r3, r0, #1
 800cb78:	89a3      	ldrh	r3, [r4, #12]
 800cb7a:	d106      	bne.n	800cb8a <__sflush_r+0x66>
 800cb7c:	6829      	ldr	r1, [r5, #0]
 800cb7e:	291d      	cmp	r1, #29
 800cb80:	d82c      	bhi.n	800cbdc <__sflush_r+0xb8>
 800cb82:	4a2a      	ldr	r2, [pc, #168]	; (800cc2c <__sflush_r+0x108>)
 800cb84:	40ca      	lsrs	r2, r1
 800cb86:	07d6      	lsls	r6, r2, #31
 800cb88:	d528      	bpl.n	800cbdc <__sflush_r+0xb8>
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	6062      	str	r2, [r4, #4]
 800cb8e:	04d9      	lsls	r1, r3, #19
 800cb90:	6922      	ldr	r2, [r4, #16]
 800cb92:	6022      	str	r2, [r4, #0]
 800cb94:	d504      	bpl.n	800cba0 <__sflush_r+0x7c>
 800cb96:	1c42      	adds	r2, r0, #1
 800cb98:	d101      	bne.n	800cb9e <__sflush_r+0x7a>
 800cb9a:	682b      	ldr	r3, [r5, #0]
 800cb9c:	b903      	cbnz	r3, 800cba0 <__sflush_r+0x7c>
 800cb9e:	6560      	str	r0, [r4, #84]	; 0x54
 800cba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cba2:	602f      	str	r7, [r5, #0]
 800cba4:	2900      	cmp	r1, #0
 800cba6:	d0ca      	beq.n	800cb3e <__sflush_r+0x1a>
 800cba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbac:	4299      	cmp	r1, r3
 800cbae:	d002      	beq.n	800cbb6 <__sflush_r+0x92>
 800cbb0:	4628      	mov	r0, r5
 800cbb2:	f7ff f919 	bl	800bde8 <_free_r>
 800cbb6:	2000      	movs	r0, #0
 800cbb8:	6360      	str	r0, [r4, #52]	; 0x34
 800cbba:	e7c1      	b.n	800cb40 <__sflush_r+0x1c>
 800cbbc:	6a21      	ldr	r1, [r4, #32]
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	47b0      	blx	r6
 800cbc4:	1c41      	adds	r1, r0, #1
 800cbc6:	d1c7      	bne.n	800cb58 <__sflush_r+0x34>
 800cbc8:	682b      	ldr	r3, [r5, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d0c4      	beq.n	800cb58 <__sflush_r+0x34>
 800cbce:	2b1d      	cmp	r3, #29
 800cbd0:	d001      	beq.n	800cbd6 <__sflush_r+0xb2>
 800cbd2:	2b16      	cmp	r3, #22
 800cbd4:	d101      	bne.n	800cbda <__sflush_r+0xb6>
 800cbd6:	602f      	str	r7, [r5, #0]
 800cbd8:	e7b1      	b.n	800cb3e <__sflush_r+0x1a>
 800cbda:	89a3      	ldrh	r3, [r4, #12]
 800cbdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbe0:	81a3      	strh	r3, [r4, #12]
 800cbe2:	e7ad      	b.n	800cb40 <__sflush_r+0x1c>
 800cbe4:	690f      	ldr	r7, [r1, #16]
 800cbe6:	2f00      	cmp	r7, #0
 800cbe8:	d0a9      	beq.n	800cb3e <__sflush_r+0x1a>
 800cbea:	0793      	lsls	r3, r2, #30
 800cbec:	680e      	ldr	r6, [r1, #0]
 800cbee:	bf08      	it	eq
 800cbf0:	694b      	ldreq	r3, [r1, #20]
 800cbf2:	600f      	str	r7, [r1, #0]
 800cbf4:	bf18      	it	ne
 800cbf6:	2300      	movne	r3, #0
 800cbf8:	eba6 0807 	sub.w	r8, r6, r7
 800cbfc:	608b      	str	r3, [r1, #8]
 800cbfe:	f1b8 0f00 	cmp.w	r8, #0
 800cc02:	dd9c      	ble.n	800cb3e <__sflush_r+0x1a>
 800cc04:	6a21      	ldr	r1, [r4, #32]
 800cc06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc08:	4643      	mov	r3, r8
 800cc0a:	463a      	mov	r2, r7
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	47b0      	blx	r6
 800cc10:	2800      	cmp	r0, #0
 800cc12:	dc06      	bgt.n	800cc22 <__sflush_r+0xfe>
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc1a:	81a3      	strh	r3, [r4, #12]
 800cc1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc20:	e78e      	b.n	800cb40 <__sflush_r+0x1c>
 800cc22:	4407      	add	r7, r0
 800cc24:	eba8 0800 	sub.w	r8, r8, r0
 800cc28:	e7e9      	b.n	800cbfe <__sflush_r+0xda>
 800cc2a:	bf00      	nop
 800cc2c:	20400001 	.word	0x20400001

0800cc30 <_fflush_r>:
 800cc30:	b538      	push	{r3, r4, r5, lr}
 800cc32:	690b      	ldr	r3, [r1, #16]
 800cc34:	4605      	mov	r5, r0
 800cc36:	460c      	mov	r4, r1
 800cc38:	b913      	cbnz	r3, 800cc40 <_fflush_r+0x10>
 800cc3a:	2500      	movs	r5, #0
 800cc3c:	4628      	mov	r0, r5
 800cc3e:	bd38      	pop	{r3, r4, r5, pc}
 800cc40:	b118      	cbz	r0, 800cc4a <_fflush_r+0x1a>
 800cc42:	6983      	ldr	r3, [r0, #24]
 800cc44:	b90b      	cbnz	r3, 800cc4a <_fflush_r+0x1a>
 800cc46:	f000 f887 	bl	800cd58 <__sinit>
 800cc4a:	4b14      	ldr	r3, [pc, #80]	; (800cc9c <_fflush_r+0x6c>)
 800cc4c:	429c      	cmp	r4, r3
 800cc4e:	d11b      	bne.n	800cc88 <_fflush_r+0x58>
 800cc50:	686c      	ldr	r4, [r5, #4]
 800cc52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d0ef      	beq.n	800cc3a <_fflush_r+0xa>
 800cc5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc5c:	07d0      	lsls	r0, r2, #31
 800cc5e:	d404      	bmi.n	800cc6a <_fflush_r+0x3a>
 800cc60:	0599      	lsls	r1, r3, #22
 800cc62:	d402      	bmi.n	800cc6a <_fflush_r+0x3a>
 800cc64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc66:	f000 f927 	bl	800ceb8 <__retarget_lock_acquire_recursive>
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	4621      	mov	r1, r4
 800cc6e:	f7ff ff59 	bl	800cb24 <__sflush_r>
 800cc72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc74:	07da      	lsls	r2, r3, #31
 800cc76:	4605      	mov	r5, r0
 800cc78:	d4e0      	bmi.n	800cc3c <_fflush_r+0xc>
 800cc7a:	89a3      	ldrh	r3, [r4, #12]
 800cc7c:	059b      	lsls	r3, r3, #22
 800cc7e:	d4dd      	bmi.n	800cc3c <_fflush_r+0xc>
 800cc80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc82:	f000 f91a 	bl	800ceba <__retarget_lock_release_recursive>
 800cc86:	e7d9      	b.n	800cc3c <_fflush_r+0xc>
 800cc88:	4b05      	ldr	r3, [pc, #20]	; (800cca0 <_fflush_r+0x70>)
 800cc8a:	429c      	cmp	r4, r3
 800cc8c:	d101      	bne.n	800cc92 <_fflush_r+0x62>
 800cc8e:	68ac      	ldr	r4, [r5, #8]
 800cc90:	e7df      	b.n	800cc52 <_fflush_r+0x22>
 800cc92:	4b04      	ldr	r3, [pc, #16]	; (800cca4 <_fflush_r+0x74>)
 800cc94:	429c      	cmp	r4, r3
 800cc96:	bf08      	it	eq
 800cc98:	68ec      	ldreq	r4, [r5, #12]
 800cc9a:	e7da      	b.n	800cc52 <_fflush_r+0x22>
 800cc9c:	0800dbb4 	.word	0x0800dbb4
 800cca0:	0800dbd4 	.word	0x0800dbd4
 800cca4:	0800db94 	.word	0x0800db94

0800cca8 <std>:
 800cca8:	2300      	movs	r3, #0
 800ccaa:	b510      	push	{r4, lr}
 800ccac:	4604      	mov	r4, r0
 800ccae:	e9c0 3300 	strd	r3, r3, [r0]
 800ccb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ccb6:	6083      	str	r3, [r0, #8]
 800ccb8:	8181      	strh	r1, [r0, #12]
 800ccba:	6643      	str	r3, [r0, #100]	; 0x64
 800ccbc:	81c2      	strh	r2, [r0, #14]
 800ccbe:	6183      	str	r3, [r0, #24]
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	2208      	movs	r2, #8
 800ccc4:	305c      	adds	r0, #92	; 0x5c
 800ccc6:	f7fb fc87 	bl	80085d8 <memset>
 800ccca:	4b05      	ldr	r3, [pc, #20]	; (800cce0 <std+0x38>)
 800cccc:	6263      	str	r3, [r4, #36]	; 0x24
 800ccce:	4b05      	ldr	r3, [pc, #20]	; (800cce4 <std+0x3c>)
 800ccd0:	62a3      	str	r3, [r4, #40]	; 0x28
 800ccd2:	4b05      	ldr	r3, [pc, #20]	; (800cce8 <std+0x40>)
 800ccd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ccd6:	4b05      	ldr	r3, [pc, #20]	; (800ccec <std+0x44>)
 800ccd8:	6224      	str	r4, [r4, #32]
 800ccda:	6323      	str	r3, [r4, #48]	; 0x30
 800ccdc:	bd10      	pop	{r4, pc}
 800ccde:	bf00      	nop
 800cce0:	0800931d 	.word	0x0800931d
 800cce4:	08009343 	.word	0x08009343
 800cce8:	0800937b 	.word	0x0800937b
 800ccec:	0800939f 	.word	0x0800939f

0800ccf0 <_cleanup_r>:
 800ccf0:	4901      	ldr	r1, [pc, #4]	; (800ccf8 <_cleanup_r+0x8>)
 800ccf2:	f000 b8c1 	b.w	800ce78 <_fwalk_reent>
 800ccf6:	bf00      	nop
 800ccf8:	0800cc31 	.word	0x0800cc31

0800ccfc <__sfmoreglue>:
 800ccfc:	b570      	push	{r4, r5, r6, lr}
 800ccfe:	2268      	movs	r2, #104	; 0x68
 800cd00:	1e4d      	subs	r5, r1, #1
 800cd02:	4355      	muls	r5, r2
 800cd04:	460e      	mov	r6, r1
 800cd06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cd0a:	f7ff f8d9 	bl	800bec0 <_malloc_r>
 800cd0e:	4604      	mov	r4, r0
 800cd10:	b140      	cbz	r0, 800cd24 <__sfmoreglue+0x28>
 800cd12:	2100      	movs	r1, #0
 800cd14:	e9c0 1600 	strd	r1, r6, [r0]
 800cd18:	300c      	adds	r0, #12
 800cd1a:	60a0      	str	r0, [r4, #8]
 800cd1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cd20:	f7fb fc5a 	bl	80085d8 <memset>
 800cd24:	4620      	mov	r0, r4
 800cd26:	bd70      	pop	{r4, r5, r6, pc}

0800cd28 <__sfp_lock_acquire>:
 800cd28:	4801      	ldr	r0, [pc, #4]	; (800cd30 <__sfp_lock_acquire+0x8>)
 800cd2a:	f000 b8c5 	b.w	800ceb8 <__retarget_lock_acquire_recursive>
 800cd2e:	bf00      	nop
 800cd30:	200008c5 	.word	0x200008c5

0800cd34 <__sfp_lock_release>:
 800cd34:	4801      	ldr	r0, [pc, #4]	; (800cd3c <__sfp_lock_release+0x8>)
 800cd36:	f000 b8c0 	b.w	800ceba <__retarget_lock_release_recursive>
 800cd3a:	bf00      	nop
 800cd3c:	200008c5 	.word	0x200008c5

0800cd40 <__sinit_lock_acquire>:
 800cd40:	4801      	ldr	r0, [pc, #4]	; (800cd48 <__sinit_lock_acquire+0x8>)
 800cd42:	f000 b8b9 	b.w	800ceb8 <__retarget_lock_acquire_recursive>
 800cd46:	bf00      	nop
 800cd48:	200008c6 	.word	0x200008c6

0800cd4c <__sinit_lock_release>:
 800cd4c:	4801      	ldr	r0, [pc, #4]	; (800cd54 <__sinit_lock_release+0x8>)
 800cd4e:	f000 b8b4 	b.w	800ceba <__retarget_lock_release_recursive>
 800cd52:	bf00      	nop
 800cd54:	200008c6 	.word	0x200008c6

0800cd58 <__sinit>:
 800cd58:	b510      	push	{r4, lr}
 800cd5a:	4604      	mov	r4, r0
 800cd5c:	f7ff fff0 	bl	800cd40 <__sinit_lock_acquire>
 800cd60:	69a3      	ldr	r3, [r4, #24]
 800cd62:	b11b      	cbz	r3, 800cd6c <__sinit+0x14>
 800cd64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd68:	f7ff bff0 	b.w	800cd4c <__sinit_lock_release>
 800cd6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cd70:	6523      	str	r3, [r4, #80]	; 0x50
 800cd72:	4b13      	ldr	r3, [pc, #76]	; (800cdc0 <__sinit+0x68>)
 800cd74:	4a13      	ldr	r2, [pc, #76]	; (800cdc4 <__sinit+0x6c>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	62a2      	str	r2, [r4, #40]	; 0x28
 800cd7a:	42a3      	cmp	r3, r4
 800cd7c:	bf04      	itt	eq
 800cd7e:	2301      	moveq	r3, #1
 800cd80:	61a3      	streq	r3, [r4, #24]
 800cd82:	4620      	mov	r0, r4
 800cd84:	f000 f820 	bl	800cdc8 <__sfp>
 800cd88:	6060      	str	r0, [r4, #4]
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	f000 f81c 	bl	800cdc8 <__sfp>
 800cd90:	60a0      	str	r0, [r4, #8]
 800cd92:	4620      	mov	r0, r4
 800cd94:	f000 f818 	bl	800cdc8 <__sfp>
 800cd98:	2200      	movs	r2, #0
 800cd9a:	60e0      	str	r0, [r4, #12]
 800cd9c:	2104      	movs	r1, #4
 800cd9e:	6860      	ldr	r0, [r4, #4]
 800cda0:	f7ff ff82 	bl	800cca8 <std>
 800cda4:	68a0      	ldr	r0, [r4, #8]
 800cda6:	2201      	movs	r2, #1
 800cda8:	2109      	movs	r1, #9
 800cdaa:	f7ff ff7d 	bl	800cca8 <std>
 800cdae:	68e0      	ldr	r0, [r4, #12]
 800cdb0:	2202      	movs	r2, #2
 800cdb2:	2112      	movs	r1, #18
 800cdb4:	f7ff ff78 	bl	800cca8 <std>
 800cdb8:	2301      	movs	r3, #1
 800cdba:	61a3      	str	r3, [r4, #24]
 800cdbc:	e7d2      	b.n	800cd64 <__sinit+0xc>
 800cdbe:	bf00      	nop
 800cdc0:	0800d738 	.word	0x0800d738
 800cdc4:	0800ccf1 	.word	0x0800ccf1

0800cdc8 <__sfp>:
 800cdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdca:	4607      	mov	r7, r0
 800cdcc:	f7ff ffac 	bl	800cd28 <__sfp_lock_acquire>
 800cdd0:	4b1e      	ldr	r3, [pc, #120]	; (800ce4c <__sfp+0x84>)
 800cdd2:	681e      	ldr	r6, [r3, #0]
 800cdd4:	69b3      	ldr	r3, [r6, #24]
 800cdd6:	b913      	cbnz	r3, 800cdde <__sfp+0x16>
 800cdd8:	4630      	mov	r0, r6
 800cdda:	f7ff ffbd 	bl	800cd58 <__sinit>
 800cdde:	3648      	adds	r6, #72	; 0x48
 800cde0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cde4:	3b01      	subs	r3, #1
 800cde6:	d503      	bpl.n	800cdf0 <__sfp+0x28>
 800cde8:	6833      	ldr	r3, [r6, #0]
 800cdea:	b30b      	cbz	r3, 800ce30 <__sfp+0x68>
 800cdec:	6836      	ldr	r6, [r6, #0]
 800cdee:	e7f7      	b.n	800cde0 <__sfp+0x18>
 800cdf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cdf4:	b9d5      	cbnz	r5, 800ce2c <__sfp+0x64>
 800cdf6:	4b16      	ldr	r3, [pc, #88]	; (800ce50 <__sfp+0x88>)
 800cdf8:	60e3      	str	r3, [r4, #12]
 800cdfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cdfe:	6665      	str	r5, [r4, #100]	; 0x64
 800ce00:	f000 f859 	bl	800ceb6 <__retarget_lock_init_recursive>
 800ce04:	f7ff ff96 	bl	800cd34 <__sfp_lock_release>
 800ce08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ce0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ce10:	6025      	str	r5, [r4, #0]
 800ce12:	61a5      	str	r5, [r4, #24]
 800ce14:	2208      	movs	r2, #8
 800ce16:	4629      	mov	r1, r5
 800ce18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ce1c:	f7fb fbdc 	bl	80085d8 <memset>
 800ce20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ce24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ce28:	4620      	mov	r0, r4
 800ce2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce2c:	3468      	adds	r4, #104	; 0x68
 800ce2e:	e7d9      	b.n	800cde4 <__sfp+0x1c>
 800ce30:	2104      	movs	r1, #4
 800ce32:	4638      	mov	r0, r7
 800ce34:	f7ff ff62 	bl	800ccfc <__sfmoreglue>
 800ce38:	4604      	mov	r4, r0
 800ce3a:	6030      	str	r0, [r6, #0]
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	d1d5      	bne.n	800cdec <__sfp+0x24>
 800ce40:	f7ff ff78 	bl	800cd34 <__sfp_lock_release>
 800ce44:	230c      	movs	r3, #12
 800ce46:	603b      	str	r3, [r7, #0]
 800ce48:	e7ee      	b.n	800ce28 <__sfp+0x60>
 800ce4a:	bf00      	nop
 800ce4c:	0800d738 	.word	0x0800d738
 800ce50:	ffff0001 	.word	0xffff0001

0800ce54 <fiprintf>:
 800ce54:	b40e      	push	{r1, r2, r3}
 800ce56:	b503      	push	{r0, r1, lr}
 800ce58:	4601      	mov	r1, r0
 800ce5a:	ab03      	add	r3, sp, #12
 800ce5c:	4805      	ldr	r0, [pc, #20]	; (800ce74 <fiprintf+0x20>)
 800ce5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce62:	6800      	ldr	r0, [r0, #0]
 800ce64:	9301      	str	r3, [sp, #4]
 800ce66:	f000 f8a7 	bl	800cfb8 <_vfiprintf_r>
 800ce6a:	b002      	add	sp, #8
 800ce6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce70:	b003      	add	sp, #12
 800ce72:	4770      	bx	lr
 800ce74:	2000004c 	.word	0x2000004c

0800ce78 <_fwalk_reent>:
 800ce78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce7c:	4606      	mov	r6, r0
 800ce7e:	4688      	mov	r8, r1
 800ce80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ce84:	2700      	movs	r7, #0
 800ce86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce8a:	f1b9 0901 	subs.w	r9, r9, #1
 800ce8e:	d505      	bpl.n	800ce9c <_fwalk_reent+0x24>
 800ce90:	6824      	ldr	r4, [r4, #0]
 800ce92:	2c00      	cmp	r4, #0
 800ce94:	d1f7      	bne.n	800ce86 <_fwalk_reent+0xe>
 800ce96:	4638      	mov	r0, r7
 800ce98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce9c:	89ab      	ldrh	r3, [r5, #12]
 800ce9e:	2b01      	cmp	r3, #1
 800cea0:	d907      	bls.n	800ceb2 <_fwalk_reent+0x3a>
 800cea2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cea6:	3301      	adds	r3, #1
 800cea8:	d003      	beq.n	800ceb2 <_fwalk_reent+0x3a>
 800ceaa:	4629      	mov	r1, r5
 800ceac:	4630      	mov	r0, r6
 800ceae:	47c0      	blx	r8
 800ceb0:	4307      	orrs	r7, r0
 800ceb2:	3568      	adds	r5, #104	; 0x68
 800ceb4:	e7e9      	b.n	800ce8a <_fwalk_reent+0x12>

0800ceb6 <__retarget_lock_init_recursive>:
 800ceb6:	4770      	bx	lr

0800ceb8 <__retarget_lock_acquire_recursive>:
 800ceb8:	4770      	bx	lr

0800ceba <__retarget_lock_release_recursive>:
 800ceba:	4770      	bx	lr

0800cebc <memmove>:
 800cebc:	4288      	cmp	r0, r1
 800cebe:	b510      	push	{r4, lr}
 800cec0:	eb01 0402 	add.w	r4, r1, r2
 800cec4:	d902      	bls.n	800cecc <memmove+0x10>
 800cec6:	4284      	cmp	r4, r0
 800cec8:	4623      	mov	r3, r4
 800ceca:	d807      	bhi.n	800cedc <memmove+0x20>
 800cecc:	1e43      	subs	r3, r0, #1
 800cece:	42a1      	cmp	r1, r4
 800ced0:	d008      	beq.n	800cee4 <memmove+0x28>
 800ced2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ced6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ceda:	e7f8      	b.n	800cece <memmove+0x12>
 800cedc:	4402      	add	r2, r0
 800cede:	4601      	mov	r1, r0
 800cee0:	428a      	cmp	r2, r1
 800cee2:	d100      	bne.n	800cee6 <memmove+0x2a>
 800cee4:	bd10      	pop	{r4, pc}
 800cee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ceea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ceee:	e7f7      	b.n	800cee0 <memmove+0x24>

0800cef0 <__malloc_lock>:
 800cef0:	4801      	ldr	r0, [pc, #4]	; (800cef8 <__malloc_lock+0x8>)
 800cef2:	f7ff bfe1 	b.w	800ceb8 <__retarget_lock_acquire_recursive>
 800cef6:	bf00      	nop
 800cef8:	200008c4 	.word	0x200008c4

0800cefc <__malloc_unlock>:
 800cefc:	4801      	ldr	r0, [pc, #4]	; (800cf04 <__malloc_unlock+0x8>)
 800cefe:	f7ff bfdc 	b.w	800ceba <__retarget_lock_release_recursive>
 800cf02:	bf00      	nop
 800cf04:	200008c4 	.word	0x200008c4

0800cf08 <_realloc_r>:
 800cf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf0c:	4680      	mov	r8, r0
 800cf0e:	4614      	mov	r4, r2
 800cf10:	460e      	mov	r6, r1
 800cf12:	b921      	cbnz	r1, 800cf1e <_realloc_r+0x16>
 800cf14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf18:	4611      	mov	r1, r2
 800cf1a:	f7fe bfd1 	b.w	800bec0 <_malloc_r>
 800cf1e:	b92a      	cbnz	r2, 800cf2c <_realloc_r+0x24>
 800cf20:	f7fe ff62 	bl	800bde8 <_free_r>
 800cf24:	4625      	mov	r5, r4
 800cf26:	4628      	mov	r0, r5
 800cf28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf2c:	f000 faa0 	bl	800d470 <_malloc_usable_size_r>
 800cf30:	4284      	cmp	r4, r0
 800cf32:	4607      	mov	r7, r0
 800cf34:	d802      	bhi.n	800cf3c <_realloc_r+0x34>
 800cf36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf3a:	d812      	bhi.n	800cf62 <_realloc_r+0x5a>
 800cf3c:	4621      	mov	r1, r4
 800cf3e:	4640      	mov	r0, r8
 800cf40:	f7fe ffbe 	bl	800bec0 <_malloc_r>
 800cf44:	4605      	mov	r5, r0
 800cf46:	2800      	cmp	r0, #0
 800cf48:	d0ed      	beq.n	800cf26 <_realloc_r+0x1e>
 800cf4a:	42bc      	cmp	r4, r7
 800cf4c:	4622      	mov	r2, r4
 800cf4e:	4631      	mov	r1, r6
 800cf50:	bf28      	it	cs
 800cf52:	463a      	movcs	r2, r7
 800cf54:	f7fe fa66 	bl	800b424 <memcpy>
 800cf58:	4631      	mov	r1, r6
 800cf5a:	4640      	mov	r0, r8
 800cf5c:	f7fe ff44 	bl	800bde8 <_free_r>
 800cf60:	e7e1      	b.n	800cf26 <_realloc_r+0x1e>
 800cf62:	4635      	mov	r5, r6
 800cf64:	e7df      	b.n	800cf26 <_realloc_r+0x1e>

0800cf66 <__sfputc_r>:
 800cf66:	6893      	ldr	r3, [r2, #8]
 800cf68:	3b01      	subs	r3, #1
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	b410      	push	{r4}
 800cf6e:	6093      	str	r3, [r2, #8]
 800cf70:	da08      	bge.n	800cf84 <__sfputc_r+0x1e>
 800cf72:	6994      	ldr	r4, [r2, #24]
 800cf74:	42a3      	cmp	r3, r4
 800cf76:	db01      	blt.n	800cf7c <__sfputc_r+0x16>
 800cf78:	290a      	cmp	r1, #10
 800cf7a:	d103      	bne.n	800cf84 <__sfputc_r+0x1e>
 800cf7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf80:	f000 b94a 	b.w	800d218 <__swbuf_r>
 800cf84:	6813      	ldr	r3, [r2, #0]
 800cf86:	1c58      	adds	r0, r3, #1
 800cf88:	6010      	str	r0, [r2, #0]
 800cf8a:	7019      	strb	r1, [r3, #0]
 800cf8c:	4608      	mov	r0, r1
 800cf8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <__sfputs_r>:
 800cf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf96:	4606      	mov	r6, r0
 800cf98:	460f      	mov	r7, r1
 800cf9a:	4614      	mov	r4, r2
 800cf9c:	18d5      	adds	r5, r2, r3
 800cf9e:	42ac      	cmp	r4, r5
 800cfa0:	d101      	bne.n	800cfa6 <__sfputs_r+0x12>
 800cfa2:	2000      	movs	r0, #0
 800cfa4:	e007      	b.n	800cfb6 <__sfputs_r+0x22>
 800cfa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfaa:	463a      	mov	r2, r7
 800cfac:	4630      	mov	r0, r6
 800cfae:	f7ff ffda 	bl	800cf66 <__sfputc_r>
 800cfb2:	1c43      	adds	r3, r0, #1
 800cfb4:	d1f3      	bne.n	800cf9e <__sfputs_r+0xa>
 800cfb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cfb8 <_vfiprintf_r>:
 800cfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfbc:	460d      	mov	r5, r1
 800cfbe:	b09d      	sub	sp, #116	; 0x74
 800cfc0:	4614      	mov	r4, r2
 800cfc2:	4698      	mov	r8, r3
 800cfc4:	4606      	mov	r6, r0
 800cfc6:	b118      	cbz	r0, 800cfd0 <_vfiprintf_r+0x18>
 800cfc8:	6983      	ldr	r3, [r0, #24]
 800cfca:	b90b      	cbnz	r3, 800cfd0 <_vfiprintf_r+0x18>
 800cfcc:	f7ff fec4 	bl	800cd58 <__sinit>
 800cfd0:	4b89      	ldr	r3, [pc, #548]	; (800d1f8 <_vfiprintf_r+0x240>)
 800cfd2:	429d      	cmp	r5, r3
 800cfd4:	d11b      	bne.n	800d00e <_vfiprintf_r+0x56>
 800cfd6:	6875      	ldr	r5, [r6, #4]
 800cfd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfda:	07d9      	lsls	r1, r3, #31
 800cfdc:	d405      	bmi.n	800cfea <_vfiprintf_r+0x32>
 800cfde:	89ab      	ldrh	r3, [r5, #12]
 800cfe0:	059a      	lsls	r2, r3, #22
 800cfe2:	d402      	bmi.n	800cfea <_vfiprintf_r+0x32>
 800cfe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfe6:	f7ff ff67 	bl	800ceb8 <__retarget_lock_acquire_recursive>
 800cfea:	89ab      	ldrh	r3, [r5, #12]
 800cfec:	071b      	lsls	r3, r3, #28
 800cfee:	d501      	bpl.n	800cff4 <_vfiprintf_r+0x3c>
 800cff0:	692b      	ldr	r3, [r5, #16]
 800cff2:	b9eb      	cbnz	r3, 800d030 <_vfiprintf_r+0x78>
 800cff4:	4629      	mov	r1, r5
 800cff6:	4630      	mov	r0, r6
 800cff8:	f000 f960 	bl	800d2bc <__swsetup_r>
 800cffc:	b1c0      	cbz	r0, 800d030 <_vfiprintf_r+0x78>
 800cffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d000:	07dc      	lsls	r4, r3, #31
 800d002:	d50e      	bpl.n	800d022 <_vfiprintf_r+0x6a>
 800d004:	f04f 30ff 	mov.w	r0, #4294967295
 800d008:	b01d      	add	sp, #116	; 0x74
 800d00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d00e:	4b7b      	ldr	r3, [pc, #492]	; (800d1fc <_vfiprintf_r+0x244>)
 800d010:	429d      	cmp	r5, r3
 800d012:	d101      	bne.n	800d018 <_vfiprintf_r+0x60>
 800d014:	68b5      	ldr	r5, [r6, #8]
 800d016:	e7df      	b.n	800cfd8 <_vfiprintf_r+0x20>
 800d018:	4b79      	ldr	r3, [pc, #484]	; (800d200 <_vfiprintf_r+0x248>)
 800d01a:	429d      	cmp	r5, r3
 800d01c:	bf08      	it	eq
 800d01e:	68f5      	ldreq	r5, [r6, #12]
 800d020:	e7da      	b.n	800cfd8 <_vfiprintf_r+0x20>
 800d022:	89ab      	ldrh	r3, [r5, #12]
 800d024:	0598      	lsls	r0, r3, #22
 800d026:	d4ed      	bmi.n	800d004 <_vfiprintf_r+0x4c>
 800d028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d02a:	f7ff ff46 	bl	800ceba <__retarget_lock_release_recursive>
 800d02e:	e7e9      	b.n	800d004 <_vfiprintf_r+0x4c>
 800d030:	2300      	movs	r3, #0
 800d032:	9309      	str	r3, [sp, #36]	; 0x24
 800d034:	2320      	movs	r3, #32
 800d036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d03a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d03e:	2330      	movs	r3, #48	; 0x30
 800d040:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d204 <_vfiprintf_r+0x24c>
 800d044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d048:	f04f 0901 	mov.w	r9, #1
 800d04c:	4623      	mov	r3, r4
 800d04e:	469a      	mov	sl, r3
 800d050:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d054:	b10a      	cbz	r2, 800d05a <_vfiprintf_r+0xa2>
 800d056:	2a25      	cmp	r2, #37	; 0x25
 800d058:	d1f9      	bne.n	800d04e <_vfiprintf_r+0x96>
 800d05a:	ebba 0b04 	subs.w	fp, sl, r4
 800d05e:	d00b      	beq.n	800d078 <_vfiprintf_r+0xc0>
 800d060:	465b      	mov	r3, fp
 800d062:	4622      	mov	r2, r4
 800d064:	4629      	mov	r1, r5
 800d066:	4630      	mov	r0, r6
 800d068:	f7ff ff94 	bl	800cf94 <__sfputs_r>
 800d06c:	3001      	adds	r0, #1
 800d06e:	f000 80aa 	beq.w	800d1c6 <_vfiprintf_r+0x20e>
 800d072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d074:	445a      	add	r2, fp
 800d076:	9209      	str	r2, [sp, #36]	; 0x24
 800d078:	f89a 3000 	ldrb.w	r3, [sl]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f000 80a2 	beq.w	800d1c6 <_vfiprintf_r+0x20e>
 800d082:	2300      	movs	r3, #0
 800d084:	f04f 32ff 	mov.w	r2, #4294967295
 800d088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d08c:	f10a 0a01 	add.w	sl, sl, #1
 800d090:	9304      	str	r3, [sp, #16]
 800d092:	9307      	str	r3, [sp, #28]
 800d094:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d098:	931a      	str	r3, [sp, #104]	; 0x68
 800d09a:	4654      	mov	r4, sl
 800d09c:	2205      	movs	r2, #5
 800d09e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0a2:	4858      	ldr	r0, [pc, #352]	; (800d204 <_vfiprintf_r+0x24c>)
 800d0a4:	f7f3 f8e4 	bl	8000270 <memchr>
 800d0a8:	9a04      	ldr	r2, [sp, #16]
 800d0aa:	b9d8      	cbnz	r0, 800d0e4 <_vfiprintf_r+0x12c>
 800d0ac:	06d1      	lsls	r1, r2, #27
 800d0ae:	bf44      	itt	mi
 800d0b0:	2320      	movmi	r3, #32
 800d0b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0b6:	0713      	lsls	r3, r2, #28
 800d0b8:	bf44      	itt	mi
 800d0ba:	232b      	movmi	r3, #43	; 0x2b
 800d0bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0c0:	f89a 3000 	ldrb.w	r3, [sl]
 800d0c4:	2b2a      	cmp	r3, #42	; 0x2a
 800d0c6:	d015      	beq.n	800d0f4 <_vfiprintf_r+0x13c>
 800d0c8:	9a07      	ldr	r2, [sp, #28]
 800d0ca:	4654      	mov	r4, sl
 800d0cc:	2000      	movs	r0, #0
 800d0ce:	f04f 0c0a 	mov.w	ip, #10
 800d0d2:	4621      	mov	r1, r4
 800d0d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0d8:	3b30      	subs	r3, #48	; 0x30
 800d0da:	2b09      	cmp	r3, #9
 800d0dc:	d94e      	bls.n	800d17c <_vfiprintf_r+0x1c4>
 800d0de:	b1b0      	cbz	r0, 800d10e <_vfiprintf_r+0x156>
 800d0e0:	9207      	str	r2, [sp, #28]
 800d0e2:	e014      	b.n	800d10e <_vfiprintf_r+0x156>
 800d0e4:	eba0 0308 	sub.w	r3, r0, r8
 800d0e8:	fa09 f303 	lsl.w	r3, r9, r3
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	9304      	str	r3, [sp, #16]
 800d0f0:	46a2      	mov	sl, r4
 800d0f2:	e7d2      	b.n	800d09a <_vfiprintf_r+0xe2>
 800d0f4:	9b03      	ldr	r3, [sp, #12]
 800d0f6:	1d19      	adds	r1, r3, #4
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	9103      	str	r1, [sp, #12]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	bfbb      	ittet	lt
 800d100:	425b      	neglt	r3, r3
 800d102:	f042 0202 	orrlt.w	r2, r2, #2
 800d106:	9307      	strge	r3, [sp, #28]
 800d108:	9307      	strlt	r3, [sp, #28]
 800d10a:	bfb8      	it	lt
 800d10c:	9204      	strlt	r2, [sp, #16]
 800d10e:	7823      	ldrb	r3, [r4, #0]
 800d110:	2b2e      	cmp	r3, #46	; 0x2e
 800d112:	d10c      	bne.n	800d12e <_vfiprintf_r+0x176>
 800d114:	7863      	ldrb	r3, [r4, #1]
 800d116:	2b2a      	cmp	r3, #42	; 0x2a
 800d118:	d135      	bne.n	800d186 <_vfiprintf_r+0x1ce>
 800d11a:	9b03      	ldr	r3, [sp, #12]
 800d11c:	1d1a      	adds	r2, r3, #4
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	9203      	str	r2, [sp, #12]
 800d122:	2b00      	cmp	r3, #0
 800d124:	bfb8      	it	lt
 800d126:	f04f 33ff 	movlt.w	r3, #4294967295
 800d12a:	3402      	adds	r4, #2
 800d12c:	9305      	str	r3, [sp, #20]
 800d12e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d214 <_vfiprintf_r+0x25c>
 800d132:	7821      	ldrb	r1, [r4, #0]
 800d134:	2203      	movs	r2, #3
 800d136:	4650      	mov	r0, sl
 800d138:	f7f3 f89a 	bl	8000270 <memchr>
 800d13c:	b140      	cbz	r0, 800d150 <_vfiprintf_r+0x198>
 800d13e:	2340      	movs	r3, #64	; 0x40
 800d140:	eba0 000a 	sub.w	r0, r0, sl
 800d144:	fa03 f000 	lsl.w	r0, r3, r0
 800d148:	9b04      	ldr	r3, [sp, #16]
 800d14a:	4303      	orrs	r3, r0
 800d14c:	3401      	adds	r4, #1
 800d14e:	9304      	str	r3, [sp, #16]
 800d150:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d154:	482c      	ldr	r0, [pc, #176]	; (800d208 <_vfiprintf_r+0x250>)
 800d156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d15a:	2206      	movs	r2, #6
 800d15c:	f7f3 f888 	bl	8000270 <memchr>
 800d160:	2800      	cmp	r0, #0
 800d162:	d03f      	beq.n	800d1e4 <_vfiprintf_r+0x22c>
 800d164:	4b29      	ldr	r3, [pc, #164]	; (800d20c <_vfiprintf_r+0x254>)
 800d166:	bb1b      	cbnz	r3, 800d1b0 <_vfiprintf_r+0x1f8>
 800d168:	9b03      	ldr	r3, [sp, #12]
 800d16a:	3307      	adds	r3, #7
 800d16c:	f023 0307 	bic.w	r3, r3, #7
 800d170:	3308      	adds	r3, #8
 800d172:	9303      	str	r3, [sp, #12]
 800d174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d176:	443b      	add	r3, r7
 800d178:	9309      	str	r3, [sp, #36]	; 0x24
 800d17a:	e767      	b.n	800d04c <_vfiprintf_r+0x94>
 800d17c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d180:	460c      	mov	r4, r1
 800d182:	2001      	movs	r0, #1
 800d184:	e7a5      	b.n	800d0d2 <_vfiprintf_r+0x11a>
 800d186:	2300      	movs	r3, #0
 800d188:	3401      	adds	r4, #1
 800d18a:	9305      	str	r3, [sp, #20]
 800d18c:	4619      	mov	r1, r3
 800d18e:	f04f 0c0a 	mov.w	ip, #10
 800d192:	4620      	mov	r0, r4
 800d194:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d198:	3a30      	subs	r2, #48	; 0x30
 800d19a:	2a09      	cmp	r2, #9
 800d19c:	d903      	bls.n	800d1a6 <_vfiprintf_r+0x1ee>
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d0c5      	beq.n	800d12e <_vfiprintf_r+0x176>
 800d1a2:	9105      	str	r1, [sp, #20]
 800d1a4:	e7c3      	b.n	800d12e <_vfiprintf_r+0x176>
 800d1a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	e7f0      	b.n	800d192 <_vfiprintf_r+0x1da>
 800d1b0:	ab03      	add	r3, sp, #12
 800d1b2:	9300      	str	r3, [sp, #0]
 800d1b4:	462a      	mov	r2, r5
 800d1b6:	4b16      	ldr	r3, [pc, #88]	; (800d210 <_vfiprintf_r+0x258>)
 800d1b8:	a904      	add	r1, sp, #16
 800d1ba:	4630      	mov	r0, r6
 800d1bc:	f7fb faa4 	bl	8008708 <_printf_float>
 800d1c0:	4607      	mov	r7, r0
 800d1c2:	1c78      	adds	r0, r7, #1
 800d1c4:	d1d6      	bne.n	800d174 <_vfiprintf_r+0x1bc>
 800d1c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1c8:	07d9      	lsls	r1, r3, #31
 800d1ca:	d405      	bmi.n	800d1d8 <_vfiprintf_r+0x220>
 800d1cc:	89ab      	ldrh	r3, [r5, #12]
 800d1ce:	059a      	lsls	r2, r3, #22
 800d1d0:	d402      	bmi.n	800d1d8 <_vfiprintf_r+0x220>
 800d1d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1d4:	f7ff fe71 	bl	800ceba <__retarget_lock_release_recursive>
 800d1d8:	89ab      	ldrh	r3, [r5, #12]
 800d1da:	065b      	lsls	r3, r3, #25
 800d1dc:	f53f af12 	bmi.w	800d004 <_vfiprintf_r+0x4c>
 800d1e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1e2:	e711      	b.n	800d008 <_vfiprintf_r+0x50>
 800d1e4:	ab03      	add	r3, sp, #12
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	462a      	mov	r2, r5
 800d1ea:	4b09      	ldr	r3, [pc, #36]	; (800d210 <_vfiprintf_r+0x258>)
 800d1ec:	a904      	add	r1, sp, #16
 800d1ee:	4630      	mov	r0, r6
 800d1f0:	f7fb fd16 	bl	8008c20 <_printf_i>
 800d1f4:	e7e4      	b.n	800d1c0 <_vfiprintf_r+0x208>
 800d1f6:	bf00      	nop
 800d1f8:	0800dbb4 	.word	0x0800dbb4
 800d1fc:	0800dbd4 	.word	0x0800dbd4
 800d200:	0800db94 	.word	0x0800db94
 800d204:	0800db2c 	.word	0x0800db2c
 800d208:	0800db36 	.word	0x0800db36
 800d20c:	08008709 	.word	0x08008709
 800d210:	0800cf95 	.word	0x0800cf95
 800d214:	0800db32 	.word	0x0800db32

0800d218 <__swbuf_r>:
 800d218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d21a:	460e      	mov	r6, r1
 800d21c:	4614      	mov	r4, r2
 800d21e:	4605      	mov	r5, r0
 800d220:	b118      	cbz	r0, 800d22a <__swbuf_r+0x12>
 800d222:	6983      	ldr	r3, [r0, #24]
 800d224:	b90b      	cbnz	r3, 800d22a <__swbuf_r+0x12>
 800d226:	f7ff fd97 	bl	800cd58 <__sinit>
 800d22a:	4b21      	ldr	r3, [pc, #132]	; (800d2b0 <__swbuf_r+0x98>)
 800d22c:	429c      	cmp	r4, r3
 800d22e:	d12b      	bne.n	800d288 <__swbuf_r+0x70>
 800d230:	686c      	ldr	r4, [r5, #4]
 800d232:	69a3      	ldr	r3, [r4, #24]
 800d234:	60a3      	str	r3, [r4, #8]
 800d236:	89a3      	ldrh	r3, [r4, #12]
 800d238:	071a      	lsls	r2, r3, #28
 800d23a:	d52f      	bpl.n	800d29c <__swbuf_r+0x84>
 800d23c:	6923      	ldr	r3, [r4, #16]
 800d23e:	b36b      	cbz	r3, 800d29c <__swbuf_r+0x84>
 800d240:	6923      	ldr	r3, [r4, #16]
 800d242:	6820      	ldr	r0, [r4, #0]
 800d244:	1ac0      	subs	r0, r0, r3
 800d246:	6963      	ldr	r3, [r4, #20]
 800d248:	b2f6      	uxtb	r6, r6
 800d24a:	4283      	cmp	r3, r0
 800d24c:	4637      	mov	r7, r6
 800d24e:	dc04      	bgt.n	800d25a <__swbuf_r+0x42>
 800d250:	4621      	mov	r1, r4
 800d252:	4628      	mov	r0, r5
 800d254:	f7ff fcec 	bl	800cc30 <_fflush_r>
 800d258:	bb30      	cbnz	r0, 800d2a8 <__swbuf_r+0x90>
 800d25a:	68a3      	ldr	r3, [r4, #8]
 800d25c:	3b01      	subs	r3, #1
 800d25e:	60a3      	str	r3, [r4, #8]
 800d260:	6823      	ldr	r3, [r4, #0]
 800d262:	1c5a      	adds	r2, r3, #1
 800d264:	6022      	str	r2, [r4, #0]
 800d266:	701e      	strb	r6, [r3, #0]
 800d268:	6963      	ldr	r3, [r4, #20]
 800d26a:	3001      	adds	r0, #1
 800d26c:	4283      	cmp	r3, r0
 800d26e:	d004      	beq.n	800d27a <__swbuf_r+0x62>
 800d270:	89a3      	ldrh	r3, [r4, #12]
 800d272:	07db      	lsls	r3, r3, #31
 800d274:	d506      	bpl.n	800d284 <__swbuf_r+0x6c>
 800d276:	2e0a      	cmp	r6, #10
 800d278:	d104      	bne.n	800d284 <__swbuf_r+0x6c>
 800d27a:	4621      	mov	r1, r4
 800d27c:	4628      	mov	r0, r5
 800d27e:	f7ff fcd7 	bl	800cc30 <_fflush_r>
 800d282:	b988      	cbnz	r0, 800d2a8 <__swbuf_r+0x90>
 800d284:	4638      	mov	r0, r7
 800d286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d288:	4b0a      	ldr	r3, [pc, #40]	; (800d2b4 <__swbuf_r+0x9c>)
 800d28a:	429c      	cmp	r4, r3
 800d28c:	d101      	bne.n	800d292 <__swbuf_r+0x7a>
 800d28e:	68ac      	ldr	r4, [r5, #8]
 800d290:	e7cf      	b.n	800d232 <__swbuf_r+0x1a>
 800d292:	4b09      	ldr	r3, [pc, #36]	; (800d2b8 <__swbuf_r+0xa0>)
 800d294:	429c      	cmp	r4, r3
 800d296:	bf08      	it	eq
 800d298:	68ec      	ldreq	r4, [r5, #12]
 800d29a:	e7ca      	b.n	800d232 <__swbuf_r+0x1a>
 800d29c:	4621      	mov	r1, r4
 800d29e:	4628      	mov	r0, r5
 800d2a0:	f000 f80c 	bl	800d2bc <__swsetup_r>
 800d2a4:	2800      	cmp	r0, #0
 800d2a6:	d0cb      	beq.n	800d240 <__swbuf_r+0x28>
 800d2a8:	f04f 37ff 	mov.w	r7, #4294967295
 800d2ac:	e7ea      	b.n	800d284 <__swbuf_r+0x6c>
 800d2ae:	bf00      	nop
 800d2b0:	0800dbb4 	.word	0x0800dbb4
 800d2b4:	0800dbd4 	.word	0x0800dbd4
 800d2b8:	0800db94 	.word	0x0800db94

0800d2bc <__swsetup_r>:
 800d2bc:	4b32      	ldr	r3, [pc, #200]	; (800d388 <__swsetup_r+0xcc>)
 800d2be:	b570      	push	{r4, r5, r6, lr}
 800d2c0:	681d      	ldr	r5, [r3, #0]
 800d2c2:	4606      	mov	r6, r0
 800d2c4:	460c      	mov	r4, r1
 800d2c6:	b125      	cbz	r5, 800d2d2 <__swsetup_r+0x16>
 800d2c8:	69ab      	ldr	r3, [r5, #24]
 800d2ca:	b913      	cbnz	r3, 800d2d2 <__swsetup_r+0x16>
 800d2cc:	4628      	mov	r0, r5
 800d2ce:	f7ff fd43 	bl	800cd58 <__sinit>
 800d2d2:	4b2e      	ldr	r3, [pc, #184]	; (800d38c <__swsetup_r+0xd0>)
 800d2d4:	429c      	cmp	r4, r3
 800d2d6:	d10f      	bne.n	800d2f8 <__swsetup_r+0x3c>
 800d2d8:	686c      	ldr	r4, [r5, #4]
 800d2da:	89a3      	ldrh	r3, [r4, #12]
 800d2dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2e0:	0719      	lsls	r1, r3, #28
 800d2e2:	d42c      	bmi.n	800d33e <__swsetup_r+0x82>
 800d2e4:	06dd      	lsls	r5, r3, #27
 800d2e6:	d411      	bmi.n	800d30c <__swsetup_r+0x50>
 800d2e8:	2309      	movs	r3, #9
 800d2ea:	6033      	str	r3, [r6, #0]
 800d2ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d2f0:	81a3      	strh	r3, [r4, #12]
 800d2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f6:	e03e      	b.n	800d376 <__swsetup_r+0xba>
 800d2f8:	4b25      	ldr	r3, [pc, #148]	; (800d390 <__swsetup_r+0xd4>)
 800d2fa:	429c      	cmp	r4, r3
 800d2fc:	d101      	bne.n	800d302 <__swsetup_r+0x46>
 800d2fe:	68ac      	ldr	r4, [r5, #8]
 800d300:	e7eb      	b.n	800d2da <__swsetup_r+0x1e>
 800d302:	4b24      	ldr	r3, [pc, #144]	; (800d394 <__swsetup_r+0xd8>)
 800d304:	429c      	cmp	r4, r3
 800d306:	bf08      	it	eq
 800d308:	68ec      	ldreq	r4, [r5, #12]
 800d30a:	e7e6      	b.n	800d2da <__swsetup_r+0x1e>
 800d30c:	0758      	lsls	r0, r3, #29
 800d30e:	d512      	bpl.n	800d336 <__swsetup_r+0x7a>
 800d310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d312:	b141      	cbz	r1, 800d326 <__swsetup_r+0x6a>
 800d314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d318:	4299      	cmp	r1, r3
 800d31a:	d002      	beq.n	800d322 <__swsetup_r+0x66>
 800d31c:	4630      	mov	r0, r6
 800d31e:	f7fe fd63 	bl	800bde8 <_free_r>
 800d322:	2300      	movs	r3, #0
 800d324:	6363      	str	r3, [r4, #52]	; 0x34
 800d326:	89a3      	ldrh	r3, [r4, #12]
 800d328:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d32c:	81a3      	strh	r3, [r4, #12]
 800d32e:	2300      	movs	r3, #0
 800d330:	6063      	str	r3, [r4, #4]
 800d332:	6923      	ldr	r3, [r4, #16]
 800d334:	6023      	str	r3, [r4, #0]
 800d336:	89a3      	ldrh	r3, [r4, #12]
 800d338:	f043 0308 	orr.w	r3, r3, #8
 800d33c:	81a3      	strh	r3, [r4, #12]
 800d33e:	6923      	ldr	r3, [r4, #16]
 800d340:	b94b      	cbnz	r3, 800d356 <__swsetup_r+0x9a>
 800d342:	89a3      	ldrh	r3, [r4, #12]
 800d344:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d34c:	d003      	beq.n	800d356 <__swsetup_r+0x9a>
 800d34e:	4621      	mov	r1, r4
 800d350:	4630      	mov	r0, r6
 800d352:	f000 f84d 	bl	800d3f0 <__smakebuf_r>
 800d356:	89a0      	ldrh	r0, [r4, #12]
 800d358:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d35c:	f010 0301 	ands.w	r3, r0, #1
 800d360:	d00a      	beq.n	800d378 <__swsetup_r+0xbc>
 800d362:	2300      	movs	r3, #0
 800d364:	60a3      	str	r3, [r4, #8]
 800d366:	6963      	ldr	r3, [r4, #20]
 800d368:	425b      	negs	r3, r3
 800d36a:	61a3      	str	r3, [r4, #24]
 800d36c:	6923      	ldr	r3, [r4, #16]
 800d36e:	b943      	cbnz	r3, 800d382 <__swsetup_r+0xc6>
 800d370:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d374:	d1ba      	bne.n	800d2ec <__swsetup_r+0x30>
 800d376:	bd70      	pop	{r4, r5, r6, pc}
 800d378:	0781      	lsls	r1, r0, #30
 800d37a:	bf58      	it	pl
 800d37c:	6963      	ldrpl	r3, [r4, #20]
 800d37e:	60a3      	str	r3, [r4, #8]
 800d380:	e7f4      	b.n	800d36c <__swsetup_r+0xb0>
 800d382:	2000      	movs	r0, #0
 800d384:	e7f7      	b.n	800d376 <__swsetup_r+0xba>
 800d386:	bf00      	nop
 800d388:	2000004c 	.word	0x2000004c
 800d38c:	0800dbb4 	.word	0x0800dbb4
 800d390:	0800dbd4 	.word	0x0800dbd4
 800d394:	0800db94 	.word	0x0800db94

0800d398 <abort>:
 800d398:	b508      	push	{r3, lr}
 800d39a:	2006      	movs	r0, #6
 800d39c:	f000 f898 	bl	800d4d0 <raise>
 800d3a0:	2001      	movs	r0, #1
 800d3a2:	f7f4 fdeb 	bl	8001f7c <_exit>

0800d3a6 <__swhatbuf_r>:
 800d3a6:	b570      	push	{r4, r5, r6, lr}
 800d3a8:	460e      	mov	r6, r1
 800d3aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3ae:	2900      	cmp	r1, #0
 800d3b0:	b096      	sub	sp, #88	; 0x58
 800d3b2:	4614      	mov	r4, r2
 800d3b4:	461d      	mov	r5, r3
 800d3b6:	da08      	bge.n	800d3ca <__swhatbuf_r+0x24>
 800d3b8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	602a      	str	r2, [r5, #0]
 800d3c0:	061a      	lsls	r2, r3, #24
 800d3c2:	d410      	bmi.n	800d3e6 <__swhatbuf_r+0x40>
 800d3c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3c8:	e00e      	b.n	800d3e8 <__swhatbuf_r+0x42>
 800d3ca:	466a      	mov	r2, sp
 800d3cc:	f000 f89c 	bl	800d508 <_fstat_r>
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	dbf1      	blt.n	800d3b8 <__swhatbuf_r+0x12>
 800d3d4:	9a01      	ldr	r2, [sp, #4]
 800d3d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d3da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d3de:	425a      	negs	r2, r3
 800d3e0:	415a      	adcs	r2, r3
 800d3e2:	602a      	str	r2, [r5, #0]
 800d3e4:	e7ee      	b.n	800d3c4 <__swhatbuf_r+0x1e>
 800d3e6:	2340      	movs	r3, #64	; 0x40
 800d3e8:	2000      	movs	r0, #0
 800d3ea:	6023      	str	r3, [r4, #0]
 800d3ec:	b016      	add	sp, #88	; 0x58
 800d3ee:	bd70      	pop	{r4, r5, r6, pc}

0800d3f0 <__smakebuf_r>:
 800d3f0:	898b      	ldrh	r3, [r1, #12]
 800d3f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d3f4:	079d      	lsls	r5, r3, #30
 800d3f6:	4606      	mov	r6, r0
 800d3f8:	460c      	mov	r4, r1
 800d3fa:	d507      	bpl.n	800d40c <__smakebuf_r+0x1c>
 800d3fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d400:	6023      	str	r3, [r4, #0]
 800d402:	6123      	str	r3, [r4, #16]
 800d404:	2301      	movs	r3, #1
 800d406:	6163      	str	r3, [r4, #20]
 800d408:	b002      	add	sp, #8
 800d40a:	bd70      	pop	{r4, r5, r6, pc}
 800d40c:	ab01      	add	r3, sp, #4
 800d40e:	466a      	mov	r2, sp
 800d410:	f7ff ffc9 	bl	800d3a6 <__swhatbuf_r>
 800d414:	9900      	ldr	r1, [sp, #0]
 800d416:	4605      	mov	r5, r0
 800d418:	4630      	mov	r0, r6
 800d41a:	f7fe fd51 	bl	800bec0 <_malloc_r>
 800d41e:	b948      	cbnz	r0, 800d434 <__smakebuf_r+0x44>
 800d420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d424:	059a      	lsls	r2, r3, #22
 800d426:	d4ef      	bmi.n	800d408 <__smakebuf_r+0x18>
 800d428:	f023 0303 	bic.w	r3, r3, #3
 800d42c:	f043 0302 	orr.w	r3, r3, #2
 800d430:	81a3      	strh	r3, [r4, #12]
 800d432:	e7e3      	b.n	800d3fc <__smakebuf_r+0xc>
 800d434:	4b0d      	ldr	r3, [pc, #52]	; (800d46c <__smakebuf_r+0x7c>)
 800d436:	62b3      	str	r3, [r6, #40]	; 0x28
 800d438:	89a3      	ldrh	r3, [r4, #12]
 800d43a:	6020      	str	r0, [r4, #0]
 800d43c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d440:	81a3      	strh	r3, [r4, #12]
 800d442:	9b00      	ldr	r3, [sp, #0]
 800d444:	6163      	str	r3, [r4, #20]
 800d446:	9b01      	ldr	r3, [sp, #4]
 800d448:	6120      	str	r0, [r4, #16]
 800d44a:	b15b      	cbz	r3, 800d464 <__smakebuf_r+0x74>
 800d44c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d450:	4630      	mov	r0, r6
 800d452:	f000 f86b 	bl	800d52c <_isatty_r>
 800d456:	b128      	cbz	r0, 800d464 <__smakebuf_r+0x74>
 800d458:	89a3      	ldrh	r3, [r4, #12]
 800d45a:	f023 0303 	bic.w	r3, r3, #3
 800d45e:	f043 0301 	orr.w	r3, r3, #1
 800d462:	81a3      	strh	r3, [r4, #12]
 800d464:	89a0      	ldrh	r0, [r4, #12]
 800d466:	4305      	orrs	r5, r0
 800d468:	81a5      	strh	r5, [r4, #12]
 800d46a:	e7cd      	b.n	800d408 <__smakebuf_r+0x18>
 800d46c:	0800ccf1 	.word	0x0800ccf1

0800d470 <_malloc_usable_size_r>:
 800d470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d474:	1f18      	subs	r0, r3, #4
 800d476:	2b00      	cmp	r3, #0
 800d478:	bfbc      	itt	lt
 800d47a:	580b      	ldrlt	r3, [r1, r0]
 800d47c:	18c0      	addlt	r0, r0, r3
 800d47e:	4770      	bx	lr

0800d480 <_raise_r>:
 800d480:	291f      	cmp	r1, #31
 800d482:	b538      	push	{r3, r4, r5, lr}
 800d484:	4604      	mov	r4, r0
 800d486:	460d      	mov	r5, r1
 800d488:	d904      	bls.n	800d494 <_raise_r+0x14>
 800d48a:	2316      	movs	r3, #22
 800d48c:	6003      	str	r3, [r0, #0]
 800d48e:	f04f 30ff 	mov.w	r0, #4294967295
 800d492:	bd38      	pop	{r3, r4, r5, pc}
 800d494:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d496:	b112      	cbz	r2, 800d49e <_raise_r+0x1e>
 800d498:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d49c:	b94b      	cbnz	r3, 800d4b2 <_raise_r+0x32>
 800d49e:	4620      	mov	r0, r4
 800d4a0:	f000 f830 	bl	800d504 <_getpid_r>
 800d4a4:	462a      	mov	r2, r5
 800d4a6:	4601      	mov	r1, r0
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4ae:	f000 b817 	b.w	800d4e0 <_kill_r>
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d00a      	beq.n	800d4cc <_raise_r+0x4c>
 800d4b6:	1c59      	adds	r1, r3, #1
 800d4b8:	d103      	bne.n	800d4c2 <_raise_r+0x42>
 800d4ba:	2316      	movs	r3, #22
 800d4bc:	6003      	str	r3, [r0, #0]
 800d4be:	2001      	movs	r0, #1
 800d4c0:	e7e7      	b.n	800d492 <_raise_r+0x12>
 800d4c2:	2400      	movs	r4, #0
 800d4c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d4c8:	4628      	mov	r0, r5
 800d4ca:	4798      	blx	r3
 800d4cc:	2000      	movs	r0, #0
 800d4ce:	e7e0      	b.n	800d492 <_raise_r+0x12>

0800d4d0 <raise>:
 800d4d0:	4b02      	ldr	r3, [pc, #8]	; (800d4dc <raise+0xc>)
 800d4d2:	4601      	mov	r1, r0
 800d4d4:	6818      	ldr	r0, [r3, #0]
 800d4d6:	f7ff bfd3 	b.w	800d480 <_raise_r>
 800d4da:	bf00      	nop
 800d4dc:	2000004c 	.word	0x2000004c

0800d4e0 <_kill_r>:
 800d4e0:	b538      	push	{r3, r4, r5, lr}
 800d4e2:	4d07      	ldr	r5, [pc, #28]	; (800d500 <_kill_r+0x20>)
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	4608      	mov	r0, r1
 800d4ea:	4611      	mov	r1, r2
 800d4ec:	602b      	str	r3, [r5, #0]
 800d4ee:	f7f4 fd35 	bl	8001f5c <_kill>
 800d4f2:	1c43      	adds	r3, r0, #1
 800d4f4:	d102      	bne.n	800d4fc <_kill_r+0x1c>
 800d4f6:	682b      	ldr	r3, [r5, #0]
 800d4f8:	b103      	cbz	r3, 800d4fc <_kill_r+0x1c>
 800d4fa:	6023      	str	r3, [r4, #0]
 800d4fc:	bd38      	pop	{r3, r4, r5, pc}
 800d4fe:	bf00      	nop
 800d500:	200008c0 	.word	0x200008c0

0800d504 <_getpid_r>:
 800d504:	f7f4 bd22 	b.w	8001f4c <_getpid>

0800d508 <_fstat_r>:
 800d508:	b538      	push	{r3, r4, r5, lr}
 800d50a:	4d07      	ldr	r5, [pc, #28]	; (800d528 <_fstat_r+0x20>)
 800d50c:	2300      	movs	r3, #0
 800d50e:	4604      	mov	r4, r0
 800d510:	4608      	mov	r0, r1
 800d512:	4611      	mov	r1, r2
 800d514:	602b      	str	r3, [r5, #0]
 800d516:	f7f4 fd80 	bl	800201a <_fstat>
 800d51a:	1c43      	adds	r3, r0, #1
 800d51c:	d102      	bne.n	800d524 <_fstat_r+0x1c>
 800d51e:	682b      	ldr	r3, [r5, #0]
 800d520:	b103      	cbz	r3, 800d524 <_fstat_r+0x1c>
 800d522:	6023      	str	r3, [r4, #0]
 800d524:	bd38      	pop	{r3, r4, r5, pc}
 800d526:	bf00      	nop
 800d528:	200008c0 	.word	0x200008c0

0800d52c <_isatty_r>:
 800d52c:	b538      	push	{r3, r4, r5, lr}
 800d52e:	4d06      	ldr	r5, [pc, #24]	; (800d548 <_isatty_r+0x1c>)
 800d530:	2300      	movs	r3, #0
 800d532:	4604      	mov	r4, r0
 800d534:	4608      	mov	r0, r1
 800d536:	602b      	str	r3, [r5, #0]
 800d538:	f7f4 fd7f 	bl	800203a <_isatty>
 800d53c:	1c43      	adds	r3, r0, #1
 800d53e:	d102      	bne.n	800d546 <_isatty_r+0x1a>
 800d540:	682b      	ldr	r3, [r5, #0]
 800d542:	b103      	cbz	r3, 800d546 <_isatty_r+0x1a>
 800d544:	6023      	str	r3, [r4, #0]
 800d546:	bd38      	pop	{r3, r4, r5, pc}
 800d548:	200008c0 	.word	0x200008c0

0800d54c <_init>:
 800d54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d54e:	bf00      	nop
 800d550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d552:	bc08      	pop	{r3}
 800d554:	469e      	mov	lr, r3
 800d556:	4770      	bx	lr

0800d558 <_fini>:
 800d558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d55a:	bf00      	nop
 800d55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d55e:	bc08      	pop	{r3}
 800d560:	469e      	mov	lr, r3
 800d562:	4770      	bx	lr
