
TASP_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb0c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  0800ed10  0800ed10  0001ed10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3b4  0800f3b4  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f3b4  0800f3b4  0001f3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f3bc  0800f3bc  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f3bc  0800f3bc  0001f3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f3c0  0800f3c0  0001f3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0800f3c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000948  2000022c  0800f5f0  0002022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b74  0800f5f0  00020b74  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025331  00000000  00000000  0002025a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000403f  00000000  00000000  0004558b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  000495d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001488  00000000  00000000  0004ac00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bed7  00000000  00000000  0004c088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db16  00000000  00000000  00077f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100d1e  00000000  00000000  00095a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00196793  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000715c  00000000  00000000  001967e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000022c 	.word	0x2000022c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ecf4 	.word	0x0800ecf4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000230 	.word	0x20000230
 800023c:	0800ecf4 	.word	0x0800ecf4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b9a6 	b.w	80009ec <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f83e 	bl	8000728 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2lz>:
 80006b8:	b508      	push	{r3, lr}
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	ec43 2b17 	vmov	d7, r2, r3
 80006c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	d403      	bmi.n	80006d4 <__aeabi_d2lz+0x1c>
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006d0:	f000 b80a 	b.w	80006e8 <__aeabi_d2ulz>
 80006d4:	eeb1 7b47 	vneg.f64	d7, d7
 80006d8:	ec51 0b17 	vmov	r0, r1, d7
 80006dc:	f000 f804 	bl	80006e8 <__aeabi_d2ulz>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	bd08      	pop	{r3, pc}

080006e8 <__aeabi_d2ulz>:
 80006e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000718 <__aeabi_d2ulz+0x30>
 80006ec:	ec41 0b17 	vmov	d7, r0, r1
 80006f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000720 <__aeabi_d2ulz+0x38>
 80006f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006fc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000700:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee16 1a10 	vmov	r1, s12
 800070c:	ee17 0a90 	vmov	r0, s15
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	f3af 8000 	nop.w
 8000718:	00000000 	.word	0x00000000
 800071c:	3df00000 	.word	0x3df00000
 8000720:	00000000 	.word	0x00000000
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468c      	mov	ip, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	f040 8083 	bne.w	800083e <__udivmoddi4+0x116>
 8000738:	428a      	cmp	r2, r1
 800073a:	4617      	mov	r7, r2
 800073c:	d947      	bls.n	80007ce <__udivmoddi4+0xa6>
 800073e:	fab2 f282 	clz	r2, r2
 8000742:	b142      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000744:	f1c2 0020 	rsb	r0, r2, #32
 8000748:	fa24 f000 	lsr.w	r0, r4, r0
 800074c:	4091      	lsls	r1, r2
 800074e:	4097      	lsls	r7, r2
 8000750:	ea40 0c01 	orr.w	ip, r0, r1
 8000754:	4094      	lsls	r4, r2
 8000756:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800075a:	0c23      	lsrs	r3, r4, #16
 800075c:	fbbc f6f8 	udiv	r6, ip, r8
 8000760:	fa1f fe87 	uxth.w	lr, r7
 8000764:	fb08 c116 	mls	r1, r8, r6, ip
 8000768:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076c:	fb06 f10e 	mul.w	r1, r6, lr
 8000770:	4299      	cmp	r1, r3
 8000772:	d909      	bls.n	8000788 <__udivmoddi4+0x60>
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	f106 30ff 	add.w	r0, r6, #4294967295
 800077a:	f080 8119 	bcs.w	80009b0 <__udivmoddi4+0x288>
 800077e:	4299      	cmp	r1, r3
 8000780:	f240 8116 	bls.w	80009b0 <__udivmoddi4+0x288>
 8000784:	3e02      	subs	r6, #2
 8000786:	443b      	add	r3, r7
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	b2a4      	uxth	r4, r4
 800078c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000790:	fb08 3310 	mls	r3, r8, r0, r3
 8000794:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000798:	fb00 fe0e 	mul.w	lr, r0, lr
 800079c:	45a6      	cmp	lr, r4
 800079e:	d909      	bls.n	80007b4 <__udivmoddi4+0x8c>
 80007a0:	193c      	adds	r4, r7, r4
 80007a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007a6:	f080 8105 	bcs.w	80009b4 <__udivmoddi4+0x28c>
 80007aa:	45a6      	cmp	lr, r4
 80007ac:	f240 8102 	bls.w	80009b4 <__udivmoddi4+0x28c>
 80007b0:	3802      	subs	r0, #2
 80007b2:	443c      	add	r4, r7
 80007b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007b8:	eba4 040e 	sub.w	r4, r4, lr
 80007bc:	2600      	movs	r6, #0
 80007be:	b11d      	cbz	r5, 80007c8 <__udivmoddi4+0xa0>
 80007c0:	40d4      	lsrs	r4, r2
 80007c2:	2300      	movs	r3, #0
 80007c4:	e9c5 4300 	strd	r4, r3, [r5]
 80007c8:	4631      	mov	r1, r6
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	b902      	cbnz	r2, 80007d2 <__udivmoddi4+0xaa>
 80007d0:	deff      	udf	#255	; 0xff
 80007d2:	fab2 f282 	clz	r2, r2
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d150      	bne.n	800087c <__udivmoddi4+0x154>
 80007da:	1bcb      	subs	r3, r1, r7
 80007dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e0:	fa1f f887 	uxth.w	r8, r7
 80007e4:	2601      	movs	r6, #1
 80007e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ea:	0c21      	lsrs	r1, r4, #16
 80007ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80007f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007f4:	fb08 f30c 	mul.w	r3, r8, ip
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0xe4>
 80007fc:	1879      	adds	r1, r7, r1
 80007fe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0xe2>
 8000804:	428b      	cmp	r3, r1
 8000806:	f200 80e9 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 800080a:	4684      	mov	ip, r0
 800080c:	1ac9      	subs	r1, r1, r3
 800080e:	b2a3      	uxth	r3, r4
 8000810:	fbb1 f0fe 	udiv	r0, r1, lr
 8000814:	fb0e 1110 	mls	r1, lr, r0, r1
 8000818:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800081c:	fb08 f800 	mul.w	r8, r8, r0
 8000820:	45a0      	cmp	r8, r4
 8000822:	d907      	bls.n	8000834 <__udivmoddi4+0x10c>
 8000824:	193c      	adds	r4, r7, r4
 8000826:	f100 33ff 	add.w	r3, r0, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x10a>
 800082c:	45a0      	cmp	r8, r4
 800082e:	f200 80d9 	bhi.w	80009e4 <__udivmoddi4+0x2bc>
 8000832:	4618      	mov	r0, r3
 8000834:	eba4 0408 	sub.w	r4, r4, r8
 8000838:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800083c:	e7bf      	b.n	80007be <__udivmoddi4+0x96>
 800083e:	428b      	cmp	r3, r1
 8000840:	d909      	bls.n	8000856 <__udivmoddi4+0x12e>
 8000842:	2d00      	cmp	r5, #0
 8000844:	f000 80b1 	beq.w	80009aa <__udivmoddi4+0x282>
 8000848:	2600      	movs	r6, #0
 800084a:	e9c5 0100 	strd	r0, r1, [r5]
 800084e:	4630      	mov	r0, r6
 8000850:	4631      	mov	r1, r6
 8000852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000856:	fab3 f683 	clz	r6, r3
 800085a:	2e00      	cmp	r6, #0
 800085c:	d14a      	bne.n	80008f4 <__udivmoddi4+0x1cc>
 800085e:	428b      	cmp	r3, r1
 8000860:	d302      	bcc.n	8000868 <__udivmoddi4+0x140>
 8000862:	4282      	cmp	r2, r0
 8000864:	f200 80b8 	bhi.w	80009d8 <__udivmoddi4+0x2b0>
 8000868:	1a84      	subs	r4, r0, r2
 800086a:	eb61 0103 	sbc.w	r1, r1, r3
 800086e:	2001      	movs	r0, #1
 8000870:	468c      	mov	ip, r1
 8000872:	2d00      	cmp	r5, #0
 8000874:	d0a8      	beq.n	80007c8 <__udivmoddi4+0xa0>
 8000876:	e9c5 4c00 	strd	r4, ip, [r5]
 800087a:	e7a5      	b.n	80007c8 <__udivmoddi4+0xa0>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f603 	lsr.w	r6, r0, r3
 8000884:	4097      	lsls	r7, r2
 8000886:	fa01 f002 	lsl.w	r0, r1, r2
 800088a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800088e:	40d9      	lsrs	r1, r3
 8000890:	4330      	orrs	r0, r6
 8000892:	0c03      	lsrs	r3, r0, #16
 8000894:	fbb1 f6fe 	udiv	r6, r1, lr
 8000898:	fa1f f887 	uxth.w	r8, r7
 800089c:	fb0e 1116 	mls	r1, lr, r6, r1
 80008a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a4:	fb06 f108 	mul.w	r1, r6, r8
 80008a8:	4299      	cmp	r1, r3
 80008aa:	fa04 f402 	lsl.w	r4, r4, r2
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x19c>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008b6:	f080 808d 	bcs.w	80009d4 <__udivmoddi4+0x2ac>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 808a 	bls.w	80009d4 <__udivmoddi4+0x2ac>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b281      	uxth	r1, r0
 80008c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d4:	fb00 f308 	mul.w	r3, r0, r8
 80008d8:	428b      	cmp	r3, r1
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x1c4>
 80008dc:	1879      	adds	r1, r7, r1
 80008de:	f100 3cff 	add.w	ip, r0, #4294967295
 80008e2:	d273      	bcs.n	80009cc <__udivmoddi4+0x2a4>
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d971      	bls.n	80009cc <__udivmoddi4+0x2a4>
 80008e8:	3802      	subs	r0, #2
 80008ea:	4439      	add	r1, r7
 80008ec:	1acb      	subs	r3, r1, r3
 80008ee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008f2:	e778      	b.n	80007e6 <__udivmoddi4+0xbe>
 80008f4:	f1c6 0c20 	rsb	ip, r6, #32
 80008f8:	fa03 f406 	lsl.w	r4, r3, r6
 80008fc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000900:	431c      	orrs	r4, r3
 8000902:	fa20 f70c 	lsr.w	r7, r0, ip
 8000906:	fa01 f306 	lsl.w	r3, r1, r6
 800090a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800090e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000912:	431f      	orrs	r7, r3
 8000914:	0c3b      	lsrs	r3, r7, #16
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fa1f f884 	uxth.w	r8, r4
 800091e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000922:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000926:	fb09 fa08 	mul.w	sl, r9, r8
 800092a:	458a      	cmp	sl, r1
 800092c:	fa02 f206 	lsl.w	r2, r2, r6
 8000930:	fa00 f306 	lsl.w	r3, r0, r6
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x220>
 8000936:	1861      	adds	r1, r4, r1
 8000938:	f109 30ff 	add.w	r0, r9, #4294967295
 800093c:	d248      	bcs.n	80009d0 <__udivmoddi4+0x2a8>
 800093e:	458a      	cmp	sl, r1
 8000940:	d946      	bls.n	80009d0 <__udivmoddi4+0x2a8>
 8000942:	f1a9 0902 	sub.w	r9, r9, #2
 8000946:	4421      	add	r1, r4
 8000948:	eba1 010a 	sub.w	r1, r1, sl
 800094c:	b2bf      	uxth	r7, r7
 800094e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000952:	fb0e 1110 	mls	r1, lr, r0, r1
 8000956:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800095a:	fb00 f808 	mul.w	r8, r0, r8
 800095e:	45b8      	cmp	r8, r7
 8000960:	d907      	bls.n	8000972 <__udivmoddi4+0x24a>
 8000962:	19e7      	adds	r7, r4, r7
 8000964:	f100 31ff 	add.w	r1, r0, #4294967295
 8000968:	d22e      	bcs.n	80009c8 <__udivmoddi4+0x2a0>
 800096a:	45b8      	cmp	r8, r7
 800096c:	d92c      	bls.n	80009c8 <__udivmoddi4+0x2a0>
 800096e:	3802      	subs	r0, #2
 8000970:	4427      	add	r7, r4
 8000972:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000976:	eba7 0708 	sub.w	r7, r7, r8
 800097a:	fba0 8902 	umull	r8, r9, r0, r2
 800097e:	454f      	cmp	r7, r9
 8000980:	46c6      	mov	lr, r8
 8000982:	4649      	mov	r1, r9
 8000984:	d31a      	bcc.n	80009bc <__udivmoddi4+0x294>
 8000986:	d017      	beq.n	80009b8 <__udivmoddi4+0x290>
 8000988:	b15d      	cbz	r5, 80009a2 <__udivmoddi4+0x27a>
 800098a:	ebb3 020e 	subs.w	r2, r3, lr
 800098e:	eb67 0701 	sbc.w	r7, r7, r1
 8000992:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000996:	40f2      	lsrs	r2, r6
 8000998:	ea4c 0202 	orr.w	r2, ip, r2
 800099c:	40f7      	lsrs	r7, r6
 800099e:	e9c5 2700 	strd	r2, r7, [r5]
 80009a2:	2600      	movs	r6, #0
 80009a4:	4631      	mov	r1, r6
 80009a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009aa:	462e      	mov	r6, r5
 80009ac:	4628      	mov	r0, r5
 80009ae:	e70b      	b.n	80007c8 <__udivmoddi4+0xa0>
 80009b0:	4606      	mov	r6, r0
 80009b2:	e6e9      	b.n	8000788 <__udivmoddi4+0x60>
 80009b4:	4618      	mov	r0, r3
 80009b6:	e6fd      	b.n	80007b4 <__udivmoddi4+0x8c>
 80009b8:	4543      	cmp	r3, r8
 80009ba:	d2e5      	bcs.n	8000988 <__udivmoddi4+0x260>
 80009bc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009c0:	eb69 0104 	sbc.w	r1, r9, r4
 80009c4:	3801      	subs	r0, #1
 80009c6:	e7df      	b.n	8000988 <__udivmoddi4+0x260>
 80009c8:	4608      	mov	r0, r1
 80009ca:	e7d2      	b.n	8000972 <__udivmoddi4+0x24a>
 80009cc:	4660      	mov	r0, ip
 80009ce:	e78d      	b.n	80008ec <__udivmoddi4+0x1c4>
 80009d0:	4681      	mov	r9, r0
 80009d2:	e7b9      	b.n	8000948 <__udivmoddi4+0x220>
 80009d4:	4666      	mov	r6, ip
 80009d6:	e775      	b.n	80008c4 <__udivmoddi4+0x19c>
 80009d8:	4630      	mov	r0, r6
 80009da:	e74a      	b.n	8000872 <__udivmoddi4+0x14a>
 80009dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e0:	4439      	add	r1, r7
 80009e2:	e713      	b.n	800080c <__udivmoddi4+0xe4>
 80009e4:	3802      	subs	r0, #2
 80009e6:	443c      	add	r4, r7
 80009e8:	e724      	b.n	8000834 <__udivmoddi4+0x10c>
 80009ea:	bf00      	nop

080009ec <__aeabi_idiv0>:
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009f6:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <MX_DMA_Init+0x80>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a1d      	ldr	r2, [pc, #116]	; (8000a70 <MX_DMA_Init+0x80>)
 80009fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_DMA_Init+0x80>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_DMA_Init+0x80>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <MX_DMA_Init+0x80>)
 8000a14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_DMA_Init+0x80>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	200b      	movs	r0, #11
 8000a2c:	f002 feff 	bl	800382e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a30:	200b      	movs	r0, #11
 8000a32:	f002 ff18 	bl	8003866 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2011      	movs	r0, #17
 8000a3c:	f002 fef7 	bl	800382e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a40:	2011      	movs	r0, #17
 8000a42:	f002 ff10 	bl	8003866 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2038      	movs	r0, #56	; 0x38
 8000a4c:	f002 feef 	bl	800382e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a50:	2038      	movs	r0, #56	; 0x38
 8000a52:	f002 ff08 	bl	8003866 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	203b      	movs	r0, #59	; 0x3b
 8000a5c:	f002 fee7 	bl	800382e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a60:	203b      	movs	r0, #59	; 0x3b
 8000a62:	f002 ff00 	bl	8003866 <HAL_NVIC_EnableIRQ>

}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800

08000a74 <inc_kp>:
float KpO = 0.01665, KdO = 0.4, KiO = 1.3;

float Kp = 1.0;

void inc_kp()
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0
	robotOrientation.Kp_h *= 1.5;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <inc_kp+0x40>)
 8000a7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000a80:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000a84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <inc_kp+0x40>)
 8000a8a:	edc3 7a03 	vstr	s15, [r3, #12]
	char message[32];
	sprintf(message, "kp=%f", robotOrientation.Kp_h);
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <inc_kp+0x40>)
 8000a90:	edd3 7a03 	vldr	s15, [r3, #12]
 8000a94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a98:	4638      	mov	r0, r7
 8000a9a:	ec53 2b17 	vmov	r2, r3, d7
 8000a9e:	4906      	ldr	r1, [pc, #24]	; (8000ab8 <inc_kp+0x44>)
 8000aa0:	f009 ffd2 	bl	800aa48 <siprintf>
	send_UART(message);
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f002 fc3a 	bl	8003320 <send_UART>
}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200002bc 	.word	0x200002bc
 8000ab8:	0800ed10 	.word	0x0800ed10

08000abc <dec_kp>:

void dec_kp()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
	robotOrientation.Kp_h /= 1.5;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <dec_kp+0x40>)
 8000ac4:	ed93 7a03 	vldr	s14, [r3, #12]
 8000ac8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8000acc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <dec_kp+0x40>)
 8000ad2:	edc3 7a03 	vstr	s15, [r3, #12]
	char message[32];
	sprintf(message, "kp=%f", robotOrientation.Kp_h);
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <dec_kp+0x40>)
 8000ad8:	edd3 7a03 	vldr	s15, [r3, #12]
 8000adc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ae0:	4638      	mov	r0, r7
 8000ae2:	ec53 2b17 	vmov	r2, r3, d7
 8000ae6:	4906      	ldr	r1, [pc, #24]	; (8000b00 <dec_kp+0x44>)
 8000ae8:	f009 ffae 	bl	800aa48 <siprintf>
	send_UART(message);
 8000aec:	463b      	mov	r3, r7
 8000aee:	4618      	mov	r0, r3
 8000af0:	f002 fc16 	bl	8003320 <send_UART>
}
 8000af4:	bf00      	nop
 8000af6:	3720      	adds	r7, #32
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200002bc 	.word	0x200002bc
 8000b00:	0800ed10 	.word	0x0800ed10

08000b04 <set_ang>:

void set_ang(float ang)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	ed87 0a01 	vstr	s0, [r7, #4]
	robotOrientation.ang_m = ang;
 8000b0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b16:	ee17 2a90 	vmov	r2, s15
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <set_ang+0x28>)
 8000b1c:	621a      	str	r2, [r3, #32]
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	200002bc 	.word	0x200002bc

08000b30 <FIR_start>:

void FIR_start()
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	set_Kh('M');
 8000b34:	204d      	movs	r0, #77	; 0x4d
 8000b36:	f000 fa27 	bl	8000f88 <set_Kh>
	MY_TIM3_Init(hw_cfg);
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <FIR_start+0x3c>)
 8000b3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b40:	f002 fa38 	bl	8002fb4 <MY_TIM3_Init>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000b44:	210c      	movs	r1, #12
 8000b46:	480a      	ldr	r0, [pc, #40]	; (8000b70 <FIR_start+0x40>)
 8000b48:	f005 ffe6 	bl	8006b18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4809      	ldr	r0, [pc, #36]	; (8000b74 <FIR_start+0x44>)
 8000b50:	f005 ffe2 	bl	8006b18 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim3);
 8000b54:	4808      	ldr	r0, [pc, #32]	; (8000b78 <FIR_start+0x48>)
 8000b56:	f005 fed7 	bl	8006908 <HAL_TIM_Base_Start_IT>

	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b5a:	2008      	movs	r0, #8
 8000b5c:	f002 fe83 	bl	8003866 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b60:	2028      	movs	r0, #40	; 0x28
 8000b62:	f002 fe80 	bl	8003866 <HAL_NVIC_EnableIRQ>
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000004 	.word	0x20000004
 8000b70:	200007e8 	.word	0x200007e8
 8000b74:	2000066c 	.word	0x2000066c
 8000b78:	200006b8 	.word	0x200006b8

08000b7c <FIR_stop>:


void FIR_stop()
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8000b80:	210c      	movs	r1, #12
 8000b82:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <FIR_stop+0x2c>)
 8000b84:	f006 f8c2 	bl	8006d0c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4808      	ldr	r0, [pc, #32]	; (8000bac <FIR_stop+0x30>)
 8000b8c:	f006 f8be 	bl	8006d0c <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(&htim3);
 8000b90:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <FIR_stop+0x34>)
 8000b92:	f005 ff31 	bl	80069f8 <HAL_TIM_Base_Stop_IT>

	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000b96:	2008      	movs	r0, #8
 8000b98:	f002 fe73 	bl	8003882 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000b9c:	2028      	movs	r0, #40	; 0x28
 8000b9e:	f002 fe70 	bl	8003882 <HAL_NVIC_DisableIRQ>
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200007e8 	.word	0x200007e8
 8000bac:	2000066c 	.word	0x2000066c
 8000bb0:	200006b8 	.word	0x200006b8

08000bb4 <proc_ISR_PID>:
	memset(&motorL, 0, sizeof(motorL));
	memset(&motorR, 0, sizeof(motorR));
}

void proc_ISR_PID()
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
	float hw = calc_hw();
 8000bba:	f000 fa81 	bl	80010c0 <calc_hw>
 8000bbe:	ed87 0a05 	vstr	s0, [r7, #20]

	if(mode)
 8000bc2:	4b84      	ldr	r3, [pc, #528]	; (8000dd4 <proc_ISR_PID+0x220>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d01e      	beq.n	8000c08 <proc_ISR_PID+0x54>
	{
		motorL.yr = hw * motorL.spd_r + motorL.yr_last;
 8000bca:	4b83      	ldr	r3, [pc, #524]	; (8000dd8 <proc_ISR_PID+0x224>)
 8000bcc:	ed93 7a03 	vldr	s14, [r3, #12]
 8000bd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bd8:	4b7f      	ldr	r3, [pc, #508]	; (8000dd8 <proc_ISR_PID+0x224>)
 8000bda:	edd3 7a06 	vldr	s15, [r3, #24]
 8000bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be2:	4b7d      	ldr	r3, [pc, #500]	; (8000dd8 <proc_ISR_PID+0x224>)
 8000be4:	edc3 7a05 	vstr	s15, [r3, #20]
		motorR.yr = hw * motorR.spd_r + motorR.yr_last;
 8000be8:	4b7c      	ldr	r3, [pc, #496]	; (8000ddc <proc_ISR_PID+0x228>)
 8000bea:	ed93 7a03 	vldr	s14, [r3, #12]
 8000bee:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bf6:	4b79      	ldr	r3, [pc, #484]	; (8000ddc <proc_ISR_PID+0x228>)
 8000bf8:	edd3 7a06 	vldr	s15, [r3, #24]
 8000bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c00:	4b76      	ldr	r3, [pc, #472]	; (8000ddc <proc_ISR_PID+0x228>)
 8000c02:	edc3 7a05 	vstr	s15, [r3, #20]
 8000c06:	e007      	b.n	8000c18 <proc_ISR_PID+0x64>
	}
	else
	{
		motorL.yr = motorL.pos_r;
 8000c08:	4b73      	ldr	r3, [pc, #460]	; (8000dd8 <proc_ISR_PID+0x224>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a72      	ldr	r2, [pc, #456]	; (8000dd8 <proc_ISR_PID+0x224>)
 8000c0e:	6153      	str	r3, [r2, #20]
		motorR.yr = motorR.pos_r;
 8000c10:	4b72      	ldr	r3, [pc, #456]	; (8000ddc <proc_ISR_PID+0x228>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a71      	ldr	r2, [pc, #452]	; (8000ddc <proc_ISR_PID+0x228>)
 8000c16:	6153      	str	r3, [r2, #20]
	}

	float uL = calc_PID_motor(&motorL);
 8000c18:	486f      	ldr	r0, [pc, #444]	; (8000dd8 <proc_ISR_PID+0x224>)
 8000c1a:	f000 faa5 	bl	8001168 <calc_PID_motor>
 8000c1e:	ed87 0a04 	vstr	s0, [r7, #16]
	float uR = calc_PID_motor(&motorR);
 8000c22:	486e      	ldr	r0, [pc, #440]	; (8000ddc <proc_ISR_PID+0x228>)
 8000c24:	f000 faa0 	bl	8001168 <calc_PID_motor>
 8000c28:	ed87 0a03 	vstr	s0, [r7, #12]

	if(aut)
 8000c2c:	4b6c      	ldr	r3, [pc, #432]	; (8000de0 <proc_ISR_PID+0x22c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f000 80a5 	beq.w	8000d80 <proc_ISR_PID+0x1cc>
	{
		if(uR > 0)
 8000c36:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c42:	dd0c      	ble.n	8000c5e <proc_ISR_PID+0xaa>
		{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c4a:	4866      	ldr	r0, [pc, #408]	; (8000de4 <proc_ISR_PID+0x230>)
 8000c4c:	f003 fc02 	bl	8004454 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c56:	4864      	ldr	r0, [pc, #400]	; (8000de8 <proc_ISR_PID+0x234>)
 8000c58:	f003 fbfc 	bl	8004454 <HAL_GPIO_WritePin>
 8000c5c:	e018      	b.n	8000c90 <proc_ISR_PID+0xdc>
		}
		else if(uR < 0)
 8000c5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c6a:	d511      	bpl.n	8000c90 <proc_ISR_PID+0xdc>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c72:	485d      	ldr	r0, [pc, #372]	; (8000de8 <proc_ISR_PID+0x234>)
 8000c74:	f003 fbee 	bl	8004454 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c7e:	4859      	ldr	r0, [pc, #356]	; (8000de4 <proc_ISR_PID+0x230>)
 8000c80:	f003 fbe8 	bl	8004454 <HAL_GPIO_WritePin>

			 uR = -uR;
 8000c84:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c88:	eef1 7a67 	vneg.f32	s15, s15
 8000c8c:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(uL > 0)
 8000c90:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c9c:	dd0a      	ble.n	8000cb4 <proc_ISR_PID+0x100>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	4851      	ldr	r0, [pc, #324]	; (8000de8 <proc_ISR_PID+0x234>)
 8000ca4:	f003 fbd6 	bl	8004454 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 1);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2101      	movs	r1, #1
 8000cac:	484d      	ldr	r0, [pc, #308]	; (8000de4 <proc_ISR_PID+0x230>)
 8000cae:	f003 fbd1 	bl	8004454 <HAL_GPIO_WritePin>
 8000cb2:	e016      	b.n	8000ce2 <proc_ISR_PID+0x12e>
		}
		else if(uL < 0)
 8000cb4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc0:	d50f      	bpl.n	8000ce2 <proc_ISR_PID+0x12e>
		{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	4847      	ldr	r0, [pc, #284]	; (8000de4 <proc_ISR_PID+0x230>)
 8000cc8:	f003 fbc4 	bl	8004454 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2101      	movs	r1, #1
 8000cd0:	4845      	ldr	r0, [pc, #276]	; (8000de8 <proc_ISR_PID+0x234>)
 8000cd2:	f003 fbbf 	bl	8004454 <HAL_GPIO_WritePin>

			 uL = -uL;
 8000cd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cda:	eef1 7a67 	vneg.f32	s15, s15
 8000cde:	edc7 7a04 	vstr	s15, [r7, #16]
		}

		TIM2->CCR4 = 2.5 / 6.0 * 2000;
 8000ce2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ce6:	f240 3241 	movw	r2, #833	; 0x341
 8000cea:	641a      	str	r2, [r3, #64]	; 0x40
		TIM5->CCR1 = 2.5 / 6.0 * 2000; //L
 8000cec:	4b3f      	ldr	r3, [pc, #252]	; (8000dec <proc_ISR_PID+0x238>)
 8000cee:	f240 3241 	movw	r2, #833	; 0x341
 8000cf2:	635a      	str	r2, [r3, #52]	; 0x34
		/*
		char message[32];
		sprintf(message, "R=%d, L=%d", uR / 6 * 2000, uL / 6 * 2000);
		send_UART(message);
*/
		if(u > 0)
 8000cf4:	4b3e      	ldr	r3, [pc, #248]	; (8000df0 <proc_ISR_PID+0x23c>)
 8000cf6:	edd3 7a00 	vldr	s15, [r3]
 8000cfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d02:	dd19      	ble.n	8000d38 <proc_ISR_PID+0x184>
		{
			float dc = TIM5->CCR1 * (1-u);
 8000d04:	4b39      	ldr	r3, [pc, #228]	; (8000dec <proc_ISR_PID+0x238>)
 8000d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d08:	ee07 3a90 	vmov	s15, r3
 8000d0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d10:	4b37      	ldr	r3, [pc, #220]	; (8000df0 <proc_ISR_PID+0x23c>)
 8000d12:	edd3 7a00 	vldr	s15, [r3]
 8000d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000d1a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d22:	edc7 7a01 	vstr	s15, [r7, #4]
			TIM5->CCR1 = dc;
 8000d26:	4b31      	ldr	r3, [pc, #196]	; (8000dec <proc_ISR_PID+0x238>)
 8000d28:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d30:	ee17 2a90 	vmov	r2, s15
 8000d34:	635a      	str	r2, [r3, #52]	; 0x34
 8000d36:	e041      	b.n	8000dbc <proc_ISR_PID+0x208>
		}
		else if(u < 0)
 8000d38:	4b2d      	ldr	r3, [pc, #180]	; (8000df0 <proc_ISR_PID+0x23c>)
 8000d3a:	edd3 7a00 	vldr	s15, [r3]
 8000d3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d46:	d539      	bpl.n	8000dbc <proc_ISR_PID+0x208>
		{
			float dc = TIM2->CCR4 * (1+u);
 8000d48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	ee07 3a90 	vmov	s15, r3
 8000d52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d56:	4b26      	ldr	r3, [pc, #152]	; (8000df0 <proc_ISR_PID+0x23c>)
 8000d58:	edd3 7a00 	vldr	s15, [r3]
 8000d5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000d60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d68:	edc7 7a02 	vstr	s15, [r7, #8]
			TIM2->CCR4 = dc;
 8000d6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d70:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d78:	ee17 2a90 	vmov	r2, s15
 8000d7c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d7e:	e01d      	b.n	8000dbc <proc_ISR_PID+0x208>


	}
	else
	{
		motorL.e_last = motorL.yr - motorL.pos_m;
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <proc_ISR_PID+0x224>)
 8000d82:	ed93 7a05 	vldr	s14, [r3, #20]
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <proc_ISR_PID+0x224>)
 8000d88:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <proc_ISR_PID+0x224>)
 8000d92:	edc3 7a08 	vstr	s15, [r3, #32]
		motorL.pos_m_last = motorL.pos_m;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <proc_ISR_PID+0x224>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <proc_ISR_PID+0x224>)
 8000d9c:	6093      	str	r3, [r2, #8]

		motorR.e_last = motorR.yr - motorR.pos_m;
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <proc_ISR_PID+0x228>)
 8000da0:	ed93 7a05 	vldr	s14, [r3, #20]
 8000da4:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <proc_ISR_PID+0x228>)
 8000da6:	edd3 7a01 	vldr	s15, [r3, #4]
 8000daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <proc_ISR_PID+0x228>)
 8000db0:	edc3 7a08 	vstr	s15, [r3, #32]
		motorR.pos_m_last = motorR.pos_m;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <proc_ISR_PID+0x228>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <proc_ISR_PID+0x228>)
 8000dba:	6093      	str	r3, [r2, #8]
	}

	motorL.yr_last = motorL.yr;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <proc_ISR_PID+0x224>)
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <proc_ISR_PID+0x224>)
 8000dc2:	6193      	str	r3, [r2, #24]
	motorR.yr_last = motorR.yr;
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <proc_ISR_PID+0x228>)
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <proc_ISR_PID+0x228>)
 8000dca:	6193      	str	r3, [r2, #24]
}
 8000dcc:	bf00      	nop
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	2000024c 	.word	0x2000024c
 8000dd8:	20000254 	.word	0x20000254
 8000ddc:	20000288 	.word	0x20000288
 8000de0:	20000000 	.word	0x20000000
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40020400 	.word	0x40020400
 8000dec:	40000c00 	.word	0x40000c00
 8000df0:	20000250 	.word	0x20000250

08000df4 <proc_ISR_speed>:


void proc_ISR_speed()
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
	float hw = calc_hw();
 8000dfa:	f000 f961 	bl	80010c0 <calc_hw>
 8000dfe:	ed87 0a01 	vstr	s0, [r7, #4]

	motorL.spd_m = (motorL.pos_m - motorL.pos_m_last) / hw;
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <proc_ISR_speed+0x54>)
 8000e04:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <proc_ISR_speed+0x54>)
 8000e0a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e0e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000e12:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <proc_ISR_speed+0x54>)
 8000e1c:	edc3 7a04 	vstr	s15, [r3, #16]
	motorR.spd_m = (motorR.pos_m - motorR.pos_m_last) / hw;
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <proc_ISR_speed+0x58>)
 8000e22:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <proc_ISR_speed+0x58>)
 8000e28:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e2c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000e30:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <proc_ISR_speed+0x58>)
 8000e3a:	edc3 7a04 	vstr	s15, [r3, #16]


}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000254 	.word	0x20000254
 8000e4c:	20000288 	.word	0x20000288

08000e50 <update_posL>:


void update_posL(int dir_m)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	if(dir_m)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00e      	beq.n	8000e7c <update_posL+0x2c>
		motorL.pos_m += POS_UNIT;
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <update_posL+0x60>)
 8000e60:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e68:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8000ea8 <update_posL+0x58>
 8000e6c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000e70:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <update_posL+0x60>)
 8000e76:	edc3 7a01 	vstr	s15, [r3, #4]
	else
		motorL.pos_m -= POS_UNIT;
}
 8000e7a:	e00d      	b.n	8000e98 <update_posL+0x48>
		motorL.pos_m -= POS_UNIT;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <update_posL+0x60>)
 8000e7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e86:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000ea8 <update_posL+0x58>
 8000e8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e8e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <update_posL+0x60>)
 8000e94:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	f3af 8000 	nop.w
 8000ea8:	b0d8fb59 	.word	0xb0d8fb59
 8000eac:	3f7acee8 	.word	0x3f7acee8
 8000eb0:	20000254 	.word	0x20000254
 8000eb4:	00000000 	.word	0x00000000

08000eb8 <update_posR>:


void update_posR(int dir_m)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	if(dir_m)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d00e      	beq.n	8000ee4 <update_posR+0x2c>
		motorR.pos_m += POS_UNIT;
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <update_posR+0x60>)
 8000ec8:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ecc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ed0:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8000f10 <update_posR+0x58>
 8000ed4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ed8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <update_posR+0x60>)
 8000ede:	edc3 7a01 	vstr	s15, [r3, #4]
	else
		motorR.pos_m -= POS_UNIT;
}
 8000ee2:	e00d      	b.n	8000f00 <update_posR+0x48>
		motorR.pos_m -= POS_UNIT;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <update_posR+0x60>)
 8000ee6:	edd3 7a01 	vldr	s15, [r3, #4]
 8000eea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eee:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000f10 <update_posR+0x58>
 8000ef2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ef6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <update_posR+0x60>)
 8000efc:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	f3af 8000 	nop.w
 8000f10:	b0d8fb59 	.word	0xb0d8fb59
 8000f14:	3f7acee8 	.word	0x3f7acee8
 8000f18:	20000288 	.word	0x20000288

08000f1c <FIR_set_ref>:


void FIR_set_ref(float ref, char type, char motor)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f26:	4603      	mov	r3, r0
 8000f28:	460a      	mov	r2, r1
 8000f2a:	70fb      	strb	r3, [r7, #3]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	70bb      	strb	r3, [r7, #2]
	if(type == 'P')
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	2b50      	cmp	r3, #80	; 0x50
 8000f34:	d10d      	bne.n	8000f52 <FIR_set_ref+0x36>
	{
		mode = 0;
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <FIR_set_ref+0x5c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]

		if(motor == 'L')
 8000f3c:	78bb      	ldrb	r3, [r7, #2]
 8000f3e:	2b4c      	cmp	r3, #76	; 0x4c
 8000f40:	d103      	bne.n	8000f4a <FIR_set_ref+0x2e>
			motorL.pos_r = ref;
 8000f42:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <FIR_set_ref+0x60>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6013      	str	r3, [r2, #0]
		if(motor == 'L')
			motorL.spd_r = ref;
		else
			motorR.spd_r = ref;
	}
}
 8000f48:	e010      	b.n	8000f6c <FIR_set_ref+0x50>
			motorR.pos_r = ref;
 8000f4a:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <FIR_set_ref+0x64>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	e00c      	b.n	8000f6c <FIR_set_ref+0x50>
		mode = 1;
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <FIR_set_ref+0x5c>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	601a      	str	r2, [r3, #0]
		if(motor == 'L')
 8000f58:	78bb      	ldrb	r3, [r7, #2]
 8000f5a:	2b4c      	cmp	r3, #76	; 0x4c
 8000f5c:	d103      	bne.n	8000f66 <FIR_set_ref+0x4a>
			motorL.spd_r = ref;
 8000f5e:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <FIR_set_ref+0x60>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	e002      	b.n	8000f6c <FIR_set_ref+0x50>
			motorR.spd_r = ref;
 8000f66:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <FIR_set_ref+0x64>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	2000024c 	.word	0x2000024c
 8000f7c:	20000254 	.word	0x20000254
 8000f80:	20000288 	.word	0x20000288
 8000f84:	00000000 	.word	0x00000000

08000f88 <set_Kh>:


void set_Kh(char mode)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
	if(mode == 'M')
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2b4d      	cmp	r3, #77	; 0x4d
 8000f96:	d148      	bne.n	800102a <set_Kh+0xa2>
	{
		float hw = calc_hw();
 8000f98:	f000 f892 	bl	80010c0 <calc_hw>
 8000f9c:	ed87 0a02 	vstr	s0, [r7, #8]
		motorL.Kp_h = KpL;
 8000fa0:	4b39      	ldr	r3, [pc, #228]	; (8001088 <set_Kh+0x100>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a39      	ldr	r2, [pc, #228]	; (800108c <set_Kh+0x104>)
 8000fa6:	6293      	str	r3, [r2, #40]	; 0x28
		motorL.Kd_h = KdL * (1 - a) / hw;
 8000fa8:	4b39      	ldr	r3, [pc, #228]	; (8001090 <set_Kh+0x108>)
 8000faa:	edd3 7a00 	vldr	s15, [r3]
 8000fae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fb2:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8001080 <set_Kh+0xf8>
 8000fb6:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000fba:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fbe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000fc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fc6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fca:	4b30      	ldr	r3, [pc, #192]	; (800108c <set_Kh+0x104>)
 8000fcc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		motorL.Ki_h = KiL * hw;
 8000fd0:	4b30      	ldr	r3, [pc, #192]	; (8001094 <set_Kh+0x10c>)
 8000fd2:	ed93 7a00 	vldr	s14, [r3]
 8000fd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fde:	4b2b      	ldr	r3, [pc, #172]	; (800108c <set_Kh+0x104>)
 8000fe0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

		motorR.Kp_h = KpR;
 8000fe4:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <set_Kh+0x110>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a2c      	ldr	r2, [pc, #176]	; (800109c <set_Kh+0x114>)
 8000fea:	6293      	str	r3, [r2, #40]	; 0x28
		motorR.Kd_h = KdR * (1 - a) / hw;
 8000fec:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <set_Kh+0x118>)
 8000fee:	edd3 7a00 	vldr	s15, [r3]
 8000ff2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ff6:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8001080 <set_Kh+0xf8>
 8000ffa:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000ffe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001002:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001006:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800100a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800100e:	4b23      	ldr	r3, [pc, #140]	; (800109c <set_Kh+0x114>)
 8001010:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		motorR.Ki_h = KiR * hw;
 8001014:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <set_Kh+0x11c>)
 8001016:	ed93 7a00 	vldr	s14, [r3]
 800101a:	edd7 7a02 	vldr	s15, [r7, #8]
 800101e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <set_Kh+0x114>)
 8001024:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		float hw = 0.001;
		robotOrientation.Kp_h = KpO;
		robotOrientation.Kd_h = KdO * (1 - a) / hw;
		robotOrientation.Ki_h = KiO * hw;
	}
}
 8001028:	e023      	b.n	8001072 <set_Kh+0xea>
		float hw = 0.001;
 800102a:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <set_Kh+0x120>)
 800102c:	60fb      	str	r3, [r7, #12]
		robotOrientation.Kp_h = KpO;
 800102e:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <set_Kh+0x124>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a1f      	ldr	r2, [pc, #124]	; (80010b0 <set_Kh+0x128>)
 8001034:	60d3      	str	r3, [r2, #12]
		robotOrientation.Kd_h = KdO * (1 - a) / hw;
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <set_Kh+0x12c>)
 8001038:	edd3 7a00 	vldr	s15, [r3]
 800103c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001040:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8001080 <set_Kh+0xf8>
 8001044:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001048:	edd7 7a03 	vldr	s15, [r7, #12]
 800104c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001050:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001054:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001058:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <set_Kh+0x128>)
 800105a:	edc3 7a04 	vstr	s15, [r3, #16]
		robotOrientation.Ki_h = KiO * hw;
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <set_Kh+0x130>)
 8001060:	ed93 7a00 	vldr	s14, [r3]
 8001064:	edd7 7a03 	vldr	s15, [r7, #12]
 8001068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800106c:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <set_Kh+0x128>)
 800106e:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	f3af 8000 	nop.w
 8001080:	33333333 	.word	0x33333333
 8001084:	3fe33333 	.word	0x3fe33333
 8001088:	20000018 	.word	0x20000018
 800108c:	20000254 	.word	0x20000254
 8001090:	2000001c 	.word	0x2000001c
 8001094:	20000020 	.word	0x20000020
 8001098:	2000000c 	.word	0x2000000c
 800109c:	20000288 	.word	0x20000288
 80010a0:	20000010 	.word	0x20000010
 80010a4:	20000014 	.word	0x20000014
 80010a8:	3a83126f 	.word	0x3a83126f
 80010ac:	20000024 	.word	0x20000024
 80010b0:	200002bc 	.word	0x200002bc
 80010b4:	20000028 	.word	0x20000028
 80010b8:	2000002c 	.word	0x2000002c
 80010bc:	00000000 	.word	0x00000000

080010c0 <calc_hw>:


float calc_hw()
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	if(!strcmp(hw_cfg.timeunit, "us"))
 80010c4:	4922      	ldr	r1, [pc, #136]	; (8001150 <calc_hw+0x90>)
 80010c6:	4823      	ldr	r0, [pc, #140]	; (8001154 <calc_hw+0x94>)
 80010c8:	f7ff f8ba 	bl	8000240 <strcmp>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10c      	bne.n	80010ec <calc_hw+0x2c>
	{
		return 0.000001 * hw_cfg.value;
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <calc_hw+0x98>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80010de:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8001140 <calc_hw+0x80>
 80010e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010ea:	e023      	b.n	8001134 <calc_hw+0x74>
	}
	else if(!strcmp(hw_cfg.timeunit, "ms"))
 80010ec:	491b      	ldr	r1, [pc, #108]	; (800115c <calc_hw+0x9c>)
 80010ee:	4819      	ldr	r0, [pc, #100]	; (8001154 <calc_hw+0x94>)
 80010f0:	f7ff f8a6 	bl	8000240 <strcmp>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10c      	bne.n	8001114 <calc_hw+0x54>
	{
		return 0.001 * hw_cfg.value;
 80010fa:	4b17      	ldr	r3, [pc, #92]	; (8001158 <calc_hw+0x98>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001106:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001148 <calc_hw+0x88>
 800110a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800110e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001112:	e00f      	b.n	8001134 <calc_hw+0x74>
	}
	else if(!strcmp(hw_cfg.timeunit, "s"))
 8001114:	4912      	ldr	r1, [pc, #72]	; (8001160 <calc_hw+0xa0>)
 8001116:	480f      	ldr	r0, [pc, #60]	; (8001154 <calc_hw+0x94>)
 8001118:	f7ff f892 	bl	8000240 <strcmp>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d106      	bne.n	8001130 <calc_hw+0x70>
	{
		return hw_cfg.value;
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <calc_hw+0x98>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800112e:	e001      	b.n	8001134 <calc_hw+0x74>
	}

	return 0.0000001;
 8001130:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8001164 <calc_hw+0xa4>
}
 8001134:	eeb0 0a67 	vmov.f32	s0, s15
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	f3af 8000 	nop.w
 8001140:	a0b5ed8d 	.word	0xa0b5ed8d
 8001144:	3eb0c6f7 	.word	0x3eb0c6f7
 8001148:	d2f1a9fc 	.word	0xd2f1a9fc
 800114c:	3f50624d 	.word	0x3f50624d
 8001150:	0800ed18 	.word	0x0800ed18
 8001154:	20000008 	.word	0x20000008
 8001158:	20000004 	.word	0x20000004
 800115c:	0800ed1c 	.word	0x0800ed1c
 8001160:	0800ed20 	.word	0x0800ed20
 8001164:	33d6bf95 	.word	0x33d6bf95

08001168 <calc_PID_motor>:


float calc_PID_motor(struct motor_t *motor)
{
 8001168:	b480      	push	{r7}
 800116a:	b087      	sub	sp, #28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	float e = motor->yr - motor->pos_m;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	ed93 7a05 	vldr	s14, [r3, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	edd3 7a01 	vldr	s15, [r3, #4]
 800117c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001180:	edc7 7a04 	vstr	s15, [r7, #16]

	float sum_e_bkp = motor->sum_e;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	60fb      	str	r3, [r7, #12]
	motor->sum_e = motor->sum_e + motor->e_last;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	edd3 7a08 	vldr	s15, [r3, #32]
 8001196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	edc3 7a07 	vstr	s15, [r3, #28]
	float u_d = motor->Kd_h * (motor->pos_m - motor->pos_m_last) + a * motor->u_d_last;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	edd3 6a01 	vldr	s13, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80011b2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80011b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ba:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80011c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011c8:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8001270 <calc_PID_motor+0x108>
 80011cc:	ee27 7b05 	vmul.f64	d7, d7, d5
 80011d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011d4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011d8:	edc7 7a02 	vstr	s15, [r7, #8]
	float u = motor->Kp_h * e + motor->Ki_h * motor->sum_e - u_d;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80011e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80011e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edd3 7a07 	vldr	s15, [r3, #28]
 80011f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001206:	edc7 7a05 	vstr	s15, [r7, #20]
	motor->e_last = e;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	621a      	str	r2, [r3, #32]
	motor->pos_m_last = motor->pos_m;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	609a      	str	r2, [r3, #8]
	motor->u_d_last = u_d;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	625a      	str	r2, [r3, #36]	; 0x24

	if (u > U_SAT_MAX_MOTOR)
 800121e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001222:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800122a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122e:	dd05      	ble.n	800123c <calc_PID_motor+0xd4>
	{
		u = U_SAT_MAX_MOTOR;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <calc_PID_motor+0x110>)
 8001232:	617b      	str	r3, [r7, #20]
		motor->sum_e = sum_e_bkp;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	61da      	str	r2, [r3, #28]
 800123a:	e00d      	b.n	8001258 <calc_PID_motor+0xf0>
	}
	else if(u < U_SAT_MIN_MOTOR)
 800123c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001240:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8001244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	d504      	bpl.n	8001258 <calc_PID_motor+0xf0>
	{
		u = U_SAT_MAX_MOTOR;
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <calc_PID_motor+0x110>)
 8001250:	617b      	str	r3, [r7, #20]
		motor->sum_e = sum_e_bkp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	61da      	str	r2, [r3, #28]
	}

	return u;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	ee07 3a90 	vmov	s15, r3
}
 800125e:	eeb0 0a67 	vmov.f32	s0, s15
 8001262:	371c      	adds	r7, #28
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	f3af 8000 	nop.w
 8001270:	9999999a 	.word	0x9999999a
 8001274:	3fd99999 	.word	0x3fd99999
 8001278:	40c00000 	.word	0x40c00000
 800127c:	00000000 	.word	0x00000000

08001280 <calc_PID_angle>:
	}
}


float calc_PID_angle(struct orientation_t *robotOrientation)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08e      	sub	sp, #56	; 0x38
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	robotOrientation->ang_r = 90;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	225a      	movs	r2, #90	; 0x5a
 800128c:	629a      	str	r2, [r3, #40]	; 0x28

	if(robotOrientation->ang_m < 0)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	2b00      	cmp	r3, #0
 8001294:	da05      	bge.n	80012a2 <calc_PID_angle+0x22>
		robotOrientation->ang_m += 180;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	621a      	str	r2, [r3, #32]

	float e = robotOrientation->ang_r - robotOrientation->ang_m;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	float sum_e_bkp = robotOrientation->sum_e;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	robotOrientation->sum_e = robotOrientation->sum_e + robotOrientation->e_last;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	ed93 7a00 	vldr	s14, [r3]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	edc3 7a00 	vstr	s15, [r3]
	float u_d = robotOrientation->Kd_h * (robotOrientation->ang_m - robotOrientation->ang_m_last) + a * robotOrientation->u_d_last;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	ed93 7a04 	vldr	s14, [r3, #16]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a1a      	ldr	r2, [r3, #32]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80012fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012fe:	ed9f 5b30 	vldr	d5, [pc, #192]	; 80013c0 <calc_PID_angle+0x140>
 8001302:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001306:	ee36 7b07 	vadd.f64	d7, d6, d7
 800130a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800130e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	//float u = robotOrientation->Kp_h * e + robotOrientation->Ki_h * robotOrientation->sum_e - u_d; /*robotOrientation->Kp * robotOrientation->px_m*/;
	robotOrientation->e_last = e;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001316:	605a      	str	r2, [r3, #4]
	robotOrientation->ang_m_last = robotOrientation->ang_m;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a1a      	ldr	r2, [r3, #32]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	625a      	str	r2, [r3, #36]	; 0x24
	robotOrientation->u_d_last = u_d;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001324:	609a      	str	r2, [r3, #8]

	float u = robotOrientation->Kd_h * e;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	edd3 7a04 	vldr	s15, [r3, #16]
 800132c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001334:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	if (u > U_SAT_MAX_ANGLE)
 8001338:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800133c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001348:	dd06      	ble.n	8001358 <calc_PID_angle+0xd8>
	{
		u = U_SAT_MAX_ANGLE;
 800134a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800134e:	637b      	str	r3, [r7, #52]	; 0x34
		robotOrientation->sum_e = sum_e_bkp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	e00d      	b.n	8001374 <calc_PID_angle+0xf4>
	}
	else if(u < U_SAT_MIN_ANGLE)
 8001358:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800135c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001368:	d504      	bpl.n	8001374 <calc_PID_angle+0xf4>
	{
		u = U_SAT_MIN_ANGLE;
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <calc_PID_angle+0x148>)
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
		robotOrientation->sum_e = sum_e_bkp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001372:	601a      	str	r2, [r3, #0]
	}


	if(++n == 1000)
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <calc_PID_angle+0x14c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	4a14      	ldr	r2, [pc, #80]	; (80013cc <calc_PID_angle+0x14c>)
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <calc_PID_angle+0x14c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001386:	d112      	bne.n	80013ae <calc_PID_angle+0x12e>
	{
		char message[32];
			sprintf(message, "u=%0.2f", u);
 8001388:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800138c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001390:	f107 0008 	add.w	r0, r7, #8
 8001394:	ec53 2b17 	vmov	r2, r3, d7
 8001398:	490d      	ldr	r1, [pc, #52]	; (80013d0 <calc_PID_angle+0x150>)
 800139a:	f009 fb55 	bl	800aa48 <siprintf>
			send_UART(message);
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 ffbc 	bl	8003320 <send_UART>
		n = 0;
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <calc_PID_angle+0x14c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
	}


	return u;
 80013ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b0:	ee07 3a90 	vmov	s15, r3
}
 80013b4:	eeb0 0a67 	vmov.f32	s0, s15
 80013b8:	3738      	adds	r7, #56	; 0x38
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	9999999a 	.word	0x9999999a
 80013c4:	3fd99999 	.word	0x3fd99999
 80013c8:	bf800000 	.word	0xbf800000
 80013cc:	20000248 	.word	0x20000248
 80013d0:	0800ed24 	.word	0x0800ed24

080013d4 <ISR_PID_angle>:

void ISR_PID_angle()
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	u = calc_PID_angle(&robotOrientation);
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <ISR_PID_angle+0x18>)
 80013da:	f7ff ff51 	bl	8001280 <calc_PID_angle>
 80013de:	eef0 7a40 	vmov.f32	s15, s0
 80013e2:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <ISR_PID_angle+0x1c>)
 80013e4:	edc3 7a00 	vstr	s15, [r3]
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200002bc 	.word	0x200002bc
 80013f0:	20000250 	.word	0x20000250

080013f4 <set_px>:

void set_px(int px)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	robotOrientation.px_m = px;
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <set_px+0x1c>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	61d3      	str	r3, [r2, #28]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	200002bc 	.word	0x200002bc

08001414 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08c      	sub	sp, #48	; 0x30
 8001418:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800142a:	4b79      	ldr	r3, [pc, #484]	; (8001610 <MX_GPIO_Init+0x1fc>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a78      	ldr	r2, [pc, #480]	; (8001610 <MX_GPIO_Init+0x1fc>)
 8001430:	f043 0310 	orr.w	r3, r3, #16
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b76      	ldr	r3, [pc, #472]	; (8001610 <MX_GPIO_Init+0x1fc>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	61bb      	str	r3, [r7, #24]
 8001440:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	4b73      	ldr	r3, [pc, #460]	; (8001610 <MX_GPIO_Init+0x1fc>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a72      	ldr	r2, [pc, #456]	; (8001610 <MX_GPIO_Init+0x1fc>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b70      	ldr	r3, [pc, #448]	; (8001610 <MX_GPIO_Init+0x1fc>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800145a:	4b6d      	ldr	r3, [pc, #436]	; (8001610 <MX_GPIO_Init+0x1fc>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a6c      	ldr	r2, [pc, #432]	; (8001610 <MX_GPIO_Init+0x1fc>)
 8001460:	f043 0320 	orr.w	r3, r3, #32
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b6a      	ldr	r3, [pc, #424]	; (8001610 <MX_GPIO_Init+0x1fc>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0320 	and.w	r3, r3, #32
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	4b67      	ldr	r3, [pc, #412]	; (8001610 <MX_GPIO_Init+0x1fc>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a66      	ldr	r2, [pc, #408]	; (8001610 <MX_GPIO_Init+0x1fc>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b64      	ldr	r3, [pc, #400]	; (8001610 <MX_GPIO_Init+0x1fc>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	4b61      	ldr	r3, [pc, #388]	; (8001610 <MX_GPIO_Init+0x1fc>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a60      	ldr	r2, [pc, #384]	; (8001610 <MX_GPIO_Init+0x1fc>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b5e      	ldr	r3, [pc, #376]	; (8001610 <MX_GPIO_Init+0x1fc>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a2:	4b5b      	ldr	r3, [pc, #364]	; (8001610 <MX_GPIO_Init+0x1fc>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a5a      	ldr	r2, [pc, #360]	; (8001610 <MX_GPIO_Init+0x1fc>)
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b58      	ldr	r3, [pc, #352]	; (8001610 <MX_GPIO_Init+0x1fc>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, HCSR_TRIG_SX_Pin|FIR_RV_MD_Pin|FIR_RV_ME_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f248 0109 	movw	r1, #32777	; 0x8009
 80014c0:	4854      	ldr	r0, [pc, #336]	; (8001614 <MX_GPIO_Init+0x200>)
 80014c2:	f002 ffc7 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HCSR_TRIG_SY_GPIO_Port, HCSR_TRIG_SY_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2180      	movs	r1, #128	; 0x80
 80014ca:	4853      	ldr	r0, [pc, #332]	; (8001618 <MX_GPIO_Init+0x204>)
 80014cc:	f002 ffc2 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FIR_FW_ME_Pin|FIR_FW_MD_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	f244 4101 	movw	r1, #17409	; 0x4401
 80014d6:	4851      	ldr	r0, [pc, #324]	; (800161c <MX_GPIO_Init+0x208>)
 80014d8:	f002 ffbc 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = FIR_SA_ME_Pin|FIR_SA_MD_Pin;
 80014dc:	f244 0304 	movw	r3, #16388	; 0x4004
 80014e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	4619      	mov	r1, r3
 80014f2:	4848      	ldr	r0, [pc, #288]	; (8001614 <MX_GPIO_Init+0x200>)
 80014f4:	f002 fdea 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = HCSR_TRIG_SX_Pin|FIR_RV_MD_Pin|FIR_RV_ME_Pin;
 80014f8:	f248 0309 	movw	r3, #32777	; 0x8009
 80014fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	4619      	mov	r1, r3
 8001510:	4840      	ldr	r0, [pc, #256]	; (8001614 <MX_GPIO_Init+0x200>)
 8001512:	f002 fddb 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800151c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	4619      	mov	r1, r3
 800152c:	483c      	ldr	r0, [pc, #240]	; (8001620 <MX_GPIO_Init+0x20c>)
 800152e:	f002 fdcd 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IV_TD_Pin;
 8001532:	2310      	movs	r3, #16
 8001534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IV_TD_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 031c 	add.w	r3, r7, #28
 8001542:	4619      	mov	r1, r3
 8001544:	4834      	ldr	r0, [pc, #208]	; (8001618 <MX_GPIO_Init+0x204>)
 8001546:	f002 fdc1 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HCSR_TRIG_SY_Pin;
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(HCSR_TRIG_SY_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	4619      	mov	r1, r3
 8001560:	482d      	ldr	r0, [pc, #180]	; (8001618 <MX_GPIO_Init+0x204>)
 8001562:	f002 fdb3 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IV_FE_Pin;
 8001566:	2304      	movs	r3, #4
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IV_FE_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4619      	mov	r1, r3
 8001578:	4829      	ldr	r0, [pc, #164]	; (8001620 <MX_GPIO_Init+0x20c>)
 800157a:	f002 fda7 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PB14 */
  GPIO_InitStruct.Pin = FIR_FW_ME_Pin|FIR_FW_MD_Pin|GPIO_PIN_14;
 800157e:	f244 4301 	movw	r3, #17409	; 0x4401
 8001582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	2301      	movs	r3, #1
 8001586:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	4619      	mov	r1, r3
 8001596:	4821      	ldr	r0, [pc, #132]	; (800161c <MX_GPIO_Init+0x208>)
 8001598:	f002 fd98 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = IV_PL_Pin|IV_FD_Pin|IV_TE_Pin;
 800159c:	2346      	movs	r3, #70	; 0x46
 800159e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	481b      	ldr	r0, [pc, #108]	; (800161c <MX_GPIO_Init+0x208>)
 80015b0:	f002 fd8c 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FIR_SB_MD_Pin;
 80015b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FIR_SB_MD_GPIO_Port, &GPIO_InitStruct);
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	4619      	mov	r1, r3
 80015c8:	4812      	ldr	r0, [pc, #72]	; (8001614 <MX_GPIO_Init+0x200>)
 80015ca:	f002 fd7f 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FIR_SB_ME_Pin;
 80015ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FIR_SB_ME_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	4619      	mov	r1, r3
 80015e2:	4810      	ldr	r0, [pc, #64]	; (8001624 <MX_GPIO_Init+0x210>)
 80015e4:	f002 fd72 	bl	80040cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2100      	movs	r1, #0
 80015ec:	2008      	movs	r0, #8
 80015ee:	f002 f91e 	bl	800382e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80015f2:	2008      	movs	r0, #8
 80015f4:	f002 f937 	bl	8003866 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2100      	movs	r1, #0
 80015fc:	2028      	movs	r0, #40	; 0x28
 80015fe:	f002 f916 	bl	800382e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001602:	2028      	movs	r0, #40	; 0x28
 8001604:	f002 f92f 	bl	8003866 <HAL_NVIC_EnableIRQ>

}
 8001608:	bf00      	nop
 800160a:	3730      	adds	r7, #48	; 0x30
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40023800 	.word	0x40023800
 8001614:	40021000 	.word	0x40021000
 8001618:	40021400 	.word	0x40021400
 800161c:	40020400 	.word	0x40020400
 8001620:	40020800 	.word	0x40020800
 8001624:	40020c00 	.word	0x40020c00

08001628 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_14)	// MD
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001638:	d10a      	bne.n	8001650 <HAL_GPIO_EXTI_Callback+0x28>
	{
		int dir_m = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12);
 800163a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800163e:	4813      	ldr	r0, [pc, #76]	; (800168c <HAL_GPIO_EXTI_Callback+0x64>)
 8001640:	f002 fef0 	bl	8004424 <HAL_GPIO_ReadPin>
 8001644:	4603      	mov	r3, r0
 8001646:	60bb      	str	r3, [r7, #8]
		update_posR(dir_m);
 8001648:	68b8      	ldr	r0, [r7, #8]
 800164a:	f7ff fc35 	bl	8000eb8 <update_posR>
	else if(GPIO_Pin == GPIO_PIN_13)
	{
		FIR_start();
	}

}
 800164e:	e018      	b.n	8001682 <HAL_GPIO_EXTI_Callback+0x5a>
	else if(GPIO_Pin == GPIO_PIN_2)	// ME
 8001650:	88fb      	ldrh	r3, [r7, #6]
 8001652:	2b04      	cmp	r3, #4
 8001654:	d10f      	bne.n	8001676 <HAL_GPIO_EXTI_Callback+0x4e>
		int dir_m = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 8001656:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800165a:	480d      	ldr	r0, [pc, #52]	; (8001690 <HAL_GPIO_EXTI_Callback+0x68>)
 800165c:	f002 fee2 	bl	8004424 <HAL_GPIO_ReadPin>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	bf0c      	ite	eq
 8001666:	2301      	moveq	r3, #1
 8001668:	2300      	movne	r3, #0
 800166a:	b2db      	uxtb	r3, r3
 800166c:	60fb      	str	r3, [r7, #12]
		update_posL(dir_m);
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f7ff fbee 	bl	8000e50 <update_posL>
}
 8001674:	e005      	b.n	8001682 <HAL_GPIO_EXTI_Callback+0x5a>
	else if(GPIO_Pin == GPIO_PIN_13)
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800167c:	d101      	bne.n	8001682 <HAL_GPIO_EXTI_Callback+0x5a>
		FIR_start();
 800167e:	f7ff fa57 	bl	8000b30 <FIR_start>
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000
 8001690:	40020c00 	.word	0x40020c00

08001694 <HCSR_proc_TRIG_FSM>:
struct coords distance = { 0.0, 0.0 };
struct coords safeLocation = { 0.0, 0.0 }; // home
static uint8_t state = 0, cnt = 0;

void HCSR_proc_TRIG_FSM()
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	if(state == 0)														// STATE 0: disable TRIGGER
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <HCSR_proc_TRIG_FSM+0xac>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10d      	bne.n	80016bc <HCSR_proc_TRIG_FSM+0x28>
	{
		state = 1;
 80016a0:	4b27      	ldr	r3, [pc, #156]	; (8001740 <HCSR_proc_TRIG_FSM+0xac>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2108      	movs	r1, #8
 80016aa:	4826      	ldr	r0, [pc, #152]	; (8001744 <HCSR_proc_TRIG_FSM+0xb0>)
 80016ac:	f002 fed2 	bl	8004454 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2180      	movs	r1, #128	; 0x80
 80016b4:	4824      	ldr	r0, [pc, #144]	; (8001748 <HCSR_proc_TRIG_FSM+0xb4>)
 80016b6:	f002 fecd 	bl	8004454 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0);
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 0);
			HAL_TIM_Base_Stop_IT(&htim6);
		}
	}
}
 80016ba:	e03f      	b.n	800173c <HCSR_proc_TRIG_FSM+0xa8>
	else if(state == 1)													// STATE 1: wait 2uS and enable TRIGGER
 80016bc:	4b20      	ldr	r3, [pc, #128]	; (8001740 <HCSR_proc_TRIG_FSM+0xac>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d11a      	bne.n	80016fa <HCSR_proc_TRIG_FSM+0x66>
		if(++cnt == 2)
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <HCSR_proc_TRIG_FSM+0xb8>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	3301      	adds	r3, #1
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	4b1f      	ldr	r3, [pc, #124]	; (800174c <HCSR_proc_TRIG_FSM+0xb8>)
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <HCSR_proc_TRIG_FSM+0xb8>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d131      	bne.n	800173c <HCSR_proc_TRIG_FSM+0xa8>
			cnt = 0;
 80016d8:	4b1c      	ldr	r3, [pc, #112]	; (800174c <HCSR_proc_TRIG_FSM+0xb8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
			state = 2;
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <HCSR_proc_TRIG_FSM+0xac>)
 80016e0:	2202      	movs	r2, #2
 80016e2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 1);
 80016e4:	2201      	movs	r2, #1
 80016e6:	2108      	movs	r1, #8
 80016e8:	4816      	ldr	r0, [pc, #88]	; (8001744 <HCSR_proc_TRIG_FSM+0xb0>)
 80016ea:	f002 feb3 	bl	8004454 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 1);
 80016ee:	2201      	movs	r2, #1
 80016f0:	2180      	movs	r1, #128	; 0x80
 80016f2:	4815      	ldr	r0, [pc, #84]	; (8001748 <HCSR_proc_TRIG_FSM+0xb4>)
 80016f4:	f002 feae 	bl	8004454 <HAL_GPIO_WritePin>
}
 80016f8:	e020      	b.n	800173c <HCSR_proc_TRIG_FSM+0xa8>
	else if(state == 2)													// STATE 2: wait 10uS and disable TRIGGER
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HCSR_proc_TRIG_FSM+0xac>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d11c      	bne.n	800173c <HCSR_proc_TRIG_FSM+0xa8>
		if(++cnt == 10)
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <HCSR_proc_TRIG_FSM+0xb8>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <HCSR_proc_TRIG_FSM+0xb8>)
 800170c:	701a      	strb	r2, [r3, #0]
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <HCSR_proc_TRIG_FSM+0xb8>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b0a      	cmp	r3, #10
 8001714:	d112      	bne.n	800173c <HCSR_proc_TRIG_FSM+0xa8>
			cnt = 0;
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HCSR_proc_TRIG_FSM+0xb8>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
			state = 0;
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <HCSR_proc_TRIG_FSM+0xac>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2108      	movs	r1, #8
 8001726:	4807      	ldr	r0, [pc, #28]	; (8001744 <HCSR_proc_TRIG_FSM+0xb0>)
 8001728:	f002 fe94 	bl	8004454 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 0);
 800172c:	2200      	movs	r2, #0
 800172e:	2180      	movs	r1, #128	; 0x80
 8001730:	4805      	ldr	r0, [pc, #20]	; (8001748 <HCSR_proc_TRIG_FSM+0xb4>)
 8001732:	f002 fe8f 	bl	8004454 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim6);
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <HCSR_proc_TRIG_FSM+0xbc>)
 8001738:	f005 f95e 	bl	80069f8 <HAL_TIM_Base_Stop_IT>
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000318 	.word	0x20000318
 8001744:	40021000 	.word	0x40021000
 8001748:	40021400 	.word	0x40021400
 800174c:	20000319 	.word	0x20000319
 8001750:	20000750 	.word	0x20000750
 8001754:	00000000 	.word	0x00000000

08001758 <HCSR_read_ECHO_pulse>:

void HCSR_read_ECHO_pulse(char coord)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
	struct distSensor_t* distSensor;
	TIM_HandleTypeDef* htim;
	uint32_t channel;

	if(coord == 'x')
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b78      	cmp	r3, #120	; 0x78
 8001766:	d106      	bne.n	8001776 <HCSR_read_ECHO_pulse+0x1e>
	{
		distSensor = &distSensorX;
 8001768:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <HCSR_read_ECHO_pulse+0x108>)
 800176a:	617b      	str	r3, [r7, #20]
		htim = &htim9;
 800176c:	4b3d      	ldr	r3, [pc, #244]	; (8001864 <HCSR_read_ECHO_pulse+0x10c>)
 800176e:	613b      	str	r3, [r7, #16]
		channel = TIM_CHANNEL_2;
 8001770:	2304      	movs	r3, #4
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	e005      	b.n	8001782 <HCSR_read_ECHO_pulse+0x2a>
	}
	else
	{
		distSensor = &distSensorY;
 8001776:	4b3c      	ldr	r3, [pc, #240]	; (8001868 <HCSR_read_ECHO_pulse+0x110>)
 8001778:	617b      	str	r3, [r7, #20]
		htim = &htim13;
 800177a:	4b3c      	ldr	r3, [pc, #240]	; (800186c <HCSR_read_ECHO_pulse+0x114>)
 800177c:	613b      	str	r3, [r7, #16]
		channel = TIM_CHANNEL_1;
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
	}

	if(!distSensor->isFirstCapture)														// if positive edge transition
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	7b1b      	ldrb	r3, [r3, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10a      	bne.n	80017a0 <HCSR_read_ECHO_pulse+0x48>
	{
		distSensor->ic1 = HAL_TIM_ReadCapturedValue(htim, channel);						// read first timer counter value
 800178a:	68f9      	ldr	r1, [r7, #12]
 800178c:	6938      	ldr	r0, [r7, #16]
 800178e:	f006 f947 	bl	8007a20 <HAL_TIM_ReadCapturedValue>
 8001792:	4602      	mov	r2, r0
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	601a      	str	r2, [r3, #0]
		distSensor->isFirstCapture = 1;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2201      	movs	r2, #1
 800179c:	731a      	strb	r2, [r3, #12]

		distSensor->isFirstCapture = 0; 												// set it back to detect positive edge

		distSensor->ready = 1;															// set flag
	}
}
 800179e:	e050      	b.n	8001842 <HCSR_read_ECHO_pulse+0xea>
		distSensor->ic2 = HAL_TIM_ReadCapturedValue(htim, channel); 					// read second timer counter value
 80017a0:	68f9      	ldr	r1, [r7, #12]
 80017a2:	6938      	ldr	r0, [r7, #16]
 80017a4:	f006 f93c 	bl	8007a20 <HAL_TIM_ReadCapturedValue>
 80017a8:	4602      	mov	r2, r0
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	605a      	str	r2, [r3, #4]
		HAL_TIM_IC_Stop_IT(htim, channel);												// stop timer
 80017ae:	68f9      	ldr	r1, [r7, #12]
 80017b0:	6938      	ldr	r0, [r7, #16]
 80017b2:	f005 fcdd 	bl	8007170 <HAL_TIM_IC_Stop_IT>
		__HAL_TIM_SET_COUNTER(htim, 0);  												// reset the timer counter
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2200      	movs	r2, #0
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
		if(distSensor->ic2 > distSensor->ic1)											// calculate timer tick difference
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d907      	bls.n	80017da <HCSR_read_ECHO_pulse+0x82>
			distSensor->diff = distSensor->ic2 - distSensor->ic1;
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	1ad2      	subs	r2, r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	e007      	b.n	80017ea <HCSR_read_ECHO_pulse+0x92>
			distSensor->diff = (0xFFFFFFFF - distSensor->ic1) + distSensor->ic2;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	1e5a      	subs	r2, r3, #1
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	609a      	str	r2, [r3, #8]
		distSensor->dist = ((float) distSensor->diff / 1000000.0) * 343.0 / 2.0;		// time convertion to distance
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	ee07 3a90 	vmov	s15, r3
 80017f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017f6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80017fa:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8001850 <HCSR_read_ECHO_pulse+0xf8>
 80017fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001802:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8001858 <HCSR_read_ECHO_pulse+0x100>
 8001806:	ee27 6b06 	vmul.f64	d6, d7, d6
 800180a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800180e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001812:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	edc3 7a04 	vstr	s15, [r3, #16]
		if (distSensor->diff < 100 || distSensor->diff > 18000)							// object too close or too far
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b63      	cmp	r3, #99	; 0x63
 8001822:	d905      	bls.n	8001830 <HCSR_read_ECHO_pulse+0xd8>
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f244 6250 	movw	r2, #18000	; 0x4650
 800182c:	4293      	cmp	r3, r2
 800182e:	d902      	bls.n	8001836 <HCSR_read_ECHO_pulse+0xde>
			distSensor->dist = -1;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	4a0f      	ldr	r2, [pc, #60]	; (8001870 <HCSR_read_ECHO_pulse+0x118>)
 8001834:	611a      	str	r2, [r3, #16]
		distSensor->isFirstCapture = 0; 												// set it back to detect positive edge
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2200      	movs	r2, #0
 800183a:	731a      	strb	r2, [r3, #12]
		distSensor->ready = 1;															// set flag
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2201      	movs	r2, #1
 8001840:	735a      	strb	r2, [r3, #13]
}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	f3af 8000 	nop.w
 8001850:	00000000 	.word	0x00000000
 8001854:	412e8480 	.word	0x412e8480
 8001858:	00000000 	.word	0x00000000
 800185c:	40757000 	.word	0x40757000
 8001860:	200002e8 	.word	0x200002e8
 8001864:	2000079c 	.word	0x2000079c
 8001868:	200002fc 	.word	0x200002fc
 800186c:	20000704 	.word	0x20000704
 8001870:	bf800000 	.word	0xbf800000

08001874 <HCSR_proc_distance>:

void HCSR_proc_distance()
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim9, TIM_CHANNEL_2);
 8001878:	2104      	movs	r1, #4
 800187a:	4806      	ldr	r0, [pc, #24]	; (8001894 <HCSR_proc_distance+0x20>)
 800187c:	f005 fb28 	bl	8006ed0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim13, TIM_CHANNEL_1);
 8001880:	2100      	movs	r1, #0
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <HCSR_proc_distance+0x24>)
 8001884:	f005 fb24 	bl	8006ed0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8001888:	4804      	ldr	r0, [pc, #16]	; (800189c <HCSR_proc_distance+0x28>)
 800188a:	f005 f83d 	bl	8006908 <HAL_TIM_Base_Start_IT>
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	2000079c 	.word	0x2000079c
 8001898:	20000704 	.word	0x20000704
 800189c:	20000750 	.word	0x20000750

080018a0 <HCSR_get_distance>:

struct coords HCSR_get_distance()
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08e      	sub	sp, #56	; 0x38
 80018a4:	af02      	add	r7, sp, #8
	if(distSensorX.ready && distSensorY.ready)
 80018a6:	4b21      	ldr	r3, [pc, #132]	; (800192c <HCSR_get_distance+0x8c>)
 80018a8:	7b5b      	ldrb	r3, [r3, #13]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d029      	beq.n	8001902 <HCSR_get_distance+0x62>
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HCSR_get_distance+0x90>)
 80018b0:	7b5b      	ldrb	r3, [r3, #13]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d025      	beq.n	8001902 <HCSR_get_distance+0x62>
	{
		distSensorX.ready = 0;
 80018b6:	4b1d      	ldr	r3, [pc, #116]	; (800192c <HCSR_get_distance+0x8c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	735a      	strb	r2, [r3, #13]
		distSensorY.ready = 0;
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <HCSR_get_distance+0x90>)
 80018be:	2200      	movs	r2, #0
 80018c0:	735a      	strb	r2, [r3, #13]

		distance.x = distSensorX.dist;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <HCSR_get_distance+0x8c>)
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	4a1b      	ldr	r2, [pc, #108]	; (8001934 <HCSR_get_distance+0x94>)
 80018c8:	6013      	str	r3, [r2, #0]
		distance.y = distSensorY.dist;
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HCSR_get_distance+0x90>)
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	4a19      	ldr	r2, [pc, #100]	; (8001934 <HCSR_get_distance+0x94>)
 80018d0:	6053      	str	r3, [r2, #4]

		char message[32];
		sprintf(message, "coords = (%0.2f, %0.2f)", distance.x, distance.y);
 80018d2:	4b18      	ldr	r3, [pc, #96]	; (8001934 <HCSR_get_distance+0x94>)
 80018d4:	edd3 7a00 	vldr	s15, [r3]
 80018d8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80018dc:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HCSR_get_distance+0x94>)
 80018de:	edd3 7a01 	vldr	s15, [r3, #4]
 80018e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018e6:	f107 0008 	add.w	r0, r7, #8
 80018ea:	ed8d 7b00 	vstr	d7, [sp]
 80018ee:	ec53 2b16 	vmov	r2, r3, d6
 80018f2:	4911      	ldr	r1, [pc, #68]	; (8001938 <HCSR_get_distance+0x98>)
 80018f4:	f009 f8a8 	bl	800aa48 <siprintf>
		send_UART(message);
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	4618      	mov	r0, r3
 80018fe:	f001 fd0f 	bl	8003320 <send_UART>
	}

	return distance;
 8001902:	4a0c      	ldr	r2, [pc, #48]	; (8001934 <HCSR_get_distance+0x94>)
 8001904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800190c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001914:	ee07 2a10 	vmov	s14, r2
 8001918:	ee07 3a90 	vmov	s15, r3
}
 800191c:	eeb0 0a47 	vmov.f32	s0, s14
 8001920:	eef0 0a67 	vmov.f32	s1, s15
 8001924:	3730      	adds	r7, #48	; 0x30
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200002e8 	.word	0x200002e8
 8001930:	200002fc 	.word	0x200002fc
 8001934:	20000310 	.word	0x20000310
 8001938:	0800ed2c 	.word	0x0800ed2c

0800193c <check_command>:

float pos_r = 0.0, spd_r = 0.0;
char m = 'S';

unsigned char check_command(char* message)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
    char cmd = INV;
 8001944:	2300      	movs	r3, #0
 8001946:	73fb      	strb	r3, [r7, #15]

    if((!strncmp((char*) message, "REF", 3)))
 8001948:	2203      	movs	r2, #3
 800194a:	491d      	ldr	r1, [pc, #116]	; (80019c0 <check_command+0x84>)
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f009 f90c 	bl	800ab6a <strncmp>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <check_command+0x22>
		cmd = REF;
 8001958:	2302      	movs	r3, #2
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	e02b      	b.n	80019b6 <check_command+0x7a>
    else if((!strncmp((char*) message, "EN", 2)))
 800195e:	2202      	movs	r2, #2
 8001960:	4918      	ldr	r1, [pc, #96]	; (80019c4 <check_command+0x88>)
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f009 f901 	bl	800ab6a <strncmp>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d102      	bne.n	8001974 <check_command+0x38>
        cmd = EN;
 800196e:	2301      	movs	r3, #1
 8001970:	73fb      	strb	r3, [r7, #15]
 8001972:	e020      	b.n	80019b6 <check_command+0x7a>
	else if((!strncmp((char*) message, "/", 1)))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	781a      	ldrb	r2, [r3, #0]
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <check_command+0x8c>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <check_command+0x4c>
		cmd = INC;
 8001982:	2303      	movs	r3, #3
 8001984:	73fb      	strb	r3, [r7, #15]
 8001986:	e016      	b.n	80019b6 <check_command+0x7a>
	else if((!strncmp((char*) message, "\\", 1)))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	781a      	ldrb	r2, [r3, #0]
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <check_command+0x90>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d102      	bne.n	800199c <check_command+0x60>
		cmd = DEC;
 8001996:	2304      	movs	r3, #4
 8001998:	73fb      	strb	r3, [r7, #15]
 800199a:	e00c      	b.n	80019b6 <check_command+0x7a>
	else if((!strncmp((char*) message, "DIST", 4)))
 800199c:	2204      	movs	r2, #4
 800199e:	490c      	ldr	r1, [pc, #48]	; (80019d0 <check_command+0x94>)
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f009 f8e2 	bl	800ab6a <strncmp>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <check_command+0x76>
		cmd = DIST;
 80019ac:	2305      	movs	r3, #5
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	e001      	b.n	80019b6 <check_command+0x7a>
    else
    	cmd = INV;
 80019b2:	2300      	movs	r3, #0
 80019b4:	73fb      	strb	r3, [r7, #15]

    return cmd;
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	0800ed44 	.word	0x0800ed44
 80019c4:	0800ed48 	.word	0x0800ed48
 80019c8:	0800ed4c 	.word	0x0800ed4c
 80019cc:	0800ed50 	.word	0x0800ed50
 80019d0:	0800ed54 	.word	0x0800ed54

080019d4 <proc_inv_cmd>:
		proc_dist_cmd
};


void proc_inv_cmd(char* message)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	send_UART("Invalid instruction. Type '?' for Help.");
 80019dc:	4803      	ldr	r0, [pc, #12]	; (80019ec <proc_inv_cmd+0x18>)
 80019de:	f001 fc9f 	bl	8003320 <send_UART>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	0800ed5c 	.word	0x0800ed5c

080019f0 <proc_en_cmd>:


void proc_en_cmd(char* message)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	int val;

	if(sscanf((char*) message, "EN %d", &val) == 1)
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	461a      	mov	r2, r3
 80019fe:	4912      	ldr	r1, [pc, #72]	; (8001a48 <proc_en_cmd+0x58>)
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f009 f841 	bl	800aa88 <siscanf>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d114      	bne.n	8001a36 <proc_en_cmd+0x46>
	{
		if(val == 0 || val == 1)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <proc_en_cmd+0x28>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d10a      	bne.n	8001a2e <proc_en_cmd+0x3e>
		{
			if(val)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <proc_en_cmd+0x36>
			{
				//start();
				send_UART("System enabled with success.");
 8001a1e:	480b      	ldr	r0, [pc, #44]	; (8001a4c <proc_en_cmd+0x5c>)
 8001a20:	f001 fc7e 	bl	8003320 <send_UART>
			if(val)
 8001a24:	e00b      	b.n	8001a3e <proc_en_cmd+0x4e>
			}
			else
			{
				//stop();
				send_UART("System disabled with success.");
 8001a26:	480a      	ldr	r0, [pc, #40]	; (8001a50 <proc_en_cmd+0x60>)
 8001a28:	f001 fc7a 	bl	8003320 <send_UART>
			if(val)
 8001a2c:	e007      	b.n	8001a3e <proc_en_cmd+0x4e>
			}
		}
		else
			send_UART("Invalid Enable instruction argument values.");
 8001a2e:	4809      	ldr	r0, [pc, #36]	; (8001a54 <proc_en_cmd+0x64>)
 8001a30:	f001 fc76 	bl	8003320 <send_UART>
	}
	else
		send_UART("Invalid Enable instruction syntax.");
}
 8001a34:	e003      	b.n	8001a3e <proc_en_cmd+0x4e>
		send_UART("Invalid Enable instruction syntax.");
 8001a36:	4808      	ldr	r0, [pc, #32]	; (8001a58 <proc_en_cmd+0x68>)
 8001a38:	f001 fc72 	bl	8003320 <send_UART>
}
 8001a3c:	e7ff      	b.n	8001a3e <proc_en_cmd+0x4e>
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	0800ed84 	.word	0x0800ed84
 8001a4c:	0800ed8c 	.word	0x0800ed8c
 8001a50:	0800edac 	.word	0x0800edac
 8001a54:	0800edcc 	.word	0x0800edcc
 8001a58:	0800edf8 	.word	0x0800edf8
 8001a5c:	00000000 	.word	0x00000000

08001a60 <proc_ref_cmd>:


void proc_ref_cmd(char* message)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	6078      	str	r0, [r7, #4]
	//stop();

	char type, sign;
	int val;

	if(sscanf((char*) message, "REF %c %c%d", &type, &sign, &val) == 3)
 8001a68:	f107 010e 	add.w	r1, r7, #14
 8001a6c:	f107 020f 	add.w	r2, r7, #15
 8001a70:	f107 0308 	add.w	r3, r7, #8
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	460b      	mov	r3, r1
 8001a78:	494f      	ldr	r1, [pc, #316]	; (8001bb8 <proc_ref_cmd+0x158>)
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f009 f804 	bl	800aa88 <siscanf>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	f040 8083 	bne.w	8001b8e <proc_ref_cmd+0x12e>
	{
		if((sign == '+' || sign == '-') && (type == 'P' || type == 'S') && val >= 0)
 8001a88:	7bbb      	ldrb	r3, [r7, #14]
 8001a8a:	2b2b      	cmp	r3, #43	; 0x2b
 8001a8c:	d002      	beq.n	8001a94 <proc_ref_cmd+0x34>
 8001a8e:	7bbb      	ldrb	r3, [r7, #14]
 8001a90:	2b2d      	cmp	r3, #45	; 0x2d
 8001a92:	d178      	bne.n	8001b86 <proc_ref_cmd+0x126>
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	2b50      	cmp	r3, #80	; 0x50
 8001a98:	d002      	beq.n	8001aa0 <proc_ref_cmd+0x40>
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	2b53      	cmp	r3, #83	; 0x53
 8001a9e:	d172      	bne.n	8001b86 <proc_ref_cmd+0x126>
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db6f      	blt.n	8001b86 <proc_ref_cmd+0x126>
		{
			m = type;
 8001aa6:	7bfa      	ldrb	r2, [r7, #15]
 8001aa8:	4b44      	ldr	r3, [pc, #272]	; (8001bbc <proc_ref_cmd+0x15c>)
 8001aaa:	701a      	strb	r2, [r3, #0]
			if(type == 'P')
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	2b50      	cmp	r3, #80	; 0x50
 8001ab0:	d133      	bne.n	8001b1a <proc_ref_cmd+0xba>
			{
				pos_r = val * PI / 180;
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001abc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8001ba0 <proc_ref_cmd+0x140>
 8001ac0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ac4:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8001ba8 <proc_ref_cmd+0x148>
 8001ac8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001acc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ad0:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <proc_ref_cmd+0x160>)
 8001ad2:	edc3 7a00 	vstr	s15, [r3]

				if(sign == '-')
 8001ad6:	7bbb      	ldrb	r3, [r7, #14]
 8001ad8:	2b2d      	cmp	r3, #45	; 0x2d
 8001ada:	d107      	bne.n	8001aec <proc_ref_cmd+0x8c>
					pos_r = -pos_r;
 8001adc:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <proc_ref_cmd+0x160>)
 8001ade:	edd3 7a00 	vldr	s15, [r3]
 8001ae2:	eef1 7a67 	vneg.f32	s15, s15
 8001ae6:	4b36      	ldr	r3, [pc, #216]	; (8001bc0 <proc_ref_cmd+0x160>)
 8001ae8:	edc3 7a00 	vstr	s15, [r3]

				FIR_set_ref(pos_r, type, 'L');
 8001aec:	4b34      	ldr	r3, [pc, #208]	; (8001bc0 <proc_ref_cmd+0x160>)
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	214c      	movs	r1, #76	; 0x4c
 8001af6:	4618      	mov	r0, r3
 8001af8:	eeb0 0a67 	vmov.f32	s0, s15
 8001afc:	f7ff fa0e 	bl	8000f1c <FIR_set_ref>
				FIR_set_ref(-pos_r, type, 'R');
 8001b00:	4b2f      	ldr	r3, [pc, #188]	; (8001bc0 <proc_ref_cmd+0x160>)
 8001b02:	edd3 7a00 	vldr	s15, [r3]
 8001b06:	eef1 7a67 	vneg.f32	s15, s15
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	2152      	movs	r1, #82	; 0x52
 8001b0e:	4618      	mov	r0, r3
 8001b10:	eeb0 0a67 	vmov.f32	s0, s15
 8001b14:	f7ff fa02 	bl	8000f1c <FIR_set_ref>
 8001b18:	e031      	b.n	8001b7e <proc_ref_cmd+0x11e>
			}
			else
			{
				spd_r = val * 2 * PI / 60;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	ee07 3a90 	vmov	s15, r3
 8001b22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b26:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001ba0 <proc_ref_cmd+0x140>
 8001b2a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b2e:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8001bb0 <proc_ref_cmd+0x150>
 8001b32:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b36:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b3a:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <proc_ref_cmd+0x164>)
 8001b3c:	edc3 7a00 	vstr	s15, [r3]

				if(sign == '-')
 8001b40:	7bbb      	ldrb	r3, [r7, #14]
 8001b42:	2b2d      	cmp	r3, #45	; 0x2d
 8001b44:	d107      	bne.n	8001b56 <proc_ref_cmd+0xf6>
					spd_r = -spd_r;
 8001b46:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <proc_ref_cmd+0x164>)
 8001b48:	edd3 7a00 	vldr	s15, [r3]
 8001b4c:	eef1 7a67 	vneg.f32	s15, s15
 8001b50:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <proc_ref_cmd+0x164>)
 8001b52:	edc3 7a00 	vstr	s15, [r3]

				FIR_set_ref(spd_r, type, 'L');
 8001b56:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <proc_ref_cmd+0x164>)
 8001b58:	edd3 7a00 	vldr	s15, [r3]
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	214c      	movs	r1, #76	; 0x4c
 8001b60:	4618      	mov	r0, r3
 8001b62:	eeb0 0a67 	vmov.f32	s0, s15
 8001b66:	f7ff f9d9 	bl	8000f1c <FIR_set_ref>
				FIR_set_ref(spd_r, type, 'R');
 8001b6a:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <proc_ref_cmd+0x164>)
 8001b6c:	edd3 7a00 	vldr	s15, [r3]
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	2152      	movs	r1, #82	; 0x52
 8001b74:	4618      	mov	r0, r3
 8001b76:	eeb0 0a67 	vmov.f32	s0, s15
 8001b7a:	f7ff f9cf 	bl	8000f1c <FIR_set_ref>
			}

			send_UART("Desired reference changed with success.");
 8001b7e:	4812      	ldr	r0, [pc, #72]	; (8001bc8 <proc_ref_cmd+0x168>)
 8001b80:	f001 fbce 	bl	8003320 <send_UART>
		else
			send_UART("Invalid desired reference value.");
	}
	else
		send_UART("Invalid REF instruction syntax.");
}
 8001b84:	e006      	b.n	8001b94 <proc_ref_cmd+0x134>
			send_UART("Invalid desired reference value.");
 8001b86:	4811      	ldr	r0, [pc, #68]	; (8001bcc <proc_ref_cmd+0x16c>)
 8001b88:	f001 fbca 	bl	8003320 <send_UART>
}
 8001b8c:	e002      	b.n	8001b94 <proc_ref_cmd+0x134>
		send_UART("Invalid REF instruction syntax.");
 8001b8e:	4810      	ldr	r0, [pc, #64]	; (8001bd0 <proc_ref_cmd+0x170>)
 8001b90:	f001 fbc6 	bl	8003320 <send_UART>
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	f3af 8000 	nop.w
 8001ba0:	4d12d84a 	.word	0x4d12d84a
 8001ba4:	400921fb 	.word	0x400921fb
 8001ba8:	00000000 	.word	0x00000000
 8001bac:	40668000 	.word	0x40668000
 8001bb0:	00000000 	.word	0x00000000
 8001bb4:	404e0000 	.word	0x404e0000
 8001bb8:	0800ee1c 	.word	0x0800ee1c
 8001bbc:	20000030 	.word	0x20000030
 8001bc0:	2000031c 	.word	0x2000031c
 8001bc4:	20000320 	.word	0x20000320
 8001bc8:	0800ee28 	.word	0x0800ee28
 8001bcc:	0800ee50 	.word	0x0800ee50
 8001bd0:	0800ee74 	.word	0x0800ee74

08001bd4 <proc_inc_cmd>:


void proc_inc_cmd(char* message)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	inc_kp();
 8001bdc:	f7fe ff4a 	bl	8000a74 <inc_kp>

	//if(m == 'P')
		//set_ref(pos_r, m);
	//else
		//set_ref(spd_r, m);
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <proc_dec_cmd>:

void proc_dec_cmd(char* message)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	dec_kp();
 8001bf0:	f7fe ff64 	bl	8000abc <dec_kp>

	//if(m == 'P')
	//	set_ref(pos_r, m);
	//else
	//	set_ref(spd_r, m);
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <proc_dist_cmd>:

void proc_dist_cmd(char* message)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	HCSR_proc_distance();
 8001c04:	f7ff fe36 	bl	8001874 <HCSR_proc_distance>
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c16:	4a1c      	ldr	r2, [pc, #112]	; (8001c88 <MX_I2C1_Init+0x78>)
 8001c18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c1c:	4a1b      	ldr	r2, [pc, #108]	; (8001c8c <MX_I2C1_Init+0x7c>)
 8001c1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c20:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c4a:	480e      	ldr	r0, [pc, #56]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c4c:	f002 fc4e 	bl	80044ec <HAL_I2C_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c56:	f000 fa1b 	bl	8002090 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4809      	ldr	r0, [pc, #36]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c5e:	f002 fcef 	bl	8004640 <HAL_I2CEx_ConfigAnalogFilter>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c68:	f000 fa12 	bl	8002090 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4805      	ldr	r0, [pc, #20]	; (8001c84 <MX_I2C1_Init+0x74>)
 8001c70:	f002 fd31 	bl	80046d6 <HAL_I2CEx_ConfigDigitalFilter>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c7a:	f000 fa09 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	2000049c 	.word	0x2000049c
 8001c88:	40005400 	.word	0x40005400
 8001c8c:	20303e5d 	.word	0x20303e5d

08001c90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b0ae      	sub	sp, #184	; 0xb8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2290      	movs	r2, #144	; 0x90
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f008 f875 	bl	8009da0 <memset>
  if(i2cHandle->Instance==I2C1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a54      	ldr	r2, [pc, #336]	; (8001e0c <HAL_I2C_MspInit+0x17c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	f040 80a1 	bne.w	8001e04 <HAL_I2C_MspInit+0x174>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cc6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 fa21 	bl	8005118 <HAL_RCCEx_PeriphCLKConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001cdc:	f000 f9d8 	bl	8002090 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce0:	4b4b      	ldr	r3, [pc, #300]	; (8001e10 <HAL_I2C_MspInit+0x180>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	4a4a      	ldr	r2, [pc, #296]	; (8001e10 <HAL_I2C_MspInit+0x180>)
 8001ce6:	f043 0302 	orr.w	r3, r3, #2
 8001cea:	6313      	str	r3, [r2, #48]	; 0x30
 8001cec:	4b48      	ldr	r3, [pc, #288]	; (8001e10 <HAL_I2C_MspInit+0x180>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cf8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d00:	2312      	movs	r3, #18
 8001d02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d12:	2304      	movs	r3, #4
 8001d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	483d      	ldr	r0, [pc, #244]	; (8001e14 <HAL_I2C_MspInit+0x184>)
 8001d20:	f002 f9d4 	bl	80040cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d24:	4b3a      	ldr	r3, [pc, #232]	; (8001e10 <HAL_I2C_MspInit+0x180>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	4a39      	ldr	r2, [pc, #228]	; (8001e10 <HAL_I2C_MspInit+0x180>)
 8001d2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d30:	4b37      	ldr	r3, [pc, #220]	; (8001e10 <HAL_I2C_MspInit+0x180>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001d3c:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <HAL_I2C_MspInit+0x188>)
 8001d3e:	4a37      	ldr	r2, [pc, #220]	; (8001e1c <HAL_I2C_MspInit+0x18c>)
 8001d40:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001d42:	4b35      	ldr	r3, [pc, #212]	; (8001e18 <HAL_I2C_MspInit+0x188>)
 8001d44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d48:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d4a:	4b33      	ldr	r3, [pc, #204]	; (8001e18 <HAL_I2C_MspInit+0x188>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d50:	4b31      	ldr	r3, [pc, #196]	; (8001e18 <HAL_I2C_MspInit+0x188>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d56:	4b30      	ldr	r3, [pc, #192]	; (8001e18 <HAL_I2C_MspInit+0x188>)
 8001d58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d5c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d5e:	4b2e      	ldr	r3, [pc, #184]	; (8001e18 <HAL_I2C_MspInit+0x188>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d64:	4b2c      	ldr	r3, [pc, #176]	; (8001e18 <HAL_I2C_MspInit+0x188>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001d6a:	4b2b      	ldr	r3, [pc, #172]	; (8001e18 <HAL_I2C_MspInit+0x188>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d70:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <HAL_I2C_MspInit+0x188>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d76:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <HAL_I2C_MspInit+0x188>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001d7c:	4826      	ldr	r0, [pc, #152]	; (8001e18 <HAL_I2C_MspInit+0x188>)
 8001d7e:	f001 fd9b 	bl	80038b8 <HAL_DMA_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8001d88:	f000 f982 	bl	8002090 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a22      	ldr	r2, [pc, #136]	; (8001e18 <HAL_I2C_MspInit+0x188>)
 8001d90:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d92:	4a21      	ldr	r2, [pc, #132]	; (8001e18 <HAL_I2C_MspInit+0x188>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001d98:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <HAL_I2C_MspInit+0x190>)
 8001d9a:	4a22      	ldr	r2, [pc, #136]	; (8001e24 <HAL_I2C_MspInit+0x194>)
 8001d9c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <HAL_I2C_MspInit+0x190>)
 8001da0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <HAL_I2C_MspInit+0x190>)
 8001da8:	2240      	movs	r2, #64	; 0x40
 8001daa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dac:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <HAL_I2C_MspInit+0x190>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001db2:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <HAL_I2C_MspInit+0x190>)
 8001db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001db8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dba:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <HAL_I2C_MspInit+0x190>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dc0:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <HAL_I2C_MspInit+0x190>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001dc6:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <HAL_I2C_MspInit+0x190>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dcc:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <HAL_I2C_MspInit+0x190>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <HAL_I2C_MspInit+0x190>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001dd8:	4811      	ldr	r0, [pc, #68]	; (8001e20 <HAL_I2C_MspInit+0x190>)
 8001dda:	f001 fd6d 	bl	80038b8 <HAL_DMA_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8001de4:	f000 f954 	bl	8002090 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <HAL_I2C_MspInit+0x190>)
 8001dec:	639a      	str	r2, [r3, #56]	; 0x38
 8001dee:	4a0c      	ldr	r2, [pc, #48]	; (8001e20 <HAL_I2C_MspInit+0x190>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2100      	movs	r1, #0
 8001df8:	201f      	movs	r0, #31
 8001dfa:	f001 fd18 	bl	800382e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001dfe:	201f      	movs	r0, #31
 8001e00:	f001 fd31 	bl	8003866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e04:	bf00      	nop
 8001e06:	37b8      	adds	r7, #184	; 0xb8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40005400 	.word	0x40005400
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020400 	.word	0x40020400
 8001e18:	200004e8 	.word	0x200004e8
 8001e1c:	40026010 	.word	0x40026010
 8001e20:	2000043c 	.word	0x2000043c
 8001e24:	400260a0 	.word	0x400260a0

08001e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b0ca      	sub	sp, #296	; 0x128
 8001e2c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e2e:	f001 fb7e 	bl	800352e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e32:	f000 f8bf 	bl	8001fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM3_Init();
 8001e36:	f000 fd01 	bl	800283c <MX_TIM3_Init>
  MX_GPIO_Init();
 8001e3a:	f7ff faeb 	bl	8001414 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001e3e:	f001 f98d 	bl	800315c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001e42:	f000 fc85 	bl	8002750 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001e46:	f000 fd47 	bl	80028d8 <MX_TIM5_Init>
  MX_TIM9_Init();
 8001e4a:	f000 fe29 	bl	8002aa0 <MX_TIM9_Init>
  MX_TIM13_Init();
 8001e4e:	f000 fe83 	bl	8002b58 <MX_TIM13_Init>
  MX_DMA_Init();
 8001e52:	f7fe fdcd 	bl	80009f0 <MX_DMA_Init>
  MX_TIM7_Init();
 8001e56:	f000 fded 	bl	8002a34 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001e5a:	f7ff fed9 	bl	8001c10 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001e5e:	f000 fdb3 	bl	80029c8 <MX_TIM6_Init>
  MX_TIM14_Init();
 8001e62:	f000 fec1 	bl	8002be8 <MX_TIM14_Init>
  MX_SPI1_Init();
 8001e66:	f000 f977 	bl	8002158 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4948      	ldr	r1, [pc, #288]	; (8001f90 <main+0x168>)
 8001e6e:	4849      	ldr	r0, [pc, #292]	; (8001f94 <main+0x16c>)
 8001e70:	f006 fc88 	bl	8008784 <HAL_UART_Receive_IT>
  send_UART(PROMPT);
 8001e74:	4848      	ldr	r0, [pc, #288]	; (8001f98 <main+0x170>)
 8001e76:	f001 fa53 	bl	8003320 <send_UART>

  int angulo = 0, diff_pixeis = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  char cor[010] = "";
 8001e86:	2300      	movs	r3, #0
 8001e88:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


  set_Kh('.');
 8001e92:	202e      	movs	r0, #46	; 0x2e
 8001e94:	f7ff f878 	bl	8000f88 <set_Kh>
  FIR_set_ref(4.2, 'S', 'L');
 8001e98:	214c      	movs	r1, #76	; 0x4c
 8001e9a:	2053      	movs	r0, #83	; 0x53
 8001e9c:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8001f9c <main+0x174>
 8001ea0:	f7ff f83c 	bl	8000f1c <FIR_set_ref>
  FIR_set_ref(4.2, 'S', 'R');
 8001ea4:	2152      	movs	r1, #82	; 0x52
 8001ea6:	2053      	movs	r0, #83	; 0x53
 8001ea8:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8001f9c <main+0x174>
 8001eac:	f7ff f836 	bl	8000f1c <FIR_set_ref>


  SG90_set_ref(5);
 8001eb0:	2005      	movs	r0, #5
 8001eb2:	f000 f8f3 	bl	800209c <SG90_set_ref>
  SG90_start();
 8001eb6:	f000 f91d 	bl	80020f4 <SG90_start>

  //lcd_init();
  //lcd_write_pos_1602(0, 0, "TASP_ROBOT");
  resetspirx();
 8001eba:	f000 fa71 	bl	80023a0 <resetspirx>

  HAL_TIM_Base_Start_IT(&htim7);
 8001ebe:	4838      	ldr	r0, [pc, #224]	; (8001fa0 <main+0x178>)
 8001ec0:	f004 fd22 	bl	8006908 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(getcmdreceived())
 8001ec4:	f000 fa60 	bl	8002388 <getcmdreceived>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d03b      	beq.n	8001f46 <main+0x11e>
	  {
		  sscanf(getspirxptr(),"%d:%s %d;",&angulo,cor,&diff_pixeis);
 8001ece:	f000 fa83 	bl	80023d8 <getspirxptr>
 8001ed2:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8001ed6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001eda:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4930      	ldr	r1, [pc, #192]	; (8001fa4 <main+0x17c>)
 8001ee4:	f008 fdd0 	bl	800aa88 <siscanf>
		  resetspirx();
 8001ee8:	f000 fa5a 	bl	80023a0 <resetspirx>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001eec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ef0:	482d      	ldr	r0, [pc, #180]	; (8001fa8 <main+0x180>)
 8001ef2:	f002 fac8 	bl	8004486 <HAL_GPIO_TogglePin>

		  set_px(diff_pixeis);
 8001ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fa7a 	bl	80013f4 <set_px>
		  set_ang(angulo);
 8001f00:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f04:	ee07 3a90 	vmov	s15, r3
 8001f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f10:	f7fe fdf8 	bl	8000b04 <set_ang>
		  ISR_PID_angle();
 8001f14:	f7ff fa5e 	bl	80013d4 <ISR_PID_angle>

		  char str[] = "None";
 8001f18:	4a24      	ldr	r2, [pc, #144]	; (8001fac <main+0x184>)
 8001f1a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001f1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f22:	6018      	str	r0, [r3, #0]
 8001f24:	3304      	adds	r3, #4
 8001f26:	7019      	strb	r1, [r3, #0]
		  if(strncmp(cor, str, 4))
 8001f28:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8001f2c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001f30:	2204      	movs	r2, #4
 8001f32:	4618      	mov	r0, r3
 8001f34:	f008 fe19 	bl	800ab6a <strncmp>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <main+0x11e>
		  {
			  FIR_stop();
 8001f3e:	f7fe fe1d 	bl	8000b7c <FIR_stop>
			  rise();
 8001f42:	f000 f8eb 	bl	800211c <rise>
		  }
	  }

		if(has_message_from_UART())
 8001f46:	f001 f9bb 	bl	80032c0 <has_message_from_UART>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0b9      	beq.n	8001ec4 <main+0x9c>
		{
		  uint8_t message[BUFFER_SIZE];

		  read_UART((char*) message);
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	4618      	mov	r0, r3
 8001f54:	f001 fa0e 	bl	8003374 <read_UART>

		  unsigned char cmd = check_command((char*) message);
 8001f58:	1d3b      	adds	r3, r7, #4
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fcee 	bl	800193c <check_command>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		  exec_command[cmd]((char*) message);
 8001f66:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8001f6a:	4a11      	ldr	r2, [pc, #68]	; (8001fb0 <main+0x188>)
 8001f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f70:	1d3a      	adds	r2, r7, #4
 8001f72:	4610      	mov	r0, r2
 8001f74:	4798      	blx	r3

		  while(is_transmitting_to_UART());
 8001f76:	bf00      	nop
 8001f78:	f001 f9ae 	bl	80032d8 <is_transmitting_to_UART>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1fa      	bne.n	8001f78 <main+0x150>

		  reset_UART();
 8001f82:	f001 f9b5 	bl	80032f0 <reset_UART>
		  send_UART(PROMPT);
 8001f86:	4804      	ldr	r0, [pc, #16]	; (8001f98 <main+0x170>)
 8001f88:	f001 f9ca 	bl	8003320 <send_UART>
	  if(getcmdreceived())
 8001f8c:	e79a      	b.n	8001ec4 <main+0x9c>
 8001f8e:	bf00      	nop
 8001f90:	200008cc 	.word	0x200008cc
 8001f94:	200009cc 	.word	0x200009cc
 8001f98:	0800ee94 	.word	0x0800ee94
 8001f9c:	40866666 	.word	0x40866666
 8001fa0:	20000880 	.word	0x20000880
 8001fa4:	0800ee98 	.word	0x0800ee98
 8001fa8:	40020400 	.word	0x40020400
 8001fac:	0800eea4 	.word	0x0800eea4
 8001fb0:	20000034 	.word	0x20000034

08001fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b094      	sub	sp, #80	; 0x50
 8001fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fba:	f107 031c 	add.w	r3, r7, #28
 8001fbe:	2234      	movs	r2, #52	; 0x34
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f007 feec 	bl	8009da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc8:	f107 0308 	add.w	r3, r7, #8
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd8:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <SystemClock_Config+0xd4>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	4a2a      	ldr	r2, [pc, #168]	; (8002088 <SystemClock_Config+0xd4>)
 8001fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe4:	4b28      	ldr	r3, [pc, #160]	; (8002088 <SystemClock_Config+0xd4>)
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ff0:	4b26      	ldr	r3, [pc, #152]	; (800208c <SystemClock_Config+0xd8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a25      	ldr	r2, [pc, #148]	; (800208c <SystemClock_Config+0xd8>)
 8001ff6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b23      	ldr	r3, [pc, #140]	; (800208c <SystemClock_Config+0xd8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002008:	2302      	movs	r3, #2
 800200a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800200c:	2301      	movs	r3, #1
 800200e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002010:	2310      	movs	r3, #16
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002014:	2302      	movs	r3, #2
 8002016:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002018:	2300      	movs	r3, #0
 800201a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800201c:	2308      	movs	r3, #8
 800201e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002020:	23c0      	movs	r3, #192	; 0xc0
 8002022:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002024:	2302      	movs	r3, #2
 8002026:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002028:	2302      	movs	r3, #2
 800202a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800202c:	2302      	movs	r3, #2
 800202e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002030:	f107 031c 	add.w	r3, r7, #28
 8002034:	4618      	mov	r0, r3
 8002036:	f002 fbeb 	bl	8004810 <HAL_RCC_OscConfig>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002040:	f000 f826 	bl	8002090 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002044:	f002 fb94 	bl	8004770 <HAL_PWREx_EnableOverDrive>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800204e:	f000 f81f 	bl	8002090 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002052:	230f      	movs	r3, #15
 8002054:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002056:	2302      	movs	r3, #2
 8002058:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800205e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002062:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002064:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002068:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800206a:	f107 0308 	add.w	r3, r7, #8
 800206e:	2106      	movs	r1, #6
 8002070:	4618      	mov	r0, r3
 8002072:	f002 fe7b 	bl	8004d6c <HAL_RCC_ClockConfig>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800207c:	f000 f808 	bl	8002090 <Error_Handler>
  }
}
 8002080:	bf00      	nop
 8002082:	3750      	adds	r7, #80	; 0x50
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40023800 	.word	0x40023800
 800208c:	40007000 	.word	0x40007000

08002090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002094:	b672      	cpsid	i
}
 8002096:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002098:	e7fe      	b.n	8002098 <Error_Handler+0x8>
	...

0800209c <SG90_set_ref>:
#include "sg90.h"

int ang = 0;

int SG90_set_ref(int angle)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	ang = angle;
 80020a4:	4a10      	ldr	r2, [pc, #64]	; (80020e8 <SG90_set_ref+0x4c>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6013      	str	r3, [r2, #0]

	if(angle >= 0 && angle <= 180)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	db14      	blt.n	80020da <SG90_set_ref+0x3e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2bb4      	cmp	r3, #180	; 0xb4
 80020b4:	dc11      	bgt.n	80020da <SG90_set_ref+0x3e>
	{
		TIM14->CCR1 = 500 + angle * 1900 / 180;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f240 726c 	movw	r2, #1900	; 0x76c
 80020bc:	fb02 f303 	mul.w	r3, r2, r3
 80020c0:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <SG90_set_ref+0x50>)
 80020c2:	fb82 1203 	smull	r1, r2, r2, r3
 80020c6:	441a      	add	r2, r3
 80020c8:	11d2      	asrs	r2, r2, #7
 80020ca:	17db      	asrs	r3, r3, #31
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <SG90_set_ref+0x54>)
 80020d4:	635a      	str	r2, [r3, #52]	; 0x34
		return 1;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <SG90_set_ref+0x40>
	}
	return 0;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	20000324 	.word	0x20000324
 80020ec:	b60b60b7 	.word	0xb60b60b7
 80020f0:	40002000 	.word	0x40002000

080020f4 <SG90_start>:

void SG90_start()
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80020f8:	2100      	movs	r1, #0
 80020fa:	4802      	ldr	r0, [pc, #8]	; (8002104 <SG90_start+0x10>)
 80020fc:	f004 fd0c 	bl	8006b18 <HAL_TIM_PWM_Start>
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000834 	.word	0x20000834

08002108 <SG90_stop>:

void SG90_stop()
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 800210c:	2100      	movs	r1, #0
 800210e:	4802      	ldr	r0, [pc, #8]	; (8002118 <SG90_stop+0x10>)
 8002110:	f004 fdfc 	bl	8006d0c <HAL_TIM_PWM_Stop>
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000834 	.word	0x20000834

0800211c <rise>:

void rise()
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
	SG90_start();
 8002122:	f7ff ffe7 	bl	80020f4 <SG90_start>

	for(int i = ang; i < 150; i+=5)
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <rise+0x38>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	e008      	b.n	8002140 <rise+0x24>
	{
		SG90_set_ref(i);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ffb4 	bl	800209c <SG90_set_ref>
		HAL_Delay(20);
 8002134:	2014      	movs	r0, #20
 8002136:	f001 fa57 	bl	80035e8 <HAL_Delay>
	for(int i = ang; i < 150; i+=5)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3305      	adds	r3, #5
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b95      	cmp	r3, #149	; 0x95
 8002144:	ddf3      	ble.n	800212e <rise+0x12>
	}

	SG90_stop();
 8002146:	f7ff ffdf 	bl	8002108 <SG90_stop>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000324 	.word	0x20000324

08002158 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <MX_SPI1_Init+0x68>)
 800215e:	4a19      	ldr	r2, [pc, #100]	; (80021c4 <MX_SPI1_Init+0x6c>)
 8002160:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002162:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <MX_SPI1_Init+0x68>)
 8002164:	2200      	movs	r2, #0
 8002166:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002168:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <MX_SPI1_Init+0x68>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800216e:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <MX_SPI1_Init+0x68>)
 8002170:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002174:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <MX_SPI1_Init+0x68>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800217c:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <MX_SPI1_Init+0x68>)
 800217e:	2200      	movs	r2, #0
 8002180:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002182:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <MX_SPI1_Init+0x68>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002188:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <MX_SPI1_Init+0x68>)
 800218a:	2200      	movs	r2, #0
 800218c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800218e:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <MX_SPI1_Init+0x68>)
 8002190:	2200      	movs	r2, #0
 8002192:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <MX_SPI1_Init+0x68>)
 8002196:	2200      	movs	r2, #0
 8002198:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <MX_SPI1_Init+0x68>)
 800219c:	2207      	movs	r2, #7
 800219e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <MX_SPI1_Init+0x68>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <MX_SPI1_Init+0x68>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021ac:	4804      	ldr	r0, [pc, #16]	; (80021c0 <MX_SPI1_Init+0x68>)
 80021ae:	f003 fbdb 	bl	8005968 <HAL_SPI_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80021b8:	f7ff ff6a 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000548 	.word	0x20000548
 80021c4:	40013000 	.word	0x40013000

080021c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a49      	ldr	r2, [pc, #292]	; (800230c <HAL_SPI_MspInit+0x144>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	f040 808c 	bne.w	8002304 <HAL_SPI_MspInit+0x13c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021ec:	4b48      	ldr	r3, [pc, #288]	; (8002310 <HAL_SPI_MspInit+0x148>)
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	4a47      	ldr	r2, [pc, #284]	; (8002310 <HAL_SPI_MspInit+0x148>)
 80021f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021f6:	6453      	str	r3, [r2, #68]	; 0x44
 80021f8:	4b45      	ldr	r3, [pc, #276]	; (8002310 <HAL_SPI_MspInit+0x148>)
 80021fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002204:	4b42      	ldr	r3, [pc, #264]	; (8002310 <HAL_SPI_MspInit+0x148>)
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	4a41      	ldr	r2, [pc, #260]	; (8002310 <HAL_SPI_MspInit+0x148>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6313      	str	r3, [r2, #48]	; 0x30
 8002210:	4b3f      	ldr	r3, [pc, #252]	; (8002310 <HAL_SPI_MspInit+0x148>)
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800221c:	23f0      	movs	r3, #240	; 0xf0
 800221e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002228:	2303      	movs	r3, #3
 800222a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800222c:	2305      	movs	r3, #5
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	4619      	mov	r1, r3
 8002236:	4837      	ldr	r0, [pc, #220]	; (8002314 <HAL_SPI_MspInit+0x14c>)
 8002238:	f001 ff48 	bl	80040cc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800223c:	4b36      	ldr	r3, [pc, #216]	; (8002318 <HAL_SPI_MspInit+0x150>)
 800223e:	4a37      	ldr	r2, [pc, #220]	; (800231c <HAL_SPI_MspInit+0x154>)
 8002240:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002242:	4b35      	ldr	r3, [pc, #212]	; (8002318 <HAL_SPI_MspInit+0x150>)
 8002244:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002248:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800224a:	4b33      	ldr	r3, [pc, #204]	; (8002318 <HAL_SPI_MspInit+0x150>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002250:	4b31      	ldr	r3, [pc, #196]	; (8002318 <HAL_SPI_MspInit+0x150>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002256:	4b30      	ldr	r3, [pc, #192]	; (8002318 <HAL_SPI_MspInit+0x150>)
 8002258:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800225c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800225e:	4b2e      	ldr	r3, [pc, #184]	; (8002318 <HAL_SPI_MspInit+0x150>)
 8002260:	2200      	movs	r2, #0
 8002262:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002264:	4b2c      	ldr	r3, [pc, #176]	; (8002318 <HAL_SPI_MspInit+0x150>)
 8002266:	2200      	movs	r2, #0
 8002268:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800226a:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <HAL_SPI_MspInit+0x150>)
 800226c:	2200      	movs	r2, #0
 800226e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002270:	4b29      	ldr	r3, [pc, #164]	; (8002318 <HAL_SPI_MspInit+0x150>)
 8002272:	2200      	movs	r2, #0
 8002274:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002276:	4b28      	ldr	r3, [pc, #160]	; (8002318 <HAL_SPI_MspInit+0x150>)
 8002278:	2200      	movs	r2, #0
 800227a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800227c:	4826      	ldr	r0, [pc, #152]	; (8002318 <HAL_SPI_MspInit+0x150>)
 800227e:	f001 fb1b 	bl	80038b8 <HAL_DMA_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8002288:	f7ff ff02 	bl	8002090 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a22      	ldr	r2, [pc, #136]	; (8002318 <HAL_SPI_MspInit+0x150>)
 8002290:	659a      	str	r2, [r3, #88]	; 0x58
 8002292:	4a21      	ldr	r2, [pc, #132]	; (8002318 <HAL_SPI_MspInit+0x150>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002298:	4b21      	ldr	r3, [pc, #132]	; (8002320 <HAL_SPI_MspInit+0x158>)
 800229a:	4a22      	ldr	r2, [pc, #136]	; (8002324 <HAL_SPI_MspInit+0x15c>)
 800229c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800229e:	4b20      	ldr	r3, [pc, #128]	; (8002320 <HAL_SPI_MspInit+0x158>)
 80022a0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80022a4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022a6:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <HAL_SPI_MspInit+0x158>)
 80022a8:	2240      	movs	r2, #64	; 0x40
 80022aa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ac:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <HAL_SPI_MspInit+0x158>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022b2:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_SPI_MspInit+0x158>)
 80022b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022b8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ba:	4b19      	ldr	r3, [pc, #100]	; (8002320 <HAL_SPI_MspInit+0x158>)
 80022bc:	2200      	movs	r2, #0
 80022be:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022c0:	4b17      	ldr	r3, [pc, #92]	; (8002320 <HAL_SPI_MspInit+0x158>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80022c6:	4b16      	ldr	r3, [pc, #88]	; (8002320 <HAL_SPI_MspInit+0x158>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022cc:	4b14      	ldr	r3, [pc, #80]	; (8002320 <HAL_SPI_MspInit+0x158>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022d2:	4b13      	ldr	r3, [pc, #76]	; (8002320 <HAL_SPI_MspInit+0x158>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80022d8:	4811      	ldr	r0, [pc, #68]	; (8002320 <HAL_SPI_MspInit+0x158>)
 80022da:	f001 faed 	bl	80038b8 <HAL_DMA_Init>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 80022e4:	f7ff fed4 	bl	8002090 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a0d      	ldr	r2, [pc, #52]	; (8002320 <HAL_SPI_MspInit+0x158>)
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54
 80022ee:	4a0c      	ldr	r2, [pc, #48]	; (8002320 <HAL_SPI_MspInit+0x158>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80022f4:	2200      	movs	r2, #0
 80022f6:	2100      	movs	r1, #0
 80022f8:	2023      	movs	r0, #35	; 0x23
 80022fa:	f001 fa98 	bl	800382e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80022fe:	2023      	movs	r0, #35	; 0x23
 8002300:	f001 fab1 	bl	8003866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002304:	bf00      	nop
 8002306:	3728      	adds	r7, #40	; 0x28
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40013000 	.word	0x40013000
 8002310:	40023800 	.word	0x40023800
 8002314:	40020000 	.word	0x40020000
 8002318:	200005ac 	.word	0x200005ac
 800231c:	40026410 	.word	0x40026410
 8002320:	2000060c 	.word	0x2000060c
 8002324:	40026458 	.word	0x40026458

08002328 <HAL_SPI_RxCpltCallback>:
bool cmdreceived = false;
uint8_t spirxbuf[SPIBUFSZ] = {0};
uint16_t spirxindex = 0;

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	if(spirxbuf[spirxindex] == ';')
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_SPI_RxCpltCallback+0x50>)
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	4b11      	ldr	r3, [pc, #68]	; (800237c <HAL_SPI_RxCpltCallback+0x54>)
 8002338:	5c9b      	ldrb	r3, [r3, r2]
 800233a:	2b3b      	cmp	r3, #59	; 0x3b
 800233c:	d103      	bne.n	8002346 <HAL_SPI_RxCpltCallback+0x1e>
		{
			cmdreceived = true;
 800233e:	4b10      	ldr	r3, [pc, #64]	; (8002380 <HAL_SPI_RxCpltCallback+0x58>)
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
			return;
 8002344:	e015      	b.n	8002372 <HAL_SPI_RxCpltCallback+0x4a>
		}
	spirxindex++;
 8002346:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <HAL_SPI_RxCpltCallback+0x50>)
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	3301      	adds	r3, #1
 800234c:	b29a      	uxth	r2, r3
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_SPI_RxCpltCallback+0x50>)
 8002350:	801a      	strh	r2, [r3, #0]
	spirxindex &= SPIBUFSZ;
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <HAL_SPI_RxCpltCallback+0x50>)
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	b29a      	uxth	r2, r3
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <HAL_SPI_RxCpltCallback+0x50>)
 800235c:	801a      	strh	r2, [r3, #0]
	HAL_SPI_Receive_DMA(&hspi1, &spirxbuf[spirxindex], 1);
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_SPI_RxCpltCallback+0x50>)
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_SPI_RxCpltCallback+0x54>)
 8002366:	4413      	add	r3, r2
 8002368:	2201      	movs	r2, #1
 800236a:	4619      	mov	r1, r3
 800236c:	4805      	ldr	r0, [pc, #20]	; (8002384 <HAL_SPI_RxCpltCallback+0x5c>)
 800236e:	f003 fba7 	bl	8005ac0 <HAL_SPI_Receive_DMA>
}
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	2000042c 	.word	0x2000042c
 800237c:	2000032c 	.word	0x2000032c
 8002380:	20000328 	.word	0x20000328
 8002384:	20000548 	.word	0x20000548

08002388 <getcmdreceived>:

bool getcmdreceived()
	{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
	return cmdreceived;
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <getcmdreceived+0x14>)
 800238e:	781b      	ldrb	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000328 	.word	0x20000328

080023a0 <resetspirx>:

void resetspirx()
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	cmdreceived = false;
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <resetspirx+0x28>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	701a      	strb	r2, [r3, #0]
	spirxindex = 0;
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <resetspirx+0x2c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	801a      	strh	r2, [r3, #0]
	memset(spirxbuf, '\0', SPIBUFSZ);
 80023b0:	22ff      	movs	r2, #255	; 0xff
 80023b2:	2100      	movs	r1, #0
 80023b4:	4806      	ldr	r0, [pc, #24]	; (80023d0 <resetspirx+0x30>)
 80023b6:	f007 fcf3 	bl	8009da0 <memset>
	HAL_SPI_Receive_DMA(&hspi1, spirxbuf, 1);
 80023ba:	2201      	movs	r2, #1
 80023bc:	4904      	ldr	r1, [pc, #16]	; (80023d0 <resetspirx+0x30>)
 80023be:	4805      	ldr	r0, [pc, #20]	; (80023d4 <resetspirx+0x34>)
 80023c0:	f003 fb7e 	bl	8005ac0 <HAL_SPI_Receive_DMA>
}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000328 	.word	0x20000328
 80023cc:	2000042c 	.word	0x2000042c
 80023d0:	2000032c 	.word	0x2000032c
 80023d4:	20000548 	.word	0x20000548

080023d8 <getspirxptr>:

void* getspirxptr()
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
	return spirxbuf;
 80023dc:	4b02      	ldr	r3, [pc, #8]	; (80023e8 <getspirxptr+0x10>)
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	2000032c 	.word	0x2000032c

080023ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <HAL_MspInit+0x44>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <HAL_MspInit+0x44>)
 80023f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023fc:	6413      	str	r3, [r2, #64]	; 0x40
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <HAL_MspInit+0x44>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_MspInit+0x44>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	4a08      	ldr	r2, [pc, #32]	; (8002430 <HAL_MspInit+0x44>)
 8002410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002414:	6453      	str	r3, [r2, #68]	; 0x44
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_MspInit+0x44>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800

08002434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <NMI_Handler+0x4>

0800243a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800243e:	e7fe      	b.n	800243e <HardFault_Handler+0x4>

08002440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <MemManage_Handler+0x4>

08002446 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800244a:	e7fe      	b.n	800244a <BusFault_Handler+0x4>

0800244c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002450:	e7fe      	b.n	8002450 <UsageFault_Handler+0x4>

08002452 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002480:	f001 f892 	bl	80035a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}

08002488 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FIR_SA_ME_Pin);
 800248c:	2004      	movs	r0, #4
 800248e:	f002 f815 	bl	80044bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800249c:	4802      	ldr	r0, [pc, #8]	; (80024a8 <DMA1_Stream0_IRQHandler+0x10>)
 800249e:	f001 fbab 	bl	8003bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200004e8 	.word	0x200004e8

080024ac <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80024b0:	4802      	ldr	r0, [pc, #8]	; (80024bc <DMA1_Stream6_IRQHandler+0x10>)
 80024b2:	f001 fba1 	bl	8003bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	2000043c 	.word	0x2000043c

080024c0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80024c6:	f004 ff11 	bl	80072ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	2000079c 	.word	0x2000079c

080024d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <TIM3_IRQHandler+0x10>)
 80024da:	f004 ff07 	bl	80072ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	200006b8 	.word	0x200006b8

080024e8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <I2C1_EV_IRQHandler+0x10>)
 80024ee:	f002 f88d 	bl	800460c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	2000049c 	.word	0x2000049c

080024fc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <SPI1_IRQHandler+0x10>)
 8002502:	f003 fd8d 	bl	8006020 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000548 	.word	0x20000548

08002510 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <USART3_IRQHandler+0x10>)
 8002516:	f006 f983 	bl	8008820 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	200009cc 	.word	0x200009cc

08002524 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002528:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800252c:	f001 ffc6 	bl	80044bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FIR_SA_MD_Pin);
 8002530:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002534:	f001 ffc2 	bl	80044bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}

0800253c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002542:	f004 fed3 	bl	80072ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000704 	.word	0x20000704

08002550 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <TIM6_DAC_IRQHandler+0x10>)
 8002556:	f004 fec9 	bl	80072ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000750 	.word	0x20000750

08002564 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <TIM7_IRQHandler+0x10>)
 800256a:	f004 febf 	bl	80072ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000880 	.word	0x20000880

08002578 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <DMA2_Stream0_IRQHandler+0x10>)
 800257e:	f001 fb3b 	bl	8003bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200005ac 	.word	0x200005ac

0800258c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <DMA2_Stream3_IRQHandler+0x10>)
 8002592:	f001 fb31 	bl	8003bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	2000060c 	.word	0x2000060c

080025a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
	return 1;
 80025a4:	2301      	movs	r3, #1
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_kill>:

int _kill(int pid, int sig)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025ba:	f007 fbc7 	bl	8009d4c <__errno>
 80025be:	4603      	mov	r3, r0
 80025c0:	2216      	movs	r2, #22
 80025c2:	601a      	str	r2, [r3, #0]
	return -1;
 80025c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <_exit>:

void _exit (int status)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025d8:	f04f 31ff 	mov.w	r1, #4294967295
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ffe7 	bl	80025b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025e2:	e7fe      	b.n	80025e2 <_exit+0x12>

080025e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	e00a      	b.n	800260c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025f6:	f3af 8000 	nop.w
 80025fa:	4601      	mov	r1, r0
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	60ba      	str	r2, [r7, #8]
 8002602:	b2ca      	uxtb	r2, r1
 8002604:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	3301      	adds	r3, #1
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	429a      	cmp	r2, r3
 8002612:	dbf0      	blt.n	80025f6 <_read+0x12>
	}

return len;
 8002614:	687b      	ldr	r3, [r7, #4]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b086      	sub	sp, #24
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	e009      	b.n	8002644 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	60ba      	str	r2, [r7, #8]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	3301      	adds	r3, #1
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	429a      	cmp	r2, r3
 800264a:	dbf1      	blt.n	8002630 <_write+0x12>
	}
	return len;
 800264c:	687b      	ldr	r3, [r7, #4]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <_close>:

int _close(int file)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
	return -1;
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800267e:	605a      	str	r2, [r3, #4]
	return 0;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <_isatty>:

int _isatty(int file)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
	return 1;
 8002696:	2301      	movs	r3, #1
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
	return 0;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026c8:	4a14      	ldr	r2, [pc, #80]	; (800271c <_sbrk+0x5c>)
 80026ca:	4b15      	ldr	r3, [pc, #84]	; (8002720 <_sbrk+0x60>)
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026d4:	4b13      	ldr	r3, [pc, #76]	; (8002724 <_sbrk+0x64>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d102      	bne.n	80026e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026dc:	4b11      	ldr	r3, [pc, #68]	; (8002724 <_sbrk+0x64>)
 80026de:	4a12      	ldr	r2, [pc, #72]	; (8002728 <_sbrk+0x68>)
 80026e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026e2:	4b10      	ldr	r3, [pc, #64]	; (8002724 <_sbrk+0x64>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d207      	bcs.n	8002700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f0:	f007 fb2c 	bl	8009d4c <__errno>
 80026f4:	4603      	mov	r3, r0
 80026f6:	220c      	movs	r2, #12
 80026f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026fa:	f04f 33ff 	mov.w	r3, #4294967295
 80026fe:	e009      	b.n	8002714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <_sbrk+0x64>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002706:	4b07      	ldr	r3, [pc, #28]	; (8002724 <_sbrk+0x64>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	4a05      	ldr	r2, [pc, #20]	; (8002724 <_sbrk+0x64>)
 8002710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002712:	68fb      	ldr	r3, [r7, #12]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20080000 	.word	0x20080000
 8002720:	00000400 	.word	0x00000400
 8002724:	20000430 	.word	0x20000430
 8002728:	20000b78 	.word	0x20000b78

0800272c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <SystemInit+0x20>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002736:	4a05      	ldr	r2, [pc, #20]	; (800274c <SystemInit+0x20>)
 8002738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800273c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08e      	sub	sp, #56	; 0x38
 8002754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002756:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002764:	f107 031c 	add.w	r3, r7, #28
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002770:	463b      	mov	r3, r7
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	605a      	str	r2, [r3, #4]
 8002778:	609a      	str	r2, [r3, #8]
 800277a:	60da      	str	r2, [r3, #12]
 800277c:	611a      	str	r2, [r3, #16]
 800277e:	615a      	str	r2, [r3, #20]
 8002780:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002782:	4b2d      	ldr	r3, [pc, #180]	; (8002838 <MX_TIM2_Init+0xe8>)
 8002784:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002788:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 800278a:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <MX_TIM2_Init+0xe8>)
 800278c:	225f      	movs	r2, #95	; 0x5f
 800278e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002790:	4b29      	ldr	r3, [pc, #164]	; (8002838 <MX_TIM2_Init+0xe8>)
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8002796:	4b28      	ldr	r3, [pc, #160]	; (8002838 <MX_TIM2_Init+0xe8>)
 8002798:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800279c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800279e:	4b26      	ldr	r3, [pc, #152]	; (8002838 <MX_TIM2_Init+0xe8>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a4:	4b24      	ldr	r3, [pc, #144]	; (8002838 <MX_TIM2_Init+0xe8>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027aa:	4823      	ldr	r0, [pc, #140]	; (8002838 <MX_TIM2_Init+0xe8>)
 80027ac:	f004 f854 	bl	8006858 <HAL_TIM_Base_Init>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80027b6:	f7ff fc6b 	bl	8002090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027c4:	4619      	mov	r1, r3
 80027c6:	481c      	ldr	r0, [pc, #112]	; (8002838 <MX_TIM2_Init+0xe8>)
 80027c8:	f005 f860 	bl	800788c <HAL_TIM_ConfigClockSource>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80027d2:	f7ff fc5d 	bl	8002090 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027d6:	4818      	ldr	r0, [pc, #96]	; (8002838 <MX_TIM2_Init+0xe8>)
 80027d8:	f004 f93d 	bl	8006a56 <HAL_TIM_PWM_Init>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80027e2:	f7ff fc55 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ea:	2300      	movs	r3, #0
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027ee:	f107 031c 	add.w	r3, r7, #28
 80027f2:	4619      	mov	r1, r3
 80027f4:	4810      	ldr	r0, [pc, #64]	; (8002838 <MX_TIM2_Init+0xe8>)
 80027f6:	f005 fe5d 	bl	80084b4 <HAL_TIMEx_MasterConfigSynchronization>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002800:	f7ff fc46 	bl	8002090 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002804:	2360      	movs	r3, #96	; 0x60
 8002806:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800280c:	2300      	movs	r3, #0
 800280e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002810:	2300      	movs	r3, #0
 8002812:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002814:	463b      	mov	r3, r7
 8002816:	220c      	movs	r2, #12
 8002818:	4619      	mov	r1, r3
 800281a:	4807      	ldr	r0, [pc, #28]	; (8002838 <MX_TIM2_Init+0xe8>)
 800281c:	f004 ff22 	bl	8007664 <HAL_TIM_PWM_ConfigChannel>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002826:	f7ff fc33 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800282a:	4803      	ldr	r0, [pc, #12]	; (8002838 <MX_TIM2_Init+0xe8>)
 800282c:	f000 fb3e 	bl	8002eac <HAL_TIM_MspPostInit>

}
 8002830:	bf00      	nop
 8002832:	3738      	adds	r7, #56	; 0x38
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	200007e8 	.word	0x200007e8

0800283c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002842:	f107 0310 	add.w	r3, r7, #16
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002850:	1d3b      	adds	r3, r7, #4
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
 8002858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <MX_TIM3_Init+0x94>)
 800285c:	4a1d      	ldr	r2, [pc, #116]	; (80028d4 <MX_TIM3_Init+0x98>)
 800285e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8002860:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <MX_TIM3_Init+0x94>)
 8002862:	225f      	movs	r2, #95	; 0x5f
 8002864:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002866:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <MX_TIM3_Init+0x94>)
 8002868:	2200      	movs	r2, #0
 800286a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800286c:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <MX_TIM3_Init+0x94>)
 800286e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002872:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002874:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <MX_TIM3_Init+0x94>)
 8002876:	2200      	movs	r2, #0
 8002878:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <MX_TIM3_Init+0x94>)
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002880:	4813      	ldr	r0, [pc, #76]	; (80028d0 <MX_TIM3_Init+0x94>)
 8002882:	f003 ffe9 	bl	8006858 <HAL_TIM_Base_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800288c:	f7ff fc00 	bl	8002090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002894:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002896:	f107 0310 	add.w	r3, r7, #16
 800289a:	4619      	mov	r1, r3
 800289c:	480c      	ldr	r0, [pc, #48]	; (80028d0 <MX_TIM3_Init+0x94>)
 800289e:	f004 fff5 	bl	800788c <HAL_TIM_ConfigClockSource>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80028a8:	f7ff fbf2 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ac:	2300      	movs	r3, #0
 80028ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028b4:	1d3b      	adds	r3, r7, #4
 80028b6:	4619      	mov	r1, r3
 80028b8:	4805      	ldr	r0, [pc, #20]	; (80028d0 <MX_TIM3_Init+0x94>)
 80028ba:	f005 fdfb 	bl	80084b4 <HAL_TIMEx_MasterConfigSynchronization>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80028c4:	f7ff fbe4 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028c8:	bf00      	nop
 80028ca:	3720      	adds	r7, #32
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	200006b8 	.word	0x200006b8
 80028d4:	40000400 	.word	0x40000400

080028d8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08e      	sub	sp, #56	; 0x38
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	605a      	str	r2, [r3, #4]
 80028e8:	609a      	str	r2, [r3, #8]
 80028ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ec:	f107 031c 	add.w	r3, r7, #28
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028f8:	463b      	mov	r3, r7
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	609a      	str	r2, [r3, #8]
 8002902:	60da      	str	r2, [r3, #12]
 8002904:	611a      	str	r2, [r3, #16]
 8002906:	615a      	str	r2, [r3, #20]
 8002908:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800290a:	4b2d      	ldr	r3, [pc, #180]	; (80029c0 <MX_TIM5_Init+0xe8>)
 800290c:	4a2d      	ldr	r2, [pc, #180]	; (80029c4 <MX_TIM5_Init+0xec>)
 800290e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 96-1;
 8002910:	4b2b      	ldr	r3, [pc, #172]	; (80029c0 <MX_TIM5_Init+0xe8>)
 8002912:	225f      	movs	r2, #95	; 0x5f
 8002914:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002916:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <MX_TIM5_Init+0xe8>)
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 800291c:	4b28      	ldr	r3, [pc, #160]	; (80029c0 <MX_TIM5_Init+0xe8>)
 800291e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002922:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002924:	4b26      	ldr	r3, [pc, #152]	; (80029c0 <MX_TIM5_Init+0xe8>)
 8002926:	2200      	movs	r2, #0
 8002928:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800292a:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <MX_TIM5_Init+0xe8>)
 800292c:	2200      	movs	r2, #0
 800292e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002930:	4823      	ldr	r0, [pc, #140]	; (80029c0 <MX_TIM5_Init+0xe8>)
 8002932:	f003 ff91 	bl	8006858 <HAL_TIM_Base_Init>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800293c:	f7ff fba8 	bl	8002090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800294a:	4619      	mov	r1, r3
 800294c:	481c      	ldr	r0, [pc, #112]	; (80029c0 <MX_TIM5_Init+0xe8>)
 800294e:	f004 ff9d 	bl	800788c <HAL_TIM_ConfigClockSource>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002958:	f7ff fb9a 	bl	8002090 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800295c:	4818      	ldr	r0, [pc, #96]	; (80029c0 <MX_TIM5_Init+0xe8>)
 800295e:	f004 f87a 	bl	8006a56 <HAL_TIM_PWM_Init>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002968:	f7ff fb92 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800296c:	2300      	movs	r3, #0
 800296e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002970:	2300      	movs	r3, #0
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002974:	f107 031c 	add.w	r3, r7, #28
 8002978:	4619      	mov	r1, r3
 800297a:	4811      	ldr	r0, [pc, #68]	; (80029c0 <MX_TIM5_Init+0xe8>)
 800297c:	f005 fd9a 	bl	80084b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002986:	f7ff fb83 	bl	8002090 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800298a:	2360      	movs	r3, #96	; 0x60
 800298c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800299a:	463b      	mov	r3, r7
 800299c:	2200      	movs	r2, #0
 800299e:	4619      	mov	r1, r3
 80029a0:	4807      	ldr	r0, [pc, #28]	; (80029c0 <MX_TIM5_Init+0xe8>)
 80029a2:	f004 fe5f 	bl	8007664 <HAL_TIM_PWM_ConfigChannel>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80029ac:	f7ff fb70 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80029b0:	4803      	ldr	r0, [pc, #12]	; (80029c0 <MX_TIM5_Init+0xe8>)
 80029b2:	f000 fa7b 	bl	8002eac <HAL_TIM_MspPostInit>

}
 80029b6:	bf00      	nop
 80029b8:	3738      	adds	r7, #56	; 0x38
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	2000066c 	.word	0x2000066c
 80029c4:	40000c00 	.word	0x40000c00

080029c8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80029d8:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <MX_TIM6_Init+0x64>)
 80029da:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <MX_TIM6_Init+0x68>)
 80029dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80029de:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <MX_TIM6_Init+0x64>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e4:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <MX_TIM6_Init+0x64>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 96-1;
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <MX_TIM6_Init+0x64>)
 80029ec:	225f      	movs	r2, #95	; 0x5f
 80029ee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f0:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <MX_TIM6_Init+0x64>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80029f6:	480d      	ldr	r0, [pc, #52]	; (8002a2c <MX_TIM6_Init+0x64>)
 80029f8:	f003 ff2e 	bl	8006858 <HAL_TIM_Base_Init>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002a02:	f7ff fb45 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a06:	2300      	movs	r3, #0
 8002a08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	4619      	mov	r1, r3
 8002a12:	4806      	ldr	r0, [pc, #24]	; (8002a2c <MX_TIM6_Init+0x64>)
 8002a14:	f005 fd4e 	bl	80084b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002a1e:	f7ff fb37 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000750 	.word	0x20000750
 8002a30:	40001000 	.word	0x40001000

08002a34 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002a44:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <MX_TIM7_Init+0x64>)
 8002a46:	4a15      	ldr	r2, [pc, #84]	; (8002a9c <MX_TIM7_Init+0x68>)
 8002a48:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 96-1;
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <MX_TIM7_Init+0x64>)
 8002a4c:	225f      	movs	r2, #95	; 0x5f
 8002a4e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <MX_TIM7_Init+0x64>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <MX_TIM7_Init+0x64>)
 8002a58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a5c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <MX_TIM7_Init+0x64>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002a64:	480c      	ldr	r0, [pc, #48]	; (8002a98 <MX_TIM7_Init+0x64>)
 8002a66:	f003 fef7 	bl	8006858 <HAL_TIM_Base_Init>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002a70:	f7ff fb0e 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a74:	2300      	movs	r3, #0
 8002a76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4805      	ldr	r0, [pc, #20]	; (8002a98 <MX_TIM7_Init+0x64>)
 8002a82:	f005 fd17 	bl	80084b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002a8c:	f7ff fb00 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20000880 	.word	0x20000880
 8002a9c:	40001400 	.word	0x40001400

08002aa0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aa6:	f107 0310 	add.w	r3, r7, #16
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002ab4:	463b      	mov	r3, r7
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002ac0:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <MX_TIM9_Init+0xb0>)
 8002ac2:	4a24      	ldr	r2, [pc, #144]	; (8002b54 <MX_TIM9_Init+0xb4>)
 8002ac4:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 96-1;
 8002ac6:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <MX_TIM9_Init+0xb0>)
 8002ac8:	225f      	movs	r2, #95	; 0x5f
 8002aca:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002acc:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <MX_TIM9_Init+0xb0>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 18000;
 8002ad2:	4b1f      	ldr	r3, [pc, #124]	; (8002b50 <MX_TIM9_Init+0xb0>)
 8002ad4:	f244 6250 	movw	r2, #18000	; 0x4650
 8002ad8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ada:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <MX_TIM9_Init+0xb0>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <MX_TIM9_Init+0xb0>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002ae6:	481a      	ldr	r0, [pc, #104]	; (8002b50 <MX_TIM9_Init+0xb0>)
 8002ae8:	f003 feb6 	bl	8006858 <HAL_TIM_Base_Init>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_TIM9_Init+0x56>
  {
    Error_Handler();
 8002af2:	f7ff facd 	bl	8002090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002afa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002afc:	f107 0310 	add.w	r3, r7, #16
 8002b00:	4619      	mov	r1, r3
 8002b02:	4813      	ldr	r0, [pc, #76]	; (8002b50 <MX_TIM9_Init+0xb0>)
 8002b04:	f004 fec2 	bl	800788c <HAL_TIM_ConfigClockSource>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 8002b0e:	f7ff fabf 	bl	8002090 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8002b12:	480f      	ldr	r0, [pc, #60]	; (8002b50 <MX_TIM9_Init+0xb0>)
 8002b14:	f004 f97a 	bl	8006e0c <HAL_TIM_IC_Init>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <MX_TIM9_Init+0x82>
  {
    Error_Handler();
 8002b1e:	f7ff fab7 	bl	8002090 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002b22:	230a      	movs	r3, #10
 8002b24:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b26:	2301      	movs	r3, #1
 8002b28:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002b32:	463b      	mov	r3, r7
 8002b34:	2204      	movs	r2, #4
 8002b36:	4619      	mov	r1, r3
 8002b38:	4805      	ldr	r0, [pc, #20]	; (8002b50 <MX_TIM9_Init+0xb0>)
 8002b3a:	f004 fcf6 	bl	800752a <HAL_TIM_IC_ConfigChannel>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <MX_TIM9_Init+0xa8>
  {
    Error_Handler();
 8002b44:	f7ff faa4 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002b48:	bf00      	nop
 8002b4a:	3720      	adds	r7, #32
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	2000079c 	.word	0x2000079c
 8002b54:	40014000 	.word	0x40014000

08002b58 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002b5e:	463b      	mov	r3, r7
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002b6a:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <MX_TIM13_Init+0x88>)
 8002b6c:	4a1d      	ldr	r2, [pc, #116]	; (8002be4 <MX_TIM13_Init+0x8c>)
 8002b6e:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 96-1;
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <MX_TIM13_Init+0x88>)
 8002b72:	225f      	movs	r2, #95	; 0x5f
 8002b74:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <MX_TIM13_Init+0x88>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 18000;
 8002b7c:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <MX_TIM13_Init+0x88>)
 8002b7e:	f244 6250 	movw	r2, #18000	; 0x4650
 8002b82:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b84:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <MX_TIM13_Init+0x88>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b8a:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <MX_TIM13_Init+0x88>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002b90:	4813      	ldr	r0, [pc, #76]	; (8002be0 <MX_TIM13_Init+0x88>)
 8002b92:	f003 fe61 	bl	8006858 <HAL_TIM_Base_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_TIM13_Init+0x48>
  {
    Error_Handler();
 8002b9c:	f7ff fa78 	bl	8002090 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8002ba0:	480f      	ldr	r0, [pc, #60]	; (8002be0 <MX_TIM13_Init+0x88>)
 8002ba2:	f004 f933 	bl	8006e0c <HAL_TIM_IC_Init>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <MX_TIM13_Init+0x58>
  {
    Error_Handler();
 8002bac:	f7ff fa70 	bl	8002090 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002bb0:	230a      	movs	r3, #10
 8002bb2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002bc0:	463b      	mov	r3, r7
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4806      	ldr	r0, [pc, #24]	; (8002be0 <MX_TIM13_Init+0x88>)
 8002bc8:	f004 fcaf 	bl	800752a <HAL_TIM_IC_ConfigChannel>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_TIM13_Init+0x7e>
  {
    Error_Handler();
 8002bd2:	f7ff fa5d 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000704 	.word	0x20000704
 8002be4:	40001c00 	.word	0x40001c00

08002be8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	611a      	str	r2, [r3, #16]
 8002bfc:	615a      	str	r2, [r3, #20]
 8002bfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002c00:	4b1e      	ldr	r3, [pc, #120]	; (8002c7c <MX_TIM14_Init+0x94>)
 8002c02:	4a1f      	ldr	r2, [pc, #124]	; (8002c80 <MX_TIM14_Init+0x98>)
 8002c04:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 96-1;
 8002c06:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <MX_TIM14_Init+0x94>)
 8002c08:	225f      	movs	r2, #95	; 0x5f
 8002c0a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <MX_TIM14_Init+0x94>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 8002c12:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <MX_TIM14_Init+0x94>)
 8002c14:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002c18:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c1a:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <MX_TIM14_Init+0x94>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c20:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <MX_TIM14_Init+0x94>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002c26:	4815      	ldr	r0, [pc, #84]	; (8002c7c <MX_TIM14_Init+0x94>)
 8002c28:	f003 fe16 	bl	8006858 <HAL_TIM_Base_Init>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8002c32:	f7ff fa2d 	bl	8002090 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002c36:	4811      	ldr	r0, [pc, #68]	; (8002c7c <MX_TIM14_Init+0x94>)
 8002c38:	f003 ff0d 	bl	8006a56 <HAL_TIM_PWM_Init>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8002c42:	f7ff fa25 	bl	8002090 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c46:	2360      	movs	r3, #96	; 0x60
 8002c48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	2200      	movs	r2, #0
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4807      	ldr	r0, [pc, #28]	; (8002c7c <MX_TIM14_Init+0x94>)
 8002c5e:	f004 fd01 	bl	8007664 <HAL_TIM_PWM_ConfigChannel>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002c68:	f7ff fa12 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8002c6c:	4803      	ldr	r0, [pc, #12]	; (8002c7c <MX_TIM14_Init+0x94>)
 8002c6e:	f000 f91d 	bl	8002eac <HAL_TIM_MspPostInit>

}
 8002c72:	bf00      	nop
 8002c74:	3720      	adds	r7, #32
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000834 	.word	0x20000834
 8002c80:	40002000 	.word	0x40002000

08002c84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b092      	sub	sp, #72	; 0x48
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ca6:	4b77      	ldr	r3, [pc, #476]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4a76      	ldr	r2, [pc, #472]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb2:	4b74      	ldr	r3, [pc, #464]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	633b      	str	r3, [r7, #48]	; 0x30
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002cbe:	e0dd      	b.n	8002e7c <HAL_TIM_Base_MspInit+0x1f8>
  else if(tim_baseHandle->Instance==TIM3)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a70      	ldr	r2, [pc, #448]	; (8002e88 <HAL_TIM_Base_MspInit+0x204>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d114      	bne.n	8002cf4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cca:	4b6e      	ldr	r3, [pc, #440]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a6d      	ldr	r2, [pc, #436]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002cd0:	f043 0302 	orr.w	r3, r3, #2
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b6b      	ldr	r3, [pc, #428]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	201d      	movs	r0, #29
 8002ce8:	f000 fda1 	bl	800382e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cec:	201d      	movs	r0, #29
 8002cee:	f000 fdba 	bl	8003866 <HAL_NVIC_EnableIRQ>
}
 8002cf2:	e0c3      	b.n	8002e7c <HAL_TIM_Base_MspInit+0x1f8>
  else if(tim_baseHandle->Instance==TIM5)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a64      	ldr	r2, [pc, #400]	; (8002e8c <HAL_TIM_Base_MspInit+0x208>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d10c      	bne.n	8002d18 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002cfe:	4b61      	ldr	r3, [pc, #388]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	4a60      	ldr	r2, [pc, #384]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002d04:	f043 0308 	orr.w	r3, r3, #8
 8002d08:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0a:	4b5e      	ldr	r3, [pc, #376]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002d16:	e0b1      	b.n	8002e7c <HAL_TIM_Base_MspInit+0x1f8>
  else if(tim_baseHandle->Instance==TIM6)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a5c      	ldr	r2, [pc, #368]	; (8002e90 <HAL_TIM_Base_MspInit+0x20c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d114      	bne.n	8002d4c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d22:	4b58      	ldr	r3, [pc, #352]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	4a57      	ldr	r2, [pc, #348]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002d28:	f043 0310 	orr.w	r3, r3, #16
 8002d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d2e:	4b55      	ldr	r3, [pc, #340]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	2036      	movs	r0, #54	; 0x36
 8002d40:	f000 fd75 	bl	800382e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d44:	2036      	movs	r0, #54	; 0x36
 8002d46:	f000 fd8e 	bl	8003866 <HAL_NVIC_EnableIRQ>
}
 8002d4a:	e097      	b.n	8002e7c <HAL_TIM_Base_MspInit+0x1f8>
  else if(tim_baseHandle->Instance==TIM7)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a50      	ldr	r2, [pc, #320]	; (8002e94 <HAL_TIM_Base_MspInit+0x210>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d114      	bne.n	8002d80 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d56:	4b4b      	ldr	r3, [pc, #300]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	4a4a      	ldr	r2, [pc, #296]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002d5c:	f043 0320 	orr.w	r3, r3, #32
 8002d60:	6413      	str	r3, [r2, #64]	; 0x40
 8002d62:	4b48      	ldr	r3, [pc, #288]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f003 0320 	and.w	r3, r3, #32
 8002d6a:	623b      	str	r3, [r7, #32]
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2100      	movs	r1, #0
 8002d72:	2037      	movs	r0, #55	; 0x37
 8002d74:	f000 fd5b 	bl	800382e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d78:	2037      	movs	r0, #55	; 0x37
 8002d7a:	f000 fd74 	bl	8003866 <HAL_NVIC_EnableIRQ>
}
 8002d7e:	e07d      	b.n	8002e7c <HAL_TIM_Base_MspInit+0x1f8>
  else if(tim_baseHandle->Instance==TIM9)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a44      	ldr	r2, [pc, #272]	; (8002e98 <HAL_TIM_Base_MspInit+0x214>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d130      	bne.n	8002dec <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002d8a:	4b3e      	ldr	r3, [pc, #248]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	4a3d      	ldr	r2, [pc, #244]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d94:	6453      	str	r3, [r2, #68]	; 0x44
 8002d96:	4b3b      	ldr	r3, [pc, #236]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002da2:	4b38      	ldr	r3, [pc, #224]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a37      	ldr	r2, [pc, #220]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002da8:	f043 0310 	orr.w	r3, r3, #16
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b35      	ldr	r3, [pc, #212]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	61bb      	str	r3, [r7, #24]
 8002db8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = HCSR_ECHO_SX_Pin;
 8002dba:	2340      	movs	r3, #64	; 0x40
 8002dbc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(HCSR_ECHO_SX_GPIO_Port, &GPIO_InitStruct);
 8002dce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4831      	ldr	r0, [pc, #196]	; (8002e9c <HAL_TIM_Base_MspInit+0x218>)
 8002dd6:	f001 f979 	bl	80040cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2100      	movs	r1, #0
 8002dde:	2018      	movs	r0, #24
 8002de0:	f000 fd25 	bl	800382e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002de4:	2018      	movs	r0, #24
 8002de6:	f000 fd3e 	bl	8003866 <HAL_NVIC_EnableIRQ>
}
 8002dea:	e047      	b.n	8002e7c <HAL_TIM_Base_MspInit+0x1f8>
  else if(tim_baseHandle->Instance==TIM13)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a2b      	ldr	r2, [pc, #172]	; (8002ea0 <HAL_TIM_Base_MspInit+0x21c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d131      	bne.n	8002e5a <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002df6:	4b23      	ldr	r3, [pc, #140]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	4a22      	ldr	r2, [pc, #136]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e00:	6413      	str	r3, [r2, #64]	; 0x40
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	4a1c      	ldr	r2, [pc, #112]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002e14:	f043 0320 	orr.w	r3, r3, #32
 8002e18:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HCSR_ECHO_SY_Pin;
 8002e26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e2a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e34:	2300      	movs	r3, #0
 8002e36:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002e38:	2309      	movs	r3, #9
 8002e3a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(HCSR_ECHO_SY_GPIO_Port, &GPIO_InitStruct);
 8002e3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e40:	4619      	mov	r1, r3
 8002e42:	4818      	ldr	r0, [pc, #96]	; (8002ea4 <HAL_TIM_Base_MspInit+0x220>)
 8002e44:	f001 f942 	bl	80040cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	202c      	movs	r0, #44	; 0x2c
 8002e4e:	f000 fcee 	bl	800382e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002e52:	202c      	movs	r0, #44	; 0x2c
 8002e54:	f000 fd07 	bl	8003866 <HAL_NVIC_EnableIRQ>
}
 8002e58:	e010      	b.n	8002e7c <HAL_TIM_Base_MspInit+0x1f8>
  else if(tim_baseHandle->Instance==TIM14)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <HAL_TIM_Base_MspInit+0x224>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d10b      	bne.n	8002e7c <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002e64:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	4a06      	ldr	r2, [pc, #24]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e70:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <HAL_TIM_Base_MspInit+0x200>)
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
}
 8002e7c:	bf00      	nop
 8002e7e:	3748      	adds	r7, #72	; 0x48
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40000400 	.word	0x40000400
 8002e8c:	40000c00 	.word	0x40000c00
 8002e90:	40001000 	.word	0x40001000
 8002e94:	40001400 	.word	0x40001400
 8002e98:	40014000 	.word	0x40014000
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40001c00 	.word	0x40001c00
 8002ea4:	40021400 	.word	0x40021400
 8002ea8:	40002000 	.word	0x40002000

08002eac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08a      	sub	sp, #40	; 0x28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb4:	f107 0314 	add.w	r3, r7, #20
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ecc:	d11d      	bne.n	8002f0a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ece:	4b33      	ldr	r3, [pc, #204]	; (8002f9c <HAL_TIM_MspPostInit+0xf0>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a32      	ldr	r2, [pc, #200]	; (8002f9c <HAL_TIM_MspPostInit+0xf0>)
 8002ed4:	f043 0302 	orr.w	r3, r3, #2
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b30      	ldr	r3, [pc, #192]	; (8002f9c <HAL_TIM_MspPostInit+0xf0>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = FIR_PWM_MD_Pin;
 8002ee6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eec:	2302      	movs	r3, #2
 8002eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FIR_PWM_MD_GPIO_Port, &GPIO_InitStruct);
 8002efc:	f107 0314 	add.w	r3, r7, #20
 8002f00:	4619      	mov	r1, r3
 8002f02:	4827      	ldr	r0, [pc, #156]	; (8002fa0 <HAL_TIM_MspPostInit+0xf4>)
 8002f04:	f001 f8e2 	bl	80040cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002f08:	e043      	b.n	8002f92 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM5)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a25      	ldr	r2, [pc, #148]	; (8002fa4 <HAL_TIM_MspPostInit+0xf8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d11c      	bne.n	8002f4e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f14:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <HAL_TIM_MspPostInit+0xf0>)
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	4a20      	ldr	r2, [pc, #128]	; (8002f9c <HAL_TIM_MspPostInit+0xf0>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f20:	4b1e      	ldr	r3, [pc, #120]	; (8002f9c <HAL_TIM_MspPostInit+0xf0>)
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FIR_PWM_ME_Pin;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f30:	2302      	movs	r3, #2
 8002f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FIR_PWM_ME_GPIO_Port, &GPIO_InitStruct);
 8002f40:	f107 0314 	add.w	r3, r7, #20
 8002f44:	4619      	mov	r1, r3
 8002f46:	4818      	ldr	r0, [pc, #96]	; (8002fa8 <HAL_TIM_MspPostInit+0xfc>)
 8002f48:	f001 f8c0 	bl	80040cc <HAL_GPIO_Init>
}
 8002f4c:	e021      	b.n	8002f92 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM14)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a16      	ldr	r2, [pc, #88]	; (8002fac <HAL_TIM_MspPostInit+0x100>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d11c      	bne.n	8002f92 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f58:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <HAL_TIM_MspPostInit+0xf0>)
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	4a0f      	ldr	r2, [pc, #60]	; (8002f9c <HAL_TIM_MspPostInit+0xf0>)
 8002f5e:	f043 0320 	orr.w	r3, r3, #32
 8002f62:	6313      	str	r3, [r2, #48]	; 0x30
 8002f64:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <HAL_TIM_MspPostInit+0xf0>)
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	f003 0320 	and.w	r3, r3, #32
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SG90_PWM_Pin;
 8002f70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f76:	2302      	movs	r3, #2
 8002f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002f82:	2309      	movs	r3, #9
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SG90_PWM_GPIO_Port, &GPIO_InitStruct);
 8002f86:	f107 0314 	add.w	r3, r7, #20
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4808      	ldr	r0, [pc, #32]	; (8002fb0 <HAL_TIM_MspPostInit+0x104>)
 8002f8e:	f001 f89d 	bl	80040cc <HAL_GPIO_Init>
}
 8002f92:	bf00      	nop
 8002f94:	3728      	adds	r7, #40	; 0x28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40020400 	.word	0x40020400
 8002fa4:	40000c00 	.word	0x40000c00
 8002fa8:	40020000 	.word	0x40020000
 8002fac:	40002000 	.word	0x40002000
 8002fb0:	40021400 	.word	0x40021400

08002fb4 <MY_TIM3_Init>:
}

/* USER CODE BEGIN 1 */

void MY_TIM3_Init(struct hw_cfg_t hw_cfg)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08c      	sub	sp, #48	; 0x30
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	463b      	mov	r3, r7
 8002fbc:	e883 0003 	stmia.w	r3, {r0, r1}
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fc0:	f107 0318 	add.w	r3, r7, #24
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fce:	f107 030c 	add.w	r3, r7, #12
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	605a      	str	r2, [r3, #4]
 8002fd8:	609a      	str	r2, [r3, #8]

	unsigned int mul1 = 1, mul2 = 1;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fde:	2301      	movs	r3, #1
 8002fe0:	62bb      	str	r3, [r7, #40]	; 0x28

	if(!strncmp(hw_cfg.timeunit, "us", 2))
 8002fe2:	463b      	mov	r3, r7
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	4932      	ldr	r1, [pc, #200]	; (80030b4 <MY_TIM3_Init+0x100>)
 8002fea:	4618      	mov	r0, r3
 8002fec:	f007 fdbd 	bl	800ab6a <strncmp>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d018      	beq.n	8003028 <MY_TIM3_Init+0x74>
	{

	}
	else if(!strncmp(hw_cfg.timeunit, "ms", 2))
 8002ff6:	463b      	mov	r3, r7
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	492e      	ldr	r1, [pc, #184]	; (80030b8 <MY_TIM3_Init+0x104>)
 8002ffe:	4618      	mov	r0, r3
 8003000:	f007 fdb3 	bl	800ab6a <strncmp>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d103      	bne.n	8003012 <MY_TIM3_Init+0x5e>
	{
		mul1 = 1000;
 800300a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003010:	e00a      	b.n	8003028 <MY_TIM3_Init+0x74>
	}
	else if(!strncmp(hw_cfg.timeunit, "s", 1))
 8003012:	793a      	ldrb	r2, [r7, #4]
 8003014:	4b29      	ldr	r3, [pc, #164]	; (80030bc <MY_TIM3_Init+0x108>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d104      	bne.n	8003028 <MY_TIM3_Init+0x74>
	{
		mul1 = 20000;
 800301e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
		mul2 = 50;
 8003024:	2332      	movs	r3, #50	; 0x32
 8003026:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	htim3.Instance = TIM3;
 8003028:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <MY_TIM3_Init+0x10c>)
 800302a:	4a26      	ldr	r2, [pc, #152]	; (80030c4 <MY_TIM3_Init+0x110>)
 800302c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = (2 * mul1) - 1;
 800302e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	3b01      	subs	r3, #1
 8003034:	4a22      	ldr	r2, [pc, #136]	; (80030c0 <MY_TIM3_Init+0x10c>)
 8003036:	6053      	str	r3, [r2, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003038:	4b21      	ldr	r3, [pc, #132]	; (80030c0 <MY_TIM3_Init+0x10c>)
 800303a:	2200      	movs	r2, #0
 800303c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = ((hw_cfg.value * 48 * mul2)-1) & 65535;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003042:	fb02 f203 	mul.w	r2, r2, r3
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	3b01      	subs	r3, #1
 8003050:	b29b      	uxth	r3, r3
 8003052:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <MY_TIM3_Init+0x10c>)
 8003054:	60d3      	str	r3, [r2, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003056:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <MY_TIM3_Init+0x10c>)
 8003058:	2200      	movs	r2, #0
 800305a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800305c:	4b18      	ldr	r3, [pc, #96]	; (80030c0 <MY_TIM3_Init+0x10c>)
 800305e:	2200      	movs	r2, #0
 8003060:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003062:	4817      	ldr	r0, [pc, #92]	; (80030c0 <MY_TIM3_Init+0x10c>)
 8003064:	f003 fbf8 	bl	8006858 <HAL_TIM_Base_Init>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <MY_TIM3_Init+0xbe>
	{
		Error_Handler();
 800306e:	f7ff f80f 	bl	8002090 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003076:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003078:	f107 0318 	add.w	r3, r7, #24
 800307c:	4619      	mov	r1, r3
 800307e:	4810      	ldr	r0, [pc, #64]	; (80030c0 <MY_TIM3_Init+0x10c>)
 8003080:	f004 fc04 	bl	800788c <HAL_TIM_ConfigClockSource>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <MY_TIM3_Init+0xda>
	{
		Error_Handler();
 800308a:	f7ff f801 	bl	8002090 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003096:	f107 030c 	add.w	r3, r7, #12
 800309a:	4619      	mov	r1, r3
 800309c:	4808      	ldr	r0, [pc, #32]	; (80030c0 <MY_TIM3_Init+0x10c>)
 800309e:	f005 fa09 	bl	80084b4 <HAL_TIMEx_MasterConfigSynchronization>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <MY_TIM3_Init+0xf8>
	{
		Error_Handler();
 80030a8:	f7fe fff2 	bl	8002090 <Error_Handler>
	}
}
 80030ac:	bf00      	nop
 80030ae:	3730      	adds	r7, #48	; 0x30
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	0800eeac 	.word	0x0800eeac
 80030b8:	0800eeb0 	.word	0x0800eeb0
 80030bc:	0800eeb4 	.word	0x0800eeb4
 80030c0:	200006b8 	.word	0x200006b8
 80030c4:	40000400 	.word	0x40000400

080030c8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)	//	FIR0450
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a0d      	ldr	r2, [pc, #52]	; (8003108 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d104      	bne.n	80030e2 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		proc_ISR_speed();
 80030d8:	f7fd fe8c 	bl	8000df4 <proc_ISR_speed>
		proc_ISR_PID();
 80030dc:	f7fd fd6a 	bl	8000bb4 <proc_ISR_PID>
	{
		ISR_PID_angle();
		HCSR_get_distance();
		//read_obstacles();
	}
}
 80030e0:	e00e      	b.n	8003100 <HAL_TIM_PeriodElapsedCallback+0x38>
	else if(htim == &htim6)	//	HC-SR04
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a09      	ldr	r2, [pc, #36]	; (800310c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d102      	bne.n	80030f0 <HAL_TIM_PeriodElapsedCallback+0x28>
		HCSR_proc_TRIG_FSM();
 80030ea:	f7fe fad3 	bl	8001694 <HCSR_proc_TRIG_FSM>
}
 80030ee:	e007      	b.n	8003100 <HAL_TIM_PeriodElapsedCallback+0x38>
	else if(htim == &htim7)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a07      	ldr	r2, [pc, #28]	; (8003110 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d103      	bne.n	8003100 <HAL_TIM_PeriodElapsedCallback+0x38>
		ISR_PID_angle();
 80030f8:	f7fe f96c 	bl	80013d4 <ISR_PID_angle>
		HCSR_get_distance();
 80030fc:	f7fe fbd0 	bl	80018a0 <HCSR_get_distance>
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	200006b8 	.word	0x200006b8
 800310c:	20000750 	.word	0x20000750
 8003110:	20000880 	.word	0x20000880

08003114 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
	if(htim == &htim9)														// SX
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a0d      	ldr	r2, [pc, #52]	; (8003154 <HAL_TIM_IC_CaptureCallback+0x40>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d107      	bne.n	8003134 <HAL_TIM_IC_CaptureCallback+0x20>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	7f1b      	ldrb	r3, [r3, #28]
 8003128:	2b02      	cmp	r3, #2
 800312a:	d10e      	bne.n	800314a <HAL_TIM_IC_CaptureCallback+0x36>
		{
			HCSR_read_ECHO_pulse('x');
 800312c:	2078      	movs	r0, #120	; 0x78
 800312e:	f7fe fb13 	bl	8001758 <HCSR_read_ECHO_pulse>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
		{
			HCSR_read_ECHO_pulse('y');
		}
	}
}
 8003132:	e00a      	b.n	800314a <HAL_TIM_IC_CaptureCallback+0x36>
	else if(htim == &htim13)												// SY
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a08      	ldr	r2, [pc, #32]	; (8003158 <HAL_TIM_IC_CaptureCallback+0x44>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d106      	bne.n	800314a <HAL_TIM_IC_CaptureCallback+0x36>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	7f1b      	ldrb	r3, [r3, #28]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d102      	bne.n	800314a <HAL_TIM_IC_CaptureCallback+0x36>
			HCSR_read_ECHO_pulse('y');
 8003144:	2079      	movs	r0, #121	; 0x79
 8003146:	f7fe fb07 	bl	8001758 <HCSR_read_ECHO_pulse>
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	2000079c 	.word	0x2000079c
 8003158:	20000704 	.word	0x20000704

0800315c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 8003160:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <MX_USART3_UART_Init+0x74>)
 8003162:	2200      	movs	r2, #0
 8003164:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 8003166:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <MX_USART3_UART_Init+0x78>)
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 800316c:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <MX_USART3_UART_Init+0x7c>)
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <MX_USART3_UART_Init+0x80>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <MX_USART3_UART_Init+0x84>)
 800317a:	220d      	movs	r2, #13
 800317c:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800317e:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <MX_USART3_UART_Init+0x88>)
 8003180:	4a19      	ldr	r2, [pc, #100]	; (80031e8 <MX_USART3_UART_Init+0x8c>)
 8003182:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1750000;
 8003184:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <MX_USART3_UART_Init+0x88>)
 8003186:	4a19      	ldr	r2, [pc, #100]	; (80031ec <MX_USART3_UART_Init+0x90>)
 8003188:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800318a:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <MX_USART3_UART_Init+0x88>)
 800318c:	2200      	movs	r2, #0
 800318e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003190:	4b14      	ldr	r3, [pc, #80]	; (80031e4 <MX_USART3_UART_Init+0x88>)
 8003192:	2200      	movs	r2, #0
 8003194:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003196:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <MX_USART3_UART_Init+0x88>)
 8003198:	2200      	movs	r2, #0
 800319a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800319c:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <MX_USART3_UART_Init+0x88>)
 800319e:	220c      	movs	r2, #12
 80031a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <MX_USART3_UART_Init+0x88>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <MX_USART3_UART_Init+0x88>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031ae:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <MX_USART3_UART_Init+0x88>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <MX_USART3_UART_Init+0x88>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031ba:	480a      	ldr	r0, [pc, #40]	; (80031e4 <MX_USART3_UART_Init+0x88>)
 80031bc:	f005 fa26 	bl	800860c <HAL_UART_Init>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <MX_USART3_UART_Init+0x6e>
  {
    Error_Handler();
 80031c6:	f7fe ff63 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000a54 	.word	0x20000a54
 80031d4:	20000b58 	.word	0x20000b58
 80031d8:	20000a50 	.word	0x20000a50
 80031dc:	20000b5c 	.word	0x20000b5c
 80031e0:	20000a58 	.word	0x20000a58
 80031e4:	200009cc 	.word	0x200009cc
 80031e8:	40004800 	.word	0x40004800
 80031ec:	001ab3f0 	.word	0x001ab3f0

080031f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b0ae      	sub	sp, #184	; 0xb8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	2290      	movs	r2, #144	; 0x90
 800320e:	2100      	movs	r1, #0
 8003210:	4618      	mov	r0, r3
 8003212:	f006 fdc5 	bl	8009da0 <memset>
  if(uartHandle->Instance==USART3)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a26      	ldr	r2, [pc, #152]	; (80032b4 <HAL_UART_MspInit+0xc4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d144      	bne.n	80032aa <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003224:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003226:	2300      	movs	r3, #0
 8003228:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800322a:	f107 0314 	add.w	r3, r7, #20
 800322e:	4618      	mov	r0, r3
 8003230:	f001 ff72 	bl	8005118 <HAL_RCCEx_PeriphCLKConfig>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800323a:	f7fe ff29 	bl	8002090 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800323e:	4b1e      	ldr	r3, [pc, #120]	; (80032b8 <HAL_UART_MspInit+0xc8>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	4a1d      	ldr	r2, [pc, #116]	; (80032b8 <HAL_UART_MspInit+0xc8>)
 8003244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003248:	6413      	str	r3, [r2, #64]	; 0x40
 800324a:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <HAL_UART_MspInit+0xc8>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003256:	4b18      	ldr	r3, [pc, #96]	; (80032b8 <HAL_UART_MspInit+0xc8>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	4a17      	ldr	r2, [pc, #92]	; (80032b8 <HAL_UART_MspInit+0xc8>)
 800325c:	f043 0308 	orr.w	r3, r3, #8
 8003260:	6313      	str	r3, [r2, #48]	; 0x30
 8003262:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <HAL_UART_MspInit+0xc8>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800326e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003272:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003276:	2302      	movs	r3, #2
 8003278:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327c:	2300      	movs	r3, #0
 800327e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003282:	2303      	movs	r3, #3
 8003284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003288:	2307      	movs	r3, #7
 800328a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800328e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003292:	4619      	mov	r1, r3
 8003294:	4809      	ldr	r0, [pc, #36]	; (80032bc <HAL_UART_MspInit+0xcc>)
 8003296:	f000 ff19 	bl	80040cc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800329a:	2200      	movs	r2, #0
 800329c:	2100      	movs	r1, #0
 800329e:	2027      	movs	r0, #39	; 0x27
 80032a0:	f000 fac5 	bl	800382e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80032a4:	2027      	movs	r0, #39	; 0x27
 80032a6:	f000 fade 	bl	8003866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80032aa:	bf00      	nop
 80032ac:	37b8      	adds	r7, #184	; 0xb8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40004800 	.word	0x40004800
 80032b8:	40023800 	.word	0x40023800
 80032bc:	40020c00 	.word	0x40020c00

080032c0 <has_message_from_UART>:
}

/* USER CODE BEGIN 1 */

bool has_message_from_UART()
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
	return flagCPP;
 80032c4:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <has_message_from_UART+0x14>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	20000a54 	.word	0x20000a54

080032d8 <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
	return flagCPE;
 80032dc:	4b03      	ldr	r3, [pc, #12]	; (80032ec <is_transmitting_to_UART+0x14>)
 80032de:	781b      	ldrb	r3, [r3, #0]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20000b58 	.word	0x20000b58

080032f0 <reset_UART>:

void reset_UART()
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 80032f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032f8:	2100      	movs	r1, #0
 80032fa:	4806      	ldr	r0, [pc, #24]	; (8003314 <reset_UART+0x24>)
 80032fc:	f006 fd50 	bl	8009da0 <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8003300:	2201      	movs	r2, #1
 8003302:	4904      	ldr	r1, [pc, #16]	; (8003314 <reset_UART+0x24>)
 8003304:	4804      	ldr	r0, [pc, #16]	; (8003318 <reset_UART+0x28>)
 8003306:	f005 fa3d 	bl	8008784 <HAL_UART_Receive_IT>
	flagCPP = false;
 800330a:	4b04      	ldr	r3, [pc, #16]	; (800331c <reset_UART+0x2c>)
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
}
 8003310:	bf00      	nop
 8003312:	bd80      	pop	{r7, pc}
 8003314:	200008cc 	.word	0x200008cc
 8003318:	200009cc 	.word	0x200009cc
 800331c:	20000a54 	.word	0x20000a54

08003320 <send_UART>:

void send_UART(const char* msg_to_send)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, BUFFER_SIZE);
 8003328:	f44f 7280 	mov.w	r2, #256	; 0x100
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	480d      	ldr	r0, [pc, #52]	; (8003364 <send_UART+0x44>)
 8003330:	f007 fc2d 	bl	800ab8e <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 8003334:	480b      	ldr	r0, [pc, #44]	; (8003364 <send_UART+0x44>)
 8003336:	f7fc ff8d 	bl	8000254 <strlen>
 800333a:	4603      	mov	r3, r0
 800333c:	461a      	mov	r2, r3
 800333e:	4b09      	ldr	r3, [pc, #36]	; (8003364 <send_UART+0x44>)
 8003340:	4413      	add	r3, r2
 8003342:	4909      	ldr	r1, [pc, #36]	; (8003368 <send_UART+0x48>)
 8003344:	461a      	mov	r2, r3
 8003346:	460b      	mov	r3, r1
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 800334c:	4b07      	ldr	r3, [pc, #28]	; (800336c <send_UART+0x4c>)
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 8003352:	2201      	movs	r2, #1
 8003354:	4903      	ldr	r1, [pc, #12]	; (8003364 <send_UART+0x44>)
 8003356:	4806      	ldr	r0, [pc, #24]	; (8003370 <send_UART+0x50>)
 8003358:	f005 f9a6 	bl	80086a8 <HAL_UART_Transmit_IT>
}
 800335c:	bf00      	nop
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20000a58 	.word	0x20000a58
 8003368:	0800eeb8 	.word	0x0800eeb8
 800336c:	20000b58 	.word	0x20000b58
 8003370:	200009cc 	.word	0x200009cc

08003374 <read_UART>:

void read_UART(char* msg_to_read)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, BUFFER_SIZE);
 800337c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003380:	4903      	ldr	r1, [pc, #12]	; (8003390 <read_UART+0x1c>)
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f007 fc03 	bl	800ab8e <strncpy>
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	200008cc 	.word	0x200008cc

08003394 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 800339c:	4b2e      	ldr	r3, [pc, #184]	; (8003458 <HAL_UART_RxCpltCallback+0xc4>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d154      	bne.n	800344e <HAL_UART_RxCpltCallback+0xba>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r' || UART_RX_buffer[UART_RX_index] == '\\' || UART_RX_buffer[UART_RX_index] == '/')
 80033a4:	4b2d      	ldr	r3, [pc, #180]	; (800345c <HAL_UART_RxCpltCallback+0xc8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a2d      	ldr	r2, [pc, #180]	; (8003460 <HAL_UART_RxCpltCallback+0xcc>)
 80033aa:	5cd3      	ldrb	r3, [r2, r3]
 80033ac:	2b0d      	cmp	r3, #13
 80033ae:	d00b      	beq.n	80033c8 <HAL_UART_RxCpltCallback+0x34>
 80033b0:	4b2a      	ldr	r3, [pc, #168]	; (800345c <HAL_UART_RxCpltCallback+0xc8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a2a      	ldr	r2, [pc, #168]	; (8003460 <HAL_UART_RxCpltCallback+0xcc>)
 80033b6:	5cd3      	ldrb	r3, [r2, r3]
 80033b8:	2b5c      	cmp	r3, #92	; 0x5c
 80033ba:	d005      	beq.n	80033c8 <HAL_UART_RxCpltCallback+0x34>
 80033bc:	4b27      	ldr	r3, [pc, #156]	; (800345c <HAL_UART_RxCpltCallback+0xc8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a27      	ldr	r2, [pc, #156]	; (8003460 <HAL_UART_RxCpltCallback+0xcc>)
 80033c2:	5cd3      	ldrb	r3, [r2, r3]
 80033c4:	2b2f      	cmp	r3, #47	; 0x2f
 80033c6:	d106      	bne.n	80033d6 <HAL_UART_RxCpltCallback+0x42>
	{
		UART_RX_index = 0;
 80033c8:	4b24      	ldr	r3, [pc, #144]	; (800345c <HAL_UART_RxCpltCallback+0xc8>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 80033ce:	4b22      	ldr	r3, [pc, #136]	; (8003458 <HAL_UART_RxCpltCallback+0xc4>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	e03c      	b.n	8003450 <HAL_UART_RxCpltCallback+0xbc>
	}
	else
	{
		if(UART_RX_buffer[UART_RX_index] == 0x08) //	BACKSPACE
 80033d6:	4b21      	ldr	r3, [pc, #132]	; (800345c <HAL_UART_RxCpltCallback+0xc8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a21      	ldr	r2, [pc, #132]	; (8003460 <HAL_UART_RxCpltCallback+0xcc>)
 80033dc:	5cd3      	ldrb	r3, [r2, r3]
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d10f      	bne.n	8003402 <HAL_UART_RxCpltCallback+0x6e>
		{
			if(UART_RX_index == 0)
 80033e2:	4b1e      	ldr	r3, [pc, #120]	; (800345c <HAL_UART_RxCpltCallback+0xc8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d105      	bne.n	80033f6 <HAL_UART_RxCpltCallback+0x62>
				UART_RX_index--;
 80033ea:	4b1c      	ldr	r3, [pc, #112]	; (800345c <HAL_UART_RxCpltCallback+0xc8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	4a1a      	ldr	r2, [pc, #104]	; (800345c <HAL_UART_RxCpltCallback+0xc8>)
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	e01c      	b.n	8003430 <HAL_UART_RxCpltCallback+0x9c>
			else
				UART_RX_index -= 2;
 80033f6:	4b19      	ldr	r3, [pc, #100]	; (800345c <HAL_UART_RxCpltCallback+0xc8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3b02      	subs	r3, #2
 80033fc:	4a17      	ldr	r2, [pc, #92]	; (800345c <HAL_UART_RxCpltCallback+0xc8>)
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	e016      	b.n	8003430 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == 0x1B) //	ESCAPE
 8003402:	4b16      	ldr	r3, [pc, #88]	; (800345c <HAL_UART_RxCpltCallback+0xc8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a16      	ldr	r2, [pc, #88]	; (8003460 <HAL_UART_RxCpltCallback+0xcc>)
 8003408:	5cd3      	ldrb	r3, [r2, r3]
 800340a:	2b1b      	cmp	r3, #27
 800340c:	d104      	bne.n	8003418 <HAL_UART_RxCpltCallback+0x84>
		{
			UART_RX_index = -1;
 800340e:	4b13      	ldr	r3, [pc, #76]	; (800345c <HAL_UART_RxCpltCallback+0xc8>)
 8003410:	f04f 32ff 	mov.w	r2, #4294967295
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	e00b      	b.n	8003430 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == '$') //		$
 8003418:	4b10      	ldr	r3, [pc, #64]	; (800345c <HAL_UART_RxCpltCallback+0xc8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a10      	ldr	r2, [pc, #64]	; (8003460 <HAL_UART_RxCpltCallback+0xcc>)
 800341e:	5cd3      	ldrb	r3, [r2, r3]
 8003420:	2b24      	cmp	r3, #36	; 0x24
 8003422:	d105      	bne.n	8003430 <HAL_UART_RxCpltCallback+0x9c>
		{
			UART_RX_index = 0;
 8003424:	4b0d      	ldr	r3, [pc, #52]	; (800345c <HAL_UART_RxCpltCallback+0xc8>)
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
			UART_RX_buffer[0] = '$';
 800342a:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <HAL_UART_RxCpltCallback+0xcc>)
 800342c:	2224      	movs	r2, #36	; 0x24
 800342e:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 8003430:	4b0a      	ldr	r3, [pc, #40]	; (800345c <HAL_UART_RxCpltCallback+0xc8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3301      	adds	r3, #1
 8003436:	4a09      	ldr	r2, [pc, #36]	; (800345c <HAL_UART_RxCpltCallback+0xc8>)
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	4b08      	ldr	r3, [pc, #32]	; (800345c <HAL_UART_RxCpltCallback+0xc8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a08      	ldr	r2, [pc, #32]	; (8003460 <HAL_UART_RxCpltCallback+0xcc>)
 8003440:	4413      	add	r3, r2
 8003442:	2201      	movs	r2, #1
 8003444:	4619      	mov	r1, r3
 8003446:	4807      	ldr	r0, [pc, #28]	; (8003464 <HAL_UART_RxCpltCallback+0xd0>)
 8003448:	f005 f99c 	bl	8008784 <HAL_UART_Receive_IT>
 800344c:	e000      	b.n	8003450 <HAL_UART_RxCpltCallback+0xbc>
		return;
 800344e:	bf00      	nop
	}
}
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000a54 	.word	0x20000a54
 800345c:	20000a50 	.word	0x20000a50
 8003460:	200008cc 	.word	0x200008cc
 8003464:	200009cc 	.word	0x200009cc

08003468 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 8003470:	4b16      	ldr	r3, [pc, #88]	; (80034cc <HAL_UART_TxCpltCallback+0x64>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	f083 0301 	eor.w	r3, r3, #1
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d122      	bne.n	80034c4 <HAL_UART_TxCpltCallback+0x5c>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r' && UART_TX_buffer[UART_TX_index-1] != '\n')
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <HAL_UART_TxCpltCallback+0x68>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a14      	ldr	r2, [pc, #80]	; (80034d4 <HAL_UART_TxCpltCallback+0x6c>)
 8003484:	5cd3      	ldrb	r3, [r2, r3]
 8003486:	2b0d      	cmp	r3, #13
 8003488:	d10d      	bne.n	80034a6 <HAL_UART_TxCpltCallback+0x3e>
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <HAL_UART_TxCpltCallback+0x68>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	3b01      	subs	r3, #1
 8003490:	4a10      	ldr	r2, [pc, #64]	; (80034d4 <HAL_UART_TxCpltCallback+0x6c>)
 8003492:	5cd3      	ldrb	r3, [r2, r3]
 8003494:	2b0a      	cmp	r3, #10
 8003496:	d006      	beq.n	80034a6 <HAL_UART_TxCpltCallback+0x3e>
	{
		UART_TX_index = 0;
 8003498:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <HAL_UART_TxCpltCallback+0x68>)
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 800349e:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <HAL_UART_TxCpltCallback+0x64>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
 80034a4:	e00f      	b.n	80034c6 <HAL_UART_TxCpltCallback+0x5e>
	}
	else
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 80034a6:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <HAL_UART_TxCpltCallback+0x68>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3301      	adds	r3, #1
 80034ac:	4a08      	ldr	r2, [pc, #32]	; (80034d0 <HAL_UART_TxCpltCallback+0x68>)
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	4b07      	ldr	r3, [pc, #28]	; (80034d0 <HAL_UART_TxCpltCallback+0x68>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a07      	ldr	r2, [pc, #28]	; (80034d4 <HAL_UART_TxCpltCallback+0x6c>)
 80034b6:	4413      	add	r3, r2
 80034b8:	2201      	movs	r2, #1
 80034ba:	4619      	mov	r1, r3
 80034bc:	4806      	ldr	r0, [pc, #24]	; (80034d8 <HAL_UART_TxCpltCallback+0x70>)
 80034be:	f005 f8f3 	bl	80086a8 <HAL_UART_Transmit_IT>
 80034c2:	e000      	b.n	80034c6 <HAL_UART_TxCpltCallback+0x5e>
		return;
 80034c4:	bf00      	nop
}
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20000b58 	.word	0x20000b58
 80034d0:	20000b5c 	.word	0x20000b5c
 80034d4:	20000a58 	.word	0x20000a58
 80034d8:	200009cc 	.word	0x200009cc

080034dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80034dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003514 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034e0:	480d      	ldr	r0, [pc, #52]	; (8003518 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80034e2:	490e      	ldr	r1, [pc, #56]	; (800351c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80034e4:	4a0e      	ldr	r2, [pc, #56]	; (8003520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034e8:	e002      	b.n	80034f0 <LoopCopyDataInit>

080034ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ee:	3304      	adds	r3, #4

080034f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034f4:	d3f9      	bcc.n	80034ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034f6:	4a0b      	ldr	r2, [pc, #44]	; (8003524 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80034f8:	4c0b      	ldr	r4, [pc, #44]	; (8003528 <LoopFillZerobss+0x26>)
  movs r3, #0
 80034fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034fc:	e001      	b.n	8003502 <LoopFillZerobss>

080034fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003500:	3204      	adds	r2, #4

08003502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003504:	d3fb      	bcc.n	80034fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003506:	f7ff f911 	bl	800272c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800350a:	f006 fc25 	bl	8009d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800350e:	f7fe fc8b 	bl	8001e28 <main>
  bx  lr    
 8003512:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003514:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800351c:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8003520:	0800f3c4 	.word	0x0800f3c4
  ldr r2, =_sbss
 8003524:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 8003528:	20000b74 	.word	0x20000b74

0800352c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800352c:	e7fe      	b.n	800352c <ADC_IRQHandler>

0800352e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003532:	2003      	movs	r0, #3
 8003534:	f000 f970 	bl	8003818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003538:	200f      	movs	r0, #15
 800353a:	f000 f805 	bl	8003548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800353e:	f7fe ff55 	bl	80023ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003550:	4b12      	ldr	r3, [pc, #72]	; (800359c <HAL_InitTick+0x54>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <HAL_InitTick+0x58>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	4619      	mov	r1, r3
 800355a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800355e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003562:	fbb2 f3f3 	udiv	r3, r2, r3
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f999 	bl	800389e <HAL_SYSTICK_Config>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e00e      	b.n	8003594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b0f      	cmp	r3, #15
 800357a:	d80a      	bhi.n	8003592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800357c:	2200      	movs	r2, #0
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	f04f 30ff 	mov.w	r0, #4294967295
 8003584:	f000 f953 	bl	800382e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003588:	4a06      	ldr	r2, [pc, #24]	; (80035a4 <HAL_InitTick+0x5c>)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	e000      	b.n	8003594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
}
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	2000004c 	.word	0x2000004c
 80035a0:	20000054 	.word	0x20000054
 80035a4:	20000050 	.word	0x20000050

080035a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <HAL_IncTick+0x20>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	4b06      	ldr	r3, [pc, #24]	; (80035cc <HAL_IncTick+0x24>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4413      	add	r3, r2
 80035b8:	4a04      	ldr	r2, [pc, #16]	; (80035cc <HAL_IncTick+0x24>)
 80035ba:	6013      	str	r3, [r2, #0]
}
 80035bc:	bf00      	nop
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000054 	.word	0x20000054
 80035cc:	20000b60 	.word	0x20000b60

080035d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return uwTick;
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <HAL_GetTick+0x14>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20000b60 	.word	0x20000b60

080035e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035f0:	f7ff ffee 	bl	80035d0 <HAL_GetTick>
 80035f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003600:	d005      	beq.n	800360e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003602:	4b0a      	ldr	r3, [pc, #40]	; (800362c <HAL_Delay+0x44>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800360e:	bf00      	nop
 8003610:	f7ff ffde 	bl	80035d0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	429a      	cmp	r2, r3
 800361e:	d8f7      	bhi.n	8003610 <HAL_Delay+0x28>
  {
  }
}
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20000054 	.word	0x20000054

08003630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <__NVIC_SetPriorityGrouping+0x40>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800364c:	4013      	ands	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <__NVIC_SetPriorityGrouping+0x44>)
 800365a:	4313      	orrs	r3, r2
 800365c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800365e:	4a04      	ldr	r2, [pc, #16]	; (8003670 <__NVIC_SetPriorityGrouping+0x40>)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	60d3      	str	r3, [r2, #12]
}
 8003664:	bf00      	nop
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	e000ed00 	.word	0xe000ed00
 8003674:	05fa0000 	.word	0x05fa0000

08003678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800367c:	4b04      	ldr	r3, [pc, #16]	; (8003690 <__NVIC_GetPriorityGrouping+0x18>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	0a1b      	lsrs	r3, r3, #8
 8003682:	f003 0307 	and.w	r3, r3, #7
}
 8003686:	4618      	mov	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	db0b      	blt.n	80036be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	f003 021f 	and.w	r2, r3, #31
 80036ac:	4907      	ldr	r1, [pc, #28]	; (80036cc <__NVIC_EnableIRQ+0x38>)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	2001      	movs	r0, #1
 80036b6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	e000e100 	.word	0xe000e100

080036d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	db12      	blt.n	8003708 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	f003 021f 	and.w	r2, r3, #31
 80036e8:	490a      	ldr	r1, [pc, #40]	; (8003714 <__NVIC_DisableIRQ+0x44>)
 80036ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	2001      	movs	r0, #1
 80036f2:	fa00 f202 	lsl.w	r2, r0, r2
 80036f6:	3320      	adds	r3, #32
 80036f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80036fc:	f3bf 8f4f 	dsb	sy
}
 8003700:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003702:	f3bf 8f6f 	isb	sy
}
 8003706:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	e000e100 	.word	0xe000e100

08003718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	6039      	str	r1, [r7, #0]
 8003722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003728:	2b00      	cmp	r3, #0
 800372a:	db0a      	blt.n	8003742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	b2da      	uxtb	r2, r3
 8003730:	490c      	ldr	r1, [pc, #48]	; (8003764 <__NVIC_SetPriority+0x4c>)
 8003732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003736:	0112      	lsls	r2, r2, #4
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	440b      	add	r3, r1
 800373c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003740:	e00a      	b.n	8003758 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	b2da      	uxtb	r2, r3
 8003746:	4908      	ldr	r1, [pc, #32]	; (8003768 <__NVIC_SetPriority+0x50>)
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	3b04      	subs	r3, #4
 8003750:	0112      	lsls	r2, r2, #4
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	440b      	add	r3, r1
 8003756:	761a      	strb	r2, [r3, #24]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	e000e100 	.word	0xe000e100
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800376c:	b480      	push	{r7}
 800376e:	b089      	sub	sp, #36	; 0x24
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f1c3 0307 	rsb	r3, r3, #7
 8003786:	2b04      	cmp	r3, #4
 8003788:	bf28      	it	cs
 800378a:	2304      	movcs	r3, #4
 800378c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	3304      	adds	r3, #4
 8003792:	2b06      	cmp	r3, #6
 8003794:	d902      	bls.n	800379c <NVIC_EncodePriority+0x30>
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	3b03      	subs	r3, #3
 800379a:	e000      	b.n	800379e <NVIC_EncodePriority+0x32>
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a0:	f04f 32ff 	mov.w	r2, #4294967295
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43da      	mvns	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	401a      	ands	r2, r3
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037b4:	f04f 31ff 	mov.w	r1, #4294967295
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	fa01 f303 	lsl.w	r3, r1, r3
 80037be:	43d9      	mvns	r1, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c4:	4313      	orrs	r3, r2
         );
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3724      	adds	r7, #36	; 0x24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3b01      	subs	r3, #1
 80037e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037e4:	d301      	bcc.n	80037ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037e6:	2301      	movs	r3, #1
 80037e8:	e00f      	b.n	800380a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ea:	4a0a      	ldr	r2, [pc, #40]	; (8003814 <SysTick_Config+0x40>)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037f2:	210f      	movs	r1, #15
 80037f4:	f04f 30ff 	mov.w	r0, #4294967295
 80037f8:	f7ff ff8e 	bl	8003718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037fc:	4b05      	ldr	r3, [pc, #20]	; (8003814 <SysTick_Config+0x40>)
 80037fe:	2200      	movs	r2, #0
 8003800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003802:	4b04      	ldr	r3, [pc, #16]	; (8003814 <SysTick_Config+0x40>)
 8003804:	2207      	movs	r2, #7
 8003806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	e000e010 	.word	0xe000e010

08003818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff ff05 	bl	8003630 <__NVIC_SetPriorityGrouping>
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800382e:	b580      	push	{r7, lr}
 8003830:	b086      	sub	sp, #24
 8003832:	af00      	add	r7, sp, #0
 8003834:	4603      	mov	r3, r0
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
 800383a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003840:	f7ff ff1a 	bl	8003678 <__NVIC_GetPriorityGrouping>
 8003844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	6978      	ldr	r0, [r7, #20]
 800384c:	f7ff ff8e 	bl	800376c <NVIC_EncodePriority>
 8003850:	4602      	mov	r2, r0
 8003852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003856:	4611      	mov	r1, r2
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff ff5d 	bl	8003718 <__NVIC_SetPriority>
}
 800385e:	bf00      	nop
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
 800386c:	4603      	mov	r3, r0
 800386e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff ff0d 	bl	8003694 <__NVIC_EnableIRQ>
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b082      	sub	sp, #8
 8003886:	af00      	add	r7, sp, #0
 8003888:	4603      	mov	r3, r0
 800388a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800388c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff1d 	bl	80036d0 <__NVIC_DisableIRQ>
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff ff94 	bl	80037d4 <SysTick_Config>
 80038ac:	4603      	mov	r3, r0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038c4:	f7ff fe84 	bl	80035d0 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e099      	b.n	8003a08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038f4:	e00f      	b.n	8003916 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038f6:	f7ff fe6b 	bl	80035d0 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b05      	cmp	r3, #5
 8003902:	d908      	bls.n	8003916 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2203      	movs	r2, #3
 800390e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e078      	b.n	8003a08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e8      	bne.n	80038f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4b38      	ldr	r3, [pc, #224]	; (8003a10 <HAL_DMA_Init+0x158>)
 8003930:	4013      	ands	r3, r2
 8003932:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003942:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800394e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800395a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4313      	orrs	r3, r2
 8003966:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	2b04      	cmp	r3, #4
 800396e:	d107      	bne.n	8003980 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	4313      	orrs	r3, r2
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4313      	orrs	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f023 0307 	bic.w	r3, r3, #7
 8003996:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d117      	bne.n	80039da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00e      	beq.n	80039da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fb09 	bl	8003fd4 <DMA_CheckFifoParam>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2240      	movs	r2, #64	; 0x40
 80039cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039d6:	2301      	movs	r3, #1
 80039d8:	e016      	b.n	8003a08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fac0 	bl	8003f68 <DMA_CalcBaseAndBitshift>
 80039e8:	4603      	mov	r3, r0
 80039ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f0:	223f      	movs	r2, #63	; 0x3f
 80039f2:	409a      	lsls	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	e010803f 	.word	0xe010803f

08003a14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_DMA_Start_IT+0x26>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e048      	b.n	8003acc <HAL_DMA_Start_IT+0xb8>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d137      	bne.n	8003abe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2202      	movs	r2, #2
 8003a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68b9      	ldr	r1, [r7, #8]
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 fa52 	bl	8003f0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6c:	223f      	movs	r2, #63	; 0x3f
 8003a6e:	409a      	lsls	r2, r3
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0216 	orr.w	r2, r2, #22
 8003a82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695a      	ldr	r2, [r3, #20]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a92:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d007      	beq.n	8003aac <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0208 	orr.w	r2, r2, #8
 8003aaa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	e005      	b.n	8003aca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ae2:	f7ff fd75 	bl	80035d0 <HAL_GetTick>
 8003ae6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d008      	beq.n	8003b06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2280      	movs	r2, #128	; 0x80
 8003af8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e052      	b.n	8003bac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0216 	bic.w	r2, r2, #22
 8003b14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695a      	ldr	r2, [r3, #20]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d103      	bne.n	8003b36 <HAL_DMA_Abort+0x62>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d007      	beq.n	8003b46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0208 	bic.w	r2, r2, #8
 8003b44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0201 	bic.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b56:	e013      	b.n	8003b80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b58:	f7ff fd3a 	bl	80035d0 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b05      	cmp	r3, #5
 8003b64:	d90c      	bls.n	8003b80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2203      	movs	r2, #3
 8003b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e015      	b.n	8003bac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e4      	bne.n	8003b58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b92:	223f      	movs	r2, #63	; 0x3f
 8003b94:	409a      	lsls	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d004      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2280      	movs	r2, #128	; 0x80
 8003bcc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e00c      	b.n	8003bec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2205      	movs	r2, #5
 8003bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0201 	bic.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003c04:	4b92      	ldr	r3, [pc, #584]	; (8003e50 <HAL_DMA_IRQHandler+0x258>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a92      	ldr	r2, [pc, #584]	; (8003e54 <HAL_DMA_IRQHandler+0x25c>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	0a9b      	lsrs	r3, r3, #10
 8003c10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c22:	2208      	movs	r2, #8
 8003c24:	409a      	lsls	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d01a      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d013      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0204 	bic.w	r2, r2, #4
 8003c4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c50:	2208      	movs	r2, #8
 8003c52:	409a      	lsls	r2, r3
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5c:	f043 0201 	orr.w	r2, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c68:	2201      	movs	r2, #1
 8003c6a:	409a      	lsls	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d012      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00b      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c86:	2201      	movs	r2, #1
 8003c88:	409a      	lsls	r2, r3
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c92:	f043 0202 	orr.w	r2, r3, #2
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d012      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00b      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbc:	2204      	movs	r2, #4
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc8:	f043 0204 	orr.w	r2, r3, #4
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd4:	2210      	movs	r2, #16
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d043      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d03c      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf2:	2210      	movs	r2, #16
 8003cf4:	409a      	lsls	r2, r3
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d018      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d108      	bne.n	8003d28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d024      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	4798      	blx	r3
 8003d26:	e01f      	b.n	8003d68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d01b      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	4798      	blx	r3
 8003d38:	e016      	b.n	8003d68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d107      	bne.n	8003d58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0208 	bic.w	r2, r2, #8
 8003d56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 808e 	beq.w	8003e96 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 8086 	beq.w	8003e96 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8e:	2220      	movs	r2, #32
 8003d90:	409a      	lsls	r2, r3
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b05      	cmp	r3, #5
 8003da0:	d136      	bne.n	8003e10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0216 	bic.w	r2, r2, #22
 8003db0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695a      	ldr	r2, [r3, #20]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d103      	bne.n	8003dd2 <HAL_DMA_IRQHandler+0x1da>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0208 	bic.w	r2, r2, #8
 8003de0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de6:	223f      	movs	r2, #63	; 0x3f
 8003de8:	409a      	lsls	r2, r3
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d07d      	beq.n	8003f02 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	4798      	blx	r3
        }
        return;
 8003e0e:	e078      	b.n	8003f02 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d01c      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d108      	bne.n	8003e3e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d030      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	4798      	blx	r3
 8003e3c:	e02b      	b.n	8003e96 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d027      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4798      	blx	r3
 8003e4e:	e022      	b.n	8003e96 <HAL_DMA_IRQHandler+0x29e>
 8003e50:	2000004c 	.word	0x2000004c
 8003e54:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10f      	bne.n	8003e86 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0210 	bic.w	r2, r2, #16
 8003e74:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d032      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d022      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2205      	movs	r2, #5
 8003eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0201 	bic.w	r2, r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	60bb      	str	r3, [r7, #8]
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d307      	bcc.n	8003ede <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1f2      	bne.n	8003ec2 <HAL_DMA_IRQHandler+0x2ca>
 8003edc:	e000      	b.n	8003ee0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003ede:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	4798      	blx	r3
 8003f00:	e000      	b.n	8003f04 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003f02:	bf00      	nop
    }
  }
}
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop

08003f0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b40      	cmp	r3, #64	; 0x40
 8003f38:	d108      	bne.n	8003f4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f4a:	e007      	b.n	8003f5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	60da      	str	r2, [r3, #12]
}
 8003f5c:	bf00      	nop
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	3b10      	subs	r3, #16
 8003f78:	4a13      	ldr	r2, [pc, #76]	; (8003fc8 <DMA_CalcBaseAndBitshift+0x60>)
 8003f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7e:	091b      	lsrs	r3, r3, #4
 8003f80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f82:	4a12      	ldr	r2, [pc, #72]	; (8003fcc <DMA_CalcBaseAndBitshift+0x64>)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d908      	bls.n	8003fa8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <DMA_CalcBaseAndBitshift+0x68>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	1d1a      	adds	r2, r3, #4
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	659a      	str	r2, [r3, #88]	; 0x58
 8003fa6:	e006      	b.n	8003fb6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <DMA_CalcBaseAndBitshift+0x68>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	aaaaaaab 	.word	0xaaaaaaab
 8003fcc:	0800eee0 	.word	0x0800eee0
 8003fd0:	fffffc00 	.word	0xfffffc00

08003fd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d11f      	bne.n	800402e <DMA_CheckFifoParam+0x5a>
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d856      	bhi.n	80040a2 <DMA_CheckFifoParam+0xce>
 8003ff4:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <DMA_CheckFifoParam+0x28>)
 8003ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffa:	bf00      	nop
 8003ffc:	0800400d 	.word	0x0800400d
 8004000:	0800401f 	.word	0x0800401f
 8004004:	0800400d 	.word	0x0800400d
 8004008:	080040a3 	.word	0x080040a3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d046      	beq.n	80040a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800401c:	e043      	b.n	80040a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004026:	d140      	bne.n	80040aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800402c:	e03d      	b.n	80040aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004036:	d121      	bne.n	800407c <DMA_CheckFifoParam+0xa8>
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b03      	cmp	r3, #3
 800403c:	d837      	bhi.n	80040ae <DMA_CheckFifoParam+0xda>
 800403e:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <DMA_CheckFifoParam+0x70>)
 8004040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004044:	08004055 	.word	0x08004055
 8004048:	0800405b 	.word	0x0800405b
 800404c:	08004055 	.word	0x08004055
 8004050:	0800406d 	.word	0x0800406d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]
      break;
 8004058:	e030      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d025      	beq.n	80040b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800406a:	e022      	b.n	80040b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004074:	d11f      	bne.n	80040b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800407a:	e01c      	b.n	80040b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d903      	bls.n	800408a <DMA_CheckFifoParam+0xb6>
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b03      	cmp	r3, #3
 8004086:	d003      	beq.n	8004090 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004088:	e018      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	73fb      	strb	r3, [r7, #15]
      break;
 800408e:	e015      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00e      	beq.n	80040ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	73fb      	strb	r3, [r7, #15]
      break;
 80040a0:	e00b      	b.n	80040ba <DMA_CheckFifoParam+0xe6>
      break;
 80040a2:	bf00      	nop
 80040a4:	e00a      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      break;
 80040a6:	bf00      	nop
 80040a8:	e008      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      break;
 80040aa:	bf00      	nop
 80040ac:	e006      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      break;
 80040ae:	bf00      	nop
 80040b0:	e004      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      break;
 80040b2:	bf00      	nop
 80040b4:	e002      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      break;   
 80040b6:	bf00      	nop
 80040b8:	e000      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      break;
 80040ba:	bf00      	nop
    }
  } 
  
  return status; 
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop

080040cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b089      	sub	sp, #36	; 0x24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80040da:	2300      	movs	r3, #0
 80040dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80040de:	2300      	movs	r3, #0
 80040e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80040e2:	2300      	movs	r3, #0
 80040e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80040e6:	2300      	movs	r3, #0
 80040e8:	61fb      	str	r3, [r7, #28]
 80040ea:	e175      	b.n	80043d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80040ec:	2201      	movs	r2, #1
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4013      	ands	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	429a      	cmp	r2, r3
 8004106:	f040 8164 	bne.w	80043d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b01      	cmp	r3, #1
 8004114:	d005      	beq.n	8004122 <HAL_GPIO_Init+0x56>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d130      	bne.n	8004184 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	2203      	movs	r2, #3
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	43db      	mvns	r3, r3
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4013      	ands	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4313      	orrs	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004158:	2201      	movs	r2, #1
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	43db      	mvns	r3, r3
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	4013      	ands	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	091b      	lsrs	r3, r3, #4
 800416e:	f003 0201 	and.w	r2, r3, #1
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	4313      	orrs	r3, r2
 800417c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 0303 	and.w	r3, r3, #3
 800418c:	2b03      	cmp	r3, #3
 800418e:	d017      	beq.n	80041c0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	2203      	movs	r2, #3
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	43db      	mvns	r3, r3
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	4013      	ands	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d123      	bne.n	8004214 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	08da      	lsrs	r2, r3, #3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3208      	adds	r2, #8
 80041d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	220f      	movs	r2, #15
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	4013      	ands	r3, r2
 80041ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4313      	orrs	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	08da      	lsrs	r2, r3, #3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3208      	adds	r2, #8
 800420e:	69b9      	ldr	r1, [r7, #24]
 8004210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	2203      	movs	r2, #3
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	43db      	mvns	r3, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4013      	ands	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f003 0203 	and.w	r2, r3, #3
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4313      	orrs	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 80be 	beq.w	80043d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004256:	4b66      	ldr	r3, [pc, #408]	; (80043f0 <HAL_GPIO_Init+0x324>)
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	4a65      	ldr	r2, [pc, #404]	; (80043f0 <HAL_GPIO_Init+0x324>)
 800425c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004260:	6453      	str	r3, [r2, #68]	; 0x44
 8004262:	4b63      	ldr	r3, [pc, #396]	; (80043f0 <HAL_GPIO_Init+0x324>)
 8004264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800426e:	4a61      	ldr	r2, [pc, #388]	; (80043f4 <HAL_GPIO_Init+0x328>)
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	089b      	lsrs	r3, r3, #2
 8004274:	3302      	adds	r3, #2
 8004276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800427a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	220f      	movs	r2, #15
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4013      	ands	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a58      	ldr	r2, [pc, #352]	; (80043f8 <HAL_GPIO_Init+0x32c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d037      	beq.n	800430a <HAL_GPIO_Init+0x23e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a57      	ldr	r2, [pc, #348]	; (80043fc <HAL_GPIO_Init+0x330>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d031      	beq.n	8004306 <HAL_GPIO_Init+0x23a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a56      	ldr	r2, [pc, #344]	; (8004400 <HAL_GPIO_Init+0x334>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d02b      	beq.n	8004302 <HAL_GPIO_Init+0x236>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a55      	ldr	r2, [pc, #340]	; (8004404 <HAL_GPIO_Init+0x338>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d025      	beq.n	80042fe <HAL_GPIO_Init+0x232>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a54      	ldr	r2, [pc, #336]	; (8004408 <HAL_GPIO_Init+0x33c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d01f      	beq.n	80042fa <HAL_GPIO_Init+0x22e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a53      	ldr	r2, [pc, #332]	; (800440c <HAL_GPIO_Init+0x340>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d019      	beq.n	80042f6 <HAL_GPIO_Init+0x22a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a52      	ldr	r2, [pc, #328]	; (8004410 <HAL_GPIO_Init+0x344>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d013      	beq.n	80042f2 <HAL_GPIO_Init+0x226>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a51      	ldr	r2, [pc, #324]	; (8004414 <HAL_GPIO_Init+0x348>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00d      	beq.n	80042ee <HAL_GPIO_Init+0x222>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a50      	ldr	r2, [pc, #320]	; (8004418 <HAL_GPIO_Init+0x34c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d007      	beq.n	80042ea <HAL_GPIO_Init+0x21e>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a4f      	ldr	r2, [pc, #316]	; (800441c <HAL_GPIO_Init+0x350>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d101      	bne.n	80042e6 <HAL_GPIO_Init+0x21a>
 80042e2:	2309      	movs	r3, #9
 80042e4:	e012      	b.n	800430c <HAL_GPIO_Init+0x240>
 80042e6:	230a      	movs	r3, #10
 80042e8:	e010      	b.n	800430c <HAL_GPIO_Init+0x240>
 80042ea:	2308      	movs	r3, #8
 80042ec:	e00e      	b.n	800430c <HAL_GPIO_Init+0x240>
 80042ee:	2307      	movs	r3, #7
 80042f0:	e00c      	b.n	800430c <HAL_GPIO_Init+0x240>
 80042f2:	2306      	movs	r3, #6
 80042f4:	e00a      	b.n	800430c <HAL_GPIO_Init+0x240>
 80042f6:	2305      	movs	r3, #5
 80042f8:	e008      	b.n	800430c <HAL_GPIO_Init+0x240>
 80042fa:	2304      	movs	r3, #4
 80042fc:	e006      	b.n	800430c <HAL_GPIO_Init+0x240>
 80042fe:	2303      	movs	r3, #3
 8004300:	e004      	b.n	800430c <HAL_GPIO_Init+0x240>
 8004302:	2302      	movs	r3, #2
 8004304:	e002      	b.n	800430c <HAL_GPIO_Init+0x240>
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <HAL_GPIO_Init+0x240>
 800430a:	2300      	movs	r3, #0
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	f002 0203 	and.w	r2, r2, #3
 8004312:	0092      	lsls	r2, r2, #2
 8004314:	4093      	lsls	r3, r2
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	4313      	orrs	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800431c:	4935      	ldr	r1, [pc, #212]	; (80043f4 <HAL_GPIO_Init+0x328>)
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	089b      	lsrs	r3, r3, #2
 8004322:	3302      	adds	r3, #2
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800432a:	4b3d      	ldr	r3, [pc, #244]	; (8004420 <HAL_GPIO_Init+0x354>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	43db      	mvns	r3, r3
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	4013      	ands	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800434e:	4a34      	ldr	r2, [pc, #208]	; (8004420 <HAL_GPIO_Init+0x354>)
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004354:	4b32      	ldr	r3, [pc, #200]	; (8004420 <HAL_GPIO_Init+0x354>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	43db      	mvns	r3, r3
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4013      	ands	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004378:	4a29      	ldr	r2, [pc, #164]	; (8004420 <HAL_GPIO_Init+0x354>)
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800437e:	4b28      	ldr	r3, [pc, #160]	; (8004420 <HAL_GPIO_Init+0x354>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	43db      	mvns	r3, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4013      	ands	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043a2:	4a1f      	ldr	r2, [pc, #124]	; (8004420 <HAL_GPIO_Init+0x354>)
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043a8:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <HAL_GPIO_Init+0x354>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	43db      	mvns	r3, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4013      	ands	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043cc:	4a14      	ldr	r2, [pc, #80]	; (8004420 <HAL_GPIO_Init+0x354>)
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	3301      	adds	r3, #1
 80043d6:	61fb      	str	r3, [r7, #28]
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	2b0f      	cmp	r3, #15
 80043dc:	f67f ae86 	bls.w	80040ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80043e0:	bf00      	nop
 80043e2:	bf00      	nop
 80043e4:	3724      	adds	r7, #36	; 0x24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40023800 	.word	0x40023800
 80043f4:	40013800 	.word	0x40013800
 80043f8:	40020000 	.word	0x40020000
 80043fc:	40020400 	.word	0x40020400
 8004400:	40020800 	.word	0x40020800
 8004404:	40020c00 	.word	0x40020c00
 8004408:	40021000 	.word	0x40021000
 800440c:	40021400 	.word	0x40021400
 8004410:	40021800 	.word	0x40021800
 8004414:	40021c00 	.word	0x40021c00
 8004418:	40022000 	.word	0x40022000
 800441c:	40022400 	.word	0x40022400
 8004420:	40013c00 	.word	0x40013c00

08004424 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	887b      	ldrh	r3, [r7, #2]
 8004436:	4013      	ands	r3, r2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
 8004440:	e001      	b.n	8004446 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004442:	2300      	movs	r3, #0
 8004444:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004446:	7bfb      	ldrb	r3, [r7, #15]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	807b      	strh	r3, [r7, #2]
 8004460:	4613      	mov	r3, r2
 8004462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004464:	787b      	ldrb	r3, [r7, #1]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800446a:	887a      	ldrh	r2, [r7, #2]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004470:	e003      	b.n	800447a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004472:	887b      	ldrh	r3, [r7, #2]
 8004474:	041a      	lsls	r2, r3, #16
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	619a      	str	r2, [r3, #24]
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004486:	b480      	push	{r7}
 8004488:	b085      	sub	sp, #20
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	460b      	mov	r3, r1
 8004490:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004498:	887a      	ldrh	r2, [r7, #2]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4013      	ands	r3, r2
 800449e:	041a      	lsls	r2, r3, #16
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	43d9      	mvns	r1, r3
 80044a4:	887b      	ldrh	r3, [r7, #2]
 80044a6:	400b      	ands	r3, r1
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	619a      	str	r2, [r3, #24]
}
 80044ae:	bf00      	nop
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
	...

080044bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	4603      	mov	r3, r0
 80044c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80044c6:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044c8:	695a      	ldr	r2, [r3, #20]
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	4013      	ands	r3, r2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d006      	beq.n	80044e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044d2:	4a05      	ldr	r2, [pc, #20]	; (80044e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044d4:	88fb      	ldrh	r3, [r7, #6]
 80044d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044d8:	88fb      	ldrh	r3, [r7, #6]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fd f8a4 	bl	8001628 <HAL_GPIO_EXTI_Callback>
  }
}
 80044e0:	bf00      	nop
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40013c00 	.word	0x40013c00

080044ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e07f      	b.n	80045fe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fd fbbc 	bl	8001c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2224      	movs	r2, #36	; 0x24
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0201 	bic.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800453c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800454c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d107      	bne.n	8004566 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689a      	ldr	r2, [r3, #8]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004562:	609a      	str	r2, [r3, #8]
 8004564:	e006      	b.n	8004574 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004572:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b02      	cmp	r3, #2
 800457a:	d104      	bne.n	8004586 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004584:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6859      	ldr	r1, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4b1d      	ldr	r3, [pc, #116]	; (8004608 <HAL_I2C_Init+0x11c>)
 8004592:	430b      	orrs	r3, r1
 8004594:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	69d9      	ldr	r1, [r3, #28]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1a      	ldr	r2, [r3, #32]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0201 	orr.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	02008000 	.word	0x02008000

0800460c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	68f9      	ldr	r1, [r7, #12]
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	4798      	blx	r3
  }
}
 8004638:	bf00      	nop
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b20      	cmp	r3, #32
 8004654:	d138      	bne.n	80046c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004660:	2302      	movs	r3, #2
 8004662:	e032      	b.n	80046ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2224      	movs	r2, #36	; 0x24
 8004670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0201 	bic.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004692:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6819      	ldr	r1, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	e000      	b.n	80046ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046c8:	2302      	movs	r3, #2
  }
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b085      	sub	sp, #20
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
 80046de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	d139      	bne.n	8004760 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d101      	bne.n	80046fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046f6:	2302      	movs	r3, #2
 80046f8:	e033      	b.n	8004762 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2224      	movs	r2, #36	; 0x24
 8004706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0201 	bic.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004728:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	021b      	lsls	r3, r3, #8
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800475c:	2300      	movs	r3, #0
 800475e:	e000      	b.n	8004762 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004760:	2302      	movs	r3, #2
  }
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
	...

08004770 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004776:	2300      	movs	r3, #0
 8004778:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800477a:	4b23      	ldr	r3, [pc, #140]	; (8004808 <HAL_PWREx_EnableOverDrive+0x98>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	4a22      	ldr	r2, [pc, #136]	; (8004808 <HAL_PWREx_EnableOverDrive+0x98>)
 8004780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004784:	6413      	str	r3, [r2, #64]	; 0x40
 8004786:	4b20      	ldr	r3, [pc, #128]	; (8004808 <HAL_PWREx_EnableOverDrive+0x98>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004792:	4b1e      	ldr	r3, [pc, #120]	; (800480c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a1d      	ldr	r2, [pc, #116]	; (800480c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800479e:	f7fe ff17 	bl	80035d0 <HAL_GetTick>
 80047a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80047a4:	e009      	b.n	80047ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80047a6:	f7fe ff13 	bl	80035d0 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047b4:	d901      	bls.n	80047ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e022      	b.n	8004800 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80047ba:	4b14      	ldr	r3, [pc, #80]	; (800480c <HAL_PWREx_EnableOverDrive+0x9c>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c6:	d1ee      	bne.n	80047a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80047c8:	4b10      	ldr	r3, [pc, #64]	; (800480c <HAL_PWREx_EnableOverDrive+0x9c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a0f      	ldr	r2, [pc, #60]	; (800480c <HAL_PWREx_EnableOverDrive+0x9c>)
 80047ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047d4:	f7fe fefc 	bl	80035d0 <HAL_GetTick>
 80047d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80047da:	e009      	b.n	80047f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80047dc:	f7fe fef8 	bl	80035d0 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047ea:	d901      	bls.n	80047f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e007      	b.n	8004800 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80047f0:	4b06      	ldr	r3, [pc, #24]	; (800480c <HAL_PWREx_EnableOverDrive+0x9c>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047fc:	d1ee      	bne.n	80047dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40023800 	.word	0x40023800
 800480c:	40007000 	.word	0x40007000

08004810 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004818:	2300      	movs	r3, #0
 800481a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e29b      	b.n	8004d5e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8087 	beq.w	8004942 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004834:	4b96      	ldr	r3, [pc, #600]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 030c 	and.w	r3, r3, #12
 800483c:	2b04      	cmp	r3, #4
 800483e:	d00c      	beq.n	800485a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004840:	4b93      	ldr	r3, [pc, #588]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 030c 	and.w	r3, r3, #12
 8004848:	2b08      	cmp	r3, #8
 800484a:	d112      	bne.n	8004872 <HAL_RCC_OscConfig+0x62>
 800484c:	4b90      	ldr	r3, [pc, #576]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004854:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004858:	d10b      	bne.n	8004872 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800485a:	4b8d      	ldr	r3, [pc, #564]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d06c      	beq.n	8004940 <HAL_RCC_OscConfig+0x130>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d168      	bne.n	8004940 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e275      	b.n	8004d5e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800487a:	d106      	bne.n	800488a <HAL_RCC_OscConfig+0x7a>
 800487c:	4b84      	ldr	r3, [pc, #528]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a83      	ldr	r2, [pc, #524]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 8004882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	e02e      	b.n	80048e8 <HAL_RCC_OscConfig+0xd8>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10c      	bne.n	80048ac <HAL_RCC_OscConfig+0x9c>
 8004892:	4b7f      	ldr	r3, [pc, #508]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a7e      	ldr	r2, [pc, #504]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 8004898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	4b7c      	ldr	r3, [pc, #496]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a7b      	ldr	r2, [pc, #492]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 80048a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	e01d      	b.n	80048e8 <HAL_RCC_OscConfig+0xd8>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048b4:	d10c      	bne.n	80048d0 <HAL_RCC_OscConfig+0xc0>
 80048b6:	4b76      	ldr	r3, [pc, #472]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a75      	ldr	r2, [pc, #468]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 80048bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	4b73      	ldr	r3, [pc, #460]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a72      	ldr	r2, [pc, #456]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 80048c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e00b      	b.n	80048e8 <HAL_RCC_OscConfig+0xd8>
 80048d0:	4b6f      	ldr	r3, [pc, #444]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a6e      	ldr	r2, [pc, #440]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 80048d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	4b6c      	ldr	r3, [pc, #432]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a6b      	ldr	r2, [pc, #428]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 80048e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d013      	beq.n	8004918 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f0:	f7fe fe6e 	bl	80035d0 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048f8:	f7fe fe6a 	bl	80035d0 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b64      	cmp	r3, #100	; 0x64
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e229      	b.n	8004d5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490a:	4b61      	ldr	r3, [pc, #388]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0f0      	beq.n	80048f8 <HAL_RCC_OscConfig+0xe8>
 8004916:	e014      	b.n	8004942 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004918:	f7fe fe5a 	bl	80035d0 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004920:	f7fe fe56 	bl	80035d0 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b64      	cmp	r3, #100	; 0x64
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e215      	b.n	8004d5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004932:	4b57      	ldr	r3, [pc, #348]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x110>
 800493e:	e000      	b.n	8004942 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d069      	beq.n	8004a22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800494e:	4b50      	ldr	r3, [pc, #320]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 030c 	and.w	r3, r3, #12
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00b      	beq.n	8004972 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800495a:	4b4d      	ldr	r3, [pc, #308]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 030c 	and.w	r3, r3, #12
 8004962:	2b08      	cmp	r3, #8
 8004964:	d11c      	bne.n	80049a0 <HAL_RCC_OscConfig+0x190>
 8004966:	4b4a      	ldr	r3, [pc, #296]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d116      	bne.n	80049a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004972:	4b47      	ldr	r3, [pc, #284]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d005      	beq.n	800498a <HAL_RCC_OscConfig+0x17a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d001      	beq.n	800498a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e1e9      	b.n	8004d5e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498a:	4b41      	ldr	r3, [pc, #260]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	493d      	ldr	r1, [pc, #244]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 800499a:	4313      	orrs	r3, r2
 800499c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800499e:	e040      	b.n	8004a22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d023      	beq.n	80049f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049a8:	4b39      	ldr	r3, [pc, #228]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a38      	ldr	r2, [pc, #224]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b4:	f7fe fe0c 	bl	80035d0 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049bc:	f7fe fe08 	bl	80035d0 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e1c7      	b.n	8004d5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ce:	4b30      	ldr	r3, [pc, #192]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049da:	4b2d      	ldr	r3, [pc, #180]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	4929      	ldr	r1, [pc, #164]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	600b      	str	r3, [r1, #0]
 80049ee:	e018      	b.n	8004a22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049f0:	4b27      	ldr	r3, [pc, #156]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a26      	ldr	r2, [pc, #152]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 80049f6:	f023 0301 	bic.w	r3, r3, #1
 80049fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fc:	f7fe fde8 	bl	80035d0 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a04:	f7fe fde4 	bl	80035d0 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e1a3      	b.n	8004d5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a16:	4b1e      	ldr	r3, [pc, #120]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1f0      	bne.n	8004a04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d038      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d019      	beq.n	8004a6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a36:	4b16      	ldr	r3, [pc, #88]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 8004a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a3a:	4a15      	ldr	r2, [pc, #84]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a42:	f7fe fdc5 	bl	80035d0 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a4a:	f7fe fdc1 	bl	80035d0 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e180      	b.n	8004d5e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a5c:	4b0c      	ldr	r3, [pc, #48]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 8004a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f0      	beq.n	8004a4a <HAL_RCC_OscConfig+0x23a>
 8004a68:	e01a      	b.n	8004aa0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a6a:	4b09      	ldr	r3, [pc, #36]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 8004a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a6e:	4a08      	ldr	r2, [pc, #32]	; (8004a90 <HAL_RCC_OscConfig+0x280>)
 8004a70:	f023 0301 	bic.w	r3, r3, #1
 8004a74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a76:	f7fe fdab 	bl	80035d0 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a7c:	e00a      	b.n	8004a94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a7e:	f7fe fda7 	bl	80035d0 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d903      	bls.n	8004a94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e166      	b.n	8004d5e <HAL_RCC_OscConfig+0x54e>
 8004a90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a94:	4b92      	ldr	r3, [pc, #584]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1ee      	bne.n	8004a7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 80a4 	beq.w	8004bf6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aae:	4b8c      	ldr	r3, [pc, #560]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10d      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aba:	4b89      	ldr	r3, [pc, #548]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	4a88      	ldr	r2, [pc, #544]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ac6:	4b86      	ldr	r3, [pc, #536]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ace:	60bb      	str	r3, [r7, #8]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ad6:	4b83      	ldr	r3, [pc, #524]	; (8004ce4 <HAL_RCC_OscConfig+0x4d4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d118      	bne.n	8004b14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004ae2:	4b80      	ldr	r3, [pc, #512]	; (8004ce4 <HAL_RCC_OscConfig+0x4d4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a7f      	ldr	r2, [pc, #508]	; (8004ce4 <HAL_RCC_OscConfig+0x4d4>)
 8004ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aee:	f7fe fd6f 	bl	80035d0 <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004af4:	e008      	b.n	8004b08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af6:	f7fe fd6b 	bl	80035d0 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b64      	cmp	r3, #100	; 0x64
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e12a      	b.n	8004d5e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b08:	4b76      	ldr	r3, [pc, #472]	; (8004ce4 <HAL_RCC_OscConfig+0x4d4>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0f0      	beq.n	8004af6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d106      	bne.n	8004b2a <HAL_RCC_OscConfig+0x31a>
 8004b1c:	4b70      	ldr	r3, [pc, #448]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b20:	4a6f      	ldr	r2, [pc, #444]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	6713      	str	r3, [r2, #112]	; 0x70
 8004b28:	e02d      	b.n	8004b86 <HAL_RCC_OscConfig+0x376>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10c      	bne.n	8004b4c <HAL_RCC_OscConfig+0x33c>
 8004b32:	4b6b      	ldr	r3, [pc, #428]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b36:	4a6a      	ldr	r2, [pc, #424]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004b38:	f023 0301 	bic.w	r3, r3, #1
 8004b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b3e:	4b68      	ldr	r3, [pc, #416]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b42:	4a67      	ldr	r2, [pc, #412]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004b44:	f023 0304 	bic.w	r3, r3, #4
 8004b48:	6713      	str	r3, [r2, #112]	; 0x70
 8004b4a:	e01c      	b.n	8004b86 <HAL_RCC_OscConfig+0x376>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	2b05      	cmp	r3, #5
 8004b52:	d10c      	bne.n	8004b6e <HAL_RCC_OscConfig+0x35e>
 8004b54:	4b62      	ldr	r3, [pc, #392]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b58:	4a61      	ldr	r2, [pc, #388]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004b5a:	f043 0304 	orr.w	r3, r3, #4
 8004b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b60:	4b5f      	ldr	r3, [pc, #380]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b64:	4a5e      	ldr	r2, [pc, #376]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b6c:	e00b      	b.n	8004b86 <HAL_RCC_OscConfig+0x376>
 8004b6e:	4b5c      	ldr	r3, [pc, #368]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b72:	4a5b      	ldr	r2, [pc, #364]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004b74:	f023 0301 	bic.w	r3, r3, #1
 8004b78:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7a:	4b59      	ldr	r3, [pc, #356]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7e:	4a58      	ldr	r2, [pc, #352]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004b80:	f023 0304 	bic.w	r3, r3, #4
 8004b84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d015      	beq.n	8004bba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8e:	f7fe fd1f 	bl	80035d0 <HAL_GetTick>
 8004b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b94:	e00a      	b.n	8004bac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b96:	f7fe fd1b 	bl	80035d0 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e0d8      	b.n	8004d5e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bac:	4b4c      	ldr	r3, [pc, #304]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0ee      	beq.n	8004b96 <HAL_RCC_OscConfig+0x386>
 8004bb8:	e014      	b.n	8004be4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bba:	f7fe fd09 	bl	80035d0 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bc0:	e00a      	b.n	8004bd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc2:	f7fe fd05 	bl	80035d0 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e0c2      	b.n	8004d5e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bd8:	4b41      	ldr	r3, [pc, #260]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1ee      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004be4:	7dfb      	ldrb	r3, [r7, #23]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d105      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bea:	4b3d      	ldr	r3, [pc, #244]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	4a3c      	ldr	r2, [pc, #240]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bf4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 80ae 	beq.w	8004d5c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c00:	4b37      	ldr	r3, [pc, #220]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 030c 	and.w	r3, r3, #12
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d06d      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d14b      	bne.n	8004cac <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c14:	4b32      	ldr	r3, [pc, #200]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a31      	ldr	r2, [pc, #196]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004c1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c20:	f7fe fcd6 	bl	80035d0 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c28:	f7fe fcd2 	bl	80035d0 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e091      	b.n	8004d5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3a:	4b29      	ldr	r3, [pc, #164]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f0      	bne.n	8004c28 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69da      	ldr	r2, [r3, #28]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	019b      	lsls	r3, r3, #6
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	085b      	lsrs	r3, r3, #1
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	041b      	lsls	r3, r3, #16
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	061b      	lsls	r3, r3, #24
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c70:	071b      	lsls	r3, r3, #28
 8004c72:	491b      	ldr	r1, [pc, #108]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c78:	4b19      	ldr	r3, [pc, #100]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a18      	ldr	r2, [pc, #96]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7fe fca4 	bl	80035d0 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c8c:	f7fe fca0 	bl	80035d0 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e05f      	b.n	8004d5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c9e:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f0      	beq.n	8004c8c <HAL_RCC_OscConfig+0x47c>
 8004caa:	e057      	b.n	8004d5c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cac:	4b0c      	ldr	r3, [pc, #48]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a0b      	ldr	r2, [pc, #44]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7fe fc8a 	bl	80035d0 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc0:	f7fe fc86 	bl	80035d0 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e045      	b.n	8004d5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd2:	4b03      	ldr	r3, [pc, #12]	; (8004ce0 <HAL_RCC_OscConfig+0x4d0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x4b0>
 8004cde:	e03d      	b.n	8004d5c <HAL_RCC_OscConfig+0x54c>
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004ce8:	4b1f      	ldr	r3, [pc, #124]	; (8004d68 <HAL_RCC_OscConfig+0x558>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d030      	beq.n	8004d58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d129      	bne.n	8004d58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d122      	bne.n	8004d58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d18:	4013      	ands	r3, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d1e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d119      	bne.n	8004d58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	085b      	lsrs	r3, r3, #1
 8004d30:	3b01      	subs	r3, #1
 8004d32:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d10f      	bne.n	8004d58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d42:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d107      	bne.n	8004d58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d52:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d001      	beq.n	8004d5c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40023800 	.word	0x40023800

08004d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0d0      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d84:	4b6a      	ldr	r3, [pc, #424]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d910      	bls.n	8004db4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d92:	4b67      	ldr	r3, [pc, #412]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f023 020f 	bic.w	r2, r3, #15
 8004d9a:	4965      	ldr	r1, [pc, #404]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da2:	4b63      	ldr	r3, [pc, #396]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d001      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0b8      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d020      	beq.n	8004e02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dcc:	4b59      	ldr	r3, [pc, #356]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	4a58      	ldr	r2, [pc, #352]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d005      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004de4:	4b53      	ldr	r3, [pc, #332]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	4a52      	ldr	r2, [pc, #328]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df0:	4b50      	ldr	r3, [pc, #320]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	494d      	ldr	r1, [pc, #308]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d040      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d107      	bne.n	8004e26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e16:	4b47      	ldr	r3, [pc, #284]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d115      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e07f      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d107      	bne.n	8004e3e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2e:	4b41      	ldr	r3, [pc, #260]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d109      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e073      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3e:	4b3d      	ldr	r3, [pc, #244]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e06b      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e4e:	4b39      	ldr	r3, [pc, #228]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f023 0203 	bic.w	r2, r3, #3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	4936      	ldr	r1, [pc, #216]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e60:	f7fe fbb6 	bl	80035d0 <HAL_GetTick>
 8004e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e66:	e00a      	b.n	8004e7e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e68:	f7fe fbb2 	bl	80035d0 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e053      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7e:	4b2d      	ldr	r3, [pc, #180]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 020c 	and.w	r2, r3, #12
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d1eb      	bne.n	8004e68 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e90:	4b27      	ldr	r3, [pc, #156]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d210      	bcs.n	8004ec0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9e:	4b24      	ldr	r3, [pc, #144]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f023 020f 	bic.w	r2, r3, #15
 8004ea6:	4922      	ldr	r1, [pc, #136]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eae:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e032      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d008      	beq.n	8004ede <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ecc:	4b19      	ldr	r3, [pc, #100]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4916      	ldr	r1, [pc, #88]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d009      	beq.n	8004efe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004eea:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	490e      	ldr	r1, [pc, #56]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004efe:	f000 f821 	bl	8004f44 <HAL_RCC_GetSysClockFreq>
 8004f02:	4602      	mov	r2, r0
 8004f04:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	091b      	lsrs	r3, r3, #4
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	490a      	ldr	r1, [pc, #40]	; (8004f38 <HAL_RCC_ClockConfig+0x1cc>)
 8004f10:	5ccb      	ldrb	r3, [r1, r3]
 8004f12:	fa22 f303 	lsr.w	r3, r2, r3
 8004f16:	4a09      	ldr	r2, [pc, #36]	; (8004f3c <HAL_RCC_ClockConfig+0x1d0>)
 8004f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f1a:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <HAL_RCC_ClockConfig+0x1d4>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fe fb12 	bl	8003548 <HAL_InitTick>

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40023c00 	.word	0x40023c00
 8004f34:	40023800 	.word	0x40023800
 8004f38:	0800eec8 	.word	0x0800eec8
 8004f3c:	2000004c 	.word	0x2000004c
 8004f40:	20000050 	.word	0x20000050

08004f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f44:	b5b0      	push	{r4, r5, r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	6079      	str	r1, [r7, #4]
 8004f4e:	2100      	movs	r1, #0
 8004f50:	60f9      	str	r1, [r7, #12]
 8004f52:	2100      	movs	r1, #0
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004f56:	2100      	movs	r1, #0
 8004f58:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f5a:	4952      	ldr	r1, [pc, #328]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f5c:	6889      	ldr	r1, [r1, #8]
 8004f5e:	f001 010c 	and.w	r1, r1, #12
 8004f62:	2908      	cmp	r1, #8
 8004f64:	d00d      	beq.n	8004f82 <HAL_RCC_GetSysClockFreq+0x3e>
 8004f66:	2908      	cmp	r1, #8
 8004f68:	f200 8094 	bhi.w	8005094 <HAL_RCC_GetSysClockFreq+0x150>
 8004f6c:	2900      	cmp	r1, #0
 8004f6e:	d002      	beq.n	8004f76 <HAL_RCC_GetSysClockFreq+0x32>
 8004f70:	2904      	cmp	r1, #4
 8004f72:	d003      	beq.n	8004f7c <HAL_RCC_GetSysClockFreq+0x38>
 8004f74:	e08e      	b.n	8005094 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f76:	4b4c      	ldr	r3, [pc, #304]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x164>)
 8004f78:	60bb      	str	r3, [r7, #8]
      break;
 8004f7a:	e08e      	b.n	800509a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f7c:	4b4b      	ldr	r3, [pc, #300]	; (80050ac <HAL_RCC_GetSysClockFreq+0x168>)
 8004f7e:	60bb      	str	r3, [r7, #8]
      break;
 8004f80:	e08b      	b.n	800509a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f82:	4948      	ldr	r1, [pc, #288]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f84:	6849      	ldr	r1, [r1, #4]
 8004f86:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004f8a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004f8c:	4945      	ldr	r1, [pc, #276]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f8e:	6849      	ldr	r1, [r1, #4]
 8004f90:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004f94:	2900      	cmp	r1, #0
 8004f96:	d024      	beq.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f98:	4942      	ldr	r1, [pc, #264]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f9a:	6849      	ldr	r1, [r1, #4]
 8004f9c:	0989      	lsrs	r1, r1, #6
 8004f9e:	4608      	mov	r0, r1
 8004fa0:	f04f 0100 	mov.w	r1, #0
 8004fa4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004fa8:	f04f 0500 	mov.w	r5, #0
 8004fac:	ea00 0204 	and.w	r2, r0, r4
 8004fb0:	ea01 0305 	and.w	r3, r1, r5
 8004fb4:	493d      	ldr	r1, [pc, #244]	; (80050ac <HAL_RCC_GetSysClockFreq+0x168>)
 8004fb6:	fb01 f003 	mul.w	r0, r1, r3
 8004fba:	2100      	movs	r1, #0
 8004fbc:	fb01 f102 	mul.w	r1, r1, r2
 8004fc0:	1844      	adds	r4, r0, r1
 8004fc2:	493a      	ldr	r1, [pc, #232]	; (80050ac <HAL_RCC_GetSysClockFreq+0x168>)
 8004fc4:	fba2 0101 	umull	r0, r1, r2, r1
 8004fc8:	1863      	adds	r3, r4, r1
 8004fca:	4619      	mov	r1, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	f7fb fb58 	bl	8000688 <__aeabi_uldivmod>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4613      	mov	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	e04a      	b.n	8005078 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fe2:	4b30      	ldr	r3, [pc, #192]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	099b      	lsrs	r3, r3, #6
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ff2:	f04f 0100 	mov.w	r1, #0
 8004ff6:	ea02 0400 	and.w	r4, r2, r0
 8004ffa:	ea03 0501 	and.w	r5, r3, r1
 8004ffe:	4620      	mov	r0, r4
 8005000:	4629      	mov	r1, r5
 8005002:	f04f 0200 	mov.w	r2, #0
 8005006:	f04f 0300 	mov.w	r3, #0
 800500a:	014b      	lsls	r3, r1, #5
 800500c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005010:	0142      	lsls	r2, r0, #5
 8005012:	4610      	mov	r0, r2
 8005014:	4619      	mov	r1, r3
 8005016:	1b00      	subs	r0, r0, r4
 8005018:	eb61 0105 	sbc.w	r1, r1, r5
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	018b      	lsls	r3, r1, #6
 8005026:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800502a:	0182      	lsls	r2, r0, #6
 800502c:	1a12      	subs	r2, r2, r0
 800502e:	eb63 0301 	sbc.w	r3, r3, r1
 8005032:	f04f 0000 	mov.w	r0, #0
 8005036:	f04f 0100 	mov.w	r1, #0
 800503a:	00d9      	lsls	r1, r3, #3
 800503c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005040:	00d0      	lsls	r0, r2, #3
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	1912      	adds	r2, r2, r4
 8005048:	eb45 0303 	adc.w	r3, r5, r3
 800504c:	f04f 0000 	mov.w	r0, #0
 8005050:	f04f 0100 	mov.w	r1, #0
 8005054:	0299      	lsls	r1, r3, #10
 8005056:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800505a:	0290      	lsls	r0, r2, #10
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	4610      	mov	r0, r2
 8005062:	4619      	mov	r1, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	461a      	mov	r2, r3
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	f7fb fb0c 	bl	8000688 <__aeabi_uldivmod>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4613      	mov	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005078:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	0c1b      	lsrs	r3, r3, #16
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	3301      	adds	r3, #1
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005090:	60bb      	str	r3, [r7, #8]
      break;
 8005092:	e002      	b.n	800509a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005094:	4b04      	ldr	r3, [pc, #16]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x164>)
 8005096:	60bb      	str	r3, [r7, #8]
      break;
 8005098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800509a:	68bb      	ldr	r3, [r7, #8]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bdb0      	pop	{r4, r5, r7, pc}
 80050a4:	40023800 	.word	0x40023800
 80050a8:	00f42400 	.word	0x00f42400
 80050ac:	017d7840 	.word	0x017d7840

080050b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050b4:	4b03      	ldr	r3, [pc, #12]	; (80050c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050b6:	681b      	ldr	r3, [r3, #0]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	2000004c 	.word	0x2000004c

080050c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050cc:	f7ff fff0 	bl	80050b0 <HAL_RCC_GetHCLKFreq>
 80050d0:	4602      	mov	r2, r0
 80050d2:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	0a9b      	lsrs	r3, r3, #10
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	4903      	ldr	r1, [pc, #12]	; (80050ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80050de:	5ccb      	ldrb	r3, [r1, r3]
 80050e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40023800 	.word	0x40023800
 80050ec:	0800eed8 	.word	0x0800eed8

080050f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050f4:	f7ff ffdc 	bl	80050b0 <HAL_RCC_GetHCLKFreq>
 80050f8:	4602      	mov	r2, r0
 80050fa:	4b05      	ldr	r3, [pc, #20]	; (8005110 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	0b5b      	lsrs	r3, r3, #13
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	4903      	ldr	r1, [pc, #12]	; (8005114 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005106:	5ccb      	ldrb	r3, [r1, r3]
 8005108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800510c:	4618      	mov	r0, r3
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40023800 	.word	0x40023800
 8005114:	0800eed8 	.word	0x0800eed8

08005118 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b088      	sub	sp, #32
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005124:	2300      	movs	r3, #0
 8005126:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005128:	2300      	movs	r3, #0
 800512a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800512c:	2300      	movs	r3, #0
 800512e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005130:	2300      	movs	r3, #0
 8005132:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b00      	cmp	r3, #0
 800513e:	d012      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005140:	4b69      	ldr	r3, [pc, #420]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	4a68      	ldr	r2, [pc, #416]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005146:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800514a:	6093      	str	r3, [r2, #8]
 800514c:	4b66      	ldr	r3, [pc, #408]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005154:	4964      	ldr	r1, [pc, #400]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005162:	2301      	movs	r3, #1
 8005164:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d017      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005172:	4b5d      	ldr	r3, [pc, #372]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005178:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005180:	4959      	ldr	r1, [pc, #356]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005182:	4313      	orrs	r3, r2
 8005184:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005190:	d101      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005192:	2301      	movs	r3, #1
 8005194:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800519e:	2301      	movs	r3, #1
 80051a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d017      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051ae:	4b4e      	ldr	r3, [pc, #312]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	494a      	ldr	r1, [pc, #296]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051cc:	d101      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80051ce:	2301      	movs	r3, #1
 80051d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80051da:	2301      	movs	r3, #1
 80051dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80051ea:	2301      	movs	r3, #1
 80051ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 808b 	beq.w	8005312 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051fc:	4b3a      	ldr	r3, [pc, #232]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	4a39      	ldr	r2, [pc, #228]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005206:	6413      	str	r3, [r2, #64]	; 0x40
 8005208:	4b37      	ldr	r3, [pc, #220]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800520a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005214:	4b35      	ldr	r3, [pc, #212]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a34      	ldr	r2, [pc, #208]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800521a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800521e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005220:	f7fe f9d6 	bl	80035d0 <HAL_GetTick>
 8005224:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005226:	e008      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005228:	f7fe f9d2 	bl	80035d0 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b64      	cmp	r3, #100	; 0x64
 8005234:	d901      	bls.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e38f      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800523a:	4b2c      	ldr	r3, [pc, #176]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0f0      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005246:	4b28      	ldr	r3, [pc, #160]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800524e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d035      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	429a      	cmp	r2, r3
 8005262:	d02e      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005264:	4b20      	ldr	r3, [pc, #128]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800526c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800526e:	4b1e      	ldr	r3, [pc, #120]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005272:	4a1d      	ldr	r2, [pc, #116]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005278:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800527a:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800527c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527e:	4a1a      	ldr	r2, [pc, #104]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005284:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005286:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800528c:	4b16      	ldr	r3, [pc, #88]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800528e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b01      	cmp	r3, #1
 8005296:	d114      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005298:	f7fe f99a 	bl	80035d0 <HAL_GetTick>
 800529c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800529e:	e00a      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052a0:	f7fe f996 	bl	80035d0 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e351      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b6:	4b0c      	ldr	r3, [pc, #48]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0ee      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ce:	d111      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80052d0:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052dc:	4b04      	ldr	r3, [pc, #16]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80052de:	400b      	ands	r3, r1
 80052e0:	4901      	ldr	r1, [pc, #4]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	608b      	str	r3, [r1, #8]
 80052e6:	e00b      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80052e8:	40023800 	.word	0x40023800
 80052ec:	40007000 	.word	0x40007000
 80052f0:	0ffffcff 	.word	0x0ffffcff
 80052f4:	4bb3      	ldr	r3, [pc, #716]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	4ab2      	ldr	r2, [pc, #712]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80052fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052fe:	6093      	str	r3, [r2, #8]
 8005300:	4bb0      	ldr	r3, [pc, #704]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005302:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800530c:	49ad      	ldr	r1, [pc, #692]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800530e:	4313      	orrs	r3, r2
 8005310:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0310 	and.w	r3, r3, #16
 800531a:	2b00      	cmp	r3, #0
 800531c:	d010      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800531e:	4ba9      	ldr	r3, [pc, #676]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005324:	4aa7      	ldr	r2, [pc, #668]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800532a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800532e:	4ba5      	ldr	r3, [pc, #660]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005330:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005338:	49a2      	ldr	r1, [pc, #648]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800534c:	4b9d      	ldr	r3, [pc, #628]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005352:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800535a:	499a      	ldr	r1, [pc, #616]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800536e:	4b95      	ldr	r3, [pc, #596]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005374:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800537c:	4991      	ldr	r1, [pc, #580]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005390:	4b8c      	ldr	r3, [pc, #560]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005396:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800539e:	4989      	ldr	r1, [pc, #548]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053b2:	4b84      	ldr	r3, [pc, #528]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c0:	4980      	ldr	r1, [pc, #512]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053d4:	4b7b      	ldr	r3, [pc, #492]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053da:	f023 0203 	bic.w	r2, r3, #3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e2:	4978      	ldr	r1, [pc, #480]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053f6:	4b73      	ldr	r3, [pc, #460]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80053f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fc:	f023 020c 	bic.w	r2, r3, #12
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005404:	496f      	ldr	r1, [pc, #444]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005418:	4b6a      	ldr	r3, [pc, #424]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800541a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005426:	4967      	ldr	r1, [pc, #412]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800543a:	4b62      	ldr	r3, [pc, #392]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800543c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005440:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005448:	495e      	ldr	r1, [pc, #376]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800545c:	4b59      	ldr	r3, [pc, #356]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005462:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546a:	4956      	ldr	r1, [pc, #344]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800547e:	4b51      	ldr	r3, [pc, #324]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005484:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548c:	494d      	ldr	r1, [pc, #308]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80054a0:	4b48      	ldr	r3, [pc, #288]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ae:	4945      	ldr	r1, [pc, #276]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80054c2:	4b40      	ldr	r3, [pc, #256]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d0:	493c      	ldr	r1, [pc, #240]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054e4:	4b37      	ldr	r3, [pc, #220]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054f2:	4934      	ldr	r1, [pc, #208]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d011      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005506:	4b2f      	ldr	r3, [pc, #188]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005514:	492b      	ldr	r1, [pc, #172]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005520:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005524:	d101      	bne.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005526:	2301      	movs	r3, #1
 8005528:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0308 	and.w	r3, r3, #8
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005536:	2301      	movs	r3, #1
 8005538:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005546:	4b1f      	ldr	r3, [pc, #124]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005554:	491b      	ldr	r1, [pc, #108]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005556:	4313      	orrs	r3, r2
 8005558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00b      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005568:	4b16      	ldr	r3, [pc, #88]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800556a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005578:	4912      	ldr	r1, [pc, #72]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00b      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800558c:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800558e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005592:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800559c:	4909      	ldr	r1, [pc, #36]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00f      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055b0:	4b04      	ldr	r3, [pc, #16]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c0:	e002      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80055c2:	bf00      	nop
 80055c4:	40023800 	.word	0x40023800
 80055c8:	4986      	ldr	r1, [pc, #536]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00b      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80055dc:	4b81      	ldr	r3, [pc, #516]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ec:	497d      	ldr	r1, [pc, #500]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d006      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 80d6 	beq.w	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005608:	4b76      	ldr	r3, [pc, #472]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a75      	ldr	r2, [pc, #468]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800560e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005612:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005614:	f7fd ffdc 	bl	80035d0 <HAL_GetTick>
 8005618:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800561a:	e008      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800561c:	f7fd ffd8 	bl	80035d0 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b64      	cmp	r3, #100	; 0x64
 8005628:	d901      	bls.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e195      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800562e:	4b6d      	ldr	r3, [pc, #436]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1f0      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d021      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564a:	2b00      	cmp	r3, #0
 800564c:	d11d      	bne.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800564e:	4b65      	ldr	r3, [pc, #404]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005654:	0c1b      	lsrs	r3, r3, #16
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800565c:	4b61      	ldr	r3, [pc, #388]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800565e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005662:	0e1b      	lsrs	r3, r3, #24
 8005664:	f003 030f 	and.w	r3, r3, #15
 8005668:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	019a      	lsls	r2, r3, #6
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	041b      	lsls	r3, r3, #16
 8005674:	431a      	orrs	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	061b      	lsls	r3, r3, #24
 800567a:	431a      	orrs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	071b      	lsls	r3, r3, #28
 8005682:	4958      	ldr	r1, [pc, #352]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d004      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800569e:	d00a      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d02e      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056b4:	d129      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80056b6:	4b4b      	ldr	r3, [pc, #300]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056bc:	0c1b      	lsrs	r3, r3, #16
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056c4:	4b47      	ldr	r3, [pc, #284]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ca:	0f1b      	lsrs	r3, r3, #28
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	019a      	lsls	r2, r3, #6
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	041b      	lsls	r3, r3, #16
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	061b      	lsls	r3, r3, #24
 80056e4:	431a      	orrs	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	071b      	lsls	r3, r3, #28
 80056ea:	493e      	ldr	r1, [pc, #248]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056f2:	4b3c      	ldr	r3, [pc, #240]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056f8:	f023 021f 	bic.w	r2, r3, #31
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	3b01      	subs	r3, #1
 8005702:	4938      	ldr	r1, [pc, #224]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005704:	4313      	orrs	r3, r2
 8005706:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d01d      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005716:	4b33      	ldr	r3, [pc, #204]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800571c:	0e1b      	lsrs	r3, r3, #24
 800571e:	f003 030f 	and.w	r3, r3, #15
 8005722:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005724:	4b2f      	ldr	r3, [pc, #188]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800572a:	0f1b      	lsrs	r3, r3, #28
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	019a      	lsls	r2, r3, #6
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	041b      	lsls	r3, r3, #16
 800573e:	431a      	orrs	r2, r3
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	061b      	lsls	r3, r3, #24
 8005744:	431a      	orrs	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	071b      	lsls	r3, r3, #28
 800574a:	4926      	ldr	r1, [pc, #152]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d011      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	019a      	lsls	r2, r3, #6
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	041b      	lsls	r3, r3, #16
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	061b      	lsls	r3, r3, #24
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	071b      	lsls	r3, r3, #28
 800577a:	491a      	ldr	r1, [pc, #104]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800577c:	4313      	orrs	r3, r2
 800577e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005782:	4b18      	ldr	r3, [pc, #96]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a17      	ldr	r2, [pc, #92]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005788:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800578c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800578e:	f7fd ff1f 	bl	80035d0 <HAL_GetTick>
 8005792:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005794:	e008      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005796:	f7fd ff1b 	bl	80035d0 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b64      	cmp	r3, #100	; 0x64
 80057a2:	d901      	bls.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e0d8      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057a8:	4b0e      	ldr	r3, [pc, #56]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f0      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	f040 80ce 	bne.w	8005958 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80057bc:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a08      	ldr	r2, [pc, #32]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057c8:	f7fd ff02 	bl	80035d0 <HAL_GetTick>
 80057cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057ce:	e00b      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80057d0:	f7fd fefe 	bl	80035d0 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b64      	cmp	r3, #100	; 0x64
 80057dc:	d904      	bls.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e0bb      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80057e2:	bf00      	nop
 80057e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057e8:	4b5e      	ldr	r3, [pc, #376]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057f4:	d0ec      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005806:	2b00      	cmp	r3, #0
 8005808:	d009      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005812:	2b00      	cmp	r3, #0
 8005814:	d02e      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	2b00      	cmp	r3, #0
 800581c:	d12a      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800581e:	4b51      	ldr	r3, [pc, #324]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005824:	0c1b      	lsrs	r3, r3, #16
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800582c:	4b4d      	ldr	r3, [pc, #308]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800582e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005832:	0f1b      	lsrs	r3, r3, #28
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	019a      	lsls	r2, r3, #6
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	041b      	lsls	r3, r3, #16
 8005844:	431a      	orrs	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	061b      	lsls	r3, r3, #24
 800584c:	431a      	orrs	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	071b      	lsls	r3, r3, #28
 8005852:	4944      	ldr	r1, [pc, #272]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800585a:	4b42      	ldr	r3, [pc, #264]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800585c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005860:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005868:	3b01      	subs	r3, #1
 800586a:	021b      	lsls	r3, r3, #8
 800586c:	493d      	ldr	r1, [pc, #244]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800586e:	4313      	orrs	r3, r2
 8005870:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d022      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005884:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005888:	d11d      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800588a:	4b36      	ldr	r3, [pc, #216]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800588c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005890:	0e1b      	lsrs	r3, r3, #24
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005898:	4b32      	ldr	r3, [pc, #200]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800589a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589e:	0f1b      	lsrs	r3, r3, #28
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	019a      	lsls	r2, r3, #6
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	041b      	lsls	r3, r3, #16
 80058b2:	431a      	orrs	r2, r3
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	061b      	lsls	r3, r3, #24
 80058b8:	431a      	orrs	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	071b      	lsls	r3, r3, #28
 80058be:	4929      	ldr	r1, [pc, #164]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d028      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058d2:	4b24      	ldr	r3, [pc, #144]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d8:	0e1b      	lsrs	r3, r3, #24
 80058da:	f003 030f 	and.w	r3, r3, #15
 80058de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80058e0:	4b20      	ldr	r3, [pc, #128]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e6:	0c1b      	lsrs	r3, r3, #16
 80058e8:	f003 0303 	and.w	r3, r3, #3
 80058ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	019a      	lsls	r2, r3, #6
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	041b      	lsls	r3, r3, #16
 80058f8:	431a      	orrs	r2, r3
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	061b      	lsls	r3, r3, #24
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	071b      	lsls	r3, r3, #28
 8005906:	4917      	ldr	r1, [pc, #92]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005908:	4313      	orrs	r3, r2
 800590a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800590e:	4b15      	ldr	r3, [pc, #84]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005914:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	4911      	ldr	r1, [pc, #68]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800591e:	4313      	orrs	r3, r2
 8005920:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005924:	4b0f      	ldr	r3, [pc, #60]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a0e      	ldr	r2, [pc, #56]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800592a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800592e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005930:	f7fd fe4e 	bl	80035d0 <HAL_GetTick>
 8005934:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005936:	e008      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005938:	f7fd fe4a 	bl	80035d0 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b64      	cmp	r3, #100	; 0x64
 8005944:	d901      	bls.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e007      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800594a:	4b06      	ldr	r3, [pc, #24]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005952:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005956:	d1ef      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3720      	adds	r7, #32
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	40023800 	.word	0x40023800

08005968 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e09d      	b.n	8005ab6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	2b00      	cmp	r3, #0
 8005980:	d108      	bne.n	8005994 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800598a:	d009      	beq.n	80059a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	61da      	str	r2, [r3, #28]
 8005992:	e005      	b.n	80059a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fc fc04 	bl	80021c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059e0:	d902      	bls.n	80059e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	e002      	b.n	80059ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80059f6:	d007      	beq.n	8005a08 <HAL_SPI_Init+0xa0>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a00:	d002      	beq.n	8005a08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4a:	ea42 0103 	orr.w	r1, r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a52:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	0c1b      	lsrs	r3, r3, #16
 8005a64:	f003 0204 	and.w	r2, r3, #4
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	f003 0310 	and.w	r3, r3, #16
 8005a70:	431a      	orrs	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a84:	ea42 0103 	orr.w	r1, r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69da      	ldr	r2, [r3, #28]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aa4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	4613      	mov	r3, r2
 8005acc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d110      	bne.n	8005afc <HAL_SPI_Receive_DMA+0x3c>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ae2:	d10b      	bne.n	8005afc <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2204      	movs	r2, #4
 8005ae8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005aec:	88fb      	ldrh	r3, [r7, #6]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	68b9      	ldr	r1, [r7, #8]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 f908 	bl	8005d08 <HAL_SPI_TransmitReceive_DMA>
 8005af8:	4603      	mov	r3, r0
 8005afa:	e0fb      	b.n	8005cf4 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d101      	bne.n	8005b0a <HAL_SPI_Receive_DMA+0x4a>
 8005b06:	2302      	movs	r3, #2
 8005b08:	e0f4      	b.n	8005cf4 <HAL_SPI_Receive_DMA+0x234>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d002      	beq.n	8005b24 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8005b1e:	2302      	movs	r3, #2
 8005b20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b22:	e0e2      	b.n	8005cea <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <HAL_SPI_Receive_DMA+0x70>
 8005b2a:	88fb      	ldrh	r3, [r7, #6]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d102      	bne.n	8005b36 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b34:	e0d9      	b.n	8005cea <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2204      	movs	r2, #4
 8005b3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	88fa      	ldrh	r2, [r7, #6]
 8005b4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	88fa      	ldrh	r2, [r7, #6]
 8005b56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b7a:	d10f      	bne.n	8005b9c <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b9a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005baa:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bb4:	d908      	bls.n	8005bc8 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bc4:	605a      	str	r2, [r3, #4]
 8005bc6:	e042      	b.n	8005c4e <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bd6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be2:	d134      	bne.n	8005c4e <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bf2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d111      	bne.n	8005c28 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c12:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	085b      	lsrs	r3, r3, #1
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005c26:	e012      	b.n	8005c4e <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c36:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	085b      	lsrs	r3, r3, #1
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	3301      	adds	r3, #1
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c52:	4a2a      	ldr	r2, [pc, #168]	; (8005cfc <HAL_SPI_Receive_DMA+0x23c>)
 8005c54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5a:	4a29      	ldr	r2, [pc, #164]	; (8005d00 <HAL_SPI_Receive_DMA+0x240>)
 8005c5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c62:	4a28      	ldr	r2, [pc, #160]	; (8005d04 <HAL_SPI_Receive_DMA+0x244>)
 8005c64:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	330c      	adds	r3, #12
 8005c78:	4619      	mov	r1, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c86:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005c88:	f7fd fec4 	bl	8003a14 <HAL_DMA_Start_IT>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00c      	beq.n	8005cac <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c96:	f043 0210 	orr.w	r2, r3, #16
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005caa:	e01e      	b.n	8005cea <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb6:	2b40      	cmp	r3, #64	; 0x40
 8005cb8:	d007      	beq.n	8005cca <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cc8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f042 0220 	orr.w	r2, r2, #32
 8005cd8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f042 0201 	orr.w	r2, r2, #1
 8005ce8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	080063ad 	.word	0x080063ad
 8005d00:	08006271 	.word	0x08006271
 8005d04:	080063e5 	.word	0x080063e5

08005d08 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d101      	bne.n	8005d28 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005d24:	2302      	movs	r3, #2
 8005d26:	e16c      	b.n	8006002 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d36:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005d3e:	7dbb      	ldrb	r3, [r7, #22]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d00d      	beq.n	8005d60 <HAL_SPI_TransmitReceive_DMA+0x58>
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d4a:	d106      	bne.n	8005d5a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d102      	bne.n	8005d5a <HAL_SPI_TransmitReceive_DMA+0x52>
 8005d54:	7dbb      	ldrb	r3, [r7, #22]
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d002      	beq.n	8005d60 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d5e:	e14b      	b.n	8005ff8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005d6c:	887b      	ldrh	r3, [r7, #2]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d102      	bne.n	8005d78 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d76:	e13f      	b.n	8005ff8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	d003      	beq.n	8005d8c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2205      	movs	r2, #5
 8005d88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	887a      	ldrh	r2, [r7, #2]
 8005d9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	887a      	ldrh	r2, [r7, #2]
 8005da2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	887a      	ldrh	r2, [r7, #2]
 8005dae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	887a      	ldrh	r2, [r7, #2]
 8005db6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8005dd4:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dde:	d908      	bls.n	8005df2 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dee:	605a      	str	r2, [r3, #4]
 8005df0:	e06f      	b.n	8005ed2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e00:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e0c:	d126      	bne.n	8005e5c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10f      	bne.n	8005e3a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e28:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	085b      	lsrs	r3, r3, #1
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e38:	e010      	b.n	8005e5c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e48:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	085b      	lsrs	r3, r3, #1
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3301      	adds	r3, #1
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e66:	d134      	bne.n	8005ed2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e76:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d111      	bne.n	8005eac <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e96:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	085b      	lsrs	r3, r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005eaa:	e012      	b.n	8005ed2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005eba:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	085b      	lsrs	r3, r3, #1
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	3301      	adds	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d108      	bne.n	8005ef0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee2:	4a4a      	ldr	r2, [pc, #296]	; (800600c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8005ee4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eea:	4a49      	ldr	r2, [pc, #292]	; (8006010 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8005eec:	63da      	str	r2, [r3, #60]	; 0x3c
 8005eee:	e007      	b.n	8005f00 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef4:	4a47      	ldr	r2, [pc, #284]	; (8006014 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8005ef6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efc:	4a46      	ldr	r2, [pc, #280]	; (8006018 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8005efe:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f04:	4a45      	ldr	r2, [pc, #276]	; (800601c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8005f06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	330c      	adds	r3, #12
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f28:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005f2a:	f7fd fd73 	bl	8003a14 <HAL_DMA_Start_IT>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00c      	beq.n	8005f4e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f38:	f043 0210 	orr.w	r2, r3, #16
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005f4c:	e054      	b.n	8005ff8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f042 0201 	orr.w	r2, r2, #1
 8005f5c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f62:	2200      	movs	r2, #0
 8005f64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f72:	2200      	movs	r2, #0
 8005f74:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f86:	4619      	mov	r1, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	330c      	adds	r3, #12
 8005f8e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f94:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005f96:	f7fd fd3d 	bl	8003a14 <HAL_DMA_Start_IT>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00c      	beq.n	8005fba <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa4:	f043 0210 	orr.w	r2, r3, #16
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005fb8:	e01e      	b.n	8005ff8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc4:	2b40      	cmp	r3, #64	; 0x40
 8005fc6:	d007      	beq.n	8005fd8 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fd6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0220 	orr.w	r2, r2, #32
 8005fe6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f042 0202 	orr.w	r2, r2, #2
 8005ff6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006000:	7dfb      	ldrb	r3, [r7, #23]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	080063ad 	.word	0x080063ad
 8006010:	08006271 	.word	0x08006271
 8006014:	080063c9 	.word	0x080063c9
 8006018:	0800631b 	.word	0x0800631b
 800601c:	080063e5 	.word	0x080063e5

08006020 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	099b      	lsrs	r3, r3, #6
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10f      	bne.n	8006064 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	099b      	lsrs	r3, r3, #6
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d004      	beq.n	8006064 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	4798      	blx	r3
    return;
 8006062:	e0d7      	b.n	8006214 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	085b      	lsrs	r3, r3, #1
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00a      	beq.n	8006086 <HAL_SPI_IRQHandler+0x66>
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	09db      	lsrs	r3, r3, #7
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d004      	beq.n	8006086 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	4798      	blx	r3
    return;
 8006084:	e0c6      	b.n	8006214 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	095b      	lsrs	r3, r3, #5
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10c      	bne.n	80060ac <HAL_SPI_IRQHandler+0x8c>
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	099b      	lsrs	r3, r3, #6
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	0a1b      	lsrs	r3, r3, #8
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 80b4 	beq.w	8006214 <HAL_SPI_IRQHandler+0x1f4>
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	095b      	lsrs	r3, r3, #5
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 80ad 	beq.w	8006214 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	099b      	lsrs	r3, r3, #6
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d023      	beq.n	800610e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d011      	beq.n	80060f6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d6:	f043 0204 	orr.w	r2, r3, #4
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	e00b      	b.n	800610e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060f6:	2300      	movs	r3, #0
 80060f8:	613b      	str	r3, [r7, #16]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	613b      	str	r3, [r7, #16]
 800610a:	693b      	ldr	r3, [r7, #16]
        return;
 800610c:	e082      	b.n	8006214 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	095b      	lsrs	r3, r3, #5
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d014      	beq.n	8006144 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800611e:	f043 0201 	orr.w	r2, r3, #1
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006126:	2300      	movs	r3, #0
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	0a1b      	lsrs	r3, r3, #8
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00c      	beq.n	800616a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006154:	f043 0208 	orr.w	r2, r3, #8
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800615c:	2300      	movs	r3, #0
 800615e:	60bb      	str	r3, [r7, #8]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	60bb      	str	r3, [r7, #8]
 8006168:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800616e:	2b00      	cmp	r3, #0
 8006170:	d04f      	beq.n	8006212 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006180:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d104      	bne.n	800619e <HAL_SPI_IRQHandler+0x17e>
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d034      	beq.n	8006208 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0203 	bic.w	r2, r2, #3
 80061ac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d011      	beq.n	80061da <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ba:	4a18      	ldr	r2, [pc, #96]	; (800621c <HAL_SPI_IRQHandler+0x1fc>)
 80061bc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fd fcf6 	bl	8003bb4 <HAL_DMA_Abort_IT>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d016      	beq.n	8006210 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e6:	4a0d      	ldr	r2, [pc, #52]	; (800621c <HAL_SPI_IRQHandler+0x1fc>)
 80061e8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fd fce0 	bl	8003bb4 <HAL_DMA_Abort_IT>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006206:	e003      	b.n	8006210 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f827 	bl	800625c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800620e:	e000      	b.n	8006212 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006210:	bf00      	nop
    return;
 8006212:	bf00      	nop
  }
}
 8006214:	3720      	adds	r7, #32
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	08006425 	.word	0x08006425

08006220 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800627e:	f7fd f9a7 	bl	80035d0 <HAL_GetTick>
 8006282:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006292:	d03c      	beq.n	800630e <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 0220 	bic.w	r2, r2, #32
 80062a2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10d      	bne.n	80062c8 <SPI_DMAReceiveCplt+0x58>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062b4:	d108      	bne.n	80062c8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0203 	bic.w	r2, r2, #3
 80062c4:	605a      	str	r2, [r3, #4]
 80062c6:	e007      	b.n	80062d8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0201 	bic.w	r2, r2, #1
 80062d6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	2164      	movs	r1, #100	; 0x64
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 f9d5 	bl	800668c <SPI_EndRxTransaction>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f7ff ffa8 	bl	800625c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800630c:	e002      	b.n	8006314 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f7fc f80a 	bl	8002328 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006326:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006328:	f7fd f952 	bl	80035d0 <HAL_GetTick>
 800632c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800633c:	d030      	beq.n	80063a0 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0220 	bic.w	r2, r2, #32
 800634c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	2164      	movs	r1, #100	; 0x64
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 fa16 	bl	8006784 <SPI_EndRxTxTransaction>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d005      	beq.n	800636a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006362:	f043 0220 	orr.w	r2, r3, #32
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0203 	bic.w	r2, r2, #3
 8006378:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006394:	2b00      	cmp	r3, #0
 8006396:	d003      	beq.n	80063a0 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f7ff ff5f 	bl	800625c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800639e:	e002      	b.n	80063a6 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f7ff ff3d 	bl	8006220 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f7ff ff3a 	bl	8006234 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063c0:	bf00      	nop
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f7ff ff36 	bl	8006248 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063dc:	bf00      	nop
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0203 	bic.w	r2, r2, #3
 8006400:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006406:	f043 0210 	orr.w	r2, r3, #16
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff ff20 	bl	800625c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800641c:	bf00      	nop
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006430:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f7ff ff0b 	bl	800625c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006446:	bf00      	nop
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	4613      	mov	r3, r2
 800645e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006460:	f7fd f8b6 	bl	80035d0 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006468:	1a9b      	subs	r3, r3, r2
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	4413      	add	r3, r2
 800646e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006470:	f7fd f8ae 	bl	80035d0 <HAL_GetTick>
 8006474:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006476:	4b39      	ldr	r3, [pc, #228]	; (800655c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	015b      	lsls	r3, r3, #5
 800647c:	0d1b      	lsrs	r3, r3, #20
 800647e:	69fa      	ldr	r2, [r7, #28]
 8006480:	fb02 f303 	mul.w	r3, r2, r3
 8006484:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006486:	e054      	b.n	8006532 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648e:	d050      	beq.n	8006532 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006490:	f7fd f89e 	bl	80035d0 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	69fa      	ldr	r2, [r7, #28]
 800649c:	429a      	cmp	r2, r3
 800649e:	d902      	bls.n	80064a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d13d      	bne.n	8006522 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064be:	d111      	bne.n	80064e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064c8:	d004      	beq.n	80064d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d2:	d107      	bne.n	80064e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ec:	d10f      	bne.n	800650e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800650c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e017      	b.n	8006552 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	3b01      	subs	r3, #1
 8006530:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4013      	ands	r3, r2
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	429a      	cmp	r2, r3
 8006540:	bf0c      	ite	eq
 8006542:	2301      	moveq	r3, #1
 8006544:	2300      	movne	r3, #0
 8006546:	b2db      	uxtb	r3, r3
 8006548:	461a      	mov	r2, r3
 800654a:	79fb      	ldrb	r3, [r7, #7]
 800654c:	429a      	cmp	r2, r3
 800654e:	d19b      	bne.n	8006488 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3720      	adds	r7, #32
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	2000004c 	.word	0x2000004c

08006560 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08a      	sub	sp, #40	; 0x28
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
 800656c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800656e:	2300      	movs	r3, #0
 8006570:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006572:	f7fd f82d 	bl	80035d0 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657a:	1a9b      	subs	r3, r3, r2
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	4413      	add	r3, r2
 8006580:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006582:	f7fd f825 	bl	80035d0 <HAL_GetTick>
 8006586:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	330c      	adds	r3, #12
 800658e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006590:	4b3d      	ldr	r3, [pc, #244]	; (8006688 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	00da      	lsls	r2, r3, #3
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	0d1b      	lsrs	r3, r3, #20
 80065a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a2:	fb02 f303 	mul.w	r3, r2, r3
 80065a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80065a8:	e060      	b.n	800666c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80065b0:	d107      	bne.n	80065c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d104      	bne.n	80065c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80065c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c8:	d050      	beq.n	800666c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065ca:	f7fd f801 	bl	80035d0 <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d902      	bls.n	80065e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d13d      	bne.n	800665c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065f8:	d111      	bne.n	800661e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006602:	d004      	beq.n	800660e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800660c:	d107      	bne.n	800661e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800661c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006626:	d10f      	bne.n	8006648 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006636:	601a      	str	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006646:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e010      	b.n	800667e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	3b01      	subs	r3, #1
 800666a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	4013      	ands	r3, r2
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	429a      	cmp	r2, r3
 800667a:	d196      	bne.n	80065aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3728      	adds	r7, #40	; 0x28
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	2000004c 	.word	0x2000004c

0800668c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af02      	add	r7, sp, #8
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066a0:	d111      	bne.n	80066c6 <SPI_EndRxTransaction+0x3a>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066aa:	d004      	beq.n	80066b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b4:	d107      	bne.n	80066c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ce:	d112      	bne.n	80066f6 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2200      	movs	r2, #0
 80066d8:	2180      	movs	r1, #128	; 0x80
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f7ff feb8 	bl	8006450 <SPI_WaitFlagStateUntilTimeout>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d021      	beq.n	800672a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ea:	f043 0220 	orr.w	r2, r3, #32
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e03d      	b.n	8006772 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80066f6:	4b21      	ldr	r3, [pc, #132]	; (800677c <SPI_EndRxTransaction+0xf0>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a21      	ldr	r2, [pc, #132]	; (8006780 <SPI_EndRxTransaction+0xf4>)
 80066fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006700:	0d5b      	lsrs	r3, r3, #21
 8006702:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006706:	fb02 f303 	mul.w	r3, r2, r3
 800670a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00a      	beq.n	8006728 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	3b01      	subs	r3, #1
 8006716:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006722:	2b80      	cmp	r3, #128	; 0x80
 8006724:	d0f2      	beq.n	800670c <SPI_EndRxTransaction+0x80>
 8006726:	e000      	b.n	800672a <SPI_EndRxTransaction+0x9e>
        break;
 8006728:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006732:	d11d      	bne.n	8006770 <SPI_EndRxTransaction+0xe4>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800673c:	d004      	beq.n	8006748 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006746:	d113      	bne.n	8006770 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2200      	movs	r2, #0
 8006750:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f7ff ff03 	bl	8006560 <SPI_WaitFifoStateUntilTimeout>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d007      	beq.n	8006770 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006764:	f043 0220 	orr.w	r2, r3, #32
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e000      	b.n	8006772 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3718      	adds	r7, #24
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	2000004c 	.word	0x2000004c
 8006780:	165e9f81 	.word	0x165e9f81

08006784 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b088      	sub	sp, #32
 8006788:	af02      	add	r7, sp, #8
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2200      	movs	r2, #0
 8006798:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f7ff fedf 	bl	8006560 <SPI_WaitFifoStateUntilTimeout>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d007      	beq.n	80067b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ac:	f043 0220 	orr.w	r2, r3, #32
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e046      	b.n	8006846 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80067b8:	4b25      	ldr	r3, [pc, #148]	; (8006850 <SPI_EndRxTxTransaction+0xcc>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a25      	ldr	r2, [pc, #148]	; (8006854 <SPI_EndRxTxTransaction+0xd0>)
 80067be:	fba2 2303 	umull	r2, r3, r2, r3
 80067c2:	0d5b      	lsrs	r3, r3, #21
 80067c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067c8:	fb02 f303 	mul.w	r3, r2, r3
 80067cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067d6:	d112      	bne.n	80067fe <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2200      	movs	r2, #0
 80067e0:	2180      	movs	r1, #128	; 0x80
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f7ff fe34 	bl	8006450 <SPI_WaitFlagStateUntilTimeout>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d016      	beq.n	800681c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067f2:	f043 0220 	orr.w	r2, r3, #32
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e023      	b.n	8006846 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00a      	beq.n	800681a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	3b01      	subs	r3, #1
 8006808:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006814:	2b80      	cmp	r3, #128	; 0x80
 8006816:	d0f2      	beq.n	80067fe <SPI_EndRxTxTransaction+0x7a>
 8006818:	e000      	b.n	800681c <SPI_EndRxTxTransaction+0x98>
        break;
 800681a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2200      	movs	r2, #0
 8006824:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f7ff fe99 	bl	8006560 <SPI_WaitFifoStateUntilTimeout>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d007      	beq.n	8006844 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006838:	f043 0220 	orr.w	r2, r3, #32
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e000      	b.n	8006846 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	2000004c 	.word	0x2000004c
 8006854:	165e9f81 	.word	0x165e9f81

08006858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e049      	b.n	80068fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d106      	bne.n	8006884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7fc fa00 	bl	8002c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3304      	adds	r3, #4
 8006894:	4619      	mov	r1, r3
 8006896:	4610      	mov	r0, r2
 8006898:	f001 f924 	bl	8007ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b01      	cmp	r3, #1
 800691a:	d001      	beq.n	8006920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e054      	b.n	80069ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68da      	ldr	r2, [r3, #12]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0201 	orr.w	r2, r2, #1
 8006936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a26      	ldr	r2, [pc, #152]	; (80069d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d022      	beq.n	8006988 <HAL_TIM_Base_Start_IT+0x80>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800694a:	d01d      	beq.n	8006988 <HAL_TIM_Base_Start_IT+0x80>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a22      	ldr	r2, [pc, #136]	; (80069dc <HAL_TIM_Base_Start_IT+0xd4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d018      	beq.n	8006988 <HAL_TIM_Base_Start_IT+0x80>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a21      	ldr	r2, [pc, #132]	; (80069e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d013      	beq.n	8006988 <HAL_TIM_Base_Start_IT+0x80>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a1f      	ldr	r2, [pc, #124]	; (80069e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00e      	beq.n	8006988 <HAL_TIM_Base_Start_IT+0x80>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a1e      	ldr	r2, [pc, #120]	; (80069e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d009      	beq.n	8006988 <HAL_TIM_Base_Start_IT+0x80>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a1c      	ldr	r2, [pc, #112]	; (80069ec <HAL_TIM_Base_Start_IT+0xe4>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d004      	beq.n	8006988 <HAL_TIM_Base_Start_IT+0x80>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a1b      	ldr	r2, [pc, #108]	; (80069f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d115      	bne.n	80069b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689a      	ldr	r2, [r3, #8]
 800698e:	4b19      	ldr	r3, [pc, #100]	; (80069f4 <HAL_TIM_Base_Start_IT+0xec>)
 8006990:	4013      	ands	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b06      	cmp	r3, #6
 8006998:	d015      	beq.n	80069c6 <HAL_TIM_Base_Start_IT+0xbe>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069a0:	d011      	beq.n	80069c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f042 0201 	orr.w	r2, r2, #1
 80069b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b2:	e008      	b.n	80069c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f042 0201 	orr.w	r2, r2, #1
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	e000      	b.n	80069c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	40010000 	.word	0x40010000
 80069dc:	40000400 	.word	0x40000400
 80069e0:	40000800 	.word	0x40000800
 80069e4:	40000c00 	.word	0x40000c00
 80069e8:	40010400 	.word	0x40010400
 80069ec:	40014000 	.word	0x40014000
 80069f0:	40001800 	.word	0x40001800
 80069f4:	00010007 	.word	0x00010007

080069f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68da      	ldr	r2, [r3, #12]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0201 	bic.w	r2, r2, #1
 8006a0e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6a1a      	ldr	r2, [r3, #32]
 8006a16:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10f      	bne.n	8006a40 <HAL_TIM_Base_Stop_IT+0x48>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6a1a      	ldr	r2, [r3, #32]
 8006a26:	f240 4344 	movw	r3, #1092	; 0x444
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d107      	bne.n	8006a40 <HAL_TIM_Base_Stop_IT+0x48>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0201 	bic.w	r2, r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b082      	sub	sp, #8
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e049      	b.n	8006afc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d106      	bne.n	8006a82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f841 	bl	8006b04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2202      	movs	r2, #2
 8006a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	3304      	adds	r3, #4
 8006a92:	4619      	mov	r1, r3
 8006a94:	4610      	mov	r0, r2
 8006a96:	f001 f825 	bl	8007ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d109      	bne.n	8006b3c <HAL_TIM_PWM_Start+0x24>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	bf14      	ite	ne
 8006b34:	2301      	movne	r3, #1
 8006b36:	2300      	moveq	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	e03c      	b.n	8006bb6 <HAL_TIM_PWM_Start+0x9e>
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d109      	bne.n	8006b56 <HAL_TIM_PWM_Start+0x3e>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	bf14      	ite	ne
 8006b4e:	2301      	movne	r3, #1
 8006b50:	2300      	moveq	r3, #0
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	e02f      	b.n	8006bb6 <HAL_TIM_PWM_Start+0x9e>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	d109      	bne.n	8006b70 <HAL_TIM_PWM_Start+0x58>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	bf14      	ite	ne
 8006b68:	2301      	movne	r3, #1
 8006b6a:	2300      	moveq	r3, #0
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	e022      	b.n	8006bb6 <HAL_TIM_PWM_Start+0x9e>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2b0c      	cmp	r3, #12
 8006b74:	d109      	bne.n	8006b8a <HAL_TIM_PWM_Start+0x72>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	bf14      	ite	ne
 8006b82:	2301      	movne	r3, #1
 8006b84:	2300      	moveq	r3, #0
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	e015      	b.n	8006bb6 <HAL_TIM_PWM_Start+0x9e>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b10      	cmp	r3, #16
 8006b8e:	d109      	bne.n	8006ba4 <HAL_TIM_PWM_Start+0x8c>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	bf14      	ite	ne
 8006b9c:	2301      	movne	r3, #1
 8006b9e:	2300      	moveq	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	e008      	b.n	8006bb6 <HAL_TIM_PWM_Start+0x9e>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	bf14      	ite	ne
 8006bb0:	2301      	movne	r3, #1
 8006bb2:	2300      	moveq	r3, #0
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e092      	b.n	8006ce4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d104      	bne.n	8006bce <HAL_TIM_PWM_Start+0xb6>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bcc:	e023      	b.n	8006c16 <HAL_TIM_PWM_Start+0xfe>
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d104      	bne.n	8006bde <HAL_TIM_PWM_Start+0xc6>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bdc:	e01b      	b.n	8006c16 <HAL_TIM_PWM_Start+0xfe>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d104      	bne.n	8006bee <HAL_TIM_PWM_Start+0xd6>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bec:	e013      	b.n	8006c16 <HAL_TIM_PWM_Start+0xfe>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b0c      	cmp	r3, #12
 8006bf2:	d104      	bne.n	8006bfe <HAL_TIM_PWM_Start+0xe6>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bfc:	e00b      	b.n	8006c16 <HAL_TIM_PWM_Start+0xfe>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b10      	cmp	r3, #16
 8006c02:	d104      	bne.n	8006c0e <HAL_TIM_PWM_Start+0xf6>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c0c:	e003      	b.n	8006c16 <HAL_TIM_PWM_Start+0xfe>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2202      	movs	r2, #2
 8006c12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	6839      	ldr	r1, [r7, #0]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f001 fc22 	bl	8008468 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a30      	ldr	r2, [pc, #192]	; (8006cec <HAL_TIM_PWM_Start+0x1d4>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d004      	beq.n	8006c38 <HAL_TIM_PWM_Start+0x120>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a2f      	ldr	r2, [pc, #188]	; (8006cf0 <HAL_TIM_PWM_Start+0x1d8>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d101      	bne.n	8006c3c <HAL_TIM_PWM_Start+0x124>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e000      	b.n	8006c3e <HAL_TIM_PWM_Start+0x126>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d007      	beq.n	8006c52 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a25      	ldr	r2, [pc, #148]	; (8006cec <HAL_TIM_PWM_Start+0x1d4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d022      	beq.n	8006ca2 <HAL_TIM_PWM_Start+0x18a>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c64:	d01d      	beq.n	8006ca2 <HAL_TIM_PWM_Start+0x18a>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a22      	ldr	r2, [pc, #136]	; (8006cf4 <HAL_TIM_PWM_Start+0x1dc>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d018      	beq.n	8006ca2 <HAL_TIM_PWM_Start+0x18a>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a20      	ldr	r2, [pc, #128]	; (8006cf8 <HAL_TIM_PWM_Start+0x1e0>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d013      	beq.n	8006ca2 <HAL_TIM_PWM_Start+0x18a>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a1f      	ldr	r2, [pc, #124]	; (8006cfc <HAL_TIM_PWM_Start+0x1e4>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d00e      	beq.n	8006ca2 <HAL_TIM_PWM_Start+0x18a>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a19      	ldr	r2, [pc, #100]	; (8006cf0 <HAL_TIM_PWM_Start+0x1d8>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d009      	beq.n	8006ca2 <HAL_TIM_PWM_Start+0x18a>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a1b      	ldr	r2, [pc, #108]	; (8006d00 <HAL_TIM_PWM_Start+0x1e8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d004      	beq.n	8006ca2 <HAL_TIM_PWM_Start+0x18a>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a19      	ldr	r2, [pc, #100]	; (8006d04 <HAL_TIM_PWM_Start+0x1ec>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d115      	bne.n	8006cce <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689a      	ldr	r2, [r3, #8]
 8006ca8:	4b17      	ldr	r3, [pc, #92]	; (8006d08 <HAL_TIM_PWM_Start+0x1f0>)
 8006caa:	4013      	ands	r3, r2
 8006cac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b06      	cmp	r3, #6
 8006cb2:	d015      	beq.n	8006ce0 <HAL_TIM_PWM_Start+0x1c8>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cba:	d011      	beq.n	8006ce0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0201 	orr.w	r2, r2, #1
 8006cca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ccc:	e008      	b.n	8006ce0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f042 0201 	orr.w	r2, r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	e000      	b.n	8006ce2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	40010000 	.word	0x40010000
 8006cf0:	40010400 	.word	0x40010400
 8006cf4:	40000400 	.word	0x40000400
 8006cf8:	40000800 	.word	0x40000800
 8006cfc:	40000c00 	.word	0x40000c00
 8006d00:	40014000 	.word	0x40014000
 8006d04:	40001800 	.word	0x40001800
 8006d08:	00010007 	.word	0x00010007

08006d0c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f001 fba2 	bl	8008468 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a36      	ldr	r2, [pc, #216]	; (8006e04 <HAL_TIM_PWM_Stop+0xf8>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d004      	beq.n	8006d38 <HAL_TIM_PWM_Stop+0x2c>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a35      	ldr	r2, [pc, #212]	; (8006e08 <HAL_TIM_PWM_Stop+0xfc>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d101      	bne.n	8006d3c <HAL_TIM_PWM_Stop+0x30>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e000      	b.n	8006d3e <HAL_TIM_PWM_Stop+0x32>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d017      	beq.n	8006d72 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6a1a      	ldr	r2, [r3, #32]
 8006d48:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10f      	bne.n	8006d72 <HAL_TIM_PWM_Stop+0x66>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	6a1a      	ldr	r2, [r3, #32]
 8006d58:	f240 4344 	movw	r3, #1092	; 0x444
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d107      	bne.n	8006d72 <HAL_TIM_PWM_Stop+0x66>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6a1a      	ldr	r2, [r3, #32]
 8006d78:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10f      	bne.n	8006da2 <HAL_TIM_PWM_Stop+0x96>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6a1a      	ldr	r2, [r3, #32]
 8006d88:	f240 4344 	movw	r3, #1092	; 0x444
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d107      	bne.n	8006da2 <HAL_TIM_PWM_Stop+0x96>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 0201 	bic.w	r2, r2, #1
 8006da0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d104      	bne.n	8006db2 <HAL_TIM_PWM_Stop+0xa6>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006db0:	e023      	b.n	8006dfa <HAL_TIM_PWM_Stop+0xee>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b04      	cmp	r3, #4
 8006db6:	d104      	bne.n	8006dc2 <HAL_TIM_PWM_Stop+0xb6>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dc0:	e01b      	b.n	8006dfa <HAL_TIM_PWM_Stop+0xee>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	d104      	bne.n	8006dd2 <HAL_TIM_PWM_Stop+0xc6>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dd0:	e013      	b.n	8006dfa <HAL_TIM_PWM_Stop+0xee>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b0c      	cmp	r3, #12
 8006dd6:	d104      	bne.n	8006de2 <HAL_TIM_PWM_Stop+0xd6>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006de0:	e00b      	b.n	8006dfa <HAL_TIM_PWM_Stop+0xee>
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b10      	cmp	r3, #16
 8006de6:	d104      	bne.n	8006df2 <HAL_TIM_PWM_Stop+0xe6>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006df0:	e003      	b.n	8006dfa <HAL_TIM_PWM_Stop+0xee>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	40010000 	.word	0x40010000
 8006e08:	40010400 	.word	0x40010400

08006e0c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e049      	b.n	8006eb2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d106      	bne.n	8006e38 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f841 	bl	8006eba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	3304      	adds	r3, #4
 8006e48:	4619      	mov	r1, r3
 8006e4a:	4610      	mov	r0, r2
 8006e4c:	f000 fe4a 	bl	8007ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006ec2:	bf00      	nop
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
	...

08006ed0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d104      	bne.n	8006eee <HAL_TIM_IC_Start_IT+0x1e>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	e023      	b.n	8006f36 <HAL_TIM_IC_Start_IT+0x66>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b04      	cmp	r3, #4
 8006ef2:	d104      	bne.n	8006efe <HAL_TIM_IC_Start_IT+0x2e>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	e01b      	b.n	8006f36 <HAL_TIM_IC_Start_IT+0x66>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d104      	bne.n	8006f0e <HAL_TIM_IC_Start_IT+0x3e>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	e013      	b.n	8006f36 <HAL_TIM_IC_Start_IT+0x66>
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b0c      	cmp	r3, #12
 8006f12:	d104      	bne.n	8006f1e <HAL_TIM_IC_Start_IT+0x4e>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	e00b      	b.n	8006f36 <HAL_TIM_IC_Start_IT+0x66>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b10      	cmp	r3, #16
 8006f22:	d104      	bne.n	8006f2e <HAL_TIM_IC_Start_IT+0x5e>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	e003      	b.n	8006f36 <HAL_TIM_IC_Start_IT+0x66>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d104      	bne.n	8006f48 <HAL_TIM_IC_Start_IT+0x78>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	e013      	b.n	8006f70 <HAL_TIM_IC_Start_IT+0xa0>
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d104      	bne.n	8006f58 <HAL_TIM_IC_Start_IT+0x88>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	e00b      	b.n	8006f70 <HAL_TIM_IC_Start_IT+0xa0>
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	2b08      	cmp	r3, #8
 8006f5c:	d104      	bne.n	8006f68 <HAL_TIM_IC_Start_IT+0x98>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	e003      	b.n	8006f70 <HAL_TIM_IC_Start_IT+0xa0>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f72:	7bbb      	ldrb	r3, [r7, #14]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d102      	bne.n	8006f7e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f78:	7b7b      	ldrb	r3, [r7, #13]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d001      	beq.n	8006f82 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e0e2      	b.n	8007148 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d104      	bne.n	8006f92 <HAL_TIM_IC_Start_IT+0xc2>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f90:	e023      	b.n	8006fda <HAL_TIM_IC_Start_IT+0x10a>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	d104      	bne.n	8006fa2 <HAL_TIM_IC_Start_IT+0xd2>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fa0:	e01b      	b.n	8006fda <HAL_TIM_IC_Start_IT+0x10a>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d104      	bne.n	8006fb2 <HAL_TIM_IC_Start_IT+0xe2>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fb0:	e013      	b.n	8006fda <HAL_TIM_IC_Start_IT+0x10a>
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b0c      	cmp	r3, #12
 8006fb6:	d104      	bne.n	8006fc2 <HAL_TIM_IC_Start_IT+0xf2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fc0:	e00b      	b.n	8006fda <HAL_TIM_IC_Start_IT+0x10a>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b10      	cmp	r3, #16
 8006fc6:	d104      	bne.n	8006fd2 <HAL_TIM_IC_Start_IT+0x102>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fd0:	e003      	b.n	8006fda <HAL_TIM_IC_Start_IT+0x10a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d104      	bne.n	8006fea <HAL_TIM_IC_Start_IT+0x11a>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fe8:	e013      	b.n	8007012 <HAL_TIM_IC_Start_IT+0x142>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	d104      	bne.n	8006ffa <HAL_TIM_IC_Start_IT+0x12a>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ff8:	e00b      	b.n	8007012 <HAL_TIM_IC_Start_IT+0x142>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b08      	cmp	r3, #8
 8006ffe:	d104      	bne.n	800700a <HAL_TIM_IC_Start_IT+0x13a>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007008:	e003      	b.n	8007012 <HAL_TIM_IC_Start_IT+0x142>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2202      	movs	r2, #2
 800700e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b0c      	cmp	r3, #12
 8007016:	d841      	bhi.n	800709c <HAL_TIM_IC_Start_IT+0x1cc>
 8007018:	a201      	add	r2, pc, #4	; (adr r2, 8007020 <HAL_TIM_IC_Start_IT+0x150>)
 800701a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701e:	bf00      	nop
 8007020:	08007055 	.word	0x08007055
 8007024:	0800709d 	.word	0x0800709d
 8007028:	0800709d 	.word	0x0800709d
 800702c:	0800709d 	.word	0x0800709d
 8007030:	08007067 	.word	0x08007067
 8007034:	0800709d 	.word	0x0800709d
 8007038:	0800709d 	.word	0x0800709d
 800703c:	0800709d 	.word	0x0800709d
 8007040:	08007079 	.word	0x08007079
 8007044:	0800709d 	.word	0x0800709d
 8007048:	0800709d 	.word	0x0800709d
 800704c:	0800709d 	.word	0x0800709d
 8007050:	0800708b 	.word	0x0800708b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68da      	ldr	r2, [r3, #12]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f042 0202 	orr.w	r2, r2, #2
 8007062:	60da      	str	r2, [r3, #12]
      break;
 8007064:	e01d      	b.n	80070a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f042 0204 	orr.w	r2, r2, #4
 8007074:	60da      	str	r2, [r3, #12]
      break;
 8007076:	e014      	b.n	80070a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68da      	ldr	r2, [r3, #12]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f042 0208 	orr.w	r2, r2, #8
 8007086:	60da      	str	r2, [r3, #12]
      break;
 8007088:	e00b      	b.n	80070a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68da      	ldr	r2, [r3, #12]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f042 0210 	orr.w	r2, r2, #16
 8007098:	60da      	str	r2, [r3, #12]
      break;
 800709a:	e002      	b.n	80070a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	73fb      	strb	r3, [r7, #15]
      break;
 80070a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d14e      	bne.n	8007146 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2201      	movs	r2, #1
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f001 f9d9 	bl	8008468 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a25      	ldr	r2, [pc, #148]	; (8007150 <HAL_TIM_IC_Start_IT+0x280>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d022      	beq.n	8007106 <HAL_TIM_IC_Start_IT+0x236>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c8:	d01d      	beq.n	8007106 <HAL_TIM_IC_Start_IT+0x236>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a21      	ldr	r2, [pc, #132]	; (8007154 <HAL_TIM_IC_Start_IT+0x284>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d018      	beq.n	8007106 <HAL_TIM_IC_Start_IT+0x236>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a1f      	ldr	r2, [pc, #124]	; (8007158 <HAL_TIM_IC_Start_IT+0x288>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d013      	beq.n	8007106 <HAL_TIM_IC_Start_IT+0x236>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a1e      	ldr	r2, [pc, #120]	; (800715c <HAL_TIM_IC_Start_IT+0x28c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d00e      	beq.n	8007106 <HAL_TIM_IC_Start_IT+0x236>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a1c      	ldr	r2, [pc, #112]	; (8007160 <HAL_TIM_IC_Start_IT+0x290>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d009      	beq.n	8007106 <HAL_TIM_IC_Start_IT+0x236>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a1b      	ldr	r2, [pc, #108]	; (8007164 <HAL_TIM_IC_Start_IT+0x294>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d004      	beq.n	8007106 <HAL_TIM_IC_Start_IT+0x236>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a19      	ldr	r2, [pc, #100]	; (8007168 <HAL_TIM_IC_Start_IT+0x298>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d115      	bne.n	8007132 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	4b17      	ldr	r3, [pc, #92]	; (800716c <HAL_TIM_IC_Start_IT+0x29c>)
 800710e:	4013      	ands	r3, r2
 8007110:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2b06      	cmp	r3, #6
 8007116:	d015      	beq.n	8007144 <HAL_TIM_IC_Start_IT+0x274>
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800711e:	d011      	beq.n	8007144 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0201 	orr.w	r2, r2, #1
 800712e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007130:	e008      	b.n	8007144 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f042 0201 	orr.w	r2, r2, #1
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	e000      	b.n	8007146 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007144:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007146:	7bfb      	ldrb	r3, [r7, #15]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	40010000 	.word	0x40010000
 8007154:	40000400 	.word	0x40000400
 8007158:	40000800 	.word	0x40000800
 800715c:	40000c00 	.word	0x40000c00
 8007160:	40010400 	.word	0x40010400
 8007164:	40014000 	.word	0x40014000
 8007168:	40001800 	.word	0x40001800
 800716c:	00010007 	.word	0x00010007

08007170 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	73fb      	strb	r3, [r7, #15]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b0c      	cmp	r3, #12
 8007182:	d841      	bhi.n	8007208 <HAL_TIM_IC_Stop_IT+0x98>
 8007184:	a201      	add	r2, pc, #4	; (adr r2, 800718c <HAL_TIM_IC_Stop_IT+0x1c>)
 8007186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718a:	bf00      	nop
 800718c:	080071c1 	.word	0x080071c1
 8007190:	08007209 	.word	0x08007209
 8007194:	08007209 	.word	0x08007209
 8007198:	08007209 	.word	0x08007209
 800719c:	080071d3 	.word	0x080071d3
 80071a0:	08007209 	.word	0x08007209
 80071a4:	08007209 	.word	0x08007209
 80071a8:	08007209 	.word	0x08007209
 80071ac:	080071e5 	.word	0x080071e5
 80071b0:	08007209 	.word	0x08007209
 80071b4:	08007209 	.word	0x08007209
 80071b8:	08007209 	.word	0x08007209
 80071bc:	080071f7 	.word	0x080071f7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68da      	ldr	r2, [r3, #12]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f022 0202 	bic.w	r2, r2, #2
 80071ce:	60da      	str	r2, [r3, #12]
      break;
 80071d0:	e01d      	b.n	800720e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f022 0204 	bic.w	r2, r2, #4
 80071e0:	60da      	str	r2, [r3, #12]
      break;
 80071e2:	e014      	b.n	800720e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68da      	ldr	r2, [r3, #12]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f022 0208 	bic.w	r2, r2, #8
 80071f2:	60da      	str	r2, [r3, #12]
      break;
 80071f4:	e00b      	b.n	800720e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68da      	ldr	r2, [r3, #12]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0210 	bic.w	r2, r2, #16
 8007204:	60da      	str	r2, [r3, #12]
      break;
 8007206:	e002      	b.n	800720e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	73fb      	strb	r3, [r7, #15]
      break;
 800720c:	bf00      	nop
  }

  if (status == HAL_OK)
 800720e:	7bfb      	ldrb	r3, [r7, #15]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d166      	bne.n	80072e2 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2200      	movs	r2, #0
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	4618      	mov	r0, r3
 800721e:	f001 f923 	bl	8008468 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	6a1a      	ldr	r2, [r3, #32]
 8007228:	f241 1311 	movw	r3, #4369	; 0x1111
 800722c:	4013      	ands	r3, r2
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10f      	bne.n	8007252 <HAL_TIM_IC_Stop_IT+0xe2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	6a1a      	ldr	r2, [r3, #32]
 8007238:	f240 4344 	movw	r3, #1092	; 0x444
 800723c:	4013      	ands	r3, r2
 800723e:	2b00      	cmp	r3, #0
 8007240:	d107      	bne.n	8007252 <HAL_TIM_IC_Stop_IT+0xe2>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0201 	bic.w	r2, r2, #1
 8007250:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d104      	bne.n	8007262 <HAL_TIM_IC_Stop_IT+0xf2>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007260:	e023      	b.n	80072aa <HAL_TIM_IC_Stop_IT+0x13a>
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	2b04      	cmp	r3, #4
 8007266:	d104      	bne.n	8007272 <HAL_TIM_IC_Stop_IT+0x102>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007270:	e01b      	b.n	80072aa <HAL_TIM_IC_Stop_IT+0x13a>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b08      	cmp	r3, #8
 8007276:	d104      	bne.n	8007282 <HAL_TIM_IC_Stop_IT+0x112>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007280:	e013      	b.n	80072aa <HAL_TIM_IC_Stop_IT+0x13a>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b0c      	cmp	r3, #12
 8007286:	d104      	bne.n	8007292 <HAL_TIM_IC_Stop_IT+0x122>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007290:	e00b      	b.n	80072aa <HAL_TIM_IC_Stop_IT+0x13a>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b10      	cmp	r3, #16
 8007296:	d104      	bne.n	80072a2 <HAL_TIM_IC_Stop_IT+0x132>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072a0:	e003      	b.n	80072aa <HAL_TIM_IC_Stop_IT+0x13a>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d104      	bne.n	80072ba <HAL_TIM_IC_Stop_IT+0x14a>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072b8:	e013      	b.n	80072e2 <HAL_TIM_IC_Stop_IT+0x172>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b04      	cmp	r3, #4
 80072be:	d104      	bne.n	80072ca <HAL_TIM_IC_Stop_IT+0x15a>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072c8:	e00b      	b.n	80072e2 <HAL_TIM_IC_Stop_IT+0x172>
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b08      	cmp	r3, #8
 80072ce:	d104      	bne.n	80072da <HAL_TIM_IC_Stop_IT+0x16a>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072d8:	e003      	b.n	80072e2 <HAL_TIM_IC_Stop_IT+0x172>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d122      	bne.n	8007348 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b02      	cmp	r3, #2
 800730e:	d11b      	bne.n	8007348 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f06f 0202 	mvn.w	r2, #2
 8007318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	f003 0303 	and.w	r3, r3, #3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7fb fef0 	bl	8003114 <HAL_TIM_IC_CaptureCallback>
 8007334:	e005      	b.n	8007342 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fbb6 	bl	8007aa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fbbd 	bl	8007abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	f003 0304 	and.w	r3, r3, #4
 8007352:	2b04      	cmp	r3, #4
 8007354:	d122      	bne.n	800739c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f003 0304 	and.w	r3, r3, #4
 8007360:	2b04      	cmp	r3, #4
 8007362:	d11b      	bne.n	800739c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f06f 0204 	mvn.w	r2, #4
 800736c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2202      	movs	r2, #2
 8007372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7fb fec6 	bl	8003114 <HAL_TIM_IC_CaptureCallback>
 8007388:	e005      	b.n	8007396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fb8c 	bl	8007aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fb93 	bl	8007abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	f003 0308 	and.w	r3, r3, #8
 80073a6:	2b08      	cmp	r3, #8
 80073a8:	d122      	bne.n	80073f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f003 0308 	and.w	r3, r3, #8
 80073b4:	2b08      	cmp	r3, #8
 80073b6:	d11b      	bne.n	80073f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f06f 0208 	mvn.w	r2, #8
 80073c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2204      	movs	r2, #4
 80073c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	f003 0303 	and.w	r3, r3, #3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7fb fe9c 	bl	8003114 <HAL_TIM_IC_CaptureCallback>
 80073dc:	e005      	b.n	80073ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fb62 	bl	8007aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fb69 	bl	8007abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	f003 0310 	and.w	r3, r3, #16
 80073fa:	2b10      	cmp	r3, #16
 80073fc:	d122      	bne.n	8007444 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	f003 0310 	and.w	r3, r3, #16
 8007408:	2b10      	cmp	r3, #16
 800740a:	d11b      	bne.n	8007444 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f06f 0210 	mvn.w	r2, #16
 8007414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2208      	movs	r2, #8
 800741a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007426:	2b00      	cmp	r3, #0
 8007428:	d003      	beq.n	8007432 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f7fb fe72 	bl	8003114 <HAL_TIM_IC_CaptureCallback>
 8007430:	e005      	b.n	800743e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fb38 	bl	8007aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fb3f 	bl	8007abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b01      	cmp	r3, #1
 8007450:	d10e      	bne.n	8007470 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b01      	cmp	r3, #1
 800745e:	d107      	bne.n	8007470 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f06f 0201 	mvn.w	r2, #1
 8007468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7fb fe2c 	bl	80030c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800747a:	2b80      	cmp	r3, #128	; 0x80
 800747c:	d10e      	bne.n	800749c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007488:	2b80      	cmp	r3, #128	; 0x80
 800748a:	d107      	bne.n	800749c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f001 f8a4 	bl	80085e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074aa:	d10e      	bne.n	80074ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b6:	2b80      	cmp	r3, #128	; 0x80
 80074b8:	d107      	bne.n	80074ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80074c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f001 f897 	bl	80085f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d4:	2b40      	cmp	r3, #64	; 0x40
 80074d6:	d10e      	bne.n	80074f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e2:	2b40      	cmp	r3, #64	; 0x40
 80074e4:	d107      	bne.n	80074f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 faed 	bl	8007ad0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	f003 0320 	and.w	r3, r3, #32
 8007500:	2b20      	cmp	r3, #32
 8007502:	d10e      	bne.n	8007522 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	f003 0320 	and.w	r3, r3, #32
 800750e:	2b20      	cmp	r3, #32
 8007510:	d107      	bne.n	8007522 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f06f 0220 	mvn.w	r2, #32
 800751a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 f857 	bl	80085d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007522:	bf00      	nop
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b086      	sub	sp, #24
 800752e:	af00      	add	r7, sp, #0
 8007530:	60f8      	str	r0, [r7, #12]
 8007532:	60b9      	str	r1, [r7, #8]
 8007534:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007540:	2b01      	cmp	r3, #1
 8007542:	d101      	bne.n	8007548 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007544:	2302      	movs	r3, #2
 8007546:	e088      	b.n	800765a <HAL_TIM_IC_ConfigChannel+0x130>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d11b      	bne.n	800758e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6818      	ldr	r0, [r3, #0]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	6819      	ldr	r1, [r3, #0]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f000 fdbb 	bl	80080e0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	699a      	ldr	r2, [r3, #24]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 020c 	bic.w	r2, r2, #12
 8007578:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6999      	ldr	r1, [r3, #24]
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	619a      	str	r2, [r3, #24]
 800758c:	e060      	b.n	8007650 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b04      	cmp	r3, #4
 8007592:	d11c      	bne.n	80075ce <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6818      	ldr	r0, [r3, #0]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	6819      	ldr	r1, [r3, #0]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f000 fe3f 	bl	8008226 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	699a      	ldr	r2, [r3, #24]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80075b6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6999      	ldr	r1, [r3, #24]
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	021a      	lsls	r2, r3, #8
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	430a      	orrs	r2, r1
 80075ca:	619a      	str	r2, [r3, #24]
 80075cc:	e040      	b.n	8007650 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d11b      	bne.n	800760c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6818      	ldr	r0, [r3, #0]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	6819      	ldr	r1, [r3, #0]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	f000 fe8c 	bl	8008300 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	69da      	ldr	r2, [r3, #28]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 020c 	bic.w	r2, r2, #12
 80075f6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	69d9      	ldr	r1, [r3, #28]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	689a      	ldr	r2, [r3, #8]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	61da      	str	r2, [r3, #28]
 800760a:	e021      	b.n	8007650 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b0c      	cmp	r3, #12
 8007610:	d11c      	bne.n	800764c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6818      	ldr	r0, [r3, #0]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	6819      	ldr	r1, [r3, #0]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	f000 fea9 	bl	8008378 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	69da      	ldr	r2, [r3, #28]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007634:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	69d9      	ldr	r1, [r3, #28]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	021a      	lsls	r2, r3, #8
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	61da      	str	r2, [r3, #28]
 800764a:	e001      	b.n	8007650 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007658:	7dfb      	ldrb	r3, [r7, #23]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3718      	adds	r7, #24
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
	...

08007664 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007670:	2300      	movs	r3, #0
 8007672:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800767a:	2b01      	cmp	r3, #1
 800767c:	d101      	bne.n	8007682 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800767e:	2302      	movs	r3, #2
 8007680:	e0ff      	b.n	8007882 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2b14      	cmp	r3, #20
 800768e:	f200 80f0 	bhi.w	8007872 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007692:	a201      	add	r2, pc, #4	; (adr r2, 8007698 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007698:	080076ed 	.word	0x080076ed
 800769c:	08007873 	.word	0x08007873
 80076a0:	08007873 	.word	0x08007873
 80076a4:	08007873 	.word	0x08007873
 80076a8:	0800772d 	.word	0x0800772d
 80076ac:	08007873 	.word	0x08007873
 80076b0:	08007873 	.word	0x08007873
 80076b4:	08007873 	.word	0x08007873
 80076b8:	0800776f 	.word	0x0800776f
 80076bc:	08007873 	.word	0x08007873
 80076c0:	08007873 	.word	0x08007873
 80076c4:	08007873 	.word	0x08007873
 80076c8:	080077af 	.word	0x080077af
 80076cc:	08007873 	.word	0x08007873
 80076d0:	08007873 	.word	0x08007873
 80076d4:	08007873 	.word	0x08007873
 80076d8:	080077f1 	.word	0x080077f1
 80076dc:	08007873 	.word	0x08007873
 80076e0:	08007873 	.word	0x08007873
 80076e4:	08007873 	.word	0x08007873
 80076e8:	08007831 	.word	0x08007831
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68b9      	ldr	r1, [r7, #8]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 fa96 	bl	8007c24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	699a      	ldr	r2, [r3, #24]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f042 0208 	orr.w	r2, r2, #8
 8007706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699a      	ldr	r2, [r3, #24]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 0204 	bic.w	r2, r2, #4
 8007716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6999      	ldr	r1, [r3, #24]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	691a      	ldr	r2, [r3, #16]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	619a      	str	r2, [r3, #24]
      break;
 800772a:	e0a5      	b.n	8007878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68b9      	ldr	r1, [r7, #8]
 8007732:	4618      	mov	r0, r3
 8007734:	f000 fae8 	bl	8007d08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	699a      	ldr	r2, [r3, #24]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	699a      	ldr	r2, [r3, #24]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6999      	ldr	r1, [r3, #24]
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	021a      	lsls	r2, r3, #8
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	619a      	str	r2, [r3, #24]
      break;
 800776c:	e084      	b.n	8007878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68b9      	ldr	r1, [r7, #8]
 8007774:	4618      	mov	r0, r3
 8007776:	f000 fb3f 	bl	8007df8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69da      	ldr	r2, [r3, #28]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f042 0208 	orr.w	r2, r2, #8
 8007788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69da      	ldr	r2, [r3, #28]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0204 	bic.w	r2, r2, #4
 8007798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69d9      	ldr	r1, [r3, #28]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	691a      	ldr	r2, [r3, #16]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	430a      	orrs	r2, r1
 80077aa:	61da      	str	r2, [r3, #28]
      break;
 80077ac:	e064      	b.n	8007878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68b9      	ldr	r1, [r7, #8]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f000 fb95 	bl	8007ee4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	69da      	ldr	r2, [r3, #28]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69da      	ldr	r2, [r3, #28]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69d9      	ldr	r1, [r3, #28]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	021a      	lsls	r2, r3, #8
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	61da      	str	r2, [r3, #28]
      break;
 80077ee:	e043      	b.n	8007878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68b9      	ldr	r1, [r7, #8]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f000 fbcc 	bl	8007f94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f042 0208 	orr.w	r2, r2, #8
 800780a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 0204 	bic.w	r2, r2, #4
 800781a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	691a      	ldr	r2, [r3, #16]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	430a      	orrs	r2, r1
 800782c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800782e:	e023      	b.n	8007878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68b9      	ldr	r1, [r7, #8]
 8007836:	4618      	mov	r0, r3
 8007838:	f000 fbfe 	bl	8008038 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800784a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800785a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	021a      	lsls	r2, r3, #8
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	430a      	orrs	r2, r1
 800786e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007870:	e002      	b.n	8007878 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	75fb      	strb	r3, [r7, #23]
      break;
 8007876:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007880:	7dfb      	ldrb	r3, [r7, #23]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop

0800788c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_TIM_ConfigClockSource+0x1c>
 80078a4:	2302      	movs	r3, #2
 80078a6:	e0b4      	b.n	8007a12 <HAL_TIM_ConfigClockSource+0x186>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	4b56      	ldr	r3, [pc, #344]	; (8007a1c <HAL_TIM_ConfigClockSource+0x190>)
 80078c4:	4013      	ands	r3, r2
 80078c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078e0:	d03e      	beq.n	8007960 <HAL_TIM_ConfigClockSource+0xd4>
 80078e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078e6:	f200 8087 	bhi.w	80079f8 <HAL_TIM_ConfigClockSource+0x16c>
 80078ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ee:	f000 8086 	beq.w	80079fe <HAL_TIM_ConfigClockSource+0x172>
 80078f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078f6:	d87f      	bhi.n	80079f8 <HAL_TIM_ConfigClockSource+0x16c>
 80078f8:	2b70      	cmp	r3, #112	; 0x70
 80078fa:	d01a      	beq.n	8007932 <HAL_TIM_ConfigClockSource+0xa6>
 80078fc:	2b70      	cmp	r3, #112	; 0x70
 80078fe:	d87b      	bhi.n	80079f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007900:	2b60      	cmp	r3, #96	; 0x60
 8007902:	d050      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0x11a>
 8007904:	2b60      	cmp	r3, #96	; 0x60
 8007906:	d877      	bhi.n	80079f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007908:	2b50      	cmp	r3, #80	; 0x50
 800790a:	d03c      	beq.n	8007986 <HAL_TIM_ConfigClockSource+0xfa>
 800790c:	2b50      	cmp	r3, #80	; 0x50
 800790e:	d873      	bhi.n	80079f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007910:	2b40      	cmp	r3, #64	; 0x40
 8007912:	d058      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x13a>
 8007914:	2b40      	cmp	r3, #64	; 0x40
 8007916:	d86f      	bhi.n	80079f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007918:	2b30      	cmp	r3, #48	; 0x30
 800791a:	d064      	beq.n	80079e6 <HAL_TIM_ConfigClockSource+0x15a>
 800791c:	2b30      	cmp	r3, #48	; 0x30
 800791e:	d86b      	bhi.n	80079f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007920:	2b20      	cmp	r3, #32
 8007922:	d060      	beq.n	80079e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007924:	2b20      	cmp	r3, #32
 8007926:	d867      	bhi.n	80079f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007928:	2b00      	cmp	r3, #0
 800792a:	d05c      	beq.n	80079e6 <HAL_TIM_ConfigClockSource+0x15a>
 800792c:	2b10      	cmp	r3, #16
 800792e:	d05a      	beq.n	80079e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007930:	e062      	b.n	80079f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6818      	ldr	r0, [r3, #0]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	6899      	ldr	r1, [r3, #8]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	f000 fd71 	bl	8008428 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007954:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	609a      	str	r2, [r3, #8]
      break;
 800795e:	e04f      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6818      	ldr	r0, [r3, #0]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	6899      	ldr	r1, [r3, #8]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	f000 fd5a 	bl	8008428 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689a      	ldr	r2, [r3, #8]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007982:	609a      	str	r2, [r3, #8]
      break;
 8007984:	e03c      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6818      	ldr	r0, [r3, #0]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	6859      	ldr	r1, [r3, #4]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	461a      	mov	r2, r3
 8007994:	f000 fc18 	bl	80081c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2150      	movs	r1, #80	; 0x50
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 fd27 	bl	80083f2 <TIM_ITRx_SetConfig>
      break;
 80079a4:	e02c      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6818      	ldr	r0, [r3, #0]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	6859      	ldr	r1, [r3, #4]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	461a      	mov	r2, r3
 80079b4:	f000 fc74 	bl	80082a0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2160      	movs	r1, #96	; 0x60
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 fd17 	bl	80083f2 <TIM_ITRx_SetConfig>
      break;
 80079c4:	e01c      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6818      	ldr	r0, [r3, #0]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	6859      	ldr	r1, [r3, #4]
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	461a      	mov	r2, r3
 80079d4:	f000 fbf8 	bl	80081c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2140      	movs	r1, #64	; 0x40
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 fd07 	bl	80083f2 <TIM_ITRx_SetConfig>
      break;
 80079e4:	e00c      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4619      	mov	r1, r3
 80079f0:	4610      	mov	r0, r2
 80079f2:	f000 fcfe 	bl	80083f2 <TIM_ITRx_SetConfig>
      break;
 80079f6:	e003      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	73fb      	strb	r3, [r7, #15]
      break;
 80079fc:	e000      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80079fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	fffeff88 	.word	0xfffeff88

08007a20 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	60fb      	str	r3, [r7, #12]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b0c      	cmp	r3, #12
 8007a32:	d831      	bhi.n	8007a98 <HAL_TIM_ReadCapturedValue+0x78>
 8007a34:	a201      	add	r2, pc, #4	; (adr r2, 8007a3c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3a:	bf00      	nop
 8007a3c:	08007a71 	.word	0x08007a71
 8007a40:	08007a99 	.word	0x08007a99
 8007a44:	08007a99 	.word	0x08007a99
 8007a48:	08007a99 	.word	0x08007a99
 8007a4c:	08007a7b 	.word	0x08007a7b
 8007a50:	08007a99 	.word	0x08007a99
 8007a54:	08007a99 	.word	0x08007a99
 8007a58:	08007a99 	.word	0x08007a99
 8007a5c:	08007a85 	.word	0x08007a85
 8007a60:	08007a99 	.word	0x08007a99
 8007a64:	08007a99 	.word	0x08007a99
 8007a68:	08007a99 	.word	0x08007a99
 8007a6c:	08007a8f 	.word	0x08007a8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a76:	60fb      	str	r3, [r7, #12]

      break;
 8007a78:	e00f      	b.n	8007a9a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a80:	60fb      	str	r3, [r7, #12]

      break;
 8007a82:	e00a      	b.n	8007a9a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8a:	60fb      	str	r3, [r7, #12]

      break;
 8007a8c:	e005      	b.n	8007a9a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a94:	60fb      	str	r3, [r7, #12]

      break;
 8007a96:	e000      	b.n	8007a9a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007a98:	bf00      	nop
  }

  return tmpreg;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a40      	ldr	r2, [pc, #256]	; (8007bf8 <TIM_Base_SetConfig+0x114>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d013      	beq.n	8007b24 <TIM_Base_SetConfig+0x40>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b02:	d00f      	beq.n	8007b24 <TIM_Base_SetConfig+0x40>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a3d      	ldr	r2, [pc, #244]	; (8007bfc <TIM_Base_SetConfig+0x118>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d00b      	beq.n	8007b24 <TIM_Base_SetConfig+0x40>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a3c      	ldr	r2, [pc, #240]	; (8007c00 <TIM_Base_SetConfig+0x11c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d007      	beq.n	8007b24 <TIM_Base_SetConfig+0x40>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a3b      	ldr	r2, [pc, #236]	; (8007c04 <TIM_Base_SetConfig+0x120>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d003      	beq.n	8007b24 <TIM_Base_SetConfig+0x40>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a3a      	ldr	r2, [pc, #232]	; (8007c08 <TIM_Base_SetConfig+0x124>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d108      	bne.n	8007b36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a2f      	ldr	r2, [pc, #188]	; (8007bf8 <TIM_Base_SetConfig+0x114>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d02b      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b44:	d027      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a2c      	ldr	r2, [pc, #176]	; (8007bfc <TIM_Base_SetConfig+0x118>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d023      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a2b      	ldr	r2, [pc, #172]	; (8007c00 <TIM_Base_SetConfig+0x11c>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d01f      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a2a      	ldr	r2, [pc, #168]	; (8007c04 <TIM_Base_SetConfig+0x120>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d01b      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a29      	ldr	r2, [pc, #164]	; (8007c08 <TIM_Base_SetConfig+0x124>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d017      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a28      	ldr	r2, [pc, #160]	; (8007c0c <TIM_Base_SetConfig+0x128>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d013      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a27      	ldr	r2, [pc, #156]	; (8007c10 <TIM_Base_SetConfig+0x12c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d00f      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a26      	ldr	r2, [pc, #152]	; (8007c14 <TIM_Base_SetConfig+0x130>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d00b      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a25      	ldr	r2, [pc, #148]	; (8007c18 <TIM_Base_SetConfig+0x134>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d007      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a24      	ldr	r2, [pc, #144]	; (8007c1c <TIM_Base_SetConfig+0x138>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d003      	beq.n	8007b96 <TIM_Base_SetConfig+0xb2>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a23      	ldr	r2, [pc, #140]	; (8007c20 <TIM_Base_SetConfig+0x13c>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d108      	bne.n	8007ba8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	689a      	ldr	r2, [r3, #8]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a0a      	ldr	r2, [pc, #40]	; (8007bf8 <TIM_Base_SetConfig+0x114>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d003      	beq.n	8007bdc <TIM_Base_SetConfig+0xf8>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a0c      	ldr	r2, [pc, #48]	; (8007c08 <TIM_Base_SetConfig+0x124>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d103      	bne.n	8007be4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	691a      	ldr	r2, [r3, #16]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	615a      	str	r2, [r3, #20]
}
 8007bea:	bf00      	nop
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	40010000 	.word	0x40010000
 8007bfc:	40000400 	.word	0x40000400
 8007c00:	40000800 	.word	0x40000800
 8007c04:	40000c00 	.word	0x40000c00
 8007c08:	40010400 	.word	0x40010400
 8007c0c:	40014000 	.word	0x40014000
 8007c10:	40014400 	.word	0x40014400
 8007c14:	40014800 	.word	0x40014800
 8007c18:	40001800 	.word	0x40001800
 8007c1c:	40001c00 	.word	0x40001c00
 8007c20:	40002000 	.word	0x40002000

08007c24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b087      	sub	sp, #28
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	f023 0201 	bic.w	r2, r3, #1
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	4b2b      	ldr	r3, [pc, #172]	; (8007cfc <TIM_OC1_SetConfig+0xd8>)
 8007c50:	4013      	ands	r3, r2
 8007c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f023 0303 	bic.w	r3, r3, #3
 8007c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f023 0302 	bic.w	r3, r3, #2
 8007c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a21      	ldr	r2, [pc, #132]	; (8007d00 <TIM_OC1_SetConfig+0xdc>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d003      	beq.n	8007c88 <TIM_OC1_SetConfig+0x64>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a20      	ldr	r2, [pc, #128]	; (8007d04 <TIM_OC1_SetConfig+0xe0>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d10c      	bne.n	8007ca2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	f023 0308 	bic.w	r3, r3, #8
 8007c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f023 0304 	bic.w	r3, r3, #4
 8007ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a16      	ldr	r2, [pc, #88]	; (8007d00 <TIM_OC1_SetConfig+0xdc>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d003      	beq.n	8007cb2 <TIM_OC1_SetConfig+0x8e>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a15      	ldr	r2, [pc, #84]	; (8007d04 <TIM_OC1_SetConfig+0xe0>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d111      	bne.n	8007cd6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	693a      	ldr	r2, [r7, #16]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	685a      	ldr	r2, [r3, #4]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	621a      	str	r2, [r3, #32]
}
 8007cf0:	bf00      	nop
 8007cf2:	371c      	adds	r7, #28
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	fffeff8f 	.word	0xfffeff8f
 8007d00:	40010000 	.word	0x40010000
 8007d04:	40010400 	.word	0x40010400

08007d08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	f023 0210 	bic.w	r2, r3, #16
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	4b2e      	ldr	r3, [pc, #184]	; (8007dec <TIM_OC2_SetConfig+0xe4>)
 8007d34:	4013      	ands	r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	021b      	lsls	r3, r3, #8
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f023 0320 	bic.w	r3, r3, #32
 8007d52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	011b      	lsls	r3, r3, #4
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a23      	ldr	r2, [pc, #140]	; (8007df0 <TIM_OC2_SetConfig+0xe8>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d003      	beq.n	8007d70 <TIM_OC2_SetConfig+0x68>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a22      	ldr	r2, [pc, #136]	; (8007df4 <TIM_OC2_SetConfig+0xec>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d10d      	bne.n	8007d8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	011b      	lsls	r3, r3, #4
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a18      	ldr	r2, [pc, #96]	; (8007df0 <TIM_OC2_SetConfig+0xe8>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d003      	beq.n	8007d9c <TIM_OC2_SetConfig+0x94>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a17      	ldr	r2, [pc, #92]	; (8007df4 <TIM_OC2_SetConfig+0xec>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d113      	bne.n	8007dc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007da2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007daa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	621a      	str	r2, [r3, #32]
}
 8007dde:	bf00      	nop
 8007de0:	371c      	adds	r7, #28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	feff8fff 	.word	0xfeff8fff
 8007df0:	40010000 	.word	0x40010000
 8007df4:	40010400 	.word	0x40010400

08007df8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	69db      	ldr	r3, [r3, #28]
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	4b2d      	ldr	r3, [pc, #180]	; (8007ed8 <TIM_OC3_SetConfig+0xe0>)
 8007e24:	4013      	ands	r3, r2
 8007e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f023 0303 	bic.w	r3, r3, #3
 8007e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	021b      	lsls	r3, r3, #8
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a22      	ldr	r2, [pc, #136]	; (8007edc <TIM_OC3_SetConfig+0xe4>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d003      	beq.n	8007e5e <TIM_OC3_SetConfig+0x66>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a21      	ldr	r2, [pc, #132]	; (8007ee0 <TIM_OC3_SetConfig+0xe8>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d10d      	bne.n	8007e7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	021b      	lsls	r3, r3, #8
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a17      	ldr	r2, [pc, #92]	; (8007edc <TIM_OC3_SetConfig+0xe4>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d003      	beq.n	8007e8a <TIM_OC3_SetConfig+0x92>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a16      	ldr	r2, [pc, #88]	; (8007ee0 <TIM_OC3_SetConfig+0xe8>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d113      	bne.n	8007eb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	011b      	lsls	r3, r3, #4
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	011b      	lsls	r3, r3, #4
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	621a      	str	r2, [r3, #32]
}
 8007ecc:	bf00      	nop
 8007ece:	371c      	adds	r7, #28
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	fffeff8f 	.word	0xfffeff8f
 8007edc:	40010000 	.word	0x40010000
 8007ee0:	40010400 	.word	0x40010400

08007ee4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	4b1e      	ldr	r3, [pc, #120]	; (8007f88 <TIM_OC4_SetConfig+0xa4>)
 8007f10:	4013      	ands	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	021b      	lsls	r3, r3, #8
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	031b      	lsls	r3, r3, #12
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a13      	ldr	r2, [pc, #76]	; (8007f8c <TIM_OC4_SetConfig+0xa8>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d003      	beq.n	8007f4c <TIM_OC4_SetConfig+0x68>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a12      	ldr	r2, [pc, #72]	; (8007f90 <TIM_OC4_SetConfig+0xac>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d109      	bne.n	8007f60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	019b      	lsls	r3, r3, #6
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	621a      	str	r2, [r3, #32]
}
 8007f7a:	bf00      	nop
 8007f7c:	371c      	adds	r7, #28
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	feff8fff 	.word	0xfeff8fff
 8007f8c:	40010000 	.word	0x40010000
 8007f90:	40010400 	.word	0x40010400

08007f94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	4b1b      	ldr	r3, [pc, #108]	; (800802c <TIM_OC5_SetConfig+0x98>)
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007fd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	041b      	lsls	r3, r3, #16
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a12      	ldr	r2, [pc, #72]	; (8008030 <TIM_OC5_SetConfig+0x9c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d003      	beq.n	8007ff2 <TIM_OC5_SetConfig+0x5e>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a11      	ldr	r2, [pc, #68]	; (8008034 <TIM_OC5_SetConfig+0xa0>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d109      	bne.n	8008006 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	021b      	lsls	r3, r3, #8
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	4313      	orrs	r3, r2
 8008004:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	621a      	str	r2, [r3, #32]
}
 8008020:	bf00      	nop
 8008022:	371c      	adds	r7, #28
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	fffeff8f 	.word	0xfffeff8f
 8008030:	40010000 	.word	0x40010000
 8008034:	40010400 	.word	0x40010400

08008038 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008038:	b480      	push	{r7}
 800803a:	b087      	sub	sp, #28
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	4b1c      	ldr	r3, [pc, #112]	; (80080d4 <TIM_OC6_SetConfig+0x9c>)
 8008064:	4013      	ands	r3, r2
 8008066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	021b      	lsls	r3, r3, #8
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	4313      	orrs	r3, r2
 8008072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800807a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	051b      	lsls	r3, r3, #20
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	4313      	orrs	r3, r2
 8008086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a13      	ldr	r2, [pc, #76]	; (80080d8 <TIM_OC6_SetConfig+0xa0>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d003      	beq.n	8008098 <TIM_OC6_SetConfig+0x60>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a12      	ldr	r2, [pc, #72]	; (80080dc <TIM_OC6_SetConfig+0xa4>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d109      	bne.n	80080ac <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800809e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	029b      	lsls	r3, r3, #10
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	621a      	str	r2, [r3, #32]
}
 80080c6:	bf00      	nop
 80080c8:	371c      	adds	r7, #28
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	feff8fff 	.word	0xfeff8fff
 80080d8:	40010000 	.word	0x40010000
 80080dc:	40010400 	.word	0x40010400

080080e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b087      	sub	sp, #28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
 80080ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	f023 0201 	bic.w	r2, r3, #1
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6a1b      	ldr	r3, [r3, #32]
 8008104:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	4a28      	ldr	r2, [pc, #160]	; (80081ac <TIM_TI1_SetConfig+0xcc>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d01b      	beq.n	8008146 <TIM_TI1_SetConfig+0x66>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008114:	d017      	beq.n	8008146 <TIM_TI1_SetConfig+0x66>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	4a25      	ldr	r2, [pc, #148]	; (80081b0 <TIM_TI1_SetConfig+0xd0>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d013      	beq.n	8008146 <TIM_TI1_SetConfig+0x66>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	4a24      	ldr	r2, [pc, #144]	; (80081b4 <TIM_TI1_SetConfig+0xd4>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d00f      	beq.n	8008146 <TIM_TI1_SetConfig+0x66>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	4a23      	ldr	r2, [pc, #140]	; (80081b8 <TIM_TI1_SetConfig+0xd8>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d00b      	beq.n	8008146 <TIM_TI1_SetConfig+0x66>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	4a22      	ldr	r2, [pc, #136]	; (80081bc <TIM_TI1_SetConfig+0xdc>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d007      	beq.n	8008146 <TIM_TI1_SetConfig+0x66>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	4a21      	ldr	r2, [pc, #132]	; (80081c0 <TIM_TI1_SetConfig+0xe0>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d003      	beq.n	8008146 <TIM_TI1_SetConfig+0x66>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	4a20      	ldr	r2, [pc, #128]	; (80081c4 <TIM_TI1_SetConfig+0xe4>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d101      	bne.n	800814a <TIM_TI1_SetConfig+0x6a>
 8008146:	2301      	movs	r3, #1
 8008148:	e000      	b.n	800814c <TIM_TI1_SetConfig+0x6c>
 800814a:	2300      	movs	r3, #0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d008      	beq.n	8008162 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	f023 0303 	bic.w	r3, r3, #3
 8008156:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4313      	orrs	r3, r2
 800815e:	617b      	str	r3, [r7, #20]
 8008160:	e003      	b.n	800816a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f043 0301 	orr.w	r3, r3, #1
 8008168:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008170:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	011b      	lsls	r3, r3, #4
 8008176:	b2db      	uxtb	r3, r3
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	4313      	orrs	r3, r2
 800817c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	f023 030a 	bic.w	r3, r3, #10
 8008184:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	f003 030a 	and.w	r3, r3, #10
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	4313      	orrs	r3, r2
 8008190:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	621a      	str	r2, [r3, #32]
}
 800819e:	bf00      	nop
 80081a0:	371c      	adds	r7, #28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	40010000 	.word	0x40010000
 80081b0:	40000400 	.word	0x40000400
 80081b4:	40000800 	.word	0x40000800
 80081b8:	40000c00 	.word	0x40000c00
 80081bc:	40010400 	.word	0x40010400
 80081c0:	40014000 	.word	0x40014000
 80081c4:	40001800 	.word	0x40001800

080081c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	f023 0201 	bic.w	r2, r3, #1
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	011b      	lsls	r3, r3, #4
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f023 030a 	bic.w	r3, r3, #10
 8008204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	4313      	orrs	r3, r2
 800820c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	621a      	str	r2, [r3, #32]
}
 800821a:	bf00      	nop
 800821c:	371c      	adds	r7, #28
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008226:	b480      	push	{r7}
 8008228:	b087      	sub	sp, #28
 800822a:	af00      	add	r7, sp, #0
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	607a      	str	r2, [r7, #4]
 8008232:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6a1b      	ldr	r3, [r3, #32]
 8008238:	f023 0210 	bic.w	r2, r3, #16
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008252:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	021b      	lsls	r3, r3, #8
 8008258:	697a      	ldr	r2, [r7, #20]
 800825a:	4313      	orrs	r3, r2
 800825c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008264:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	031b      	lsls	r3, r3, #12
 800826a:	b29b      	uxth	r3, r3
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	4313      	orrs	r3, r2
 8008270:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008278:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	011b      	lsls	r3, r3, #4
 800827e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	4313      	orrs	r3, r2
 8008286:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	621a      	str	r2, [r3, #32]
}
 8008294:	bf00      	nop
 8008296:	371c      	adds	r7, #28
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b087      	sub	sp, #28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6a1b      	ldr	r3, [r3, #32]
 80082b0:	f023 0210 	bic.w	r2, r3, #16
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	031b      	lsls	r3, r3, #12
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80082dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	011b      	lsls	r3, r3, #4
 80082e2:	693a      	ldr	r2, [r7, #16]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	621a      	str	r2, [r3, #32]
}
 80082f4:	bf00      	nop
 80082f6:	371c      	adds	r7, #28
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008300:	b480      	push	{r7}
 8008302:	b087      	sub	sp, #28
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
 800830c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	69db      	ldr	r3, [r3, #28]
 800831e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6a1b      	ldr	r3, [r3, #32]
 8008324:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f023 0303 	bic.w	r3, r3, #3
 800832c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4313      	orrs	r3, r2
 8008334:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800833c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	011b      	lsls	r3, r3, #4
 8008342:	b2db      	uxtb	r3, r3
 8008344:	697a      	ldr	r2, [r7, #20]
 8008346:	4313      	orrs	r3, r2
 8008348:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008350:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	021b      	lsls	r3, r3, #8
 8008356:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800835a:	693a      	ldr	r2, [r7, #16]
 800835c:	4313      	orrs	r3, r2
 800835e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	621a      	str	r2, [r3, #32]
}
 800836c:	bf00      	nop
 800836e:	371c      	adds	r7, #28
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008378:	b480      	push	{r7}
 800837a:	b087      	sub	sp, #28
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
 8008384:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6a1b      	ldr	r3, [r3, #32]
 800839c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	021b      	lsls	r3, r3, #8
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	031b      	lsls	r3, r3, #12
 80083bc:	b29b      	uxth	r3, r3
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80083ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	031b      	lsls	r3, r3, #12
 80083d0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	697a      	ldr	r2, [r7, #20]
 80083de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	621a      	str	r2, [r3, #32]
}
 80083e6:	bf00      	nop
 80083e8:	371c      	adds	r7, #28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b085      	sub	sp, #20
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008408:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	4313      	orrs	r3, r2
 8008410:	f043 0307 	orr.w	r3, r3, #7
 8008414:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	609a      	str	r2, [r3, #8]
}
 800841c:	bf00      	nop
 800841e:	3714      	adds	r7, #20
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008428:	b480      	push	{r7}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008442:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	021a      	lsls	r2, r3, #8
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	431a      	orrs	r2, r3
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	4313      	orrs	r3, r2
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	4313      	orrs	r3, r2
 8008454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	609a      	str	r2, [r3, #8]
}
 800845c:	bf00      	nop
 800845e:	371c      	adds	r7, #28
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008468:	b480      	push	{r7}
 800846a:	b087      	sub	sp, #28
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	f003 031f 	and.w	r3, r3, #31
 800847a:	2201      	movs	r2, #1
 800847c:	fa02 f303 	lsl.w	r3, r2, r3
 8008480:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6a1a      	ldr	r2, [r3, #32]
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	43db      	mvns	r3, r3
 800848a:	401a      	ands	r2, r3
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6a1a      	ldr	r2, [r3, #32]
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	f003 031f 	and.w	r3, r3, #31
 800849a:	6879      	ldr	r1, [r7, #4]
 800849c:	fa01 f303 	lsl.w	r3, r1, r3
 80084a0:	431a      	orrs	r2, r3
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	621a      	str	r2, [r3, #32]
}
 80084a6:	bf00      	nop
 80084a8:	371c      	adds	r7, #28
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
	...

080084b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d101      	bne.n	80084cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084c8:	2302      	movs	r3, #2
 80084ca:	e06d      	b.n	80085a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2202      	movs	r2, #2
 80084d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a30      	ldr	r2, [pc, #192]	; (80085b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d004      	beq.n	8008500 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a2f      	ldr	r2, [pc, #188]	; (80085b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d108      	bne.n	8008512 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008506:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	4313      	orrs	r3, r2
 8008510:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008518:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	4313      	orrs	r3, r2
 8008522:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a20      	ldr	r2, [pc, #128]	; (80085b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d022      	beq.n	800857c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800853e:	d01d      	beq.n	800857c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a1d      	ldr	r2, [pc, #116]	; (80085bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d018      	beq.n	800857c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a1c      	ldr	r2, [pc, #112]	; (80085c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d013      	beq.n	800857c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a1a      	ldr	r2, [pc, #104]	; (80085c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d00e      	beq.n	800857c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a15      	ldr	r2, [pc, #84]	; (80085b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d009      	beq.n	800857c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a16      	ldr	r2, [pc, #88]	; (80085c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d004      	beq.n	800857c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a15      	ldr	r2, [pc, #84]	; (80085cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d10c      	bne.n	8008596 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008582:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	4313      	orrs	r3, r2
 800858c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	40010000 	.word	0x40010000
 80085b8:	40010400 	.word	0x40010400
 80085bc:	40000400 	.word	0x40000400
 80085c0:	40000800 	.word	0x40000800
 80085c4:	40000c00 	.word	0x40000c00
 80085c8:	40014000 	.word	0x40014000
 80085cc:	40001800 	.word	0x40001800

080085d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e040      	b.n	80086a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008622:	2b00      	cmp	r3, #0
 8008624:	d106      	bne.n	8008634 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7fa fdde 	bl	80031f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2224      	movs	r2, #36	; 0x24
 8008638:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f022 0201 	bic.w	r2, r2, #1
 8008648:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fbe8 	bl	8008e20 <UART_SetConfig>
 8008650:	4603      	mov	r3, r0
 8008652:	2b01      	cmp	r3, #1
 8008654:	d101      	bne.n	800865a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e022      	b.n	80086a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865e:	2b00      	cmp	r3, #0
 8008660:	d002      	beq.n	8008668 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fe3e 	bl	80092e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008676:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	689a      	ldr	r2, [r3, #8]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008686:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f042 0201 	orr.w	r2, r2, #1
 8008696:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fec5 	bl	8009428 <UART_CheckIdleState>
 800869e:	4603      	mov	r3, r0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b08b      	sub	sp, #44	; 0x2c
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	4613      	mov	r3, r2
 80086b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086ba:	2b20      	cmp	r3, #32
 80086bc:	d156      	bne.n	800876c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d002      	beq.n	80086ca <HAL_UART_Transmit_IT+0x22>
 80086c4:	88fb      	ldrh	r3, [r7, #6]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d101      	bne.n	80086ce <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e04f      	b.n	800876e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d101      	bne.n	80086dc <HAL_UART_Transmit_IT+0x34>
 80086d8:	2302      	movs	r3, #2
 80086da:	e048      	b.n	800876e <HAL_UART_Transmit_IT+0xc6>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	88fa      	ldrh	r2, [r7, #6]
 80086ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	88fa      	ldrh	r2, [r7, #6]
 80086f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2221      	movs	r2, #33	; 0x21
 800870c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008716:	d107      	bne.n	8008728 <HAL_UART_Transmit_IT+0x80>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d103      	bne.n	8008728 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	4a16      	ldr	r2, [pc, #88]	; (800877c <HAL_UART_Transmit_IT+0xd4>)
 8008724:	669a      	str	r2, [r3, #104]	; 0x68
 8008726:	e002      	b.n	800872e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	4a15      	ldr	r2, [pc, #84]	; (8008780 <HAL_UART_Transmit_IT+0xd8>)
 800872c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	e853 3f00 	ldrex	r3, [r3]
 8008742:	613b      	str	r3, [r7, #16]
   return(result);
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800874a:	627b      	str	r3, [r7, #36]	; 0x24
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	461a      	mov	r2, r3
 8008752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008754:	623b      	str	r3, [r7, #32]
 8008756:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008758:	69f9      	ldr	r1, [r7, #28]
 800875a:	6a3a      	ldr	r2, [r7, #32]
 800875c:	e841 2300 	strex	r3, r2, [r1]
 8008760:	61bb      	str	r3, [r7, #24]
   return(result);
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1e6      	bne.n	8008736 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	e000      	b.n	800876e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800876c:	2302      	movs	r3, #2
  }
}
 800876e:	4618      	mov	r0, r3
 8008770:	372c      	adds	r7, #44	; 0x2c
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	08009981 	.word	0x08009981
 8008780:	080098cb 	.word	0x080098cb

08008784 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b08a      	sub	sp, #40	; 0x28
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	4613      	mov	r3, r2
 8008790:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008796:	2b20      	cmp	r3, #32
 8008798:	d13d      	bne.n	8008816 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d002      	beq.n	80087a6 <HAL_UART_Receive_IT+0x22>
 80087a0:	88fb      	ldrh	r3, [r7, #6]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e036      	b.n	8008818 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d101      	bne.n	80087b8 <HAL_UART_Receive_IT+0x34>
 80087b4:	2302      	movs	r3, #2
 80087b6:	e02f      	b.n	8008818 <HAL_UART_Receive_IT+0x94>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d018      	beq.n	8008806 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	e853 3f00 	ldrex	r3, [r3]
 80087e0:	613b      	str	r3, [r7, #16]
   return(result);
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80087e8:	627b      	str	r3, [r7, #36]	; 0x24
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	461a      	mov	r2, r3
 80087f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f2:	623b      	str	r3, [r7, #32]
 80087f4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f6:	69f9      	ldr	r1, [r7, #28]
 80087f8:	6a3a      	ldr	r2, [r7, #32]
 80087fa:	e841 2300 	strex	r3, r2, [r1]
 80087fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1e6      	bne.n	80087d4 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008806:	88fb      	ldrh	r3, [r7, #6]
 8008808:	461a      	mov	r2, r3
 800880a:	68b9      	ldr	r1, [r7, #8]
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f000 ff19 	bl	8009644 <UART_Start_Receive_IT>
 8008812:	4603      	mov	r3, r0
 8008814:	e000      	b.n	8008818 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008816:	2302      	movs	r3, #2
  }
}
 8008818:	4618      	mov	r0, r3
 800881a:	3728      	adds	r7, #40	; 0x28
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b0ba      	sub	sp, #232	; 0xe8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	69db      	ldr	r3, [r3, #28]
 800882e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008846:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800884a:	f640 030f 	movw	r3, #2063	; 0x80f
 800884e:	4013      	ands	r3, r2
 8008850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008854:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008858:	2b00      	cmp	r3, #0
 800885a:	d115      	bne.n	8008888 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800885c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008860:	f003 0320 	and.w	r3, r3, #32
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00f      	beq.n	8008888 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800886c:	f003 0320 	and.w	r3, r3, #32
 8008870:	2b00      	cmp	r3, #0
 8008872:	d009      	beq.n	8008888 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008878:	2b00      	cmp	r3, #0
 800887a:	f000 82a4 	beq.w	8008dc6 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	4798      	blx	r3
      }
      return;
 8008886:	e29e      	b.n	8008dc6 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008888:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800888c:	2b00      	cmp	r3, #0
 800888e:	f000 8117 	beq.w	8008ac0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	2b00      	cmp	r3, #0
 800889c:	d106      	bne.n	80088ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800889e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80088a2:	4b85      	ldr	r3, [pc, #532]	; (8008ab8 <HAL_UART_IRQHandler+0x298>)
 80088a4:	4013      	ands	r3, r2
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f000 810a 	beq.w	8008ac0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80088ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088b0:	f003 0301 	and.w	r3, r3, #1
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d011      	beq.n	80088dc <HAL_UART_IRQHandler+0xbc>
 80088b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00b      	beq.n	80088dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2201      	movs	r2, #1
 80088ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088d2:	f043 0201 	orr.w	r2, r3, #1
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088e0:	f003 0302 	and.w	r3, r3, #2
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d011      	beq.n	800890c <HAL_UART_IRQHandler+0xec>
 80088e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088ec:	f003 0301 	and.w	r3, r3, #1
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00b      	beq.n	800890c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2202      	movs	r2, #2
 80088fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008902:	f043 0204 	orr.w	r2, r3, #4
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800890c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008910:	f003 0304 	and.w	r3, r3, #4
 8008914:	2b00      	cmp	r3, #0
 8008916:	d011      	beq.n	800893c <HAL_UART_IRQHandler+0x11c>
 8008918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800891c:	f003 0301 	and.w	r3, r3, #1
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00b      	beq.n	800893c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2204      	movs	r2, #4
 800892a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008932:	f043 0202 	orr.w	r2, r3, #2
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800893c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008940:	f003 0308 	and.w	r3, r3, #8
 8008944:	2b00      	cmp	r3, #0
 8008946:	d017      	beq.n	8008978 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800894c:	f003 0320 	and.w	r3, r3, #32
 8008950:	2b00      	cmp	r3, #0
 8008952:	d105      	bne.n	8008960 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008958:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00b      	beq.n	8008978 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2208      	movs	r2, #8
 8008966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800896e:	f043 0208 	orr.w	r2, r3, #8
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800897c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008980:	2b00      	cmp	r3, #0
 8008982:	d012      	beq.n	80089aa <HAL_UART_IRQHandler+0x18a>
 8008984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008988:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00c      	beq.n	80089aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008998:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089a0:	f043 0220 	orr.w	r2, r3, #32
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f000 820a 	beq.w	8008dca <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80089b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089ba:	f003 0320 	and.w	r3, r3, #32
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00d      	beq.n	80089de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80089c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089c6:	f003 0320 	and.w	r3, r3, #32
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d007      	beq.n	80089de <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f2:	2b40      	cmp	r3, #64	; 0x40
 80089f4:	d005      	beq.n	8008a02 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80089f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80089fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d04f      	beq.n	8008aa2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fee8 	bl	80097d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a12:	2b40      	cmp	r3, #64	; 0x40
 8008a14:	d141      	bne.n	8008a9a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3308      	adds	r3, #8
 8008a1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a24:	e853 3f00 	ldrex	r3, [r3]
 8008a28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	3308      	adds	r3, #8
 8008a3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008a42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008a46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008a4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008a52:	e841 2300 	strex	r3, r2, [r1]
 8008a56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008a5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1d9      	bne.n	8008a16 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d013      	beq.n	8008a92 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a6e:	4a13      	ldr	r2, [pc, #76]	; (8008abc <HAL_UART_IRQHandler+0x29c>)
 8008a70:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fb f89c 	bl	8003bb4 <HAL_DMA_Abort_IT>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d017      	beq.n	8008ab2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a90:	e00f      	b.n	8008ab2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f9a4 	bl	8008de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a98:	e00b      	b.n	8008ab2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f9a0 	bl	8008de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aa0:	e007      	b.n	8008ab2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f99c 	bl	8008de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008ab0:	e18b      	b.n	8008dca <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ab2:	bf00      	nop
    return;
 8008ab4:	e189      	b.n	8008dca <HAL_UART_IRQHandler+0x5aa>
 8008ab6:	bf00      	nop
 8008ab8:	04000120 	.word	0x04000120
 8008abc:	0800989f 	.word	0x0800989f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	f040 8144 	bne.w	8008d52 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ace:	f003 0310 	and.w	r3, r3, #16
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 813d 	beq.w	8008d52 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008adc:	f003 0310 	and.w	r3, r3, #16
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 8136 	beq.w	8008d52 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2210      	movs	r2, #16
 8008aec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af8:	2b40      	cmp	r3, #64	; 0x40
 8008afa:	f040 80b2 	bne.w	8008c62 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f000 815d 	beq.w	8008dce <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	f080 8155 	bcs.w	8008dce <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b32:	69db      	ldr	r3, [r3, #28]
 8008b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b38:	f000 8085 	beq.w	8008c46 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b48:	e853 3f00 	ldrex	r3, [r3]
 8008b4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	461a      	mov	r2, r3
 8008b62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008b6a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008b72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008b76:	e841 2300 	strex	r3, r2, [r1]
 8008b7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1da      	bne.n	8008b3c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	3308      	adds	r3, #8
 8008b8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b90:	e853 3f00 	ldrex	r3, [r3]
 8008b94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b98:	f023 0301 	bic.w	r3, r3, #1
 8008b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	3308      	adds	r3, #8
 8008ba6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008baa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008bae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008bb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008bbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e1      	bne.n	8008b86 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3308      	adds	r3, #8
 8008bc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bcc:	e853 3f00 	ldrex	r3, [r3]
 8008bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	3308      	adds	r3, #8
 8008be2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008be6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008be8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008bec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008bee:	e841 2300 	strex	r3, r2, [r1]
 8008bf2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1e3      	bne.n	8008bc2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c0e:	e853 3f00 	ldrex	r3, [r3]
 8008c12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c16:	f023 0310 	bic.w	r3, r3, #16
 8008c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	461a      	mov	r2, r3
 8008c24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c28:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c2a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e4      	bne.n	8008c06 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7fa ff47 	bl	8003ad4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f8ca 	bl	8008df4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c60:	e0b5      	b.n	8008dce <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f000 80a7 	beq.w	8008dd2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8008c84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f000 80a2 	beq.w	8008dd2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c96:	e853 3f00 	ldrex	r3, [r3]
 8008c9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ca2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	461a      	mov	r2, r3
 8008cac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008cb0:	647b      	str	r3, [r7, #68]	; 0x44
 8008cb2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008cb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cb8:	e841 2300 	strex	r3, r2, [r1]
 8008cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1e4      	bne.n	8008c8e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3308      	adds	r3, #8
 8008cca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	e853 3f00 	ldrex	r3, [r3]
 8008cd2:	623b      	str	r3, [r7, #32]
   return(result);
 8008cd4:	6a3b      	ldr	r3, [r7, #32]
 8008cd6:	f023 0301 	bic.w	r3, r3, #1
 8008cda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3308      	adds	r3, #8
 8008ce4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008ce8:	633a      	str	r2, [r7, #48]	; 0x30
 8008cea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cf0:	e841 2300 	strex	r3, r2, [r1]
 8008cf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1e3      	bne.n	8008cc4 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2220      	movs	r2, #32
 8008d00:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	e853 3f00 	ldrex	r3, [r3]
 8008d1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f023 0310 	bic.w	r3, r3, #16
 8008d22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008d30:	61fb      	str	r3, [r7, #28]
 8008d32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d34:	69b9      	ldr	r1, [r7, #24]
 8008d36:	69fa      	ldr	r2, [r7, #28]
 8008d38:	e841 2300 	strex	r3, r2, [r1]
 8008d3c:	617b      	str	r3, [r7, #20]
   return(result);
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1e4      	bne.n	8008d0e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d48:	4619      	mov	r1, r3
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f852 	bl	8008df4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d50:	e03f      	b.n	8008dd2 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00e      	beq.n	8008d7c <HAL_UART_IRQHandler+0x55c>
 8008d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d008      	beq.n	8008d7c <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008d72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f849 	bl	8008e0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d7a:	e02d      	b.n	8008dd8 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00e      	beq.n	8008da6 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d008      	beq.n	8008da6 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d01c      	beq.n	8008dd6 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	4798      	blx	r3
    }
    return;
 8008da4:	e017      	b.n	8008dd6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d012      	beq.n	8008dd8 <HAL_UART_IRQHandler+0x5b8>
 8008db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00c      	beq.n	8008dd8 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fe3e 	bl	8009a40 <UART_EndTransmit_IT>
    return;
 8008dc4:	e008      	b.n	8008dd8 <HAL_UART_IRQHandler+0x5b8>
      return;
 8008dc6:	bf00      	nop
 8008dc8:	e006      	b.n	8008dd8 <HAL_UART_IRQHandler+0x5b8>
    return;
 8008dca:	bf00      	nop
 8008dcc:	e004      	b.n	8008dd8 <HAL_UART_IRQHandler+0x5b8>
      return;
 8008dce:	bf00      	nop
 8008dd0:	e002      	b.n	8008dd8 <HAL_UART_IRQHandler+0x5b8>
      return;
 8008dd2:	bf00      	nop
 8008dd4:	e000      	b.n	8008dd8 <HAL_UART_IRQHandler+0x5b8>
    return;
 8008dd6:	bf00      	nop
  }

}
 8008dd8:	37e8      	adds	r7, #232	; 0xe8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop

08008de0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b088      	sub	sp, #32
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	689a      	ldr	r2, [r3, #8]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	431a      	orrs	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	431a      	orrs	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	69db      	ldr	r3, [r3, #28]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	4ba7      	ldr	r3, [pc, #668]	; (80090e8 <UART_SetConfig+0x2c8>)
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	6812      	ldr	r2, [r2, #0]
 8008e52:	6979      	ldr	r1, [r7, #20]
 8008e54:	430b      	orrs	r3, r1
 8008e56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	68da      	ldr	r2, [r3, #12]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	430a      	orrs	r2, r1
 8008e6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a1b      	ldr	r3, [r3, #32]
 8008e78:	697a      	ldr	r2, [r7, #20]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	430a      	orrs	r2, r1
 8008e90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a95      	ldr	r2, [pc, #596]	; (80090ec <UART_SetConfig+0x2cc>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d120      	bne.n	8008ede <UART_SetConfig+0xbe>
 8008e9c:	4b94      	ldr	r3, [pc, #592]	; (80090f0 <UART_SetConfig+0x2d0>)
 8008e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea2:	f003 0303 	and.w	r3, r3, #3
 8008ea6:	2b03      	cmp	r3, #3
 8008ea8:	d816      	bhi.n	8008ed8 <UART_SetConfig+0xb8>
 8008eaa:	a201      	add	r2, pc, #4	; (adr r2, 8008eb0 <UART_SetConfig+0x90>)
 8008eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb0:	08008ec1 	.word	0x08008ec1
 8008eb4:	08008ecd 	.word	0x08008ecd
 8008eb8:	08008ec7 	.word	0x08008ec7
 8008ebc:	08008ed3 	.word	0x08008ed3
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	77fb      	strb	r3, [r7, #31]
 8008ec4:	e14f      	b.n	8009166 <UART_SetConfig+0x346>
 8008ec6:	2302      	movs	r3, #2
 8008ec8:	77fb      	strb	r3, [r7, #31]
 8008eca:	e14c      	b.n	8009166 <UART_SetConfig+0x346>
 8008ecc:	2304      	movs	r3, #4
 8008ece:	77fb      	strb	r3, [r7, #31]
 8008ed0:	e149      	b.n	8009166 <UART_SetConfig+0x346>
 8008ed2:	2308      	movs	r3, #8
 8008ed4:	77fb      	strb	r3, [r7, #31]
 8008ed6:	e146      	b.n	8009166 <UART_SetConfig+0x346>
 8008ed8:	2310      	movs	r3, #16
 8008eda:	77fb      	strb	r3, [r7, #31]
 8008edc:	e143      	b.n	8009166 <UART_SetConfig+0x346>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a84      	ldr	r2, [pc, #528]	; (80090f4 <UART_SetConfig+0x2d4>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d132      	bne.n	8008f4e <UART_SetConfig+0x12e>
 8008ee8:	4b81      	ldr	r3, [pc, #516]	; (80090f0 <UART_SetConfig+0x2d0>)
 8008eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eee:	f003 030c 	and.w	r3, r3, #12
 8008ef2:	2b0c      	cmp	r3, #12
 8008ef4:	d828      	bhi.n	8008f48 <UART_SetConfig+0x128>
 8008ef6:	a201      	add	r2, pc, #4	; (adr r2, 8008efc <UART_SetConfig+0xdc>)
 8008ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efc:	08008f31 	.word	0x08008f31
 8008f00:	08008f49 	.word	0x08008f49
 8008f04:	08008f49 	.word	0x08008f49
 8008f08:	08008f49 	.word	0x08008f49
 8008f0c:	08008f3d 	.word	0x08008f3d
 8008f10:	08008f49 	.word	0x08008f49
 8008f14:	08008f49 	.word	0x08008f49
 8008f18:	08008f49 	.word	0x08008f49
 8008f1c:	08008f37 	.word	0x08008f37
 8008f20:	08008f49 	.word	0x08008f49
 8008f24:	08008f49 	.word	0x08008f49
 8008f28:	08008f49 	.word	0x08008f49
 8008f2c:	08008f43 	.word	0x08008f43
 8008f30:	2300      	movs	r3, #0
 8008f32:	77fb      	strb	r3, [r7, #31]
 8008f34:	e117      	b.n	8009166 <UART_SetConfig+0x346>
 8008f36:	2302      	movs	r3, #2
 8008f38:	77fb      	strb	r3, [r7, #31]
 8008f3a:	e114      	b.n	8009166 <UART_SetConfig+0x346>
 8008f3c:	2304      	movs	r3, #4
 8008f3e:	77fb      	strb	r3, [r7, #31]
 8008f40:	e111      	b.n	8009166 <UART_SetConfig+0x346>
 8008f42:	2308      	movs	r3, #8
 8008f44:	77fb      	strb	r3, [r7, #31]
 8008f46:	e10e      	b.n	8009166 <UART_SetConfig+0x346>
 8008f48:	2310      	movs	r3, #16
 8008f4a:	77fb      	strb	r3, [r7, #31]
 8008f4c:	e10b      	b.n	8009166 <UART_SetConfig+0x346>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a69      	ldr	r2, [pc, #420]	; (80090f8 <UART_SetConfig+0x2d8>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d120      	bne.n	8008f9a <UART_SetConfig+0x17a>
 8008f58:	4b65      	ldr	r3, [pc, #404]	; (80090f0 <UART_SetConfig+0x2d0>)
 8008f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008f62:	2b30      	cmp	r3, #48	; 0x30
 8008f64:	d013      	beq.n	8008f8e <UART_SetConfig+0x16e>
 8008f66:	2b30      	cmp	r3, #48	; 0x30
 8008f68:	d814      	bhi.n	8008f94 <UART_SetConfig+0x174>
 8008f6a:	2b20      	cmp	r3, #32
 8008f6c:	d009      	beq.n	8008f82 <UART_SetConfig+0x162>
 8008f6e:	2b20      	cmp	r3, #32
 8008f70:	d810      	bhi.n	8008f94 <UART_SetConfig+0x174>
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d002      	beq.n	8008f7c <UART_SetConfig+0x15c>
 8008f76:	2b10      	cmp	r3, #16
 8008f78:	d006      	beq.n	8008f88 <UART_SetConfig+0x168>
 8008f7a:	e00b      	b.n	8008f94 <UART_SetConfig+0x174>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	77fb      	strb	r3, [r7, #31]
 8008f80:	e0f1      	b.n	8009166 <UART_SetConfig+0x346>
 8008f82:	2302      	movs	r3, #2
 8008f84:	77fb      	strb	r3, [r7, #31]
 8008f86:	e0ee      	b.n	8009166 <UART_SetConfig+0x346>
 8008f88:	2304      	movs	r3, #4
 8008f8a:	77fb      	strb	r3, [r7, #31]
 8008f8c:	e0eb      	b.n	8009166 <UART_SetConfig+0x346>
 8008f8e:	2308      	movs	r3, #8
 8008f90:	77fb      	strb	r3, [r7, #31]
 8008f92:	e0e8      	b.n	8009166 <UART_SetConfig+0x346>
 8008f94:	2310      	movs	r3, #16
 8008f96:	77fb      	strb	r3, [r7, #31]
 8008f98:	e0e5      	b.n	8009166 <UART_SetConfig+0x346>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a57      	ldr	r2, [pc, #348]	; (80090fc <UART_SetConfig+0x2dc>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d120      	bne.n	8008fe6 <UART_SetConfig+0x1c6>
 8008fa4:	4b52      	ldr	r3, [pc, #328]	; (80090f0 <UART_SetConfig+0x2d0>)
 8008fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008faa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008fae:	2bc0      	cmp	r3, #192	; 0xc0
 8008fb0:	d013      	beq.n	8008fda <UART_SetConfig+0x1ba>
 8008fb2:	2bc0      	cmp	r3, #192	; 0xc0
 8008fb4:	d814      	bhi.n	8008fe0 <UART_SetConfig+0x1c0>
 8008fb6:	2b80      	cmp	r3, #128	; 0x80
 8008fb8:	d009      	beq.n	8008fce <UART_SetConfig+0x1ae>
 8008fba:	2b80      	cmp	r3, #128	; 0x80
 8008fbc:	d810      	bhi.n	8008fe0 <UART_SetConfig+0x1c0>
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d002      	beq.n	8008fc8 <UART_SetConfig+0x1a8>
 8008fc2:	2b40      	cmp	r3, #64	; 0x40
 8008fc4:	d006      	beq.n	8008fd4 <UART_SetConfig+0x1b4>
 8008fc6:	e00b      	b.n	8008fe0 <UART_SetConfig+0x1c0>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	77fb      	strb	r3, [r7, #31]
 8008fcc:	e0cb      	b.n	8009166 <UART_SetConfig+0x346>
 8008fce:	2302      	movs	r3, #2
 8008fd0:	77fb      	strb	r3, [r7, #31]
 8008fd2:	e0c8      	b.n	8009166 <UART_SetConfig+0x346>
 8008fd4:	2304      	movs	r3, #4
 8008fd6:	77fb      	strb	r3, [r7, #31]
 8008fd8:	e0c5      	b.n	8009166 <UART_SetConfig+0x346>
 8008fda:	2308      	movs	r3, #8
 8008fdc:	77fb      	strb	r3, [r7, #31]
 8008fde:	e0c2      	b.n	8009166 <UART_SetConfig+0x346>
 8008fe0:	2310      	movs	r3, #16
 8008fe2:	77fb      	strb	r3, [r7, #31]
 8008fe4:	e0bf      	b.n	8009166 <UART_SetConfig+0x346>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a45      	ldr	r2, [pc, #276]	; (8009100 <UART_SetConfig+0x2e0>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d125      	bne.n	800903c <UART_SetConfig+0x21c>
 8008ff0:	4b3f      	ldr	r3, [pc, #252]	; (80090f0 <UART_SetConfig+0x2d0>)
 8008ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ffa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ffe:	d017      	beq.n	8009030 <UART_SetConfig+0x210>
 8009000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009004:	d817      	bhi.n	8009036 <UART_SetConfig+0x216>
 8009006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800900a:	d00b      	beq.n	8009024 <UART_SetConfig+0x204>
 800900c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009010:	d811      	bhi.n	8009036 <UART_SetConfig+0x216>
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <UART_SetConfig+0x1fe>
 8009016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800901a:	d006      	beq.n	800902a <UART_SetConfig+0x20a>
 800901c:	e00b      	b.n	8009036 <UART_SetConfig+0x216>
 800901e:	2300      	movs	r3, #0
 8009020:	77fb      	strb	r3, [r7, #31]
 8009022:	e0a0      	b.n	8009166 <UART_SetConfig+0x346>
 8009024:	2302      	movs	r3, #2
 8009026:	77fb      	strb	r3, [r7, #31]
 8009028:	e09d      	b.n	8009166 <UART_SetConfig+0x346>
 800902a:	2304      	movs	r3, #4
 800902c:	77fb      	strb	r3, [r7, #31]
 800902e:	e09a      	b.n	8009166 <UART_SetConfig+0x346>
 8009030:	2308      	movs	r3, #8
 8009032:	77fb      	strb	r3, [r7, #31]
 8009034:	e097      	b.n	8009166 <UART_SetConfig+0x346>
 8009036:	2310      	movs	r3, #16
 8009038:	77fb      	strb	r3, [r7, #31]
 800903a:	e094      	b.n	8009166 <UART_SetConfig+0x346>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a30      	ldr	r2, [pc, #192]	; (8009104 <UART_SetConfig+0x2e4>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d125      	bne.n	8009092 <UART_SetConfig+0x272>
 8009046:	4b2a      	ldr	r3, [pc, #168]	; (80090f0 <UART_SetConfig+0x2d0>)
 8009048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800904c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009050:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009054:	d017      	beq.n	8009086 <UART_SetConfig+0x266>
 8009056:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800905a:	d817      	bhi.n	800908c <UART_SetConfig+0x26c>
 800905c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009060:	d00b      	beq.n	800907a <UART_SetConfig+0x25a>
 8009062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009066:	d811      	bhi.n	800908c <UART_SetConfig+0x26c>
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <UART_SetConfig+0x254>
 800906c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009070:	d006      	beq.n	8009080 <UART_SetConfig+0x260>
 8009072:	e00b      	b.n	800908c <UART_SetConfig+0x26c>
 8009074:	2301      	movs	r3, #1
 8009076:	77fb      	strb	r3, [r7, #31]
 8009078:	e075      	b.n	8009166 <UART_SetConfig+0x346>
 800907a:	2302      	movs	r3, #2
 800907c:	77fb      	strb	r3, [r7, #31]
 800907e:	e072      	b.n	8009166 <UART_SetConfig+0x346>
 8009080:	2304      	movs	r3, #4
 8009082:	77fb      	strb	r3, [r7, #31]
 8009084:	e06f      	b.n	8009166 <UART_SetConfig+0x346>
 8009086:	2308      	movs	r3, #8
 8009088:	77fb      	strb	r3, [r7, #31]
 800908a:	e06c      	b.n	8009166 <UART_SetConfig+0x346>
 800908c:	2310      	movs	r3, #16
 800908e:	77fb      	strb	r3, [r7, #31]
 8009090:	e069      	b.n	8009166 <UART_SetConfig+0x346>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a1c      	ldr	r2, [pc, #112]	; (8009108 <UART_SetConfig+0x2e8>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d137      	bne.n	800910c <UART_SetConfig+0x2ec>
 800909c:	4b14      	ldr	r3, [pc, #80]	; (80090f0 <UART_SetConfig+0x2d0>)
 800909e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090a2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80090a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090aa:	d017      	beq.n	80090dc <UART_SetConfig+0x2bc>
 80090ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090b0:	d817      	bhi.n	80090e2 <UART_SetConfig+0x2c2>
 80090b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090b6:	d00b      	beq.n	80090d0 <UART_SetConfig+0x2b0>
 80090b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090bc:	d811      	bhi.n	80090e2 <UART_SetConfig+0x2c2>
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <UART_SetConfig+0x2aa>
 80090c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090c6:	d006      	beq.n	80090d6 <UART_SetConfig+0x2b6>
 80090c8:	e00b      	b.n	80090e2 <UART_SetConfig+0x2c2>
 80090ca:	2300      	movs	r3, #0
 80090cc:	77fb      	strb	r3, [r7, #31]
 80090ce:	e04a      	b.n	8009166 <UART_SetConfig+0x346>
 80090d0:	2302      	movs	r3, #2
 80090d2:	77fb      	strb	r3, [r7, #31]
 80090d4:	e047      	b.n	8009166 <UART_SetConfig+0x346>
 80090d6:	2304      	movs	r3, #4
 80090d8:	77fb      	strb	r3, [r7, #31]
 80090da:	e044      	b.n	8009166 <UART_SetConfig+0x346>
 80090dc:	2308      	movs	r3, #8
 80090de:	77fb      	strb	r3, [r7, #31]
 80090e0:	e041      	b.n	8009166 <UART_SetConfig+0x346>
 80090e2:	2310      	movs	r3, #16
 80090e4:	77fb      	strb	r3, [r7, #31]
 80090e6:	e03e      	b.n	8009166 <UART_SetConfig+0x346>
 80090e8:	efff69f3 	.word	0xefff69f3
 80090ec:	40011000 	.word	0x40011000
 80090f0:	40023800 	.word	0x40023800
 80090f4:	40004400 	.word	0x40004400
 80090f8:	40004800 	.word	0x40004800
 80090fc:	40004c00 	.word	0x40004c00
 8009100:	40005000 	.word	0x40005000
 8009104:	40011400 	.word	0x40011400
 8009108:	40007800 	.word	0x40007800
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a71      	ldr	r2, [pc, #452]	; (80092d8 <UART_SetConfig+0x4b8>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d125      	bne.n	8009162 <UART_SetConfig+0x342>
 8009116:	4b71      	ldr	r3, [pc, #452]	; (80092dc <UART_SetConfig+0x4bc>)
 8009118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800911c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009120:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009124:	d017      	beq.n	8009156 <UART_SetConfig+0x336>
 8009126:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800912a:	d817      	bhi.n	800915c <UART_SetConfig+0x33c>
 800912c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009130:	d00b      	beq.n	800914a <UART_SetConfig+0x32a>
 8009132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009136:	d811      	bhi.n	800915c <UART_SetConfig+0x33c>
 8009138:	2b00      	cmp	r3, #0
 800913a:	d003      	beq.n	8009144 <UART_SetConfig+0x324>
 800913c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009140:	d006      	beq.n	8009150 <UART_SetConfig+0x330>
 8009142:	e00b      	b.n	800915c <UART_SetConfig+0x33c>
 8009144:	2300      	movs	r3, #0
 8009146:	77fb      	strb	r3, [r7, #31]
 8009148:	e00d      	b.n	8009166 <UART_SetConfig+0x346>
 800914a:	2302      	movs	r3, #2
 800914c:	77fb      	strb	r3, [r7, #31]
 800914e:	e00a      	b.n	8009166 <UART_SetConfig+0x346>
 8009150:	2304      	movs	r3, #4
 8009152:	77fb      	strb	r3, [r7, #31]
 8009154:	e007      	b.n	8009166 <UART_SetConfig+0x346>
 8009156:	2308      	movs	r3, #8
 8009158:	77fb      	strb	r3, [r7, #31]
 800915a:	e004      	b.n	8009166 <UART_SetConfig+0x346>
 800915c:	2310      	movs	r3, #16
 800915e:	77fb      	strb	r3, [r7, #31]
 8009160:	e001      	b.n	8009166 <UART_SetConfig+0x346>
 8009162:	2310      	movs	r3, #16
 8009164:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	69db      	ldr	r3, [r3, #28]
 800916a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800916e:	d15a      	bne.n	8009226 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8009170:	7ffb      	ldrb	r3, [r7, #31]
 8009172:	2b08      	cmp	r3, #8
 8009174:	d827      	bhi.n	80091c6 <UART_SetConfig+0x3a6>
 8009176:	a201      	add	r2, pc, #4	; (adr r2, 800917c <UART_SetConfig+0x35c>)
 8009178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917c:	080091a1 	.word	0x080091a1
 8009180:	080091a9 	.word	0x080091a9
 8009184:	080091b1 	.word	0x080091b1
 8009188:	080091c7 	.word	0x080091c7
 800918c:	080091b7 	.word	0x080091b7
 8009190:	080091c7 	.word	0x080091c7
 8009194:	080091c7 	.word	0x080091c7
 8009198:	080091c7 	.word	0x080091c7
 800919c:	080091bf 	.word	0x080091bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091a0:	f7fb ff92 	bl	80050c8 <HAL_RCC_GetPCLK1Freq>
 80091a4:	61b8      	str	r0, [r7, #24]
        break;
 80091a6:	e013      	b.n	80091d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091a8:	f7fb ffa2 	bl	80050f0 <HAL_RCC_GetPCLK2Freq>
 80091ac:	61b8      	str	r0, [r7, #24]
        break;
 80091ae:	e00f      	b.n	80091d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091b0:	4b4b      	ldr	r3, [pc, #300]	; (80092e0 <UART_SetConfig+0x4c0>)
 80091b2:	61bb      	str	r3, [r7, #24]
        break;
 80091b4:	e00c      	b.n	80091d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091b6:	f7fb fec5 	bl	8004f44 <HAL_RCC_GetSysClockFreq>
 80091ba:	61b8      	str	r0, [r7, #24]
        break;
 80091bc:	e008      	b.n	80091d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091c2:	61bb      	str	r3, [r7, #24]
        break;
 80091c4:	e004      	b.n	80091d0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80091c6:	2300      	movs	r3, #0
 80091c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	77bb      	strb	r3, [r7, #30]
        break;
 80091ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d074      	beq.n	80092c0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	005a      	lsls	r2, r3, #1
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	085b      	lsrs	r3, r3, #1
 80091e0:	441a      	add	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	2b0f      	cmp	r3, #15
 80091f0:	d916      	bls.n	8009220 <UART_SetConfig+0x400>
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091f8:	d212      	bcs.n	8009220 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	f023 030f 	bic.w	r3, r3, #15
 8009202:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	085b      	lsrs	r3, r3, #1
 8009208:	b29b      	uxth	r3, r3
 800920a:	f003 0307 	and.w	r3, r3, #7
 800920e:	b29a      	uxth	r2, r3
 8009210:	89fb      	ldrh	r3, [r7, #14]
 8009212:	4313      	orrs	r3, r2
 8009214:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	89fa      	ldrh	r2, [r7, #14]
 800921c:	60da      	str	r2, [r3, #12]
 800921e:	e04f      	b.n	80092c0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	77bb      	strb	r3, [r7, #30]
 8009224:	e04c      	b.n	80092c0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009226:	7ffb      	ldrb	r3, [r7, #31]
 8009228:	2b08      	cmp	r3, #8
 800922a:	d828      	bhi.n	800927e <UART_SetConfig+0x45e>
 800922c:	a201      	add	r2, pc, #4	; (adr r2, 8009234 <UART_SetConfig+0x414>)
 800922e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009232:	bf00      	nop
 8009234:	08009259 	.word	0x08009259
 8009238:	08009261 	.word	0x08009261
 800923c:	08009269 	.word	0x08009269
 8009240:	0800927f 	.word	0x0800927f
 8009244:	0800926f 	.word	0x0800926f
 8009248:	0800927f 	.word	0x0800927f
 800924c:	0800927f 	.word	0x0800927f
 8009250:	0800927f 	.word	0x0800927f
 8009254:	08009277 	.word	0x08009277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009258:	f7fb ff36 	bl	80050c8 <HAL_RCC_GetPCLK1Freq>
 800925c:	61b8      	str	r0, [r7, #24]
        break;
 800925e:	e013      	b.n	8009288 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009260:	f7fb ff46 	bl	80050f0 <HAL_RCC_GetPCLK2Freq>
 8009264:	61b8      	str	r0, [r7, #24]
        break;
 8009266:	e00f      	b.n	8009288 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009268:	4b1d      	ldr	r3, [pc, #116]	; (80092e0 <UART_SetConfig+0x4c0>)
 800926a:	61bb      	str	r3, [r7, #24]
        break;
 800926c:	e00c      	b.n	8009288 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800926e:	f7fb fe69 	bl	8004f44 <HAL_RCC_GetSysClockFreq>
 8009272:	61b8      	str	r0, [r7, #24]
        break;
 8009274:	e008      	b.n	8009288 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800927a:	61bb      	str	r3, [r7, #24]
        break;
 800927c:	e004      	b.n	8009288 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800927e:	2300      	movs	r3, #0
 8009280:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	77bb      	strb	r3, [r7, #30]
        break;
 8009286:	bf00      	nop
    }

    if (pclk != 0U)
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d018      	beq.n	80092c0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	085a      	lsrs	r2, r3, #1
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	441a      	add	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	fbb2 f3f3 	udiv	r3, r2, r3
 80092a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	2b0f      	cmp	r3, #15
 80092a6:	d909      	bls.n	80092bc <UART_SetConfig+0x49c>
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092ae:	d205      	bcs.n	80092bc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	60da      	str	r2, [r3, #12]
 80092ba:	e001      	b.n	80092c0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80092cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3720      	adds	r7, #32
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	40007c00 	.word	0x40007c00
 80092dc:	40023800 	.word	0x40023800
 80092e0:	00f42400 	.word	0x00f42400

080092e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f0:	f003 0301 	and.w	r3, r3, #1
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00a      	beq.n	800930e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	430a      	orrs	r2, r1
 800930c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009312:	f003 0302 	and.w	r3, r3, #2
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00a      	beq.n	8009330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	430a      	orrs	r2, r1
 800932e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009334:	f003 0304 	and.w	r3, r3, #4
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00a      	beq.n	8009352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	430a      	orrs	r2, r1
 8009350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009356:	f003 0308 	and.w	r3, r3, #8
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00a      	beq.n	8009374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	430a      	orrs	r2, r1
 8009372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009378:	f003 0310 	and.w	r3, r3, #16
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00a      	beq.n	8009396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	430a      	orrs	r2, r1
 8009394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939a:	f003 0320 	and.w	r3, r3, #32
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00a      	beq.n	80093b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	430a      	orrs	r2, r1
 80093b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d01a      	beq.n	80093fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	430a      	orrs	r2, r1
 80093d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093e2:	d10a      	bne.n	80093fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	430a      	orrs	r2, r1
 80093f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00a      	beq.n	800941c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	430a      	orrs	r2, r1
 800941a:	605a      	str	r2, [r3, #4]
  }
}
 800941c:	bf00      	nop
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af02      	add	r7, sp, #8
 800942e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009438:	f7fa f8ca 	bl	80035d0 <HAL_GetTick>
 800943c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 0308 	and.w	r3, r3, #8
 8009448:	2b08      	cmp	r3, #8
 800944a:	d10e      	bne.n	800946a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800944c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2200      	movs	r2, #0
 8009456:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f82d 	bl	80094ba <UART_WaitOnFlagUntilTimeout>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009466:	2303      	movs	r3, #3
 8009468:	e023      	b.n	80094b2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 0304 	and.w	r3, r3, #4
 8009474:	2b04      	cmp	r3, #4
 8009476:	d10e      	bne.n	8009496 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009478:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f817 	bl	80094ba <UART_WaitOnFlagUntilTimeout>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d001      	beq.n	8009496 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009492:	2303      	movs	r3, #3
 8009494:	e00d      	b.n	80094b2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2220      	movs	r2, #32
 800949a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2220      	movs	r2, #32
 80094a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b09c      	sub	sp, #112	; 0x70
 80094be:	af00      	add	r7, sp, #0
 80094c0:	60f8      	str	r0, [r7, #12]
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	603b      	str	r3, [r7, #0]
 80094c6:	4613      	mov	r3, r2
 80094c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094ca:	e0a5      	b.n	8009618 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d2:	f000 80a1 	beq.w	8009618 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094d6:	f7fa f87b 	bl	80035d0 <HAL_GetTick>
 80094da:	4602      	mov	r2, r0
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d302      	bcc.n	80094ec <UART_WaitOnFlagUntilTimeout+0x32>
 80094e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d13e      	bne.n	800956a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094f4:	e853 3f00 	ldrex	r3, [r3]
 80094f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80094fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009500:	667b      	str	r3, [r7, #100]	; 0x64
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	461a      	mov	r2, r3
 8009508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800950a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800950c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009510:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009512:	e841 2300 	strex	r3, r2, [r1]
 8009516:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1e6      	bne.n	80094ec <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3308      	adds	r3, #8
 8009524:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009528:	e853 3f00 	ldrex	r3, [r3]
 800952c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800952e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009530:	f023 0301 	bic.w	r3, r3, #1
 8009534:	663b      	str	r3, [r7, #96]	; 0x60
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3308      	adds	r3, #8
 800953c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800953e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009540:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009542:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009546:	e841 2300 	strex	r3, r2, [r1]
 800954a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800954c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1e5      	bne.n	800951e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2220      	movs	r2, #32
 8009556:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2220      	movs	r2, #32
 800955c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	e067      	b.n	800963a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 0304 	and.w	r3, r3, #4
 8009574:	2b00      	cmp	r3, #0
 8009576:	d04f      	beq.n	8009618 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	69db      	ldr	r3, [r3, #28]
 800957e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009586:	d147      	bne.n	8009618 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009590:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959a:	e853 3f00 	ldrex	r3, [r3]
 800959e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	461a      	mov	r2, r3
 80095ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095b0:	637b      	str	r3, [r7, #52]	; 0x34
 80095b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095b8:	e841 2300 	strex	r3, r2, [r1]
 80095bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80095be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d1e6      	bne.n	8009592 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	3308      	adds	r3, #8
 80095ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	e853 3f00 	ldrex	r3, [r3]
 80095d2:	613b      	str	r3, [r7, #16]
   return(result);
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	f023 0301 	bic.w	r3, r3, #1
 80095da:	66bb      	str	r3, [r7, #104]	; 0x68
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	3308      	adds	r3, #8
 80095e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80095e4:	623a      	str	r2, [r7, #32]
 80095e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e8:	69f9      	ldr	r1, [r7, #28]
 80095ea:	6a3a      	ldr	r2, [r7, #32]
 80095ec:	e841 2300 	strex	r3, r2, [r1]
 80095f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1e5      	bne.n	80095c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2220      	movs	r2, #32
 80095fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2220      	movs	r2, #32
 8009602:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2220      	movs	r2, #32
 8009608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009614:	2303      	movs	r3, #3
 8009616:	e010      	b.n	800963a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	69da      	ldr	r2, [r3, #28]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	4013      	ands	r3, r2
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	429a      	cmp	r2, r3
 8009626:	bf0c      	ite	eq
 8009628:	2301      	moveq	r3, #1
 800962a:	2300      	movne	r3, #0
 800962c:	b2db      	uxtb	r3, r3
 800962e:	461a      	mov	r2, r3
 8009630:	79fb      	ldrb	r3, [r7, #7]
 8009632:	429a      	cmp	r2, r3
 8009634:	f43f af4a 	beq.w	80094cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3770      	adds	r7, #112	; 0x70
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
	...

08009644 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009644:	b480      	push	{r7}
 8009646:	b097      	sub	sp, #92	; 0x5c
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	4613      	mov	r3, r2
 8009650:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	88fa      	ldrh	r2, [r7, #6]
 800965c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	88fa      	ldrh	r2, [r7, #6]
 8009664:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009676:	d10e      	bne.n	8009696 <UART_Start_Receive_IT+0x52>
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d105      	bne.n	800968c <UART_Start_Receive_IT+0x48>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009686:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800968a:	e02d      	b.n	80096e8 <UART_Start_Receive_IT+0xa4>
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	22ff      	movs	r2, #255	; 0xff
 8009690:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009694:	e028      	b.n	80096e8 <UART_Start_Receive_IT+0xa4>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10d      	bne.n	80096ba <UART_Start_Receive_IT+0x76>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d104      	bne.n	80096b0 <UART_Start_Receive_IT+0x6c>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	22ff      	movs	r2, #255	; 0xff
 80096aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80096ae:	e01b      	b.n	80096e8 <UART_Start_Receive_IT+0xa4>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	227f      	movs	r2, #127	; 0x7f
 80096b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80096b8:	e016      	b.n	80096e8 <UART_Start_Receive_IT+0xa4>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096c2:	d10d      	bne.n	80096e0 <UART_Start_Receive_IT+0x9c>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d104      	bne.n	80096d6 <UART_Start_Receive_IT+0x92>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	227f      	movs	r2, #127	; 0x7f
 80096d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80096d4:	e008      	b.n	80096e8 <UART_Start_Receive_IT+0xa4>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	223f      	movs	r2, #63	; 0x3f
 80096da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80096de:	e003      	b.n	80096e8 <UART_Start_Receive_IT+0xa4>
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2222      	movs	r2, #34	; 0x22
 80096f4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3308      	adds	r3, #8
 80096fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009700:	e853 3f00 	ldrex	r3, [r3]
 8009704:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009708:	f043 0301 	orr.w	r3, r3, #1
 800970c:	657b      	str	r3, [r7, #84]	; 0x54
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3308      	adds	r3, #8
 8009714:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009716:	64ba      	str	r2, [r7, #72]	; 0x48
 8009718:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800971c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800971e:	e841 2300 	strex	r3, r2, [r1]
 8009722:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1e5      	bne.n	80096f6 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009732:	d107      	bne.n	8009744 <UART_Start_Receive_IT+0x100>
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d103      	bne.n	8009744 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4a24      	ldr	r2, [pc, #144]	; (80097d0 <UART_Start_Receive_IT+0x18c>)
 8009740:	665a      	str	r2, [r3, #100]	; 0x64
 8009742:	e002      	b.n	800974a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	4a23      	ldr	r2, [pc, #140]	; (80097d4 <UART_Start_Receive_IT+0x190>)
 8009748:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d019      	beq.n	800978e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009762:	e853 3f00 	ldrex	r3, [r3]
 8009766:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800976e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	461a      	mov	r2, r3
 8009776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009778:	637b      	str	r3, [r7, #52]	; 0x34
 800977a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800977e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009780:	e841 2300 	strex	r3, r2, [r1]
 8009784:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009788:	2b00      	cmp	r3, #0
 800978a:	d1e6      	bne.n	800975a <UART_Start_Receive_IT+0x116>
 800978c:	e018      	b.n	80097c0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	e853 3f00 	ldrex	r3, [r3]
 800979a:	613b      	str	r3, [r7, #16]
   return(result);
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	f043 0320 	orr.w	r3, r3, #32
 80097a2:	653b      	str	r3, [r7, #80]	; 0x50
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	461a      	mov	r2, r3
 80097aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097ac:	623b      	str	r3, [r7, #32]
 80097ae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b0:	69f9      	ldr	r1, [r7, #28]
 80097b2:	6a3a      	ldr	r2, [r7, #32]
 80097b4:	e841 2300 	strex	r3, r2, [r1]
 80097b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1e6      	bne.n	800978e <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	375c      	adds	r7, #92	; 0x5c
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	08009bf1 	.word	0x08009bf1
 80097d4:	08009a95 	.word	0x08009a95

080097d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097d8:	b480      	push	{r7}
 80097da:	b095      	sub	sp, #84	; 0x54
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097e8:	e853 3f00 	ldrex	r3, [r3]
 80097ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80097ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	461a      	mov	r2, r3
 80097fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097fe:	643b      	str	r3, [r7, #64]	; 0x40
 8009800:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009802:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009804:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009806:	e841 2300 	strex	r3, r2, [r1]
 800980a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800980c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1e6      	bne.n	80097e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3308      	adds	r3, #8
 8009818:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981a:	6a3b      	ldr	r3, [r7, #32]
 800981c:	e853 3f00 	ldrex	r3, [r3]
 8009820:	61fb      	str	r3, [r7, #28]
   return(result);
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	f023 0301 	bic.w	r3, r3, #1
 8009828:	64bb      	str	r3, [r7, #72]	; 0x48
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3308      	adds	r3, #8
 8009830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009832:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009834:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009836:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800983a:	e841 2300 	strex	r3, r2, [r1]
 800983e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1e5      	bne.n	8009812 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800984a:	2b01      	cmp	r3, #1
 800984c:	d118      	bne.n	8009880 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	e853 3f00 	ldrex	r3, [r3]
 800985a:	60bb      	str	r3, [r7, #8]
   return(result);
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	f023 0310 	bic.w	r3, r3, #16
 8009862:	647b      	str	r3, [r7, #68]	; 0x44
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	461a      	mov	r2, r3
 800986a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800986c:	61bb      	str	r3, [r7, #24]
 800986e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009870:	6979      	ldr	r1, [r7, #20]
 8009872:	69ba      	ldr	r2, [r7, #24]
 8009874:	e841 2300 	strex	r3, r2, [r1]
 8009878:	613b      	str	r3, [r7, #16]
   return(result);
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1e6      	bne.n	800984e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2220      	movs	r2, #32
 8009884:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009892:	bf00      	nop
 8009894:	3754      	adds	r7, #84	; 0x54
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr

0800989e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f7ff fa8f 	bl	8008de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098c2:	bf00      	nop
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80098ca:	b480      	push	{r7}
 80098cc:	b08f      	sub	sp, #60	; 0x3c
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098d6:	2b21      	cmp	r3, #33	; 0x21
 80098d8:	d14c      	bne.n	8009974 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d132      	bne.n	800994c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ec:	6a3b      	ldr	r3, [r7, #32]
 80098ee:	e853 3f00 	ldrex	r3, [r3]
 80098f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098fa:	637b      	str	r3, [r7, #52]	; 0x34
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	461a      	mov	r2, r3
 8009902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009906:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800990a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800990c:	e841 2300 	strex	r3, r2, [r1]
 8009910:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009914:	2b00      	cmp	r3, #0
 8009916:	d1e6      	bne.n	80098e6 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	e853 3f00 	ldrex	r3, [r3]
 8009924:	60bb      	str	r3, [r7, #8]
   return(result);
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800992c:	633b      	str	r3, [r7, #48]	; 0x30
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	461a      	mov	r2, r3
 8009934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009936:	61bb      	str	r3, [r7, #24]
 8009938:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993a:	6979      	ldr	r1, [r7, #20]
 800993c:	69ba      	ldr	r2, [r7, #24]
 800993e:	e841 2300 	strex	r3, r2, [r1]
 8009942:	613b      	str	r3, [r7, #16]
   return(result);
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d1e6      	bne.n	8009918 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800994a:	e013      	b.n	8009974 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009950:	781a      	ldrb	r2, [r3, #0]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800995c:	1c5a      	adds	r2, r3, #1
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009968:	b29b      	uxth	r3, r3
 800996a:	3b01      	subs	r3, #1
 800996c:	b29a      	uxth	r2, r3
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009974:	bf00      	nop
 8009976:	373c      	adds	r7, #60	; 0x3c
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009980:	b480      	push	{r7}
 8009982:	b091      	sub	sp, #68	; 0x44
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800998c:	2b21      	cmp	r3, #33	; 0x21
 800998e:	d151      	bne.n	8009a34 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009996:	b29b      	uxth	r3, r3
 8009998:	2b00      	cmp	r3, #0
 800999a:	d132      	bne.n	8009a02 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a4:	e853 3f00 	ldrex	r3, [r3]
 80099a8:	623b      	str	r3, [r7, #32]
   return(result);
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ba:	633b      	str	r3, [r7, #48]	; 0x30
 80099bc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099c2:	e841 2300 	strex	r3, r2, [r1]
 80099c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d1e6      	bne.n	800999c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	e853 3f00 	ldrex	r3, [r3]
 80099da:	60fb      	str	r3, [r7, #12]
   return(result);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099e2:	637b      	str	r3, [r7, #52]	; 0x34
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	461a      	mov	r2, r3
 80099ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ec:	61fb      	str	r3, [r7, #28]
 80099ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f0:	69b9      	ldr	r1, [r7, #24]
 80099f2:	69fa      	ldr	r2, [r7, #28]
 80099f4:	e841 2300 	strex	r3, r2, [r1]
 80099f8:	617b      	str	r3, [r7, #20]
   return(result);
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1e6      	bne.n	80099ce <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009a00:	e018      	b.n	8009a34 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a06:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a0a:	881b      	ldrh	r3, [r3, #0]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a16:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a1c:	1c9a      	adds	r2, r3, #2
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009a34:	bf00      	nop
 8009a36:	3744      	adds	r7, #68	; 0x44
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b088      	sub	sp, #32
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	e853 3f00 	ldrex	r3, [r3]
 8009a54:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a5c:	61fb      	str	r3, [r7, #28]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	461a      	mov	r2, r3
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	61bb      	str	r3, [r7, #24]
 8009a68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6a:	6979      	ldr	r1, [r7, #20]
 8009a6c:	69ba      	ldr	r2, [r7, #24]
 8009a6e:	e841 2300 	strex	r3, r2, [r1]
 8009a72:	613b      	str	r3, [r7, #16]
   return(result);
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1e6      	bne.n	8009a48 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2220      	movs	r2, #32
 8009a7e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7f9 fcee 	bl	8003468 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a8c:	bf00      	nop
 8009a8e:	3720      	adds	r7, #32
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b096      	sub	sp, #88	; 0x58
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009aa2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aaa:	2b22      	cmp	r3, #34	; 0x22
 8009aac:	f040 8094 	bne.w	8009bd8 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009aba:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009abe:	b2d9      	uxtb	r1, r3
 8009ac0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009ac4:	b2da      	uxtb	r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aca:	400a      	ands	r2, r1
 8009acc:	b2d2      	uxtb	r2, r2
 8009ace:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ad4:	1c5a      	adds	r2, r3, #1
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d177      	bne.n	8009be8 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b00:	e853 3f00 	ldrex	r3, [r3]
 8009b04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b0c:	653b      	str	r3, [r7, #80]	; 0x50
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	461a      	mov	r2, r3
 8009b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b16:	647b      	str	r3, [r7, #68]	; 0x44
 8009b18:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b1e:	e841 2300 	strex	r3, r2, [r1]
 8009b22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1e6      	bne.n	8009af8 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	3308      	adds	r3, #8
 8009b30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	e853 3f00 	ldrex	r3, [r3]
 8009b38:	623b      	str	r3, [r7, #32]
   return(result);
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	f023 0301 	bic.w	r3, r3, #1
 8009b40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	3308      	adds	r3, #8
 8009b48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b4a:	633a      	str	r2, [r7, #48]	; 0x30
 8009b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b52:	e841 2300 	strex	r3, r2, [r1]
 8009b56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1e5      	bne.n	8009b2a <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2220      	movs	r2, #32
 8009b62:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d12e      	bne.n	8009bd0 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	e853 3f00 	ldrex	r3, [r3]
 8009b84:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f023 0310 	bic.w	r3, r3, #16
 8009b8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	461a      	mov	r2, r3
 8009b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b96:	61fb      	str	r3, [r7, #28]
 8009b98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9a:	69b9      	ldr	r1, [r7, #24]
 8009b9c:	69fa      	ldr	r2, [r7, #28]
 8009b9e:	e841 2300 	strex	r3, r2, [r1]
 8009ba2:	617b      	str	r3, [r7, #20]
   return(result);
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1e6      	bne.n	8009b78 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	69db      	ldr	r3, [r3, #28]
 8009bb0:	f003 0310 	and.w	r3, r3, #16
 8009bb4:	2b10      	cmp	r3, #16
 8009bb6:	d103      	bne.n	8009bc0 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2210      	movs	r2, #16
 8009bbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f7ff f913 	bl	8008df4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009bce:	e00b      	b.n	8009be8 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7f9 fbdf 	bl	8003394 <HAL_UART_RxCpltCallback>
}
 8009bd6:	e007      	b.n	8009be8 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	699a      	ldr	r2, [r3, #24]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f042 0208 	orr.w	r2, r2, #8
 8009be6:	619a      	str	r2, [r3, #24]
}
 8009be8:	bf00      	nop
 8009bea:	3758      	adds	r7, #88	; 0x58
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b096      	sub	sp, #88	; 0x58
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009bfe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c06:	2b22      	cmp	r3, #34	; 0x22
 8009c08:	f040 8094 	bne.w	8009d34 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c12:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c1a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009c1c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009c20:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009c24:	4013      	ands	r3, r2
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c2a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c30:	1c9a      	adds	r2, r3, #2
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d177      	bne.n	8009d44 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c5c:	e853 3f00 	ldrex	r3, [r3]
 8009c60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c72:	643b      	str	r3, [r7, #64]	; 0x40
 8009c74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c7a:	e841 2300 	strex	r3, r2, [r1]
 8009c7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d1e6      	bne.n	8009c54 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	3308      	adds	r3, #8
 8009c8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	e853 3f00 	ldrex	r3, [r3]
 8009c94:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	f023 0301 	bic.w	r3, r3, #1
 8009c9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	3308      	adds	r3, #8
 8009ca4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ca6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ca8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009caa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cae:	e841 2300 	strex	r3, r2, [r1]
 8009cb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d1e5      	bne.n	8009c86 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2220      	movs	r2, #32
 8009cbe:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d12e      	bne.n	8009d2c <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	e853 3f00 	ldrex	r3, [r3]
 8009ce0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	f023 0310 	bic.w	r3, r3, #16
 8009ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cf2:	61bb      	str	r3, [r7, #24]
 8009cf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf6:	6979      	ldr	r1, [r7, #20]
 8009cf8:	69ba      	ldr	r2, [r7, #24]
 8009cfa:	e841 2300 	strex	r3, r2, [r1]
 8009cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1e6      	bne.n	8009cd4 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	69db      	ldr	r3, [r3, #28]
 8009d0c:	f003 0310 	and.w	r3, r3, #16
 8009d10:	2b10      	cmp	r3, #16
 8009d12:	d103      	bne.n	8009d1c <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2210      	movs	r2, #16
 8009d1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009d22:	4619      	mov	r1, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7ff f865 	bl	8008df4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d2a:	e00b      	b.n	8009d44 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f7f9 fb31 	bl	8003394 <HAL_UART_RxCpltCallback>
}
 8009d32:	e007      	b.n	8009d44 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	699a      	ldr	r2, [r3, #24]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f042 0208 	orr.w	r2, r2, #8
 8009d42:	619a      	str	r2, [r3, #24]
}
 8009d44:	bf00      	nop
 8009d46:	3758      	adds	r7, #88	; 0x58
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <__errno>:
 8009d4c:	4b01      	ldr	r3, [pc, #4]	; (8009d54 <__errno+0x8>)
 8009d4e:	6818      	ldr	r0, [r3, #0]
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	20000058 	.word	0x20000058

08009d58 <__libc_init_array>:
 8009d58:	b570      	push	{r4, r5, r6, lr}
 8009d5a:	4d0d      	ldr	r5, [pc, #52]	; (8009d90 <__libc_init_array+0x38>)
 8009d5c:	4c0d      	ldr	r4, [pc, #52]	; (8009d94 <__libc_init_array+0x3c>)
 8009d5e:	1b64      	subs	r4, r4, r5
 8009d60:	10a4      	asrs	r4, r4, #2
 8009d62:	2600      	movs	r6, #0
 8009d64:	42a6      	cmp	r6, r4
 8009d66:	d109      	bne.n	8009d7c <__libc_init_array+0x24>
 8009d68:	4d0b      	ldr	r5, [pc, #44]	; (8009d98 <__libc_init_array+0x40>)
 8009d6a:	4c0c      	ldr	r4, [pc, #48]	; (8009d9c <__libc_init_array+0x44>)
 8009d6c:	f004 ffc2 	bl	800ecf4 <_init>
 8009d70:	1b64      	subs	r4, r4, r5
 8009d72:	10a4      	asrs	r4, r4, #2
 8009d74:	2600      	movs	r6, #0
 8009d76:	42a6      	cmp	r6, r4
 8009d78:	d105      	bne.n	8009d86 <__libc_init_array+0x2e>
 8009d7a:	bd70      	pop	{r4, r5, r6, pc}
 8009d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d80:	4798      	blx	r3
 8009d82:	3601      	adds	r6, #1
 8009d84:	e7ee      	b.n	8009d64 <__libc_init_array+0xc>
 8009d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d8a:	4798      	blx	r3
 8009d8c:	3601      	adds	r6, #1
 8009d8e:	e7f2      	b.n	8009d76 <__libc_init_array+0x1e>
 8009d90:	0800f3bc 	.word	0x0800f3bc
 8009d94:	0800f3bc 	.word	0x0800f3bc
 8009d98:	0800f3bc 	.word	0x0800f3bc
 8009d9c:	0800f3c0 	.word	0x0800f3c0

08009da0 <memset>:
 8009da0:	4402      	add	r2, r0
 8009da2:	4603      	mov	r3, r0
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d100      	bne.n	8009daa <memset+0xa>
 8009da8:	4770      	bx	lr
 8009daa:	f803 1b01 	strb.w	r1, [r3], #1
 8009dae:	e7f9      	b.n	8009da4 <memset+0x4>

08009db0 <__cvt>:
 8009db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009db2:	ed2d 8b02 	vpush	{d8}
 8009db6:	eeb0 8b40 	vmov.f64	d8, d0
 8009dba:	b085      	sub	sp, #20
 8009dbc:	4617      	mov	r7, r2
 8009dbe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009dc0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009dc2:	ee18 2a90 	vmov	r2, s17
 8009dc6:	f025 0520 	bic.w	r5, r5, #32
 8009dca:	2a00      	cmp	r2, #0
 8009dcc:	bfb6      	itet	lt
 8009dce:	222d      	movlt	r2, #45	; 0x2d
 8009dd0:	2200      	movge	r2, #0
 8009dd2:	eeb1 8b40 	vneglt.f64	d8, d0
 8009dd6:	2d46      	cmp	r5, #70	; 0x46
 8009dd8:	460c      	mov	r4, r1
 8009dda:	701a      	strb	r2, [r3, #0]
 8009ddc:	d004      	beq.n	8009de8 <__cvt+0x38>
 8009dde:	2d45      	cmp	r5, #69	; 0x45
 8009de0:	d100      	bne.n	8009de4 <__cvt+0x34>
 8009de2:	3401      	adds	r4, #1
 8009de4:	2102      	movs	r1, #2
 8009de6:	e000      	b.n	8009dea <__cvt+0x3a>
 8009de8:	2103      	movs	r1, #3
 8009dea:	ab03      	add	r3, sp, #12
 8009dec:	9301      	str	r3, [sp, #4]
 8009dee:	ab02      	add	r3, sp, #8
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	4622      	mov	r2, r4
 8009df4:	4633      	mov	r3, r6
 8009df6:	eeb0 0b48 	vmov.f64	d0, d8
 8009dfa:	f001 fe05 	bl	800ba08 <_dtoa_r>
 8009dfe:	2d47      	cmp	r5, #71	; 0x47
 8009e00:	d109      	bne.n	8009e16 <__cvt+0x66>
 8009e02:	07fb      	lsls	r3, r7, #31
 8009e04:	d407      	bmi.n	8009e16 <__cvt+0x66>
 8009e06:	9b03      	ldr	r3, [sp, #12]
 8009e08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e0a:	1a1b      	subs	r3, r3, r0
 8009e0c:	6013      	str	r3, [r2, #0]
 8009e0e:	b005      	add	sp, #20
 8009e10:	ecbd 8b02 	vpop	{d8}
 8009e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e16:	2d46      	cmp	r5, #70	; 0x46
 8009e18:	eb00 0204 	add.w	r2, r0, r4
 8009e1c:	d10c      	bne.n	8009e38 <__cvt+0x88>
 8009e1e:	7803      	ldrb	r3, [r0, #0]
 8009e20:	2b30      	cmp	r3, #48	; 0x30
 8009e22:	d107      	bne.n	8009e34 <__cvt+0x84>
 8009e24:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e2c:	bf1c      	itt	ne
 8009e2e:	f1c4 0401 	rsbne	r4, r4, #1
 8009e32:	6034      	strne	r4, [r6, #0]
 8009e34:	6833      	ldr	r3, [r6, #0]
 8009e36:	441a      	add	r2, r3
 8009e38:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e40:	bf08      	it	eq
 8009e42:	9203      	streq	r2, [sp, #12]
 8009e44:	2130      	movs	r1, #48	; 0x30
 8009e46:	9b03      	ldr	r3, [sp, #12]
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d2dc      	bcs.n	8009e06 <__cvt+0x56>
 8009e4c:	1c5c      	adds	r4, r3, #1
 8009e4e:	9403      	str	r4, [sp, #12]
 8009e50:	7019      	strb	r1, [r3, #0]
 8009e52:	e7f8      	b.n	8009e46 <__cvt+0x96>

08009e54 <__exponent>:
 8009e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e56:	4603      	mov	r3, r0
 8009e58:	2900      	cmp	r1, #0
 8009e5a:	bfb8      	it	lt
 8009e5c:	4249      	neglt	r1, r1
 8009e5e:	f803 2b02 	strb.w	r2, [r3], #2
 8009e62:	bfb4      	ite	lt
 8009e64:	222d      	movlt	r2, #45	; 0x2d
 8009e66:	222b      	movge	r2, #43	; 0x2b
 8009e68:	2909      	cmp	r1, #9
 8009e6a:	7042      	strb	r2, [r0, #1]
 8009e6c:	dd2a      	ble.n	8009ec4 <__exponent+0x70>
 8009e6e:	f10d 0407 	add.w	r4, sp, #7
 8009e72:	46a4      	mov	ip, r4
 8009e74:	270a      	movs	r7, #10
 8009e76:	46a6      	mov	lr, r4
 8009e78:	460a      	mov	r2, r1
 8009e7a:	fb91 f6f7 	sdiv	r6, r1, r7
 8009e7e:	fb07 1516 	mls	r5, r7, r6, r1
 8009e82:	3530      	adds	r5, #48	; 0x30
 8009e84:	2a63      	cmp	r2, #99	; 0x63
 8009e86:	f104 34ff 	add.w	r4, r4, #4294967295
 8009e8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009e8e:	4631      	mov	r1, r6
 8009e90:	dcf1      	bgt.n	8009e76 <__exponent+0x22>
 8009e92:	3130      	adds	r1, #48	; 0x30
 8009e94:	f1ae 0502 	sub.w	r5, lr, #2
 8009e98:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009e9c:	1c44      	adds	r4, r0, #1
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	4561      	cmp	r1, ip
 8009ea2:	d30a      	bcc.n	8009eba <__exponent+0x66>
 8009ea4:	f10d 0209 	add.w	r2, sp, #9
 8009ea8:	eba2 020e 	sub.w	r2, r2, lr
 8009eac:	4565      	cmp	r5, ip
 8009eae:	bf88      	it	hi
 8009eb0:	2200      	movhi	r2, #0
 8009eb2:	4413      	add	r3, r2
 8009eb4:	1a18      	subs	r0, r3, r0
 8009eb6:	b003      	add	sp, #12
 8009eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ebe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009ec2:	e7ed      	b.n	8009ea0 <__exponent+0x4c>
 8009ec4:	2330      	movs	r3, #48	; 0x30
 8009ec6:	3130      	adds	r1, #48	; 0x30
 8009ec8:	7083      	strb	r3, [r0, #2]
 8009eca:	70c1      	strb	r1, [r0, #3]
 8009ecc:	1d03      	adds	r3, r0, #4
 8009ece:	e7f1      	b.n	8009eb4 <__exponent+0x60>

08009ed0 <_printf_float>:
 8009ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed4:	b08b      	sub	sp, #44	; 0x2c
 8009ed6:	460c      	mov	r4, r1
 8009ed8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009edc:	4616      	mov	r6, r2
 8009ede:	461f      	mov	r7, r3
 8009ee0:	4605      	mov	r5, r0
 8009ee2:	f002 fe83 	bl	800cbec <_localeconv_r>
 8009ee6:	f8d0 b000 	ldr.w	fp, [r0]
 8009eea:	4658      	mov	r0, fp
 8009eec:	f7f6 f9b2 	bl	8000254 <strlen>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	9308      	str	r3, [sp, #32]
 8009ef4:	f8d8 3000 	ldr.w	r3, [r8]
 8009ef8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009efc:	6822      	ldr	r2, [r4, #0]
 8009efe:	3307      	adds	r3, #7
 8009f00:	f023 0307 	bic.w	r3, r3, #7
 8009f04:	f103 0108 	add.w	r1, r3, #8
 8009f08:	f8c8 1000 	str.w	r1, [r8]
 8009f0c:	4682      	mov	sl, r0
 8009f0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f12:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009f16:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800a178 <_printf_float+0x2a8>
 8009f1a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8009f1e:	eeb0 6bc0 	vabs.f64	d6, d0
 8009f22:	eeb4 6b47 	vcmp.f64	d6, d7
 8009f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f2a:	dd24      	ble.n	8009f76 <_printf_float+0xa6>
 8009f2c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f34:	d502      	bpl.n	8009f3c <_printf_float+0x6c>
 8009f36:	232d      	movs	r3, #45	; 0x2d
 8009f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f3c:	4b90      	ldr	r3, [pc, #576]	; (800a180 <_printf_float+0x2b0>)
 8009f3e:	4891      	ldr	r0, [pc, #580]	; (800a184 <_printf_float+0x2b4>)
 8009f40:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009f44:	bf94      	ite	ls
 8009f46:	4698      	movls	r8, r3
 8009f48:	4680      	movhi	r8, r0
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	6123      	str	r3, [r4, #16]
 8009f4e:	f022 0204 	bic.w	r2, r2, #4
 8009f52:	2300      	movs	r3, #0
 8009f54:	6022      	str	r2, [r4, #0]
 8009f56:	9304      	str	r3, [sp, #16]
 8009f58:	9700      	str	r7, [sp, #0]
 8009f5a:	4633      	mov	r3, r6
 8009f5c:	aa09      	add	r2, sp, #36	; 0x24
 8009f5e:	4621      	mov	r1, r4
 8009f60:	4628      	mov	r0, r5
 8009f62:	f000 f9d3 	bl	800a30c <_printf_common>
 8009f66:	3001      	adds	r0, #1
 8009f68:	f040 808a 	bne.w	800a080 <_printf_float+0x1b0>
 8009f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f70:	b00b      	add	sp, #44	; 0x2c
 8009f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f76:	eeb4 0b40 	vcmp.f64	d0, d0
 8009f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f7e:	d709      	bvc.n	8009f94 <_printf_float+0xc4>
 8009f80:	ee10 3a90 	vmov	r3, s1
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	bfbc      	itt	lt
 8009f88:	232d      	movlt	r3, #45	; 0x2d
 8009f8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009f8e:	487e      	ldr	r0, [pc, #504]	; (800a188 <_printf_float+0x2b8>)
 8009f90:	4b7e      	ldr	r3, [pc, #504]	; (800a18c <_printf_float+0x2bc>)
 8009f92:	e7d5      	b.n	8009f40 <_printf_float+0x70>
 8009f94:	6863      	ldr	r3, [r4, #4]
 8009f96:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009f9a:	9104      	str	r1, [sp, #16]
 8009f9c:	1c59      	adds	r1, r3, #1
 8009f9e:	d13c      	bne.n	800a01a <_printf_float+0x14a>
 8009fa0:	2306      	movs	r3, #6
 8009fa2:	6063      	str	r3, [r4, #4]
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	9303      	str	r3, [sp, #12]
 8009fa8:	ab08      	add	r3, sp, #32
 8009faa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009fae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009fb2:	ab07      	add	r3, sp, #28
 8009fb4:	6861      	ldr	r1, [r4, #4]
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	6022      	str	r2, [r4, #0]
 8009fba:	f10d 031b 	add.w	r3, sp, #27
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f7ff fef6 	bl	8009db0 <__cvt>
 8009fc4:	9b04      	ldr	r3, [sp, #16]
 8009fc6:	9907      	ldr	r1, [sp, #28]
 8009fc8:	2b47      	cmp	r3, #71	; 0x47
 8009fca:	4680      	mov	r8, r0
 8009fcc:	d108      	bne.n	8009fe0 <_printf_float+0x110>
 8009fce:	1cc8      	adds	r0, r1, #3
 8009fd0:	db02      	blt.n	8009fd8 <_printf_float+0x108>
 8009fd2:	6863      	ldr	r3, [r4, #4]
 8009fd4:	4299      	cmp	r1, r3
 8009fd6:	dd41      	ble.n	800a05c <_printf_float+0x18c>
 8009fd8:	f1a9 0902 	sub.w	r9, r9, #2
 8009fdc:	fa5f f989 	uxtb.w	r9, r9
 8009fe0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009fe4:	d820      	bhi.n	800a028 <_printf_float+0x158>
 8009fe6:	3901      	subs	r1, #1
 8009fe8:	464a      	mov	r2, r9
 8009fea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009fee:	9107      	str	r1, [sp, #28]
 8009ff0:	f7ff ff30 	bl	8009e54 <__exponent>
 8009ff4:	9a08      	ldr	r2, [sp, #32]
 8009ff6:	9004      	str	r0, [sp, #16]
 8009ff8:	1813      	adds	r3, r2, r0
 8009ffa:	2a01      	cmp	r2, #1
 8009ffc:	6123      	str	r3, [r4, #16]
 8009ffe:	dc02      	bgt.n	800a006 <_printf_float+0x136>
 800a000:	6822      	ldr	r2, [r4, #0]
 800a002:	07d2      	lsls	r2, r2, #31
 800a004:	d501      	bpl.n	800a00a <_printf_float+0x13a>
 800a006:	3301      	adds	r3, #1
 800a008:	6123      	str	r3, [r4, #16]
 800a00a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d0a2      	beq.n	8009f58 <_printf_float+0x88>
 800a012:	232d      	movs	r3, #45	; 0x2d
 800a014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a018:	e79e      	b.n	8009f58 <_printf_float+0x88>
 800a01a:	9904      	ldr	r1, [sp, #16]
 800a01c:	2947      	cmp	r1, #71	; 0x47
 800a01e:	d1c1      	bne.n	8009fa4 <_printf_float+0xd4>
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1bf      	bne.n	8009fa4 <_printf_float+0xd4>
 800a024:	2301      	movs	r3, #1
 800a026:	e7bc      	b.n	8009fa2 <_printf_float+0xd2>
 800a028:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a02c:	d118      	bne.n	800a060 <_printf_float+0x190>
 800a02e:	2900      	cmp	r1, #0
 800a030:	6863      	ldr	r3, [r4, #4]
 800a032:	dd0b      	ble.n	800a04c <_printf_float+0x17c>
 800a034:	6121      	str	r1, [r4, #16]
 800a036:	b913      	cbnz	r3, 800a03e <_printf_float+0x16e>
 800a038:	6822      	ldr	r2, [r4, #0]
 800a03a:	07d0      	lsls	r0, r2, #31
 800a03c:	d502      	bpl.n	800a044 <_printf_float+0x174>
 800a03e:	3301      	adds	r3, #1
 800a040:	440b      	add	r3, r1
 800a042:	6123      	str	r3, [r4, #16]
 800a044:	2300      	movs	r3, #0
 800a046:	65a1      	str	r1, [r4, #88]	; 0x58
 800a048:	9304      	str	r3, [sp, #16]
 800a04a:	e7de      	b.n	800a00a <_printf_float+0x13a>
 800a04c:	b913      	cbnz	r3, 800a054 <_printf_float+0x184>
 800a04e:	6822      	ldr	r2, [r4, #0]
 800a050:	07d2      	lsls	r2, r2, #31
 800a052:	d501      	bpl.n	800a058 <_printf_float+0x188>
 800a054:	3302      	adds	r3, #2
 800a056:	e7f4      	b.n	800a042 <_printf_float+0x172>
 800a058:	2301      	movs	r3, #1
 800a05a:	e7f2      	b.n	800a042 <_printf_float+0x172>
 800a05c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a060:	9b08      	ldr	r3, [sp, #32]
 800a062:	4299      	cmp	r1, r3
 800a064:	db05      	blt.n	800a072 <_printf_float+0x1a2>
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	6121      	str	r1, [r4, #16]
 800a06a:	07d8      	lsls	r0, r3, #31
 800a06c:	d5ea      	bpl.n	800a044 <_printf_float+0x174>
 800a06e:	1c4b      	adds	r3, r1, #1
 800a070:	e7e7      	b.n	800a042 <_printf_float+0x172>
 800a072:	2900      	cmp	r1, #0
 800a074:	bfd4      	ite	le
 800a076:	f1c1 0202 	rsble	r2, r1, #2
 800a07a:	2201      	movgt	r2, #1
 800a07c:	4413      	add	r3, r2
 800a07e:	e7e0      	b.n	800a042 <_printf_float+0x172>
 800a080:	6823      	ldr	r3, [r4, #0]
 800a082:	055a      	lsls	r2, r3, #21
 800a084:	d407      	bmi.n	800a096 <_printf_float+0x1c6>
 800a086:	6923      	ldr	r3, [r4, #16]
 800a088:	4642      	mov	r2, r8
 800a08a:	4631      	mov	r1, r6
 800a08c:	4628      	mov	r0, r5
 800a08e:	47b8      	blx	r7
 800a090:	3001      	adds	r0, #1
 800a092:	d12a      	bne.n	800a0ea <_printf_float+0x21a>
 800a094:	e76a      	b.n	8009f6c <_printf_float+0x9c>
 800a096:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a09a:	f240 80e2 	bls.w	800a262 <_printf_float+0x392>
 800a09e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a0a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0aa:	d133      	bne.n	800a114 <_printf_float+0x244>
 800a0ac:	4a38      	ldr	r2, [pc, #224]	; (800a190 <_printf_float+0x2c0>)
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	4631      	mov	r1, r6
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	47b8      	blx	r7
 800a0b6:	3001      	adds	r0, #1
 800a0b8:	f43f af58 	beq.w	8009f6c <_printf_float+0x9c>
 800a0bc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	db02      	blt.n	800a0ca <_printf_float+0x1fa>
 800a0c4:	6823      	ldr	r3, [r4, #0]
 800a0c6:	07d8      	lsls	r0, r3, #31
 800a0c8:	d50f      	bpl.n	800a0ea <_printf_float+0x21a>
 800a0ca:	4653      	mov	r3, sl
 800a0cc:	465a      	mov	r2, fp
 800a0ce:	4631      	mov	r1, r6
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	47b8      	blx	r7
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	f43f af49 	beq.w	8009f6c <_printf_float+0x9c>
 800a0da:	f04f 0800 	mov.w	r8, #0
 800a0de:	f104 091a 	add.w	r9, r4, #26
 800a0e2:	9b08      	ldr	r3, [sp, #32]
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	4543      	cmp	r3, r8
 800a0e8:	dc09      	bgt.n	800a0fe <_printf_float+0x22e>
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	079b      	lsls	r3, r3, #30
 800a0ee:	f100 8108 	bmi.w	800a302 <_printf_float+0x432>
 800a0f2:	68e0      	ldr	r0, [r4, #12]
 800a0f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0f6:	4298      	cmp	r0, r3
 800a0f8:	bfb8      	it	lt
 800a0fa:	4618      	movlt	r0, r3
 800a0fc:	e738      	b.n	8009f70 <_printf_float+0xa0>
 800a0fe:	2301      	movs	r3, #1
 800a100:	464a      	mov	r2, r9
 800a102:	4631      	mov	r1, r6
 800a104:	4628      	mov	r0, r5
 800a106:	47b8      	blx	r7
 800a108:	3001      	adds	r0, #1
 800a10a:	f43f af2f 	beq.w	8009f6c <_printf_float+0x9c>
 800a10e:	f108 0801 	add.w	r8, r8, #1
 800a112:	e7e6      	b.n	800a0e2 <_printf_float+0x212>
 800a114:	9b07      	ldr	r3, [sp, #28]
 800a116:	2b00      	cmp	r3, #0
 800a118:	dc3c      	bgt.n	800a194 <_printf_float+0x2c4>
 800a11a:	4a1d      	ldr	r2, [pc, #116]	; (800a190 <_printf_float+0x2c0>)
 800a11c:	2301      	movs	r3, #1
 800a11e:	4631      	mov	r1, r6
 800a120:	4628      	mov	r0, r5
 800a122:	47b8      	blx	r7
 800a124:	3001      	adds	r0, #1
 800a126:	f43f af21 	beq.w	8009f6c <_printf_float+0x9c>
 800a12a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a12e:	4313      	orrs	r3, r2
 800a130:	d102      	bne.n	800a138 <_printf_float+0x268>
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	07d9      	lsls	r1, r3, #31
 800a136:	d5d8      	bpl.n	800a0ea <_printf_float+0x21a>
 800a138:	4653      	mov	r3, sl
 800a13a:	465a      	mov	r2, fp
 800a13c:	4631      	mov	r1, r6
 800a13e:	4628      	mov	r0, r5
 800a140:	47b8      	blx	r7
 800a142:	3001      	adds	r0, #1
 800a144:	f43f af12 	beq.w	8009f6c <_printf_float+0x9c>
 800a148:	f04f 0900 	mov.w	r9, #0
 800a14c:	f104 0a1a 	add.w	sl, r4, #26
 800a150:	9b07      	ldr	r3, [sp, #28]
 800a152:	425b      	negs	r3, r3
 800a154:	454b      	cmp	r3, r9
 800a156:	dc01      	bgt.n	800a15c <_printf_float+0x28c>
 800a158:	9b08      	ldr	r3, [sp, #32]
 800a15a:	e795      	b.n	800a088 <_printf_float+0x1b8>
 800a15c:	2301      	movs	r3, #1
 800a15e:	4652      	mov	r2, sl
 800a160:	4631      	mov	r1, r6
 800a162:	4628      	mov	r0, r5
 800a164:	47b8      	blx	r7
 800a166:	3001      	adds	r0, #1
 800a168:	f43f af00 	beq.w	8009f6c <_printf_float+0x9c>
 800a16c:	f109 0901 	add.w	r9, r9, #1
 800a170:	e7ee      	b.n	800a150 <_printf_float+0x280>
 800a172:	bf00      	nop
 800a174:	f3af 8000 	nop.w
 800a178:	ffffffff 	.word	0xffffffff
 800a17c:	7fefffff 	.word	0x7fefffff
 800a180:	0800eeec 	.word	0x0800eeec
 800a184:	0800eef0 	.word	0x0800eef0
 800a188:	0800eef8 	.word	0x0800eef8
 800a18c:	0800eef4 	.word	0x0800eef4
 800a190:	0800f301 	.word	0x0800f301
 800a194:	9a08      	ldr	r2, [sp, #32]
 800a196:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a198:	429a      	cmp	r2, r3
 800a19a:	bfa8      	it	ge
 800a19c:	461a      	movge	r2, r3
 800a19e:	2a00      	cmp	r2, #0
 800a1a0:	4691      	mov	r9, r2
 800a1a2:	dc38      	bgt.n	800a216 <_printf_float+0x346>
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	9305      	str	r3, [sp, #20]
 800a1a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1ac:	f104 021a 	add.w	r2, r4, #26
 800a1b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1b2:	9905      	ldr	r1, [sp, #20]
 800a1b4:	9304      	str	r3, [sp, #16]
 800a1b6:	eba3 0309 	sub.w	r3, r3, r9
 800a1ba:	428b      	cmp	r3, r1
 800a1bc:	dc33      	bgt.n	800a226 <_printf_float+0x356>
 800a1be:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	db3c      	blt.n	800a240 <_printf_float+0x370>
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	07da      	lsls	r2, r3, #31
 800a1ca:	d439      	bmi.n	800a240 <_printf_float+0x370>
 800a1cc:	9a08      	ldr	r2, [sp, #32]
 800a1ce:	9b04      	ldr	r3, [sp, #16]
 800a1d0:	9907      	ldr	r1, [sp, #28]
 800a1d2:	1ad3      	subs	r3, r2, r3
 800a1d4:	eba2 0901 	sub.w	r9, r2, r1
 800a1d8:	4599      	cmp	r9, r3
 800a1da:	bfa8      	it	ge
 800a1dc:	4699      	movge	r9, r3
 800a1de:	f1b9 0f00 	cmp.w	r9, #0
 800a1e2:	dc35      	bgt.n	800a250 <_printf_float+0x380>
 800a1e4:	f04f 0800 	mov.w	r8, #0
 800a1e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1ec:	f104 0a1a 	add.w	sl, r4, #26
 800a1f0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a1f4:	1a9b      	subs	r3, r3, r2
 800a1f6:	eba3 0309 	sub.w	r3, r3, r9
 800a1fa:	4543      	cmp	r3, r8
 800a1fc:	f77f af75 	ble.w	800a0ea <_printf_float+0x21a>
 800a200:	2301      	movs	r3, #1
 800a202:	4652      	mov	r2, sl
 800a204:	4631      	mov	r1, r6
 800a206:	4628      	mov	r0, r5
 800a208:	47b8      	blx	r7
 800a20a:	3001      	adds	r0, #1
 800a20c:	f43f aeae 	beq.w	8009f6c <_printf_float+0x9c>
 800a210:	f108 0801 	add.w	r8, r8, #1
 800a214:	e7ec      	b.n	800a1f0 <_printf_float+0x320>
 800a216:	4613      	mov	r3, r2
 800a218:	4631      	mov	r1, r6
 800a21a:	4642      	mov	r2, r8
 800a21c:	4628      	mov	r0, r5
 800a21e:	47b8      	blx	r7
 800a220:	3001      	adds	r0, #1
 800a222:	d1bf      	bne.n	800a1a4 <_printf_float+0x2d4>
 800a224:	e6a2      	b.n	8009f6c <_printf_float+0x9c>
 800a226:	2301      	movs	r3, #1
 800a228:	4631      	mov	r1, r6
 800a22a:	4628      	mov	r0, r5
 800a22c:	9204      	str	r2, [sp, #16]
 800a22e:	47b8      	blx	r7
 800a230:	3001      	adds	r0, #1
 800a232:	f43f ae9b 	beq.w	8009f6c <_printf_float+0x9c>
 800a236:	9b05      	ldr	r3, [sp, #20]
 800a238:	9a04      	ldr	r2, [sp, #16]
 800a23a:	3301      	adds	r3, #1
 800a23c:	9305      	str	r3, [sp, #20]
 800a23e:	e7b7      	b.n	800a1b0 <_printf_float+0x2e0>
 800a240:	4653      	mov	r3, sl
 800a242:	465a      	mov	r2, fp
 800a244:	4631      	mov	r1, r6
 800a246:	4628      	mov	r0, r5
 800a248:	47b8      	blx	r7
 800a24a:	3001      	adds	r0, #1
 800a24c:	d1be      	bne.n	800a1cc <_printf_float+0x2fc>
 800a24e:	e68d      	b.n	8009f6c <_printf_float+0x9c>
 800a250:	9a04      	ldr	r2, [sp, #16]
 800a252:	464b      	mov	r3, r9
 800a254:	4442      	add	r2, r8
 800a256:	4631      	mov	r1, r6
 800a258:	4628      	mov	r0, r5
 800a25a:	47b8      	blx	r7
 800a25c:	3001      	adds	r0, #1
 800a25e:	d1c1      	bne.n	800a1e4 <_printf_float+0x314>
 800a260:	e684      	b.n	8009f6c <_printf_float+0x9c>
 800a262:	9a08      	ldr	r2, [sp, #32]
 800a264:	2a01      	cmp	r2, #1
 800a266:	dc01      	bgt.n	800a26c <_printf_float+0x39c>
 800a268:	07db      	lsls	r3, r3, #31
 800a26a:	d537      	bpl.n	800a2dc <_printf_float+0x40c>
 800a26c:	2301      	movs	r3, #1
 800a26e:	4642      	mov	r2, r8
 800a270:	4631      	mov	r1, r6
 800a272:	4628      	mov	r0, r5
 800a274:	47b8      	blx	r7
 800a276:	3001      	adds	r0, #1
 800a278:	f43f ae78 	beq.w	8009f6c <_printf_float+0x9c>
 800a27c:	4653      	mov	r3, sl
 800a27e:	465a      	mov	r2, fp
 800a280:	4631      	mov	r1, r6
 800a282:	4628      	mov	r0, r5
 800a284:	47b8      	blx	r7
 800a286:	3001      	adds	r0, #1
 800a288:	f43f ae70 	beq.w	8009f6c <_printf_float+0x9c>
 800a28c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a290:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a298:	d01b      	beq.n	800a2d2 <_printf_float+0x402>
 800a29a:	9b08      	ldr	r3, [sp, #32]
 800a29c:	f108 0201 	add.w	r2, r8, #1
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	4631      	mov	r1, r6
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	47b8      	blx	r7
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	d10e      	bne.n	800a2ca <_printf_float+0x3fa>
 800a2ac:	e65e      	b.n	8009f6c <_printf_float+0x9c>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	464a      	mov	r2, r9
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	47b8      	blx	r7
 800a2b8:	3001      	adds	r0, #1
 800a2ba:	f43f ae57 	beq.w	8009f6c <_printf_float+0x9c>
 800a2be:	f108 0801 	add.w	r8, r8, #1
 800a2c2:	9b08      	ldr	r3, [sp, #32]
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	4543      	cmp	r3, r8
 800a2c8:	dcf1      	bgt.n	800a2ae <_printf_float+0x3de>
 800a2ca:	9b04      	ldr	r3, [sp, #16]
 800a2cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a2d0:	e6db      	b.n	800a08a <_printf_float+0x1ba>
 800a2d2:	f04f 0800 	mov.w	r8, #0
 800a2d6:	f104 091a 	add.w	r9, r4, #26
 800a2da:	e7f2      	b.n	800a2c2 <_printf_float+0x3f2>
 800a2dc:	2301      	movs	r3, #1
 800a2de:	4642      	mov	r2, r8
 800a2e0:	e7df      	b.n	800a2a2 <_printf_float+0x3d2>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	464a      	mov	r2, r9
 800a2e6:	4631      	mov	r1, r6
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	47b8      	blx	r7
 800a2ec:	3001      	adds	r0, #1
 800a2ee:	f43f ae3d 	beq.w	8009f6c <_printf_float+0x9c>
 800a2f2:	f108 0801 	add.w	r8, r8, #1
 800a2f6:	68e3      	ldr	r3, [r4, #12]
 800a2f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2fa:	1a5b      	subs	r3, r3, r1
 800a2fc:	4543      	cmp	r3, r8
 800a2fe:	dcf0      	bgt.n	800a2e2 <_printf_float+0x412>
 800a300:	e6f7      	b.n	800a0f2 <_printf_float+0x222>
 800a302:	f04f 0800 	mov.w	r8, #0
 800a306:	f104 0919 	add.w	r9, r4, #25
 800a30a:	e7f4      	b.n	800a2f6 <_printf_float+0x426>

0800a30c <_printf_common>:
 800a30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a310:	4616      	mov	r6, r2
 800a312:	4699      	mov	r9, r3
 800a314:	688a      	ldr	r2, [r1, #8]
 800a316:	690b      	ldr	r3, [r1, #16]
 800a318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a31c:	4293      	cmp	r3, r2
 800a31e:	bfb8      	it	lt
 800a320:	4613      	movlt	r3, r2
 800a322:	6033      	str	r3, [r6, #0]
 800a324:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a328:	4607      	mov	r7, r0
 800a32a:	460c      	mov	r4, r1
 800a32c:	b10a      	cbz	r2, 800a332 <_printf_common+0x26>
 800a32e:	3301      	adds	r3, #1
 800a330:	6033      	str	r3, [r6, #0]
 800a332:	6823      	ldr	r3, [r4, #0]
 800a334:	0699      	lsls	r1, r3, #26
 800a336:	bf42      	ittt	mi
 800a338:	6833      	ldrmi	r3, [r6, #0]
 800a33a:	3302      	addmi	r3, #2
 800a33c:	6033      	strmi	r3, [r6, #0]
 800a33e:	6825      	ldr	r5, [r4, #0]
 800a340:	f015 0506 	ands.w	r5, r5, #6
 800a344:	d106      	bne.n	800a354 <_printf_common+0x48>
 800a346:	f104 0a19 	add.w	sl, r4, #25
 800a34a:	68e3      	ldr	r3, [r4, #12]
 800a34c:	6832      	ldr	r2, [r6, #0]
 800a34e:	1a9b      	subs	r3, r3, r2
 800a350:	42ab      	cmp	r3, r5
 800a352:	dc26      	bgt.n	800a3a2 <_printf_common+0x96>
 800a354:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a358:	1e13      	subs	r3, r2, #0
 800a35a:	6822      	ldr	r2, [r4, #0]
 800a35c:	bf18      	it	ne
 800a35e:	2301      	movne	r3, #1
 800a360:	0692      	lsls	r2, r2, #26
 800a362:	d42b      	bmi.n	800a3bc <_printf_common+0xb0>
 800a364:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a368:	4649      	mov	r1, r9
 800a36a:	4638      	mov	r0, r7
 800a36c:	47c0      	blx	r8
 800a36e:	3001      	adds	r0, #1
 800a370:	d01e      	beq.n	800a3b0 <_printf_common+0xa4>
 800a372:	6823      	ldr	r3, [r4, #0]
 800a374:	68e5      	ldr	r5, [r4, #12]
 800a376:	6832      	ldr	r2, [r6, #0]
 800a378:	f003 0306 	and.w	r3, r3, #6
 800a37c:	2b04      	cmp	r3, #4
 800a37e:	bf08      	it	eq
 800a380:	1aad      	subeq	r5, r5, r2
 800a382:	68a3      	ldr	r3, [r4, #8]
 800a384:	6922      	ldr	r2, [r4, #16]
 800a386:	bf0c      	ite	eq
 800a388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a38c:	2500      	movne	r5, #0
 800a38e:	4293      	cmp	r3, r2
 800a390:	bfc4      	itt	gt
 800a392:	1a9b      	subgt	r3, r3, r2
 800a394:	18ed      	addgt	r5, r5, r3
 800a396:	2600      	movs	r6, #0
 800a398:	341a      	adds	r4, #26
 800a39a:	42b5      	cmp	r5, r6
 800a39c:	d11a      	bne.n	800a3d4 <_printf_common+0xc8>
 800a39e:	2000      	movs	r0, #0
 800a3a0:	e008      	b.n	800a3b4 <_printf_common+0xa8>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	4652      	mov	r2, sl
 800a3a6:	4649      	mov	r1, r9
 800a3a8:	4638      	mov	r0, r7
 800a3aa:	47c0      	blx	r8
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	d103      	bne.n	800a3b8 <_printf_common+0xac>
 800a3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b8:	3501      	adds	r5, #1
 800a3ba:	e7c6      	b.n	800a34a <_printf_common+0x3e>
 800a3bc:	18e1      	adds	r1, r4, r3
 800a3be:	1c5a      	adds	r2, r3, #1
 800a3c0:	2030      	movs	r0, #48	; 0x30
 800a3c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3c6:	4422      	add	r2, r4
 800a3c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3d0:	3302      	adds	r3, #2
 800a3d2:	e7c7      	b.n	800a364 <_printf_common+0x58>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	4649      	mov	r1, r9
 800a3da:	4638      	mov	r0, r7
 800a3dc:	47c0      	blx	r8
 800a3de:	3001      	adds	r0, #1
 800a3e0:	d0e6      	beq.n	800a3b0 <_printf_common+0xa4>
 800a3e2:	3601      	adds	r6, #1
 800a3e4:	e7d9      	b.n	800a39a <_printf_common+0x8e>
	...

0800a3e8 <_printf_i>:
 800a3e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3ec:	460c      	mov	r4, r1
 800a3ee:	4691      	mov	r9, r2
 800a3f0:	7e27      	ldrb	r7, [r4, #24]
 800a3f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a3f4:	2f78      	cmp	r7, #120	; 0x78
 800a3f6:	4680      	mov	r8, r0
 800a3f8:	469a      	mov	sl, r3
 800a3fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3fe:	d807      	bhi.n	800a410 <_printf_i+0x28>
 800a400:	2f62      	cmp	r7, #98	; 0x62
 800a402:	d80a      	bhi.n	800a41a <_printf_i+0x32>
 800a404:	2f00      	cmp	r7, #0
 800a406:	f000 80d8 	beq.w	800a5ba <_printf_i+0x1d2>
 800a40a:	2f58      	cmp	r7, #88	; 0x58
 800a40c:	f000 80a3 	beq.w	800a556 <_printf_i+0x16e>
 800a410:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a414:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a418:	e03a      	b.n	800a490 <_printf_i+0xa8>
 800a41a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a41e:	2b15      	cmp	r3, #21
 800a420:	d8f6      	bhi.n	800a410 <_printf_i+0x28>
 800a422:	a001      	add	r0, pc, #4	; (adr r0, 800a428 <_printf_i+0x40>)
 800a424:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a428:	0800a481 	.word	0x0800a481
 800a42c:	0800a495 	.word	0x0800a495
 800a430:	0800a411 	.word	0x0800a411
 800a434:	0800a411 	.word	0x0800a411
 800a438:	0800a411 	.word	0x0800a411
 800a43c:	0800a411 	.word	0x0800a411
 800a440:	0800a495 	.word	0x0800a495
 800a444:	0800a411 	.word	0x0800a411
 800a448:	0800a411 	.word	0x0800a411
 800a44c:	0800a411 	.word	0x0800a411
 800a450:	0800a411 	.word	0x0800a411
 800a454:	0800a5a1 	.word	0x0800a5a1
 800a458:	0800a4c5 	.word	0x0800a4c5
 800a45c:	0800a583 	.word	0x0800a583
 800a460:	0800a411 	.word	0x0800a411
 800a464:	0800a411 	.word	0x0800a411
 800a468:	0800a5c3 	.word	0x0800a5c3
 800a46c:	0800a411 	.word	0x0800a411
 800a470:	0800a4c5 	.word	0x0800a4c5
 800a474:	0800a411 	.word	0x0800a411
 800a478:	0800a411 	.word	0x0800a411
 800a47c:	0800a58b 	.word	0x0800a58b
 800a480:	680b      	ldr	r3, [r1, #0]
 800a482:	1d1a      	adds	r2, r3, #4
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	600a      	str	r2, [r1, #0]
 800a488:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a48c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a490:	2301      	movs	r3, #1
 800a492:	e0a3      	b.n	800a5dc <_printf_i+0x1f4>
 800a494:	6825      	ldr	r5, [r4, #0]
 800a496:	6808      	ldr	r0, [r1, #0]
 800a498:	062e      	lsls	r6, r5, #24
 800a49a:	f100 0304 	add.w	r3, r0, #4
 800a49e:	d50a      	bpl.n	800a4b6 <_printf_i+0xce>
 800a4a0:	6805      	ldr	r5, [r0, #0]
 800a4a2:	600b      	str	r3, [r1, #0]
 800a4a4:	2d00      	cmp	r5, #0
 800a4a6:	da03      	bge.n	800a4b0 <_printf_i+0xc8>
 800a4a8:	232d      	movs	r3, #45	; 0x2d
 800a4aa:	426d      	negs	r5, r5
 800a4ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4b0:	485e      	ldr	r0, [pc, #376]	; (800a62c <_printf_i+0x244>)
 800a4b2:	230a      	movs	r3, #10
 800a4b4:	e019      	b.n	800a4ea <_printf_i+0x102>
 800a4b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a4ba:	6805      	ldr	r5, [r0, #0]
 800a4bc:	600b      	str	r3, [r1, #0]
 800a4be:	bf18      	it	ne
 800a4c0:	b22d      	sxthne	r5, r5
 800a4c2:	e7ef      	b.n	800a4a4 <_printf_i+0xbc>
 800a4c4:	680b      	ldr	r3, [r1, #0]
 800a4c6:	6825      	ldr	r5, [r4, #0]
 800a4c8:	1d18      	adds	r0, r3, #4
 800a4ca:	6008      	str	r0, [r1, #0]
 800a4cc:	0628      	lsls	r0, r5, #24
 800a4ce:	d501      	bpl.n	800a4d4 <_printf_i+0xec>
 800a4d0:	681d      	ldr	r5, [r3, #0]
 800a4d2:	e002      	b.n	800a4da <_printf_i+0xf2>
 800a4d4:	0669      	lsls	r1, r5, #25
 800a4d6:	d5fb      	bpl.n	800a4d0 <_printf_i+0xe8>
 800a4d8:	881d      	ldrh	r5, [r3, #0]
 800a4da:	4854      	ldr	r0, [pc, #336]	; (800a62c <_printf_i+0x244>)
 800a4dc:	2f6f      	cmp	r7, #111	; 0x6f
 800a4de:	bf0c      	ite	eq
 800a4e0:	2308      	moveq	r3, #8
 800a4e2:	230a      	movne	r3, #10
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4ea:	6866      	ldr	r6, [r4, #4]
 800a4ec:	60a6      	str	r6, [r4, #8]
 800a4ee:	2e00      	cmp	r6, #0
 800a4f0:	bfa2      	ittt	ge
 800a4f2:	6821      	ldrge	r1, [r4, #0]
 800a4f4:	f021 0104 	bicge.w	r1, r1, #4
 800a4f8:	6021      	strge	r1, [r4, #0]
 800a4fa:	b90d      	cbnz	r5, 800a500 <_printf_i+0x118>
 800a4fc:	2e00      	cmp	r6, #0
 800a4fe:	d04d      	beq.n	800a59c <_printf_i+0x1b4>
 800a500:	4616      	mov	r6, r2
 800a502:	fbb5 f1f3 	udiv	r1, r5, r3
 800a506:	fb03 5711 	mls	r7, r3, r1, r5
 800a50a:	5dc7      	ldrb	r7, [r0, r7]
 800a50c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a510:	462f      	mov	r7, r5
 800a512:	42bb      	cmp	r3, r7
 800a514:	460d      	mov	r5, r1
 800a516:	d9f4      	bls.n	800a502 <_printf_i+0x11a>
 800a518:	2b08      	cmp	r3, #8
 800a51a:	d10b      	bne.n	800a534 <_printf_i+0x14c>
 800a51c:	6823      	ldr	r3, [r4, #0]
 800a51e:	07df      	lsls	r7, r3, #31
 800a520:	d508      	bpl.n	800a534 <_printf_i+0x14c>
 800a522:	6923      	ldr	r3, [r4, #16]
 800a524:	6861      	ldr	r1, [r4, #4]
 800a526:	4299      	cmp	r1, r3
 800a528:	bfde      	ittt	le
 800a52a:	2330      	movle	r3, #48	; 0x30
 800a52c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a530:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a534:	1b92      	subs	r2, r2, r6
 800a536:	6122      	str	r2, [r4, #16]
 800a538:	f8cd a000 	str.w	sl, [sp]
 800a53c:	464b      	mov	r3, r9
 800a53e:	aa03      	add	r2, sp, #12
 800a540:	4621      	mov	r1, r4
 800a542:	4640      	mov	r0, r8
 800a544:	f7ff fee2 	bl	800a30c <_printf_common>
 800a548:	3001      	adds	r0, #1
 800a54a:	d14c      	bne.n	800a5e6 <_printf_i+0x1fe>
 800a54c:	f04f 30ff 	mov.w	r0, #4294967295
 800a550:	b004      	add	sp, #16
 800a552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a556:	4835      	ldr	r0, [pc, #212]	; (800a62c <_printf_i+0x244>)
 800a558:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a55c:	6823      	ldr	r3, [r4, #0]
 800a55e:	680e      	ldr	r6, [r1, #0]
 800a560:	061f      	lsls	r7, r3, #24
 800a562:	f856 5b04 	ldr.w	r5, [r6], #4
 800a566:	600e      	str	r6, [r1, #0]
 800a568:	d514      	bpl.n	800a594 <_printf_i+0x1ac>
 800a56a:	07d9      	lsls	r1, r3, #31
 800a56c:	bf44      	itt	mi
 800a56e:	f043 0320 	orrmi.w	r3, r3, #32
 800a572:	6023      	strmi	r3, [r4, #0]
 800a574:	b91d      	cbnz	r5, 800a57e <_printf_i+0x196>
 800a576:	6823      	ldr	r3, [r4, #0]
 800a578:	f023 0320 	bic.w	r3, r3, #32
 800a57c:	6023      	str	r3, [r4, #0]
 800a57e:	2310      	movs	r3, #16
 800a580:	e7b0      	b.n	800a4e4 <_printf_i+0xfc>
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	f043 0320 	orr.w	r3, r3, #32
 800a588:	6023      	str	r3, [r4, #0]
 800a58a:	2378      	movs	r3, #120	; 0x78
 800a58c:	4828      	ldr	r0, [pc, #160]	; (800a630 <_printf_i+0x248>)
 800a58e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a592:	e7e3      	b.n	800a55c <_printf_i+0x174>
 800a594:	065e      	lsls	r6, r3, #25
 800a596:	bf48      	it	mi
 800a598:	b2ad      	uxthmi	r5, r5
 800a59a:	e7e6      	b.n	800a56a <_printf_i+0x182>
 800a59c:	4616      	mov	r6, r2
 800a59e:	e7bb      	b.n	800a518 <_printf_i+0x130>
 800a5a0:	680b      	ldr	r3, [r1, #0]
 800a5a2:	6826      	ldr	r6, [r4, #0]
 800a5a4:	6960      	ldr	r0, [r4, #20]
 800a5a6:	1d1d      	adds	r5, r3, #4
 800a5a8:	600d      	str	r5, [r1, #0]
 800a5aa:	0635      	lsls	r5, r6, #24
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	d501      	bpl.n	800a5b4 <_printf_i+0x1cc>
 800a5b0:	6018      	str	r0, [r3, #0]
 800a5b2:	e002      	b.n	800a5ba <_printf_i+0x1d2>
 800a5b4:	0671      	lsls	r1, r6, #25
 800a5b6:	d5fb      	bpl.n	800a5b0 <_printf_i+0x1c8>
 800a5b8:	8018      	strh	r0, [r3, #0]
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	6123      	str	r3, [r4, #16]
 800a5be:	4616      	mov	r6, r2
 800a5c0:	e7ba      	b.n	800a538 <_printf_i+0x150>
 800a5c2:	680b      	ldr	r3, [r1, #0]
 800a5c4:	1d1a      	adds	r2, r3, #4
 800a5c6:	600a      	str	r2, [r1, #0]
 800a5c8:	681e      	ldr	r6, [r3, #0]
 800a5ca:	6862      	ldr	r2, [r4, #4]
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	f7f5 fe4e 	bl	8000270 <memchr>
 800a5d4:	b108      	cbz	r0, 800a5da <_printf_i+0x1f2>
 800a5d6:	1b80      	subs	r0, r0, r6
 800a5d8:	6060      	str	r0, [r4, #4]
 800a5da:	6863      	ldr	r3, [r4, #4]
 800a5dc:	6123      	str	r3, [r4, #16]
 800a5de:	2300      	movs	r3, #0
 800a5e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5e4:	e7a8      	b.n	800a538 <_printf_i+0x150>
 800a5e6:	6923      	ldr	r3, [r4, #16]
 800a5e8:	4632      	mov	r2, r6
 800a5ea:	4649      	mov	r1, r9
 800a5ec:	4640      	mov	r0, r8
 800a5ee:	47d0      	blx	sl
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	d0ab      	beq.n	800a54c <_printf_i+0x164>
 800a5f4:	6823      	ldr	r3, [r4, #0]
 800a5f6:	079b      	lsls	r3, r3, #30
 800a5f8:	d413      	bmi.n	800a622 <_printf_i+0x23a>
 800a5fa:	68e0      	ldr	r0, [r4, #12]
 800a5fc:	9b03      	ldr	r3, [sp, #12]
 800a5fe:	4298      	cmp	r0, r3
 800a600:	bfb8      	it	lt
 800a602:	4618      	movlt	r0, r3
 800a604:	e7a4      	b.n	800a550 <_printf_i+0x168>
 800a606:	2301      	movs	r3, #1
 800a608:	4632      	mov	r2, r6
 800a60a:	4649      	mov	r1, r9
 800a60c:	4640      	mov	r0, r8
 800a60e:	47d0      	blx	sl
 800a610:	3001      	adds	r0, #1
 800a612:	d09b      	beq.n	800a54c <_printf_i+0x164>
 800a614:	3501      	adds	r5, #1
 800a616:	68e3      	ldr	r3, [r4, #12]
 800a618:	9903      	ldr	r1, [sp, #12]
 800a61a:	1a5b      	subs	r3, r3, r1
 800a61c:	42ab      	cmp	r3, r5
 800a61e:	dcf2      	bgt.n	800a606 <_printf_i+0x21e>
 800a620:	e7eb      	b.n	800a5fa <_printf_i+0x212>
 800a622:	2500      	movs	r5, #0
 800a624:	f104 0619 	add.w	r6, r4, #25
 800a628:	e7f5      	b.n	800a616 <_printf_i+0x22e>
 800a62a:	bf00      	nop
 800a62c:	0800eefc 	.word	0x0800eefc
 800a630:	0800ef0d 	.word	0x0800ef0d

0800a634 <_scanf_float>:
 800a634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a638:	b087      	sub	sp, #28
 800a63a:	4617      	mov	r7, r2
 800a63c:	9303      	str	r3, [sp, #12]
 800a63e:	688b      	ldr	r3, [r1, #8]
 800a640:	1e5a      	subs	r2, r3, #1
 800a642:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a646:	bf83      	ittte	hi
 800a648:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a64c:	195b      	addhi	r3, r3, r5
 800a64e:	9302      	strhi	r3, [sp, #8]
 800a650:	2300      	movls	r3, #0
 800a652:	bf86      	itte	hi
 800a654:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a658:	608b      	strhi	r3, [r1, #8]
 800a65a:	9302      	strls	r3, [sp, #8]
 800a65c:	680b      	ldr	r3, [r1, #0]
 800a65e:	468b      	mov	fp, r1
 800a660:	2500      	movs	r5, #0
 800a662:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a666:	f84b 3b1c 	str.w	r3, [fp], #28
 800a66a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a66e:	4680      	mov	r8, r0
 800a670:	460c      	mov	r4, r1
 800a672:	465e      	mov	r6, fp
 800a674:	46aa      	mov	sl, r5
 800a676:	46a9      	mov	r9, r5
 800a678:	9501      	str	r5, [sp, #4]
 800a67a:	68a2      	ldr	r2, [r4, #8]
 800a67c:	b152      	cbz	r2, 800a694 <_scanf_float+0x60>
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	2b4e      	cmp	r3, #78	; 0x4e
 800a684:	d864      	bhi.n	800a750 <_scanf_float+0x11c>
 800a686:	2b40      	cmp	r3, #64	; 0x40
 800a688:	d83c      	bhi.n	800a704 <_scanf_float+0xd0>
 800a68a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a68e:	b2c8      	uxtb	r0, r1
 800a690:	280e      	cmp	r0, #14
 800a692:	d93a      	bls.n	800a70a <_scanf_float+0xd6>
 800a694:	f1b9 0f00 	cmp.w	r9, #0
 800a698:	d003      	beq.n	800a6a2 <_scanf_float+0x6e>
 800a69a:	6823      	ldr	r3, [r4, #0]
 800a69c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6a0:	6023      	str	r3, [r4, #0]
 800a6a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6a6:	f1ba 0f01 	cmp.w	sl, #1
 800a6aa:	f200 8113 	bhi.w	800a8d4 <_scanf_float+0x2a0>
 800a6ae:	455e      	cmp	r6, fp
 800a6b0:	f200 8105 	bhi.w	800a8be <_scanf_float+0x28a>
 800a6b4:	2501      	movs	r5, #1
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	b007      	add	sp, #28
 800a6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a6c2:	2a0d      	cmp	r2, #13
 800a6c4:	d8e6      	bhi.n	800a694 <_scanf_float+0x60>
 800a6c6:	a101      	add	r1, pc, #4	; (adr r1, 800a6cc <_scanf_float+0x98>)
 800a6c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a6cc:	0800a80b 	.word	0x0800a80b
 800a6d0:	0800a695 	.word	0x0800a695
 800a6d4:	0800a695 	.word	0x0800a695
 800a6d8:	0800a695 	.word	0x0800a695
 800a6dc:	0800a86b 	.word	0x0800a86b
 800a6e0:	0800a843 	.word	0x0800a843
 800a6e4:	0800a695 	.word	0x0800a695
 800a6e8:	0800a695 	.word	0x0800a695
 800a6ec:	0800a819 	.word	0x0800a819
 800a6f0:	0800a695 	.word	0x0800a695
 800a6f4:	0800a695 	.word	0x0800a695
 800a6f8:	0800a695 	.word	0x0800a695
 800a6fc:	0800a695 	.word	0x0800a695
 800a700:	0800a7d1 	.word	0x0800a7d1
 800a704:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a708:	e7db      	b.n	800a6c2 <_scanf_float+0x8e>
 800a70a:	290e      	cmp	r1, #14
 800a70c:	d8c2      	bhi.n	800a694 <_scanf_float+0x60>
 800a70e:	a001      	add	r0, pc, #4	; (adr r0, 800a714 <_scanf_float+0xe0>)
 800a710:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a714:	0800a7c3 	.word	0x0800a7c3
 800a718:	0800a695 	.word	0x0800a695
 800a71c:	0800a7c3 	.word	0x0800a7c3
 800a720:	0800a857 	.word	0x0800a857
 800a724:	0800a695 	.word	0x0800a695
 800a728:	0800a771 	.word	0x0800a771
 800a72c:	0800a7ad 	.word	0x0800a7ad
 800a730:	0800a7ad 	.word	0x0800a7ad
 800a734:	0800a7ad 	.word	0x0800a7ad
 800a738:	0800a7ad 	.word	0x0800a7ad
 800a73c:	0800a7ad 	.word	0x0800a7ad
 800a740:	0800a7ad 	.word	0x0800a7ad
 800a744:	0800a7ad 	.word	0x0800a7ad
 800a748:	0800a7ad 	.word	0x0800a7ad
 800a74c:	0800a7ad 	.word	0x0800a7ad
 800a750:	2b6e      	cmp	r3, #110	; 0x6e
 800a752:	d809      	bhi.n	800a768 <_scanf_float+0x134>
 800a754:	2b60      	cmp	r3, #96	; 0x60
 800a756:	d8b2      	bhi.n	800a6be <_scanf_float+0x8a>
 800a758:	2b54      	cmp	r3, #84	; 0x54
 800a75a:	d077      	beq.n	800a84c <_scanf_float+0x218>
 800a75c:	2b59      	cmp	r3, #89	; 0x59
 800a75e:	d199      	bne.n	800a694 <_scanf_float+0x60>
 800a760:	2d07      	cmp	r5, #7
 800a762:	d197      	bne.n	800a694 <_scanf_float+0x60>
 800a764:	2508      	movs	r5, #8
 800a766:	e029      	b.n	800a7bc <_scanf_float+0x188>
 800a768:	2b74      	cmp	r3, #116	; 0x74
 800a76a:	d06f      	beq.n	800a84c <_scanf_float+0x218>
 800a76c:	2b79      	cmp	r3, #121	; 0x79
 800a76e:	e7f6      	b.n	800a75e <_scanf_float+0x12a>
 800a770:	6821      	ldr	r1, [r4, #0]
 800a772:	05c8      	lsls	r0, r1, #23
 800a774:	d51a      	bpl.n	800a7ac <_scanf_float+0x178>
 800a776:	9b02      	ldr	r3, [sp, #8]
 800a778:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a77c:	6021      	str	r1, [r4, #0]
 800a77e:	f109 0901 	add.w	r9, r9, #1
 800a782:	b11b      	cbz	r3, 800a78c <_scanf_float+0x158>
 800a784:	3b01      	subs	r3, #1
 800a786:	3201      	adds	r2, #1
 800a788:	9302      	str	r3, [sp, #8]
 800a78a:	60a2      	str	r2, [r4, #8]
 800a78c:	68a3      	ldr	r3, [r4, #8]
 800a78e:	3b01      	subs	r3, #1
 800a790:	60a3      	str	r3, [r4, #8]
 800a792:	6923      	ldr	r3, [r4, #16]
 800a794:	3301      	adds	r3, #1
 800a796:	6123      	str	r3, [r4, #16]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	3b01      	subs	r3, #1
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	607b      	str	r3, [r7, #4]
 800a7a0:	f340 8084 	ble.w	800a8ac <_scanf_float+0x278>
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	603b      	str	r3, [r7, #0]
 800a7aa:	e766      	b.n	800a67a <_scanf_float+0x46>
 800a7ac:	eb1a 0f05 	cmn.w	sl, r5
 800a7b0:	f47f af70 	bne.w	800a694 <_scanf_float+0x60>
 800a7b4:	6822      	ldr	r2, [r4, #0]
 800a7b6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a7ba:	6022      	str	r2, [r4, #0]
 800a7bc:	f806 3b01 	strb.w	r3, [r6], #1
 800a7c0:	e7e4      	b.n	800a78c <_scanf_float+0x158>
 800a7c2:	6822      	ldr	r2, [r4, #0]
 800a7c4:	0610      	lsls	r0, r2, #24
 800a7c6:	f57f af65 	bpl.w	800a694 <_scanf_float+0x60>
 800a7ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7ce:	e7f4      	b.n	800a7ba <_scanf_float+0x186>
 800a7d0:	f1ba 0f00 	cmp.w	sl, #0
 800a7d4:	d10e      	bne.n	800a7f4 <_scanf_float+0x1c0>
 800a7d6:	f1b9 0f00 	cmp.w	r9, #0
 800a7da:	d10e      	bne.n	800a7fa <_scanf_float+0x1c6>
 800a7dc:	6822      	ldr	r2, [r4, #0]
 800a7de:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a7e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a7e6:	d108      	bne.n	800a7fa <_scanf_float+0x1c6>
 800a7e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a7ec:	6022      	str	r2, [r4, #0]
 800a7ee:	f04f 0a01 	mov.w	sl, #1
 800a7f2:	e7e3      	b.n	800a7bc <_scanf_float+0x188>
 800a7f4:	f1ba 0f02 	cmp.w	sl, #2
 800a7f8:	d055      	beq.n	800a8a6 <_scanf_float+0x272>
 800a7fa:	2d01      	cmp	r5, #1
 800a7fc:	d002      	beq.n	800a804 <_scanf_float+0x1d0>
 800a7fe:	2d04      	cmp	r5, #4
 800a800:	f47f af48 	bne.w	800a694 <_scanf_float+0x60>
 800a804:	3501      	adds	r5, #1
 800a806:	b2ed      	uxtb	r5, r5
 800a808:	e7d8      	b.n	800a7bc <_scanf_float+0x188>
 800a80a:	f1ba 0f01 	cmp.w	sl, #1
 800a80e:	f47f af41 	bne.w	800a694 <_scanf_float+0x60>
 800a812:	f04f 0a02 	mov.w	sl, #2
 800a816:	e7d1      	b.n	800a7bc <_scanf_float+0x188>
 800a818:	b97d      	cbnz	r5, 800a83a <_scanf_float+0x206>
 800a81a:	f1b9 0f00 	cmp.w	r9, #0
 800a81e:	f47f af3c 	bne.w	800a69a <_scanf_float+0x66>
 800a822:	6822      	ldr	r2, [r4, #0]
 800a824:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a828:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a82c:	f47f af39 	bne.w	800a6a2 <_scanf_float+0x6e>
 800a830:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a834:	6022      	str	r2, [r4, #0]
 800a836:	2501      	movs	r5, #1
 800a838:	e7c0      	b.n	800a7bc <_scanf_float+0x188>
 800a83a:	2d03      	cmp	r5, #3
 800a83c:	d0e2      	beq.n	800a804 <_scanf_float+0x1d0>
 800a83e:	2d05      	cmp	r5, #5
 800a840:	e7de      	b.n	800a800 <_scanf_float+0x1cc>
 800a842:	2d02      	cmp	r5, #2
 800a844:	f47f af26 	bne.w	800a694 <_scanf_float+0x60>
 800a848:	2503      	movs	r5, #3
 800a84a:	e7b7      	b.n	800a7bc <_scanf_float+0x188>
 800a84c:	2d06      	cmp	r5, #6
 800a84e:	f47f af21 	bne.w	800a694 <_scanf_float+0x60>
 800a852:	2507      	movs	r5, #7
 800a854:	e7b2      	b.n	800a7bc <_scanf_float+0x188>
 800a856:	6822      	ldr	r2, [r4, #0]
 800a858:	0591      	lsls	r1, r2, #22
 800a85a:	f57f af1b 	bpl.w	800a694 <_scanf_float+0x60>
 800a85e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a862:	6022      	str	r2, [r4, #0]
 800a864:	f8cd 9004 	str.w	r9, [sp, #4]
 800a868:	e7a8      	b.n	800a7bc <_scanf_float+0x188>
 800a86a:	6822      	ldr	r2, [r4, #0]
 800a86c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a870:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a874:	d006      	beq.n	800a884 <_scanf_float+0x250>
 800a876:	0550      	lsls	r0, r2, #21
 800a878:	f57f af0c 	bpl.w	800a694 <_scanf_float+0x60>
 800a87c:	f1b9 0f00 	cmp.w	r9, #0
 800a880:	f43f af0f 	beq.w	800a6a2 <_scanf_float+0x6e>
 800a884:	0591      	lsls	r1, r2, #22
 800a886:	bf58      	it	pl
 800a888:	9901      	ldrpl	r1, [sp, #4]
 800a88a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a88e:	bf58      	it	pl
 800a890:	eba9 0101 	subpl.w	r1, r9, r1
 800a894:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a898:	bf58      	it	pl
 800a89a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a89e:	6022      	str	r2, [r4, #0]
 800a8a0:	f04f 0900 	mov.w	r9, #0
 800a8a4:	e78a      	b.n	800a7bc <_scanf_float+0x188>
 800a8a6:	f04f 0a03 	mov.w	sl, #3
 800a8aa:	e787      	b.n	800a7bc <_scanf_float+0x188>
 800a8ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a8b0:	4639      	mov	r1, r7
 800a8b2:	4640      	mov	r0, r8
 800a8b4:	4798      	blx	r3
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	f43f aedf 	beq.w	800a67a <_scanf_float+0x46>
 800a8bc:	e6ea      	b.n	800a694 <_scanf_float+0x60>
 800a8be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8c6:	463a      	mov	r2, r7
 800a8c8:	4640      	mov	r0, r8
 800a8ca:	4798      	blx	r3
 800a8cc:	6923      	ldr	r3, [r4, #16]
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	6123      	str	r3, [r4, #16]
 800a8d2:	e6ec      	b.n	800a6ae <_scanf_float+0x7a>
 800a8d4:	1e6b      	subs	r3, r5, #1
 800a8d6:	2b06      	cmp	r3, #6
 800a8d8:	d825      	bhi.n	800a926 <_scanf_float+0x2f2>
 800a8da:	2d02      	cmp	r5, #2
 800a8dc:	d836      	bhi.n	800a94c <_scanf_float+0x318>
 800a8de:	455e      	cmp	r6, fp
 800a8e0:	f67f aee8 	bls.w	800a6b4 <_scanf_float+0x80>
 800a8e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8ec:	463a      	mov	r2, r7
 800a8ee:	4640      	mov	r0, r8
 800a8f0:	4798      	blx	r3
 800a8f2:	6923      	ldr	r3, [r4, #16]
 800a8f4:	3b01      	subs	r3, #1
 800a8f6:	6123      	str	r3, [r4, #16]
 800a8f8:	e7f1      	b.n	800a8de <_scanf_float+0x2aa>
 800a8fa:	9802      	ldr	r0, [sp, #8]
 800a8fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a900:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a904:	9002      	str	r0, [sp, #8]
 800a906:	463a      	mov	r2, r7
 800a908:	4640      	mov	r0, r8
 800a90a:	4798      	blx	r3
 800a90c:	6923      	ldr	r3, [r4, #16]
 800a90e:	3b01      	subs	r3, #1
 800a910:	6123      	str	r3, [r4, #16]
 800a912:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a916:	fa5f fa8a 	uxtb.w	sl, sl
 800a91a:	f1ba 0f02 	cmp.w	sl, #2
 800a91e:	d1ec      	bne.n	800a8fa <_scanf_float+0x2c6>
 800a920:	3d03      	subs	r5, #3
 800a922:	b2ed      	uxtb	r5, r5
 800a924:	1b76      	subs	r6, r6, r5
 800a926:	6823      	ldr	r3, [r4, #0]
 800a928:	05da      	lsls	r2, r3, #23
 800a92a:	d52f      	bpl.n	800a98c <_scanf_float+0x358>
 800a92c:	055b      	lsls	r3, r3, #21
 800a92e:	d510      	bpl.n	800a952 <_scanf_float+0x31e>
 800a930:	455e      	cmp	r6, fp
 800a932:	f67f aebf 	bls.w	800a6b4 <_scanf_float+0x80>
 800a936:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a93a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a93e:	463a      	mov	r2, r7
 800a940:	4640      	mov	r0, r8
 800a942:	4798      	blx	r3
 800a944:	6923      	ldr	r3, [r4, #16]
 800a946:	3b01      	subs	r3, #1
 800a948:	6123      	str	r3, [r4, #16]
 800a94a:	e7f1      	b.n	800a930 <_scanf_float+0x2fc>
 800a94c:	46aa      	mov	sl, r5
 800a94e:	9602      	str	r6, [sp, #8]
 800a950:	e7df      	b.n	800a912 <_scanf_float+0x2de>
 800a952:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a956:	6923      	ldr	r3, [r4, #16]
 800a958:	2965      	cmp	r1, #101	; 0x65
 800a95a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a95e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a962:	6123      	str	r3, [r4, #16]
 800a964:	d00c      	beq.n	800a980 <_scanf_float+0x34c>
 800a966:	2945      	cmp	r1, #69	; 0x45
 800a968:	d00a      	beq.n	800a980 <_scanf_float+0x34c>
 800a96a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a96e:	463a      	mov	r2, r7
 800a970:	4640      	mov	r0, r8
 800a972:	4798      	blx	r3
 800a974:	6923      	ldr	r3, [r4, #16]
 800a976:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a97a:	3b01      	subs	r3, #1
 800a97c:	1eb5      	subs	r5, r6, #2
 800a97e:	6123      	str	r3, [r4, #16]
 800a980:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a984:	463a      	mov	r2, r7
 800a986:	4640      	mov	r0, r8
 800a988:	4798      	blx	r3
 800a98a:	462e      	mov	r6, r5
 800a98c:	6825      	ldr	r5, [r4, #0]
 800a98e:	f015 0510 	ands.w	r5, r5, #16
 800a992:	d14d      	bne.n	800aa30 <_scanf_float+0x3fc>
 800a994:	7035      	strb	r5, [r6, #0]
 800a996:	6823      	ldr	r3, [r4, #0]
 800a998:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a99c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9a0:	d11a      	bne.n	800a9d8 <_scanf_float+0x3a4>
 800a9a2:	9b01      	ldr	r3, [sp, #4]
 800a9a4:	454b      	cmp	r3, r9
 800a9a6:	eba3 0209 	sub.w	r2, r3, r9
 800a9aa:	d122      	bne.n	800a9f2 <_scanf_float+0x3be>
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	4659      	mov	r1, fp
 800a9b0:	4640      	mov	r0, r8
 800a9b2:	f000 feef 	bl	800b794 <_strtod_r>
 800a9b6:	9b03      	ldr	r3, [sp, #12]
 800a9b8:	6821      	ldr	r1, [r4, #0]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f011 0f02 	tst.w	r1, #2
 800a9c0:	f103 0204 	add.w	r2, r3, #4
 800a9c4:	d020      	beq.n	800aa08 <_scanf_float+0x3d4>
 800a9c6:	9903      	ldr	r1, [sp, #12]
 800a9c8:	600a      	str	r2, [r1, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	ed83 0b00 	vstr	d0, [r3]
 800a9d0:	68e3      	ldr	r3, [r4, #12]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	60e3      	str	r3, [r4, #12]
 800a9d6:	e66e      	b.n	800a6b6 <_scanf_float+0x82>
 800a9d8:	9b04      	ldr	r3, [sp, #16]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d0e6      	beq.n	800a9ac <_scanf_float+0x378>
 800a9de:	9905      	ldr	r1, [sp, #20]
 800a9e0:	230a      	movs	r3, #10
 800a9e2:	462a      	mov	r2, r5
 800a9e4:	3101      	adds	r1, #1
 800a9e6:	4640      	mov	r0, r8
 800a9e8:	f000 ff5e 	bl	800b8a8 <_strtol_r>
 800a9ec:	9b04      	ldr	r3, [sp, #16]
 800a9ee:	9e05      	ldr	r6, [sp, #20]
 800a9f0:	1ac2      	subs	r2, r0, r3
 800a9f2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a9f6:	429e      	cmp	r6, r3
 800a9f8:	bf28      	it	cs
 800a9fa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a9fe:	490d      	ldr	r1, [pc, #52]	; (800aa34 <_scanf_float+0x400>)
 800aa00:	4630      	mov	r0, r6
 800aa02:	f000 f821 	bl	800aa48 <siprintf>
 800aa06:	e7d1      	b.n	800a9ac <_scanf_float+0x378>
 800aa08:	f011 0f04 	tst.w	r1, #4
 800aa0c:	9903      	ldr	r1, [sp, #12]
 800aa0e:	600a      	str	r2, [r1, #0]
 800aa10:	d1db      	bne.n	800a9ca <_scanf_float+0x396>
 800aa12:	eeb4 0b40 	vcmp.f64	d0, d0
 800aa16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa1a:	681e      	ldr	r6, [r3, #0]
 800aa1c:	d705      	bvc.n	800aa2a <_scanf_float+0x3f6>
 800aa1e:	4806      	ldr	r0, [pc, #24]	; (800aa38 <_scanf_float+0x404>)
 800aa20:	f000 f80c 	bl	800aa3c <nanf>
 800aa24:	ed86 0a00 	vstr	s0, [r6]
 800aa28:	e7d2      	b.n	800a9d0 <_scanf_float+0x39c>
 800aa2a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800aa2e:	e7f9      	b.n	800aa24 <_scanf_float+0x3f0>
 800aa30:	2500      	movs	r5, #0
 800aa32:	e640      	b.n	800a6b6 <_scanf_float+0x82>
 800aa34:	0800ef1e 	.word	0x0800ef1e
 800aa38:	0800f353 	.word	0x0800f353

0800aa3c <nanf>:
 800aa3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800aa44 <nanf+0x8>
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	7fc00000 	.word	0x7fc00000

0800aa48 <siprintf>:
 800aa48:	b40e      	push	{r1, r2, r3}
 800aa4a:	b500      	push	{lr}
 800aa4c:	b09c      	sub	sp, #112	; 0x70
 800aa4e:	ab1d      	add	r3, sp, #116	; 0x74
 800aa50:	9002      	str	r0, [sp, #8]
 800aa52:	9006      	str	r0, [sp, #24]
 800aa54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aa58:	4809      	ldr	r0, [pc, #36]	; (800aa80 <siprintf+0x38>)
 800aa5a:	9107      	str	r1, [sp, #28]
 800aa5c:	9104      	str	r1, [sp, #16]
 800aa5e:	4909      	ldr	r1, [pc, #36]	; (800aa84 <siprintf+0x3c>)
 800aa60:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa64:	9105      	str	r1, [sp, #20]
 800aa66:	6800      	ldr	r0, [r0, #0]
 800aa68:	9301      	str	r3, [sp, #4]
 800aa6a:	a902      	add	r1, sp, #8
 800aa6c:	f002 fece 	bl	800d80c <_svfiprintf_r>
 800aa70:	9b02      	ldr	r3, [sp, #8]
 800aa72:	2200      	movs	r2, #0
 800aa74:	701a      	strb	r2, [r3, #0]
 800aa76:	b01c      	add	sp, #112	; 0x70
 800aa78:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa7c:	b003      	add	sp, #12
 800aa7e:	4770      	bx	lr
 800aa80:	20000058 	.word	0x20000058
 800aa84:	ffff0208 	.word	0xffff0208

0800aa88 <siscanf>:
 800aa88:	b40e      	push	{r1, r2, r3}
 800aa8a:	b510      	push	{r4, lr}
 800aa8c:	b09f      	sub	sp, #124	; 0x7c
 800aa8e:	ac21      	add	r4, sp, #132	; 0x84
 800aa90:	f44f 7101 	mov.w	r1, #516	; 0x204
 800aa94:	f854 2b04 	ldr.w	r2, [r4], #4
 800aa98:	9201      	str	r2, [sp, #4]
 800aa9a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800aa9e:	9004      	str	r0, [sp, #16]
 800aaa0:	9008      	str	r0, [sp, #32]
 800aaa2:	f7f5 fbd7 	bl	8000254 <strlen>
 800aaa6:	4b0c      	ldr	r3, [pc, #48]	; (800aad8 <siscanf+0x50>)
 800aaa8:	9005      	str	r0, [sp, #20]
 800aaaa:	9009      	str	r0, [sp, #36]	; 0x24
 800aaac:	930d      	str	r3, [sp, #52]	; 0x34
 800aaae:	480b      	ldr	r0, [pc, #44]	; (800aadc <siscanf+0x54>)
 800aab0:	9a01      	ldr	r2, [sp, #4]
 800aab2:	6800      	ldr	r0, [r0, #0]
 800aab4:	9403      	str	r4, [sp, #12]
 800aab6:	2300      	movs	r3, #0
 800aab8:	9311      	str	r3, [sp, #68]	; 0x44
 800aaba:	9316      	str	r3, [sp, #88]	; 0x58
 800aabc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aac0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800aac4:	a904      	add	r1, sp, #16
 800aac6:	4623      	mov	r3, r4
 800aac8:	f002 fffa 	bl	800dac0 <__ssvfiscanf_r>
 800aacc:	b01f      	add	sp, #124	; 0x7c
 800aace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aad2:	b003      	add	sp, #12
 800aad4:	4770      	bx	lr
 800aad6:	bf00      	nop
 800aad8:	0800ab03 	.word	0x0800ab03
 800aadc:	20000058 	.word	0x20000058

0800aae0 <__sread>:
 800aae0:	b510      	push	{r4, lr}
 800aae2:	460c      	mov	r4, r1
 800aae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aae8:	f003 faae 	bl	800e048 <_read_r>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	bfab      	itete	ge
 800aaf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aaf2:	89a3      	ldrhlt	r3, [r4, #12]
 800aaf4:	181b      	addge	r3, r3, r0
 800aaf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aafa:	bfac      	ite	ge
 800aafc:	6563      	strge	r3, [r4, #84]	; 0x54
 800aafe:	81a3      	strhlt	r3, [r4, #12]
 800ab00:	bd10      	pop	{r4, pc}

0800ab02 <__seofread>:
 800ab02:	2000      	movs	r0, #0
 800ab04:	4770      	bx	lr

0800ab06 <__swrite>:
 800ab06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab0a:	461f      	mov	r7, r3
 800ab0c:	898b      	ldrh	r3, [r1, #12]
 800ab0e:	05db      	lsls	r3, r3, #23
 800ab10:	4605      	mov	r5, r0
 800ab12:	460c      	mov	r4, r1
 800ab14:	4616      	mov	r6, r2
 800ab16:	d505      	bpl.n	800ab24 <__swrite+0x1e>
 800ab18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab1c:	2302      	movs	r3, #2
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f002 f868 	bl	800cbf4 <_lseek_r>
 800ab24:	89a3      	ldrh	r3, [r4, #12]
 800ab26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab2e:	81a3      	strh	r3, [r4, #12]
 800ab30:	4632      	mov	r2, r6
 800ab32:	463b      	mov	r3, r7
 800ab34:	4628      	mov	r0, r5
 800ab36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab3a:	f000 beb7 	b.w	800b8ac <_write_r>

0800ab3e <__sseek>:
 800ab3e:	b510      	push	{r4, lr}
 800ab40:	460c      	mov	r4, r1
 800ab42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab46:	f002 f855 	bl	800cbf4 <_lseek_r>
 800ab4a:	1c43      	adds	r3, r0, #1
 800ab4c:	89a3      	ldrh	r3, [r4, #12]
 800ab4e:	bf15      	itete	ne
 800ab50:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab5a:	81a3      	strheq	r3, [r4, #12]
 800ab5c:	bf18      	it	ne
 800ab5e:	81a3      	strhne	r3, [r4, #12]
 800ab60:	bd10      	pop	{r4, pc}

0800ab62 <__sclose>:
 800ab62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab66:	f000 beb3 	b.w	800b8d0 <_close_r>

0800ab6a <strncmp>:
 800ab6a:	b510      	push	{r4, lr}
 800ab6c:	b16a      	cbz	r2, 800ab8a <strncmp+0x20>
 800ab6e:	3901      	subs	r1, #1
 800ab70:	1884      	adds	r4, r0, r2
 800ab72:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ab76:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d103      	bne.n	800ab86 <strncmp+0x1c>
 800ab7e:	42a0      	cmp	r0, r4
 800ab80:	d001      	beq.n	800ab86 <strncmp+0x1c>
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d1f5      	bne.n	800ab72 <strncmp+0x8>
 800ab86:	1a98      	subs	r0, r3, r2
 800ab88:	bd10      	pop	{r4, pc}
 800ab8a:	4610      	mov	r0, r2
 800ab8c:	e7fc      	b.n	800ab88 <strncmp+0x1e>

0800ab8e <strncpy>:
 800ab8e:	b510      	push	{r4, lr}
 800ab90:	3901      	subs	r1, #1
 800ab92:	4603      	mov	r3, r0
 800ab94:	b132      	cbz	r2, 800aba4 <strncpy+0x16>
 800ab96:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ab9a:	f803 4b01 	strb.w	r4, [r3], #1
 800ab9e:	3a01      	subs	r2, #1
 800aba0:	2c00      	cmp	r4, #0
 800aba2:	d1f7      	bne.n	800ab94 <strncpy+0x6>
 800aba4:	441a      	add	r2, r3
 800aba6:	2100      	movs	r1, #0
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d100      	bne.n	800abae <strncpy+0x20>
 800abac:	bd10      	pop	{r4, pc}
 800abae:	f803 1b01 	strb.w	r1, [r3], #1
 800abb2:	e7f9      	b.n	800aba8 <strncpy+0x1a>

0800abb4 <sulp>:
 800abb4:	b570      	push	{r4, r5, r6, lr}
 800abb6:	4604      	mov	r4, r0
 800abb8:	460d      	mov	r5, r1
 800abba:	4616      	mov	r6, r2
 800abbc:	ec45 4b10 	vmov	d0, r4, r5
 800abc0:	f002 fbbe 	bl	800d340 <__ulp>
 800abc4:	b17e      	cbz	r6, 800abe6 <sulp+0x32>
 800abc6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800abca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800abce:	2b00      	cmp	r3, #0
 800abd0:	dd09      	ble.n	800abe6 <sulp+0x32>
 800abd2:	051b      	lsls	r3, r3, #20
 800abd4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800abd8:	2000      	movs	r0, #0
 800abda:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800abde:	ec41 0b17 	vmov	d7, r0, r1
 800abe2:	ee20 0b07 	vmul.f64	d0, d0, d7
 800abe6:	bd70      	pop	{r4, r5, r6, pc}

0800abe8 <_strtod_l>:
 800abe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abec:	ed2d 8b0c 	vpush	{d8-d13}
 800abf0:	b09d      	sub	sp, #116	; 0x74
 800abf2:	461f      	mov	r7, r3
 800abf4:	2300      	movs	r3, #0
 800abf6:	9318      	str	r3, [sp, #96]	; 0x60
 800abf8:	4ba6      	ldr	r3, [pc, #664]	; (800ae94 <_strtod_l+0x2ac>)
 800abfa:	9213      	str	r2, [sp, #76]	; 0x4c
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	9308      	str	r3, [sp, #32]
 800ac00:	4604      	mov	r4, r0
 800ac02:	4618      	mov	r0, r3
 800ac04:	468a      	mov	sl, r1
 800ac06:	f7f5 fb25 	bl	8000254 <strlen>
 800ac0a:	f04f 0800 	mov.w	r8, #0
 800ac0e:	4605      	mov	r5, r0
 800ac10:	f04f 0900 	mov.w	r9, #0
 800ac14:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800ac18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac1a:	781a      	ldrb	r2, [r3, #0]
 800ac1c:	2a2b      	cmp	r2, #43	; 0x2b
 800ac1e:	d04d      	beq.n	800acbc <_strtod_l+0xd4>
 800ac20:	d83a      	bhi.n	800ac98 <_strtod_l+0xb0>
 800ac22:	2a0d      	cmp	r2, #13
 800ac24:	d833      	bhi.n	800ac8e <_strtod_l+0xa6>
 800ac26:	2a08      	cmp	r2, #8
 800ac28:	d833      	bhi.n	800ac92 <_strtod_l+0xaa>
 800ac2a:	2a00      	cmp	r2, #0
 800ac2c:	d03d      	beq.n	800acaa <_strtod_l+0xc2>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac32:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ac34:	7833      	ldrb	r3, [r6, #0]
 800ac36:	2b30      	cmp	r3, #48	; 0x30
 800ac38:	f040 80b6 	bne.w	800ada8 <_strtod_l+0x1c0>
 800ac3c:	7873      	ldrb	r3, [r6, #1]
 800ac3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac42:	2b58      	cmp	r3, #88	; 0x58
 800ac44:	d16d      	bne.n	800ad22 <_strtod_l+0x13a>
 800ac46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac48:	9301      	str	r3, [sp, #4]
 800ac4a:	ab18      	add	r3, sp, #96	; 0x60
 800ac4c:	9702      	str	r7, [sp, #8]
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	4a91      	ldr	r2, [pc, #580]	; (800ae98 <_strtod_l+0x2b0>)
 800ac52:	ab19      	add	r3, sp, #100	; 0x64
 800ac54:	a917      	add	r1, sp, #92	; 0x5c
 800ac56:	4620      	mov	r0, r4
 800ac58:	f001 fcc0 	bl	800c5dc <__gethex>
 800ac5c:	f010 0507 	ands.w	r5, r0, #7
 800ac60:	4607      	mov	r7, r0
 800ac62:	d005      	beq.n	800ac70 <_strtod_l+0x88>
 800ac64:	2d06      	cmp	r5, #6
 800ac66:	d12b      	bne.n	800acc0 <_strtod_l+0xd8>
 800ac68:	3601      	adds	r6, #1
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	9617      	str	r6, [sp, #92]	; 0x5c
 800ac6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f040 856e 	bne.w	800b754 <_strtod_l+0xb6c>
 800ac78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac7a:	b1e3      	cbz	r3, 800acb6 <_strtod_l+0xce>
 800ac7c:	ec49 8b17 	vmov	d7, r8, r9
 800ac80:	eeb1 0b47 	vneg.f64	d0, d7
 800ac84:	b01d      	add	sp, #116	; 0x74
 800ac86:	ecbd 8b0c 	vpop	{d8-d13}
 800ac8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac8e:	2a20      	cmp	r2, #32
 800ac90:	d1cd      	bne.n	800ac2e <_strtod_l+0x46>
 800ac92:	3301      	adds	r3, #1
 800ac94:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac96:	e7bf      	b.n	800ac18 <_strtod_l+0x30>
 800ac98:	2a2d      	cmp	r2, #45	; 0x2d
 800ac9a:	d1c8      	bne.n	800ac2e <_strtod_l+0x46>
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	920b      	str	r2, [sp, #44]	; 0x2c
 800aca0:	1c5a      	adds	r2, r3, #1
 800aca2:	9217      	str	r2, [sp, #92]	; 0x5c
 800aca4:	785b      	ldrb	r3, [r3, #1]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1c3      	bne.n	800ac32 <_strtod_l+0x4a>
 800acaa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acac:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f040 854d 	bne.w	800b750 <_strtod_l+0xb68>
 800acb6:	ec49 8b10 	vmov	d0, r8, r9
 800acba:	e7e3      	b.n	800ac84 <_strtod_l+0x9c>
 800acbc:	2200      	movs	r2, #0
 800acbe:	e7ee      	b.n	800ac9e <_strtod_l+0xb6>
 800acc0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800acc2:	b13a      	cbz	r2, 800acd4 <_strtod_l+0xec>
 800acc4:	2135      	movs	r1, #53	; 0x35
 800acc6:	a81a      	add	r0, sp, #104	; 0x68
 800acc8:	f002 fc46 	bl	800d558 <__copybits>
 800accc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800acce:	4620      	mov	r0, r4
 800acd0:	f002 f80a 	bl	800cce8 <_Bfree>
 800acd4:	3d01      	subs	r5, #1
 800acd6:	2d05      	cmp	r5, #5
 800acd8:	d807      	bhi.n	800acea <_strtod_l+0x102>
 800acda:	e8df f005 	tbb	[pc, r5]
 800acde:	0b0e      	.short	0x0b0e
 800ace0:	030e1d18 	.word	0x030e1d18
 800ace4:	f04f 0900 	mov.w	r9, #0
 800ace8:	46c8      	mov	r8, r9
 800acea:	073b      	lsls	r3, r7, #28
 800acec:	d5c0      	bpl.n	800ac70 <_strtod_l+0x88>
 800acee:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800acf2:	e7bd      	b.n	800ac70 <_strtod_l+0x88>
 800acf4:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 800acf8:	e7f7      	b.n	800acea <_strtod_l+0x102>
 800acfa:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 800acfe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ad00:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ad04:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ad08:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ad0c:	e7ed      	b.n	800acea <_strtod_l+0x102>
 800ad0e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800ae9c <_strtod_l+0x2b4>
 800ad12:	f04f 0800 	mov.w	r8, #0
 800ad16:	e7e8      	b.n	800acea <_strtod_l+0x102>
 800ad18:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ad1c:	f04f 38ff 	mov.w	r8, #4294967295
 800ad20:	e7e3      	b.n	800acea <_strtod_l+0x102>
 800ad22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad24:	1c5a      	adds	r2, r3, #1
 800ad26:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad28:	785b      	ldrb	r3, [r3, #1]
 800ad2a:	2b30      	cmp	r3, #48	; 0x30
 800ad2c:	d0f9      	beq.n	800ad22 <_strtod_l+0x13a>
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d09e      	beq.n	800ac70 <_strtod_l+0x88>
 800ad32:	2301      	movs	r3, #1
 800ad34:	9306      	str	r3, [sp, #24]
 800ad36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad38:	930c      	str	r3, [sp, #48]	; 0x30
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	9304      	str	r3, [sp, #16]
 800ad3e:	930a      	str	r3, [sp, #40]	; 0x28
 800ad40:	461e      	mov	r6, r3
 800ad42:	220a      	movs	r2, #10
 800ad44:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ad46:	f890 b000 	ldrb.w	fp, [r0]
 800ad4a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 800ad4e:	b2d9      	uxtb	r1, r3
 800ad50:	2909      	cmp	r1, #9
 800ad52:	d92b      	bls.n	800adac <_strtod_l+0x1c4>
 800ad54:	9908      	ldr	r1, [sp, #32]
 800ad56:	462a      	mov	r2, r5
 800ad58:	f7ff ff07 	bl	800ab6a <strncmp>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	d035      	beq.n	800adcc <_strtod_l+0x1e4>
 800ad60:	2000      	movs	r0, #0
 800ad62:	465a      	mov	r2, fp
 800ad64:	4633      	mov	r3, r6
 800ad66:	4683      	mov	fp, r0
 800ad68:	4601      	mov	r1, r0
 800ad6a:	2a65      	cmp	r2, #101	; 0x65
 800ad6c:	d001      	beq.n	800ad72 <_strtod_l+0x18a>
 800ad6e:	2a45      	cmp	r2, #69	; 0x45
 800ad70:	d118      	bne.n	800ada4 <_strtod_l+0x1bc>
 800ad72:	b91b      	cbnz	r3, 800ad7c <_strtod_l+0x194>
 800ad74:	9b06      	ldr	r3, [sp, #24]
 800ad76:	4303      	orrs	r3, r0
 800ad78:	d097      	beq.n	800acaa <_strtod_l+0xc2>
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 800ad80:	f10a 0201 	add.w	r2, sl, #1
 800ad84:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad86:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800ad8a:	2a2b      	cmp	r2, #43	; 0x2b
 800ad8c:	d077      	beq.n	800ae7e <_strtod_l+0x296>
 800ad8e:	2a2d      	cmp	r2, #45	; 0x2d
 800ad90:	d07d      	beq.n	800ae8e <_strtod_l+0x2a6>
 800ad92:	f04f 0e00 	mov.w	lr, #0
 800ad96:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800ad9a:	2d09      	cmp	r5, #9
 800ad9c:	f240 8084 	bls.w	800aea8 <_strtod_l+0x2c0>
 800ada0:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800ada4:	2500      	movs	r5, #0
 800ada6:	e09f      	b.n	800aee8 <_strtod_l+0x300>
 800ada8:	2300      	movs	r3, #0
 800adaa:	e7c3      	b.n	800ad34 <_strtod_l+0x14c>
 800adac:	2e08      	cmp	r6, #8
 800adae:	bfd5      	itete	le
 800adb0:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800adb2:	9904      	ldrgt	r1, [sp, #16]
 800adb4:	fb02 3301 	mlale	r3, r2, r1, r3
 800adb8:	fb02 3301 	mlagt	r3, r2, r1, r3
 800adbc:	f100 0001 	add.w	r0, r0, #1
 800adc0:	bfd4      	ite	le
 800adc2:	930a      	strle	r3, [sp, #40]	; 0x28
 800adc4:	9304      	strgt	r3, [sp, #16]
 800adc6:	3601      	adds	r6, #1
 800adc8:	9017      	str	r0, [sp, #92]	; 0x5c
 800adca:	e7bb      	b.n	800ad44 <_strtod_l+0x15c>
 800adcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800adce:	195a      	adds	r2, r3, r5
 800add0:	9217      	str	r2, [sp, #92]	; 0x5c
 800add2:	5d5a      	ldrb	r2, [r3, r5]
 800add4:	b3ae      	cbz	r6, 800ae42 <_strtod_l+0x25a>
 800add6:	4683      	mov	fp, r0
 800add8:	4633      	mov	r3, r6
 800adda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800adde:	2909      	cmp	r1, #9
 800ade0:	d912      	bls.n	800ae08 <_strtod_l+0x220>
 800ade2:	2101      	movs	r1, #1
 800ade4:	e7c1      	b.n	800ad6a <_strtod_l+0x182>
 800ade6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ade8:	1c5a      	adds	r2, r3, #1
 800adea:	9217      	str	r2, [sp, #92]	; 0x5c
 800adec:	785a      	ldrb	r2, [r3, #1]
 800adee:	3001      	adds	r0, #1
 800adf0:	2a30      	cmp	r2, #48	; 0x30
 800adf2:	d0f8      	beq.n	800ade6 <_strtod_l+0x1fe>
 800adf4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800adf8:	2b08      	cmp	r3, #8
 800adfa:	f200 84b0 	bhi.w	800b75e <_strtod_l+0xb76>
 800adfe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae00:	930c      	str	r3, [sp, #48]	; 0x30
 800ae02:	4683      	mov	fp, r0
 800ae04:	2000      	movs	r0, #0
 800ae06:	4603      	mov	r3, r0
 800ae08:	3a30      	subs	r2, #48	; 0x30
 800ae0a:	f100 0101 	add.w	r1, r0, #1
 800ae0e:	d012      	beq.n	800ae36 <_strtod_l+0x24e>
 800ae10:	448b      	add	fp, r1
 800ae12:	eb00 0c03 	add.w	ip, r0, r3
 800ae16:	4619      	mov	r1, r3
 800ae18:	250a      	movs	r5, #10
 800ae1a:	4561      	cmp	r1, ip
 800ae1c:	d113      	bne.n	800ae46 <_strtod_l+0x25e>
 800ae1e:	1819      	adds	r1, r3, r0
 800ae20:	2908      	cmp	r1, #8
 800ae22:	f103 0301 	add.w	r3, r3, #1
 800ae26:	4403      	add	r3, r0
 800ae28:	dc1d      	bgt.n	800ae66 <_strtod_l+0x27e>
 800ae2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ae2c:	210a      	movs	r1, #10
 800ae2e:	fb01 2200 	mla	r2, r1, r0, r2
 800ae32:	920a      	str	r2, [sp, #40]	; 0x28
 800ae34:	2100      	movs	r1, #0
 800ae36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ae38:	1c50      	adds	r0, r2, #1
 800ae3a:	9017      	str	r0, [sp, #92]	; 0x5c
 800ae3c:	7852      	ldrb	r2, [r2, #1]
 800ae3e:	4608      	mov	r0, r1
 800ae40:	e7cb      	b.n	800adda <_strtod_l+0x1f2>
 800ae42:	4630      	mov	r0, r6
 800ae44:	e7d4      	b.n	800adf0 <_strtod_l+0x208>
 800ae46:	2908      	cmp	r1, #8
 800ae48:	dc04      	bgt.n	800ae54 <_strtod_l+0x26c>
 800ae4a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ae4c:	436f      	muls	r7, r5
 800ae4e:	970a      	str	r7, [sp, #40]	; 0x28
 800ae50:	3101      	adds	r1, #1
 800ae52:	e7e2      	b.n	800ae1a <_strtod_l+0x232>
 800ae54:	f101 0e01 	add.w	lr, r1, #1
 800ae58:	f1be 0f10 	cmp.w	lr, #16
 800ae5c:	bfde      	ittt	le
 800ae5e:	9f04      	ldrle	r7, [sp, #16]
 800ae60:	436f      	mulle	r7, r5
 800ae62:	9704      	strle	r7, [sp, #16]
 800ae64:	e7f4      	b.n	800ae50 <_strtod_l+0x268>
 800ae66:	2b10      	cmp	r3, #16
 800ae68:	bfdf      	itttt	le
 800ae6a:	9804      	ldrle	r0, [sp, #16]
 800ae6c:	210a      	movle	r1, #10
 800ae6e:	fb01 2200 	mlale	r2, r1, r0, r2
 800ae72:	9204      	strle	r2, [sp, #16]
 800ae74:	e7de      	b.n	800ae34 <_strtod_l+0x24c>
 800ae76:	f04f 0b00 	mov.w	fp, #0
 800ae7a:	2101      	movs	r1, #1
 800ae7c:	e77a      	b.n	800ad74 <_strtod_l+0x18c>
 800ae7e:	f04f 0e00 	mov.w	lr, #0
 800ae82:	f10a 0202 	add.w	r2, sl, #2
 800ae86:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae88:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800ae8c:	e783      	b.n	800ad96 <_strtod_l+0x1ae>
 800ae8e:	f04f 0e01 	mov.w	lr, #1
 800ae92:	e7f6      	b.n	800ae82 <_strtod_l+0x29a>
 800ae94:	0800f178 	.word	0x0800f178
 800ae98:	0800ef24 	.word	0x0800ef24
 800ae9c:	7ff00000 	.word	0x7ff00000
 800aea0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aea2:	1c55      	adds	r5, r2, #1
 800aea4:	9517      	str	r5, [sp, #92]	; 0x5c
 800aea6:	7852      	ldrb	r2, [r2, #1]
 800aea8:	2a30      	cmp	r2, #48	; 0x30
 800aeaa:	d0f9      	beq.n	800aea0 <_strtod_l+0x2b8>
 800aeac:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800aeb0:	2d08      	cmp	r5, #8
 800aeb2:	f63f af77 	bhi.w	800ada4 <_strtod_l+0x1bc>
 800aeb6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800aeba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aebc:	9208      	str	r2, [sp, #32]
 800aebe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aec0:	1c55      	adds	r5, r2, #1
 800aec2:	9517      	str	r5, [sp, #92]	; 0x5c
 800aec4:	7852      	ldrb	r2, [r2, #1]
 800aec6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800aeca:	2f09      	cmp	r7, #9
 800aecc:	d937      	bls.n	800af3e <_strtod_l+0x356>
 800aece:	9f08      	ldr	r7, [sp, #32]
 800aed0:	1bed      	subs	r5, r5, r7
 800aed2:	2d08      	cmp	r5, #8
 800aed4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800aed8:	dc02      	bgt.n	800aee0 <_strtod_l+0x2f8>
 800aeda:	4565      	cmp	r5, ip
 800aedc:	bfa8      	it	ge
 800aede:	4665      	movge	r5, ip
 800aee0:	f1be 0f00 	cmp.w	lr, #0
 800aee4:	d000      	beq.n	800aee8 <_strtod_l+0x300>
 800aee6:	426d      	negs	r5, r5
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d14f      	bne.n	800af8c <_strtod_l+0x3a4>
 800aeec:	9b06      	ldr	r3, [sp, #24]
 800aeee:	4303      	orrs	r3, r0
 800aef0:	f47f aebe 	bne.w	800ac70 <_strtod_l+0x88>
 800aef4:	2900      	cmp	r1, #0
 800aef6:	f47f aed8 	bne.w	800acaa <_strtod_l+0xc2>
 800aefa:	2a69      	cmp	r2, #105	; 0x69
 800aefc:	d027      	beq.n	800af4e <_strtod_l+0x366>
 800aefe:	dc24      	bgt.n	800af4a <_strtod_l+0x362>
 800af00:	2a49      	cmp	r2, #73	; 0x49
 800af02:	d024      	beq.n	800af4e <_strtod_l+0x366>
 800af04:	2a4e      	cmp	r2, #78	; 0x4e
 800af06:	f47f aed0 	bne.w	800acaa <_strtod_l+0xc2>
 800af0a:	499b      	ldr	r1, [pc, #620]	; (800b178 <_strtod_l+0x590>)
 800af0c:	a817      	add	r0, sp, #92	; 0x5c
 800af0e:	f001 fdbd 	bl	800ca8c <__match>
 800af12:	2800      	cmp	r0, #0
 800af14:	f43f aec9 	beq.w	800acaa <_strtod_l+0xc2>
 800af18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	2b28      	cmp	r3, #40	; 0x28
 800af1e:	d12d      	bne.n	800af7c <_strtod_l+0x394>
 800af20:	4996      	ldr	r1, [pc, #600]	; (800b17c <_strtod_l+0x594>)
 800af22:	aa1a      	add	r2, sp, #104	; 0x68
 800af24:	a817      	add	r0, sp, #92	; 0x5c
 800af26:	f001 fdc5 	bl	800cab4 <__hexnan>
 800af2a:	2805      	cmp	r0, #5
 800af2c:	d126      	bne.n	800af7c <_strtod_l+0x394>
 800af2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af30:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800af34:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800af38:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800af3c:	e698      	b.n	800ac70 <_strtod_l+0x88>
 800af3e:	250a      	movs	r5, #10
 800af40:	fb05 250c 	mla	r5, r5, ip, r2
 800af44:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800af48:	e7b9      	b.n	800aebe <_strtod_l+0x2d6>
 800af4a:	2a6e      	cmp	r2, #110	; 0x6e
 800af4c:	e7db      	b.n	800af06 <_strtod_l+0x31e>
 800af4e:	498c      	ldr	r1, [pc, #560]	; (800b180 <_strtod_l+0x598>)
 800af50:	a817      	add	r0, sp, #92	; 0x5c
 800af52:	f001 fd9b 	bl	800ca8c <__match>
 800af56:	2800      	cmp	r0, #0
 800af58:	f43f aea7 	beq.w	800acaa <_strtod_l+0xc2>
 800af5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af5e:	4989      	ldr	r1, [pc, #548]	; (800b184 <_strtod_l+0x59c>)
 800af60:	3b01      	subs	r3, #1
 800af62:	a817      	add	r0, sp, #92	; 0x5c
 800af64:	9317      	str	r3, [sp, #92]	; 0x5c
 800af66:	f001 fd91 	bl	800ca8c <__match>
 800af6a:	b910      	cbnz	r0, 800af72 <_strtod_l+0x38a>
 800af6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af6e:	3301      	adds	r3, #1
 800af70:	9317      	str	r3, [sp, #92]	; 0x5c
 800af72:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800b198 <_strtod_l+0x5b0>
 800af76:	f04f 0800 	mov.w	r8, #0
 800af7a:	e679      	b.n	800ac70 <_strtod_l+0x88>
 800af7c:	4882      	ldr	r0, [pc, #520]	; (800b188 <_strtod_l+0x5a0>)
 800af7e:	f003 f877 	bl	800e070 <nan>
 800af82:	ed8d 0b04 	vstr	d0, [sp, #16]
 800af86:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800af8a:	e671      	b.n	800ac70 <_strtod_l+0x88>
 800af8c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800af90:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800af94:	eba5 020b 	sub.w	r2, r5, fp
 800af98:	2e00      	cmp	r6, #0
 800af9a:	bf08      	it	eq
 800af9c:	461e      	moveq	r6, r3
 800af9e:	2b10      	cmp	r3, #16
 800afa0:	ed8d 7b08 	vstr	d7, [sp, #32]
 800afa4:	9206      	str	r2, [sp, #24]
 800afa6:	461a      	mov	r2, r3
 800afa8:	bfa8      	it	ge
 800afaa:	2210      	movge	r2, #16
 800afac:	2b09      	cmp	r3, #9
 800afae:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800afb2:	dd0e      	ble.n	800afd2 <_strtod_l+0x3ea>
 800afb4:	4975      	ldr	r1, [pc, #468]	; (800b18c <_strtod_l+0x5a4>)
 800afb6:	eddd 7a04 	vldr	s15, [sp, #16]
 800afba:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800afbe:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800afc2:	ed9d 5b08 	vldr	d5, [sp, #32]
 800afc6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800afca:	eea5 7b06 	vfma.f64	d7, d5, d6
 800afce:	ec59 8b17 	vmov	r8, r9, d7
 800afd2:	2b0f      	cmp	r3, #15
 800afd4:	dc37      	bgt.n	800b046 <_strtod_l+0x45e>
 800afd6:	9906      	ldr	r1, [sp, #24]
 800afd8:	2900      	cmp	r1, #0
 800afda:	f43f ae49 	beq.w	800ac70 <_strtod_l+0x88>
 800afde:	dd23      	ble.n	800b028 <_strtod_l+0x440>
 800afe0:	2916      	cmp	r1, #22
 800afe2:	dc0b      	bgt.n	800affc <_strtod_l+0x414>
 800afe4:	4b69      	ldr	r3, [pc, #420]	; (800b18c <_strtod_l+0x5a4>)
 800afe6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800afea:	ed93 7b00 	vldr	d7, [r3]
 800afee:	ec49 8b16 	vmov	d6, r8, r9
 800aff2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aff6:	ec59 8b17 	vmov	r8, r9, d7
 800affa:	e639      	b.n	800ac70 <_strtod_l+0x88>
 800affc:	9806      	ldr	r0, [sp, #24]
 800affe:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800b002:	4281      	cmp	r1, r0
 800b004:	db1f      	blt.n	800b046 <_strtod_l+0x45e>
 800b006:	4a61      	ldr	r2, [pc, #388]	; (800b18c <_strtod_l+0x5a4>)
 800b008:	f1c3 030f 	rsb	r3, r3, #15
 800b00c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800b010:	ed91 7b00 	vldr	d7, [r1]
 800b014:	ec49 8b16 	vmov	d6, r8, r9
 800b018:	1ac3      	subs	r3, r0, r3
 800b01a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b01e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b022:	ed92 6b00 	vldr	d6, [r2]
 800b026:	e7e4      	b.n	800aff2 <_strtod_l+0x40a>
 800b028:	9906      	ldr	r1, [sp, #24]
 800b02a:	3116      	adds	r1, #22
 800b02c:	db0b      	blt.n	800b046 <_strtod_l+0x45e>
 800b02e:	4b57      	ldr	r3, [pc, #348]	; (800b18c <_strtod_l+0x5a4>)
 800b030:	ebab 0505 	sub.w	r5, fp, r5
 800b034:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b038:	ed95 7b00 	vldr	d7, [r5]
 800b03c:	ec49 8b16 	vmov	d6, r8, r9
 800b040:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b044:	e7d7      	b.n	800aff6 <_strtod_l+0x40e>
 800b046:	9906      	ldr	r1, [sp, #24]
 800b048:	1a9a      	subs	r2, r3, r2
 800b04a:	440a      	add	r2, r1
 800b04c:	2a00      	cmp	r2, #0
 800b04e:	dd74      	ble.n	800b13a <_strtod_l+0x552>
 800b050:	f012 000f 	ands.w	r0, r2, #15
 800b054:	d00a      	beq.n	800b06c <_strtod_l+0x484>
 800b056:	494d      	ldr	r1, [pc, #308]	; (800b18c <_strtod_l+0x5a4>)
 800b058:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b05c:	ed91 7b00 	vldr	d7, [r1]
 800b060:	ec49 8b16 	vmov	d6, r8, r9
 800b064:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b068:	ec59 8b17 	vmov	r8, r9, d7
 800b06c:	f032 020f 	bics.w	r2, r2, #15
 800b070:	d04f      	beq.n	800b112 <_strtod_l+0x52a>
 800b072:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800b076:	dd22      	ble.n	800b0be <_strtod_l+0x4d6>
 800b078:	2500      	movs	r5, #0
 800b07a:	462e      	mov	r6, r5
 800b07c:	950a      	str	r5, [sp, #40]	; 0x28
 800b07e:	462f      	mov	r7, r5
 800b080:	2322      	movs	r3, #34	; 0x22
 800b082:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800b198 <_strtod_l+0x5b0>
 800b086:	6023      	str	r3, [r4, #0]
 800b088:	f04f 0800 	mov.w	r8, #0
 800b08c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b08e:	2b00      	cmp	r3, #0
 800b090:	f43f adee 	beq.w	800ac70 <_strtod_l+0x88>
 800b094:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b096:	4620      	mov	r0, r4
 800b098:	f001 fe26 	bl	800cce8 <_Bfree>
 800b09c:	4639      	mov	r1, r7
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f001 fe22 	bl	800cce8 <_Bfree>
 800b0a4:	4631      	mov	r1, r6
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f001 fe1e 	bl	800cce8 <_Bfree>
 800b0ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f001 fe1a 	bl	800cce8 <_Bfree>
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	f001 fe16 	bl	800cce8 <_Bfree>
 800b0bc:	e5d8      	b.n	800ac70 <_strtod_l+0x88>
 800b0be:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800b0c2:	2000      	movs	r0, #0
 800b0c4:	4f32      	ldr	r7, [pc, #200]	; (800b190 <_strtod_l+0x5a8>)
 800b0c6:	1112      	asrs	r2, r2, #4
 800b0c8:	4601      	mov	r1, r0
 800b0ca:	2a01      	cmp	r2, #1
 800b0cc:	dc24      	bgt.n	800b118 <_strtod_l+0x530>
 800b0ce:	b108      	cbz	r0, 800b0d4 <_strtod_l+0x4ec>
 800b0d0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b0d4:	4a2e      	ldr	r2, [pc, #184]	; (800b190 <_strtod_l+0x5a8>)
 800b0d6:	482f      	ldr	r0, [pc, #188]	; (800b194 <_strtod_l+0x5ac>)
 800b0d8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800b0dc:	ed91 7b00 	vldr	d7, [r1]
 800b0e0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b0e4:	ec49 8b16 	vmov	d6, r8, r9
 800b0e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b0ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b0f0:	9905      	ldr	r1, [sp, #20]
 800b0f2:	4a29      	ldr	r2, [pc, #164]	; (800b198 <_strtod_l+0x5b0>)
 800b0f4:	400a      	ands	r2, r1
 800b0f6:	4282      	cmp	r2, r0
 800b0f8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b0fc:	d8bc      	bhi.n	800b078 <_strtod_l+0x490>
 800b0fe:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800b102:	4282      	cmp	r2, r0
 800b104:	bf86      	itte	hi
 800b106:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800b19c <_strtod_l+0x5b4>
 800b10a:	f04f 38ff 	movhi.w	r8, #4294967295
 800b10e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800b112:	2200      	movs	r2, #0
 800b114:	9204      	str	r2, [sp, #16]
 800b116:	e07f      	b.n	800b218 <_strtod_l+0x630>
 800b118:	f012 0f01 	tst.w	r2, #1
 800b11c:	d00a      	beq.n	800b134 <_strtod_l+0x54c>
 800b11e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 800b122:	ed90 7b00 	vldr	d7, [r0]
 800b126:	ed9d 6b04 	vldr	d6, [sp, #16]
 800b12a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b12e:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b132:	2001      	movs	r0, #1
 800b134:	3101      	adds	r1, #1
 800b136:	1052      	asrs	r2, r2, #1
 800b138:	e7c7      	b.n	800b0ca <_strtod_l+0x4e2>
 800b13a:	d0ea      	beq.n	800b112 <_strtod_l+0x52a>
 800b13c:	4252      	negs	r2, r2
 800b13e:	f012 000f 	ands.w	r0, r2, #15
 800b142:	d00a      	beq.n	800b15a <_strtod_l+0x572>
 800b144:	4911      	ldr	r1, [pc, #68]	; (800b18c <_strtod_l+0x5a4>)
 800b146:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b14a:	ed91 7b00 	vldr	d7, [r1]
 800b14e:	ec49 8b16 	vmov	d6, r8, r9
 800b152:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b156:	ec59 8b17 	vmov	r8, r9, d7
 800b15a:	1112      	asrs	r2, r2, #4
 800b15c:	d0d9      	beq.n	800b112 <_strtod_l+0x52a>
 800b15e:	2a1f      	cmp	r2, #31
 800b160:	dd1e      	ble.n	800b1a0 <_strtod_l+0x5b8>
 800b162:	2500      	movs	r5, #0
 800b164:	462e      	mov	r6, r5
 800b166:	950a      	str	r5, [sp, #40]	; 0x28
 800b168:	462f      	mov	r7, r5
 800b16a:	2322      	movs	r3, #34	; 0x22
 800b16c:	f04f 0800 	mov.w	r8, #0
 800b170:	f04f 0900 	mov.w	r9, #0
 800b174:	6023      	str	r3, [r4, #0]
 800b176:	e789      	b.n	800b08c <_strtod_l+0x4a4>
 800b178:	0800eef9 	.word	0x0800eef9
 800b17c:	0800ef38 	.word	0x0800ef38
 800b180:	0800eef1 	.word	0x0800eef1
 800b184:	0800f07c 	.word	0x0800f07c
 800b188:	0800f353 	.word	0x0800f353
 800b18c:	0800f218 	.word	0x0800f218
 800b190:	0800f1f0 	.word	0x0800f1f0
 800b194:	7ca00000 	.word	0x7ca00000
 800b198:	7ff00000 	.word	0x7ff00000
 800b19c:	7fefffff 	.word	0x7fefffff
 800b1a0:	f012 0110 	ands.w	r1, r2, #16
 800b1a4:	bf18      	it	ne
 800b1a6:	216a      	movne	r1, #106	; 0x6a
 800b1a8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800b1ac:	9104      	str	r1, [sp, #16]
 800b1ae:	49c0      	ldr	r1, [pc, #768]	; (800b4b0 <_strtod_l+0x8c8>)
 800b1b0:	2000      	movs	r0, #0
 800b1b2:	07d7      	lsls	r7, r2, #31
 800b1b4:	d508      	bpl.n	800b1c8 <_strtod_l+0x5e0>
 800b1b6:	ed9d 6b08 	vldr	d6, [sp, #32]
 800b1ba:	ed91 7b00 	vldr	d7, [r1]
 800b1be:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b1c2:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b1c6:	2001      	movs	r0, #1
 800b1c8:	1052      	asrs	r2, r2, #1
 800b1ca:	f101 0108 	add.w	r1, r1, #8
 800b1ce:	d1f0      	bne.n	800b1b2 <_strtod_l+0x5ca>
 800b1d0:	b108      	cbz	r0, 800b1d6 <_strtod_l+0x5ee>
 800b1d2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800b1d6:	9a04      	ldr	r2, [sp, #16]
 800b1d8:	b1ba      	cbz	r2, 800b20a <_strtod_l+0x622>
 800b1da:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b1de:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800b1e2:	2a00      	cmp	r2, #0
 800b1e4:	4649      	mov	r1, r9
 800b1e6:	dd10      	ble.n	800b20a <_strtod_l+0x622>
 800b1e8:	2a1f      	cmp	r2, #31
 800b1ea:	f340 8132 	ble.w	800b452 <_strtod_l+0x86a>
 800b1ee:	2a34      	cmp	r2, #52	; 0x34
 800b1f0:	bfde      	ittt	le
 800b1f2:	3a20      	suble	r2, #32
 800b1f4:	f04f 30ff 	movle.w	r0, #4294967295
 800b1f8:	fa00 f202 	lslle.w	r2, r0, r2
 800b1fc:	f04f 0800 	mov.w	r8, #0
 800b200:	bfcc      	ite	gt
 800b202:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b206:	ea02 0901 	andle.w	r9, r2, r1
 800b20a:	ec49 8b17 	vmov	d7, r8, r9
 800b20e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b216:	d0a4      	beq.n	800b162 <_strtod_l+0x57a>
 800b218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b21a:	9200      	str	r2, [sp, #0]
 800b21c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b21e:	4632      	mov	r2, r6
 800b220:	4620      	mov	r0, r4
 800b222:	f001 fdcd 	bl	800cdc0 <__s2b>
 800b226:	900a      	str	r0, [sp, #40]	; 0x28
 800b228:	2800      	cmp	r0, #0
 800b22a:	f43f af25 	beq.w	800b078 <_strtod_l+0x490>
 800b22e:	9b06      	ldr	r3, [sp, #24]
 800b230:	ebab 0505 	sub.w	r5, fp, r5
 800b234:	2b00      	cmp	r3, #0
 800b236:	bfb4      	ite	lt
 800b238:	462b      	movlt	r3, r5
 800b23a:	2300      	movge	r3, #0
 800b23c:	930c      	str	r3, [sp, #48]	; 0x30
 800b23e:	9b06      	ldr	r3, [sp, #24]
 800b240:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800b498 <_strtod_l+0x8b0>
 800b244:	ed9f ab96 	vldr	d10, [pc, #600]	; 800b4a0 <_strtod_l+0x8b8>
 800b248:	ed9f bb97 	vldr	d11, [pc, #604]	; 800b4a8 <_strtod_l+0x8c0>
 800b24c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b250:	2500      	movs	r5, #0
 800b252:	9312      	str	r3, [sp, #72]	; 0x48
 800b254:	462e      	mov	r6, r5
 800b256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b258:	4620      	mov	r0, r4
 800b25a:	6859      	ldr	r1, [r3, #4]
 800b25c:	f001 fd04 	bl	800cc68 <_Balloc>
 800b260:	4607      	mov	r7, r0
 800b262:	2800      	cmp	r0, #0
 800b264:	f43f af0c 	beq.w	800b080 <_strtod_l+0x498>
 800b268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b26a:	691a      	ldr	r2, [r3, #16]
 800b26c:	3202      	adds	r2, #2
 800b26e:	f103 010c 	add.w	r1, r3, #12
 800b272:	0092      	lsls	r2, r2, #2
 800b274:	300c      	adds	r0, #12
 800b276:	f001 fce9 	bl	800cc4c <memcpy>
 800b27a:	ec49 8b10 	vmov	d0, r8, r9
 800b27e:	aa1a      	add	r2, sp, #104	; 0x68
 800b280:	a919      	add	r1, sp, #100	; 0x64
 800b282:	4620      	mov	r0, r4
 800b284:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800b288:	f002 f8d6 	bl	800d438 <__d2b>
 800b28c:	9018      	str	r0, [sp, #96]	; 0x60
 800b28e:	2800      	cmp	r0, #0
 800b290:	f43f aef6 	beq.w	800b080 <_strtod_l+0x498>
 800b294:	2101      	movs	r1, #1
 800b296:	4620      	mov	r0, r4
 800b298:	f001 fe2c 	bl	800cef4 <__i2b>
 800b29c:	4606      	mov	r6, r0
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	f43f aeee 	beq.w	800b080 <_strtod_l+0x498>
 800b2a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b2a6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	bfab      	itete	ge
 800b2ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b2ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b2b0:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 800b2b4:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 800b2b8:	bfac      	ite	ge
 800b2ba:	eb03 0b02 	addge.w	fp, r3, r2
 800b2be:	eba2 0a03 	sublt.w	sl, r2, r3
 800b2c2:	9a04      	ldr	r2, [sp, #16]
 800b2c4:	1a9b      	subs	r3, r3, r2
 800b2c6:	440b      	add	r3, r1
 800b2c8:	4a7a      	ldr	r2, [pc, #488]	; (800b4b4 <_strtod_l+0x8cc>)
 800b2ca:	3b01      	subs	r3, #1
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800b2d2:	f280 80d1 	bge.w	800b478 <_strtod_l+0x890>
 800b2d6:	1ad2      	subs	r2, r2, r3
 800b2d8:	2a1f      	cmp	r2, #31
 800b2da:	eba1 0102 	sub.w	r1, r1, r2
 800b2de:	f04f 0001 	mov.w	r0, #1
 800b2e2:	f300 80bd 	bgt.w	800b460 <_strtod_l+0x878>
 800b2e6:	fa00 f302 	lsl.w	r3, r0, r2
 800b2ea:	930e      	str	r3, [sp, #56]	; 0x38
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	930d      	str	r3, [sp, #52]	; 0x34
 800b2f0:	eb0b 0301 	add.w	r3, fp, r1
 800b2f4:	9a04      	ldr	r2, [sp, #16]
 800b2f6:	459b      	cmp	fp, r3
 800b2f8:	448a      	add	sl, r1
 800b2fa:	4492      	add	sl, r2
 800b2fc:	465a      	mov	r2, fp
 800b2fe:	bfa8      	it	ge
 800b300:	461a      	movge	r2, r3
 800b302:	4552      	cmp	r2, sl
 800b304:	bfa8      	it	ge
 800b306:	4652      	movge	r2, sl
 800b308:	2a00      	cmp	r2, #0
 800b30a:	bfc2      	ittt	gt
 800b30c:	1a9b      	subgt	r3, r3, r2
 800b30e:	ebaa 0a02 	subgt.w	sl, sl, r2
 800b312:	ebab 0b02 	subgt.w	fp, fp, r2
 800b316:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b318:	2a00      	cmp	r2, #0
 800b31a:	dd18      	ble.n	800b34e <_strtod_l+0x766>
 800b31c:	4631      	mov	r1, r6
 800b31e:	4620      	mov	r0, r4
 800b320:	9315      	str	r3, [sp, #84]	; 0x54
 800b322:	f001 fea3 	bl	800d06c <__pow5mult>
 800b326:	4606      	mov	r6, r0
 800b328:	2800      	cmp	r0, #0
 800b32a:	f43f aea9 	beq.w	800b080 <_strtod_l+0x498>
 800b32e:	4601      	mov	r1, r0
 800b330:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b332:	4620      	mov	r0, r4
 800b334:	f001 fdf4 	bl	800cf20 <__multiply>
 800b338:	9014      	str	r0, [sp, #80]	; 0x50
 800b33a:	2800      	cmp	r0, #0
 800b33c:	f43f aea0 	beq.w	800b080 <_strtod_l+0x498>
 800b340:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b342:	4620      	mov	r0, r4
 800b344:	f001 fcd0 	bl	800cce8 <_Bfree>
 800b348:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b34a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b34c:	9218      	str	r2, [sp, #96]	; 0x60
 800b34e:	2b00      	cmp	r3, #0
 800b350:	f300 8097 	bgt.w	800b482 <_strtod_l+0x89a>
 800b354:	9b06      	ldr	r3, [sp, #24]
 800b356:	2b00      	cmp	r3, #0
 800b358:	dd08      	ble.n	800b36c <_strtod_l+0x784>
 800b35a:	4639      	mov	r1, r7
 800b35c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b35e:	4620      	mov	r0, r4
 800b360:	f001 fe84 	bl	800d06c <__pow5mult>
 800b364:	4607      	mov	r7, r0
 800b366:	2800      	cmp	r0, #0
 800b368:	f43f ae8a 	beq.w	800b080 <_strtod_l+0x498>
 800b36c:	f1ba 0f00 	cmp.w	sl, #0
 800b370:	dd08      	ble.n	800b384 <_strtod_l+0x79c>
 800b372:	4639      	mov	r1, r7
 800b374:	4652      	mov	r2, sl
 800b376:	4620      	mov	r0, r4
 800b378:	f001 fed2 	bl	800d120 <__lshift>
 800b37c:	4607      	mov	r7, r0
 800b37e:	2800      	cmp	r0, #0
 800b380:	f43f ae7e 	beq.w	800b080 <_strtod_l+0x498>
 800b384:	f1bb 0f00 	cmp.w	fp, #0
 800b388:	dd08      	ble.n	800b39c <_strtod_l+0x7b4>
 800b38a:	4631      	mov	r1, r6
 800b38c:	465a      	mov	r2, fp
 800b38e:	4620      	mov	r0, r4
 800b390:	f001 fec6 	bl	800d120 <__lshift>
 800b394:	4606      	mov	r6, r0
 800b396:	2800      	cmp	r0, #0
 800b398:	f43f ae72 	beq.w	800b080 <_strtod_l+0x498>
 800b39c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b39e:	463a      	mov	r2, r7
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f001 ff45 	bl	800d230 <__mdiff>
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	f43f ae69 	beq.w	800b080 <_strtod_l+0x498>
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800b3b4:	60c3      	str	r3, [r0, #12]
 800b3b6:	4631      	mov	r1, r6
 800b3b8:	f001 ff1e 	bl	800d1f8 <__mcmp>
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	da7f      	bge.n	800b4c0 <_strtod_l+0x8d8>
 800b3c0:	ea5a 0308 	orrs.w	r3, sl, r8
 800b3c4:	f040 80a5 	bne.w	800b512 <_strtod_l+0x92a>
 800b3c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f040 80a0 	bne.w	800b512 <_strtod_l+0x92a>
 800b3d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b3d6:	0d1b      	lsrs	r3, r3, #20
 800b3d8:	051b      	lsls	r3, r3, #20
 800b3da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b3de:	f240 8098 	bls.w	800b512 <_strtod_l+0x92a>
 800b3e2:	696b      	ldr	r3, [r5, #20]
 800b3e4:	b91b      	cbnz	r3, 800b3ee <_strtod_l+0x806>
 800b3e6:	692b      	ldr	r3, [r5, #16]
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	f340 8092 	ble.w	800b512 <_strtod_l+0x92a>
 800b3ee:	4629      	mov	r1, r5
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f001 fe94 	bl	800d120 <__lshift>
 800b3f8:	4631      	mov	r1, r6
 800b3fa:	4605      	mov	r5, r0
 800b3fc:	f001 fefc 	bl	800d1f8 <__mcmp>
 800b400:	2800      	cmp	r0, #0
 800b402:	f340 8086 	ble.w	800b512 <_strtod_l+0x92a>
 800b406:	9904      	ldr	r1, [sp, #16]
 800b408:	4a2b      	ldr	r2, [pc, #172]	; (800b4b8 <_strtod_l+0x8d0>)
 800b40a:	464b      	mov	r3, r9
 800b40c:	2900      	cmp	r1, #0
 800b40e:	f000 80a1 	beq.w	800b554 <_strtod_l+0x96c>
 800b412:	ea02 0109 	and.w	r1, r2, r9
 800b416:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b41a:	f300 809b 	bgt.w	800b554 <_strtod_l+0x96c>
 800b41e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b422:	f77f aea2 	ble.w	800b16a <_strtod_l+0x582>
 800b426:	4a25      	ldr	r2, [pc, #148]	; (800b4bc <_strtod_l+0x8d4>)
 800b428:	2300      	movs	r3, #0
 800b42a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800b42e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 800b432:	ec49 8b17 	vmov	d7, r8, r9
 800b436:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b43a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b43e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800b442:	4313      	orrs	r3, r2
 800b444:	bf08      	it	eq
 800b446:	2322      	moveq	r3, #34	; 0x22
 800b448:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b44c:	bf08      	it	eq
 800b44e:	6023      	streq	r3, [r4, #0]
 800b450:	e620      	b.n	800b094 <_strtod_l+0x4ac>
 800b452:	f04f 31ff 	mov.w	r1, #4294967295
 800b456:	fa01 f202 	lsl.w	r2, r1, r2
 800b45a:	ea02 0808 	and.w	r8, r2, r8
 800b45e:	e6d4      	b.n	800b20a <_strtod_l+0x622>
 800b460:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800b464:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800b468:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800b46c:	33e2      	adds	r3, #226	; 0xe2
 800b46e:	fa00 f303 	lsl.w	r3, r0, r3
 800b472:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 800b476:	e73b      	b.n	800b2f0 <_strtod_l+0x708>
 800b478:	2000      	movs	r0, #0
 800b47a:	2301      	movs	r3, #1
 800b47c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 800b480:	e736      	b.n	800b2f0 <_strtod_l+0x708>
 800b482:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b484:	461a      	mov	r2, r3
 800b486:	4620      	mov	r0, r4
 800b488:	f001 fe4a 	bl	800d120 <__lshift>
 800b48c:	9018      	str	r0, [sp, #96]	; 0x60
 800b48e:	2800      	cmp	r0, #0
 800b490:	f47f af60 	bne.w	800b354 <_strtod_l+0x76c>
 800b494:	e5f4      	b.n	800b080 <_strtod_l+0x498>
 800b496:	bf00      	nop
 800b498:	94a03595 	.word	0x94a03595
 800b49c:	3fcfffff 	.word	0x3fcfffff
 800b4a0:	94a03595 	.word	0x94a03595
 800b4a4:	3fdfffff 	.word	0x3fdfffff
 800b4a8:	35afe535 	.word	0x35afe535
 800b4ac:	3fe00000 	.word	0x3fe00000
 800b4b0:	0800ef50 	.word	0x0800ef50
 800b4b4:	fffffc02 	.word	0xfffffc02
 800b4b8:	7ff00000 	.word	0x7ff00000
 800b4bc:	39500000 	.word	0x39500000
 800b4c0:	46cb      	mov	fp, r9
 800b4c2:	d165      	bne.n	800b590 <_strtod_l+0x9a8>
 800b4c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4c8:	f1ba 0f00 	cmp.w	sl, #0
 800b4cc:	d02a      	beq.n	800b524 <_strtod_l+0x93c>
 800b4ce:	4aaa      	ldr	r2, [pc, #680]	; (800b778 <_strtod_l+0xb90>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d12b      	bne.n	800b52c <_strtod_l+0x944>
 800b4d4:	9b04      	ldr	r3, [sp, #16]
 800b4d6:	4641      	mov	r1, r8
 800b4d8:	b1fb      	cbz	r3, 800b51a <_strtod_l+0x932>
 800b4da:	4aa8      	ldr	r2, [pc, #672]	; (800b77c <_strtod_l+0xb94>)
 800b4dc:	ea09 0202 	and.w	r2, r9, r2
 800b4e0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e8:	d81a      	bhi.n	800b520 <_strtod_l+0x938>
 800b4ea:	0d12      	lsrs	r2, r2, #20
 800b4ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b4f0:	fa00 f303 	lsl.w	r3, r0, r3
 800b4f4:	4299      	cmp	r1, r3
 800b4f6:	d119      	bne.n	800b52c <_strtod_l+0x944>
 800b4f8:	4ba1      	ldr	r3, [pc, #644]	; (800b780 <_strtod_l+0xb98>)
 800b4fa:	459b      	cmp	fp, r3
 800b4fc:	d102      	bne.n	800b504 <_strtod_l+0x91c>
 800b4fe:	3101      	adds	r1, #1
 800b500:	f43f adbe 	beq.w	800b080 <_strtod_l+0x498>
 800b504:	4b9d      	ldr	r3, [pc, #628]	; (800b77c <_strtod_l+0xb94>)
 800b506:	ea0b 0303 	and.w	r3, fp, r3
 800b50a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b50e:	f04f 0800 	mov.w	r8, #0
 800b512:	9b04      	ldr	r3, [sp, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d186      	bne.n	800b426 <_strtod_l+0x83e>
 800b518:	e5bc      	b.n	800b094 <_strtod_l+0x4ac>
 800b51a:	f04f 33ff 	mov.w	r3, #4294967295
 800b51e:	e7e9      	b.n	800b4f4 <_strtod_l+0x90c>
 800b520:	4603      	mov	r3, r0
 800b522:	e7e7      	b.n	800b4f4 <_strtod_l+0x90c>
 800b524:	ea53 0308 	orrs.w	r3, r3, r8
 800b528:	f43f af6d 	beq.w	800b406 <_strtod_l+0x81e>
 800b52c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b52e:	b1db      	cbz	r3, 800b568 <_strtod_l+0x980>
 800b530:	ea13 0f0b 	tst.w	r3, fp
 800b534:	d0ed      	beq.n	800b512 <_strtod_l+0x92a>
 800b536:	9a04      	ldr	r2, [sp, #16]
 800b538:	4640      	mov	r0, r8
 800b53a:	4649      	mov	r1, r9
 800b53c:	f1ba 0f00 	cmp.w	sl, #0
 800b540:	d016      	beq.n	800b570 <_strtod_l+0x988>
 800b542:	f7ff fb37 	bl	800abb4 <sulp>
 800b546:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b54a:	ee37 7b00 	vadd.f64	d7, d7, d0
 800b54e:	ec59 8b17 	vmov	r8, r9, d7
 800b552:	e7de      	b.n	800b512 <_strtod_l+0x92a>
 800b554:	4013      	ands	r3, r2
 800b556:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b55a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b55e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b562:	f04f 38ff 	mov.w	r8, #4294967295
 800b566:	e7d4      	b.n	800b512 <_strtod_l+0x92a>
 800b568:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b56a:	ea13 0f08 	tst.w	r3, r8
 800b56e:	e7e1      	b.n	800b534 <_strtod_l+0x94c>
 800b570:	f7ff fb20 	bl	800abb4 <sulp>
 800b574:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b578:	ee37 7b40 	vsub.f64	d7, d7, d0
 800b57c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b580:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b588:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800b58c:	d1c1      	bne.n	800b512 <_strtod_l+0x92a>
 800b58e:	e5ec      	b.n	800b16a <_strtod_l+0x582>
 800b590:	4631      	mov	r1, r6
 800b592:	4628      	mov	r0, r5
 800b594:	f001 ffac 	bl	800d4f0 <__ratio>
 800b598:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800b59c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5a4:	d867      	bhi.n	800b676 <_strtod_l+0xa8e>
 800b5a6:	f1ba 0f00 	cmp.w	sl, #0
 800b5aa:	d044      	beq.n	800b636 <_strtod_l+0xa4e>
 800b5ac:	4b75      	ldr	r3, [pc, #468]	; (800b784 <_strtod_l+0xb9c>)
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800b5b4:	4971      	ldr	r1, [pc, #452]	; (800b77c <_strtod_l+0xb94>)
 800b5b6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800b790 <_strtod_l+0xba8>
 800b5ba:	ea0b 0001 	and.w	r0, fp, r1
 800b5be:	4560      	cmp	r0, ip
 800b5c0:	900d      	str	r0, [sp, #52]	; 0x34
 800b5c2:	f040 808b 	bne.w	800b6dc <_strtod_l+0xaf4>
 800b5c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b5ca:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800b5ce:	ec49 8b10 	vmov	d0, r8, r9
 800b5d2:	ec43 2b1c 	vmov	d12, r2, r3
 800b5d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b5da:	f001 feb1 	bl	800d340 <__ulp>
 800b5de:	ec49 8b1d 	vmov	d13, r8, r9
 800b5e2:	eeac db00 	vfma.f64	d13, d12, d0
 800b5e6:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 800b5ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5ec:	4963      	ldr	r1, [pc, #396]	; (800b77c <_strtod_l+0xb94>)
 800b5ee:	4a66      	ldr	r2, [pc, #408]	; (800b788 <_strtod_l+0xba0>)
 800b5f0:	4019      	ands	r1, r3
 800b5f2:	4291      	cmp	r1, r2
 800b5f4:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800b5f8:	d947      	bls.n	800b68a <_strtod_l+0xaa2>
 800b5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5fc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b600:	4293      	cmp	r3, r2
 800b602:	d103      	bne.n	800b60c <_strtod_l+0xa24>
 800b604:	9b08      	ldr	r3, [sp, #32]
 800b606:	3301      	adds	r3, #1
 800b608:	f43f ad3a 	beq.w	800b080 <_strtod_l+0x498>
 800b60c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 800b780 <_strtod_l+0xb98>
 800b610:	f04f 38ff 	mov.w	r8, #4294967295
 800b614:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b616:	4620      	mov	r0, r4
 800b618:	f001 fb66 	bl	800cce8 <_Bfree>
 800b61c:	4639      	mov	r1, r7
 800b61e:	4620      	mov	r0, r4
 800b620:	f001 fb62 	bl	800cce8 <_Bfree>
 800b624:	4631      	mov	r1, r6
 800b626:	4620      	mov	r0, r4
 800b628:	f001 fb5e 	bl	800cce8 <_Bfree>
 800b62c:	4629      	mov	r1, r5
 800b62e:	4620      	mov	r0, r4
 800b630:	f001 fb5a 	bl	800cce8 <_Bfree>
 800b634:	e60f      	b.n	800b256 <_strtod_l+0x66e>
 800b636:	f1b8 0f00 	cmp.w	r8, #0
 800b63a:	d112      	bne.n	800b662 <_strtod_l+0xa7a>
 800b63c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b640:	b9b3      	cbnz	r3, 800b670 <_strtod_l+0xa88>
 800b642:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b646:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b64e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800b652:	d401      	bmi.n	800b658 <_strtod_l+0xa70>
 800b654:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b658:	eeb1 7b48 	vneg.f64	d7, d8
 800b65c:	ec53 2b17 	vmov	r2, r3, d7
 800b660:	e7a8      	b.n	800b5b4 <_strtod_l+0x9cc>
 800b662:	f1b8 0f01 	cmp.w	r8, #1
 800b666:	d103      	bne.n	800b670 <_strtod_l+0xa88>
 800b668:	f1b9 0f00 	cmp.w	r9, #0
 800b66c:	f43f ad7d 	beq.w	800b16a <_strtod_l+0x582>
 800b670:	4b46      	ldr	r3, [pc, #280]	; (800b78c <_strtod_l+0xba4>)
 800b672:	2200      	movs	r2, #0
 800b674:	e79c      	b.n	800b5b0 <_strtod_l+0x9c8>
 800b676:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800b67a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b67e:	f1ba 0f00 	cmp.w	sl, #0
 800b682:	d0e9      	beq.n	800b658 <_strtod_l+0xa70>
 800b684:	ec53 2b18 	vmov	r2, r3, d8
 800b688:	e794      	b.n	800b5b4 <_strtod_l+0x9cc>
 800b68a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b68e:	9b04      	ldr	r3, [sp, #16]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d1bf      	bne.n	800b614 <_strtod_l+0xa2c>
 800b694:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b698:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b69a:	0d1b      	lsrs	r3, r3, #20
 800b69c:	051b      	lsls	r3, r3, #20
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d1b8      	bne.n	800b614 <_strtod_l+0xa2c>
 800b6a2:	ec51 0b18 	vmov	r0, r1, d8
 800b6a6:	f7f5 f807 	bl	80006b8 <__aeabi_d2lz>
 800b6aa:	f7f4 ffbf 	bl	800062c <__aeabi_l2d>
 800b6ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6b2:	ec41 0b17 	vmov	d7, r0, r1
 800b6b6:	ea43 0308 	orr.w	r3, r3, r8
 800b6ba:	ea53 030a 	orrs.w	r3, r3, sl
 800b6be:	ee38 8b47 	vsub.f64	d8, d8, d7
 800b6c2:	d03e      	beq.n	800b742 <_strtod_l+0xb5a>
 800b6c4:	eeb4 8bca 	vcmpe.f64	d8, d10
 800b6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6cc:	f53f ace2 	bmi.w	800b094 <_strtod_l+0x4ac>
 800b6d0:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800b6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6d8:	dd9c      	ble.n	800b614 <_strtod_l+0xa2c>
 800b6da:	e4db      	b.n	800b094 <_strtod_l+0x4ac>
 800b6dc:	9904      	ldr	r1, [sp, #16]
 800b6de:	b301      	cbz	r1, 800b722 <_strtod_l+0xb3a>
 800b6e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b6e2:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800b6e6:	d81c      	bhi.n	800b722 <_strtod_l+0xb3a>
 800b6e8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800b770 <_strtod_l+0xb88>
 800b6ec:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6f4:	d811      	bhi.n	800b71a <_strtod_l+0xb32>
 800b6f6:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800b6fa:	ee18 3a10 	vmov	r3, s16
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	bf38      	it	cc
 800b702:	2301      	movcc	r3, #1
 800b704:	ee08 3a10 	vmov	s16, r3
 800b708:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800b70c:	f1ba 0f00 	cmp.w	sl, #0
 800b710:	d114      	bne.n	800b73c <_strtod_l+0xb54>
 800b712:	eeb1 7b48 	vneg.f64	d7, d8
 800b716:	ec53 2b17 	vmov	r2, r3, d7
 800b71a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b71c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800b720:	1a0b      	subs	r3, r1, r0
 800b722:	ed9d 0b08 	vldr	d0, [sp, #32]
 800b726:	ec43 2b1c 	vmov	d12, r2, r3
 800b72a:	f001 fe09 	bl	800d340 <__ulp>
 800b72e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b732:	eeac 7b00 	vfma.f64	d7, d12, d0
 800b736:	ec59 8b17 	vmov	r8, r9, d7
 800b73a:	e7a8      	b.n	800b68e <_strtod_l+0xaa6>
 800b73c:	ec53 2b18 	vmov	r2, r3, d8
 800b740:	e7eb      	b.n	800b71a <_strtod_l+0xb32>
 800b742:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800b746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b74a:	f57f af63 	bpl.w	800b614 <_strtod_l+0xa2c>
 800b74e:	e4a1      	b.n	800b094 <_strtod_l+0x4ac>
 800b750:	2300      	movs	r3, #0
 800b752:	930b      	str	r3, [sp, #44]	; 0x2c
 800b754:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b756:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b758:	6013      	str	r3, [r2, #0]
 800b75a:	f7ff ba8d 	b.w	800ac78 <_strtod_l+0x90>
 800b75e:	2a65      	cmp	r2, #101	; 0x65
 800b760:	f43f ab89 	beq.w	800ae76 <_strtod_l+0x28e>
 800b764:	2a45      	cmp	r2, #69	; 0x45
 800b766:	f43f ab86 	beq.w	800ae76 <_strtod_l+0x28e>
 800b76a:	2101      	movs	r1, #1
 800b76c:	f7ff bbbe 	b.w	800aeec <_strtod_l+0x304>
 800b770:	ffc00000 	.word	0xffc00000
 800b774:	41dfffff 	.word	0x41dfffff
 800b778:	000fffff 	.word	0x000fffff
 800b77c:	7ff00000 	.word	0x7ff00000
 800b780:	7fefffff 	.word	0x7fefffff
 800b784:	3ff00000 	.word	0x3ff00000
 800b788:	7c9fffff 	.word	0x7c9fffff
 800b78c:	bff00000 	.word	0xbff00000
 800b790:	7fe00000 	.word	0x7fe00000

0800b794 <_strtod_r>:
 800b794:	4b01      	ldr	r3, [pc, #4]	; (800b79c <_strtod_r+0x8>)
 800b796:	f7ff ba27 	b.w	800abe8 <_strtod_l>
 800b79a:	bf00      	nop
 800b79c:	200000c0 	.word	0x200000c0

0800b7a0 <_strtol_l.isra.0>:
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a6:	d001      	beq.n	800b7ac <_strtol_l.isra.0+0xc>
 800b7a8:	2b24      	cmp	r3, #36	; 0x24
 800b7aa:	d906      	bls.n	800b7ba <_strtol_l.isra.0+0x1a>
 800b7ac:	f7fe face 	bl	8009d4c <__errno>
 800b7b0:	2316      	movs	r3, #22
 800b7b2:	6003      	str	r3, [r0, #0]
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ba:	4f3a      	ldr	r7, [pc, #232]	; (800b8a4 <_strtol_l.isra.0+0x104>)
 800b7bc:	468e      	mov	lr, r1
 800b7be:	4676      	mov	r6, lr
 800b7c0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b7c4:	5de5      	ldrb	r5, [r4, r7]
 800b7c6:	f015 0508 	ands.w	r5, r5, #8
 800b7ca:	d1f8      	bne.n	800b7be <_strtol_l.isra.0+0x1e>
 800b7cc:	2c2d      	cmp	r4, #45	; 0x2d
 800b7ce:	d134      	bne.n	800b83a <_strtol_l.isra.0+0x9a>
 800b7d0:	f89e 4000 	ldrb.w	r4, [lr]
 800b7d4:	f04f 0801 	mov.w	r8, #1
 800b7d8:	f106 0e02 	add.w	lr, r6, #2
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d05c      	beq.n	800b89a <_strtol_l.isra.0+0xfa>
 800b7e0:	2b10      	cmp	r3, #16
 800b7e2:	d10c      	bne.n	800b7fe <_strtol_l.isra.0+0x5e>
 800b7e4:	2c30      	cmp	r4, #48	; 0x30
 800b7e6:	d10a      	bne.n	800b7fe <_strtol_l.isra.0+0x5e>
 800b7e8:	f89e 4000 	ldrb.w	r4, [lr]
 800b7ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b7f0:	2c58      	cmp	r4, #88	; 0x58
 800b7f2:	d14d      	bne.n	800b890 <_strtol_l.isra.0+0xf0>
 800b7f4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b7f8:	2310      	movs	r3, #16
 800b7fa:	f10e 0e02 	add.w	lr, lr, #2
 800b7fe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b802:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b806:	2600      	movs	r6, #0
 800b808:	fbbc f9f3 	udiv	r9, ip, r3
 800b80c:	4635      	mov	r5, r6
 800b80e:	fb03 ca19 	mls	sl, r3, r9, ip
 800b812:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b816:	2f09      	cmp	r7, #9
 800b818:	d818      	bhi.n	800b84c <_strtol_l.isra.0+0xac>
 800b81a:	463c      	mov	r4, r7
 800b81c:	42a3      	cmp	r3, r4
 800b81e:	dd24      	ble.n	800b86a <_strtol_l.isra.0+0xca>
 800b820:	2e00      	cmp	r6, #0
 800b822:	db1f      	blt.n	800b864 <_strtol_l.isra.0+0xc4>
 800b824:	45a9      	cmp	r9, r5
 800b826:	d31d      	bcc.n	800b864 <_strtol_l.isra.0+0xc4>
 800b828:	d101      	bne.n	800b82e <_strtol_l.isra.0+0x8e>
 800b82a:	45a2      	cmp	sl, r4
 800b82c:	db1a      	blt.n	800b864 <_strtol_l.isra.0+0xc4>
 800b82e:	fb05 4503 	mla	r5, r5, r3, r4
 800b832:	2601      	movs	r6, #1
 800b834:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b838:	e7eb      	b.n	800b812 <_strtol_l.isra.0+0x72>
 800b83a:	2c2b      	cmp	r4, #43	; 0x2b
 800b83c:	bf08      	it	eq
 800b83e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b842:	46a8      	mov	r8, r5
 800b844:	bf08      	it	eq
 800b846:	f106 0e02 	addeq.w	lr, r6, #2
 800b84a:	e7c7      	b.n	800b7dc <_strtol_l.isra.0+0x3c>
 800b84c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b850:	2f19      	cmp	r7, #25
 800b852:	d801      	bhi.n	800b858 <_strtol_l.isra.0+0xb8>
 800b854:	3c37      	subs	r4, #55	; 0x37
 800b856:	e7e1      	b.n	800b81c <_strtol_l.isra.0+0x7c>
 800b858:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b85c:	2f19      	cmp	r7, #25
 800b85e:	d804      	bhi.n	800b86a <_strtol_l.isra.0+0xca>
 800b860:	3c57      	subs	r4, #87	; 0x57
 800b862:	e7db      	b.n	800b81c <_strtol_l.isra.0+0x7c>
 800b864:	f04f 36ff 	mov.w	r6, #4294967295
 800b868:	e7e4      	b.n	800b834 <_strtol_l.isra.0+0x94>
 800b86a:	2e00      	cmp	r6, #0
 800b86c:	da05      	bge.n	800b87a <_strtol_l.isra.0+0xda>
 800b86e:	2322      	movs	r3, #34	; 0x22
 800b870:	6003      	str	r3, [r0, #0]
 800b872:	4665      	mov	r5, ip
 800b874:	b942      	cbnz	r2, 800b888 <_strtol_l.isra.0+0xe8>
 800b876:	4628      	mov	r0, r5
 800b878:	e79d      	b.n	800b7b6 <_strtol_l.isra.0+0x16>
 800b87a:	f1b8 0f00 	cmp.w	r8, #0
 800b87e:	d000      	beq.n	800b882 <_strtol_l.isra.0+0xe2>
 800b880:	426d      	negs	r5, r5
 800b882:	2a00      	cmp	r2, #0
 800b884:	d0f7      	beq.n	800b876 <_strtol_l.isra.0+0xd6>
 800b886:	b10e      	cbz	r6, 800b88c <_strtol_l.isra.0+0xec>
 800b888:	f10e 31ff 	add.w	r1, lr, #4294967295
 800b88c:	6011      	str	r1, [r2, #0]
 800b88e:	e7f2      	b.n	800b876 <_strtol_l.isra.0+0xd6>
 800b890:	2430      	movs	r4, #48	; 0x30
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1b3      	bne.n	800b7fe <_strtol_l.isra.0+0x5e>
 800b896:	2308      	movs	r3, #8
 800b898:	e7b1      	b.n	800b7fe <_strtol_l.isra.0+0x5e>
 800b89a:	2c30      	cmp	r4, #48	; 0x30
 800b89c:	d0a4      	beq.n	800b7e8 <_strtol_l.isra.0+0x48>
 800b89e:	230a      	movs	r3, #10
 800b8a0:	e7ad      	b.n	800b7fe <_strtol_l.isra.0+0x5e>
 800b8a2:	bf00      	nop
 800b8a4:	0800ef79 	.word	0x0800ef79

0800b8a8 <_strtol_r>:
 800b8a8:	f7ff bf7a 	b.w	800b7a0 <_strtol_l.isra.0>

0800b8ac <_write_r>:
 800b8ac:	b538      	push	{r3, r4, r5, lr}
 800b8ae:	4d07      	ldr	r5, [pc, #28]	; (800b8cc <_write_r+0x20>)
 800b8b0:	4604      	mov	r4, r0
 800b8b2:	4608      	mov	r0, r1
 800b8b4:	4611      	mov	r1, r2
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	602a      	str	r2, [r5, #0]
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	f7f6 feaf 	bl	800261e <_write>
 800b8c0:	1c43      	adds	r3, r0, #1
 800b8c2:	d102      	bne.n	800b8ca <_write_r+0x1e>
 800b8c4:	682b      	ldr	r3, [r5, #0]
 800b8c6:	b103      	cbz	r3, 800b8ca <_write_r+0x1e>
 800b8c8:	6023      	str	r3, [r4, #0]
 800b8ca:	bd38      	pop	{r3, r4, r5, pc}
 800b8cc:	20000b64 	.word	0x20000b64

0800b8d0 <_close_r>:
 800b8d0:	b538      	push	{r3, r4, r5, lr}
 800b8d2:	4d06      	ldr	r5, [pc, #24]	; (800b8ec <_close_r+0x1c>)
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	4604      	mov	r4, r0
 800b8d8:	4608      	mov	r0, r1
 800b8da:	602b      	str	r3, [r5, #0]
 800b8dc:	f7f6 febb 	bl	8002656 <_close>
 800b8e0:	1c43      	adds	r3, r0, #1
 800b8e2:	d102      	bne.n	800b8ea <_close_r+0x1a>
 800b8e4:	682b      	ldr	r3, [r5, #0]
 800b8e6:	b103      	cbz	r3, 800b8ea <_close_r+0x1a>
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	bd38      	pop	{r3, r4, r5, pc}
 800b8ec:	20000b64 	.word	0x20000b64

0800b8f0 <quorem>:
 800b8f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f4:	6903      	ldr	r3, [r0, #16]
 800b8f6:	690c      	ldr	r4, [r1, #16]
 800b8f8:	42a3      	cmp	r3, r4
 800b8fa:	4607      	mov	r7, r0
 800b8fc:	f2c0 8081 	blt.w	800ba02 <quorem+0x112>
 800b900:	3c01      	subs	r4, #1
 800b902:	f101 0814 	add.w	r8, r1, #20
 800b906:	f100 0514 	add.w	r5, r0, #20
 800b90a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b90e:	9301      	str	r3, [sp, #4]
 800b910:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b914:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b918:	3301      	adds	r3, #1
 800b91a:	429a      	cmp	r2, r3
 800b91c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b920:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b924:	fbb2 f6f3 	udiv	r6, r2, r3
 800b928:	d331      	bcc.n	800b98e <quorem+0x9e>
 800b92a:	f04f 0e00 	mov.w	lr, #0
 800b92e:	4640      	mov	r0, r8
 800b930:	46ac      	mov	ip, r5
 800b932:	46f2      	mov	sl, lr
 800b934:	f850 2b04 	ldr.w	r2, [r0], #4
 800b938:	b293      	uxth	r3, r2
 800b93a:	fb06 e303 	mla	r3, r6, r3, lr
 800b93e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b942:	b29b      	uxth	r3, r3
 800b944:	ebaa 0303 	sub.w	r3, sl, r3
 800b948:	0c12      	lsrs	r2, r2, #16
 800b94a:	f8dc a000 	ldr.w	sl, [ip]
 800b94e:	fb06 e202 	mla	r2, r6, r2, lr
 800b952:	fa13 f38a 	uxtah	r3, r3, sl
 800b956:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b95a:	fa1f fa82 	uxth.w	sl, r2
 800b95e:	f8dc 2000 	ldr.w	r2, [ip]
 800b962:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b966:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b970:	4581      	cmp	r9, r0
 800b972:	f84c 3b04 	str.w	r3, [ip], #4
 800b976:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b97a:	d2db      	bcs.n	800b934 <quorem+0x44>
 800b97c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b980:	b92b      	cbnz	r3, 800b98e <quorem+0x9e>
 800b982:	9b01      	ldr	r3, [sp, #4]
 800b984:	3b04      	subs	r3, #4
 800b986:	429d      	cmp	r5, r3
 800b988:	461a      	mov	r2, r3
 800b98a:	d32e      	bcc.n	800b9ea <quorem+0xfa>
 800b98c:	613c      	str	r4, [r7, #16]
 800b98e:	4638      	mov	r0, r7
 800b990:	f001 fc32 	bl	800d1f8 <__mcmp>
 800b994:	2800      	cmp	r0, #0
 800b996:	db24      	blt.n	800b9e2 <quorem+0xf2>
 800b998:	3601      	adds	r6, #1
 800b99a:	4628      	mov	r0, r5
 800b99c:	f04f 0c00 	mov.w	ip, #0
 800b9a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b9a4:	f8d0 e000 	ldr.w	lr, [r0]
 800b9a8:	b293      	uxth	r3, r2
 800b9aa:	ebac 0303 	sub.w	r3, ip, r3
 800b9ae:	0c12      	lsrs	r2, r2, #16
 800b9b0:	fa13 f38e 	uxtah	r3, r3, lr
 800b9b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b9b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9c2:	45c1      	cmp	r9, r8
 800b9c4:	f840 3b04 	str.w	r3, [r0], #4
 800b9c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b9cc:	d2e8      	bcs.n	800b9a0 <quorem+0xb0>
 800b9ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9d6:	b922      	cbnz	r2, 800b9e2 <quorem+0xf2>
 800b9d8:	3b04      	subs	r3, #4
 800b9da:	429d      	cmp	r5, r3
 800b9dc:	461a      	mov	r2, r3
 800b9de:	d30a      	bcc.n	800b9f6 <quorem+0x106>
 800b9e0:	613c      	str	r4, [r7, #16]
 800b9e2:	4630      	mov	r0, r6
 800b9e4:	b003      	add	sp, #12
 800b9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ea:	6812      	ldr	r2, [r2, #0]
 800b9ec:	3b04      	subs	r3, #4
 800b9ee:	2a00      	cmp	r2, #0
 800b9f0:	d1cc      	bne.n	800b98c <quorem+0x9c>
 800b9f2:	3c01      	subs	r4, #1
 800b9f4:	e7c7      	b.n	800b986 <quorem+0x96>
 800b9f6:	6812      	ldr	r2, [r2, #0]
 800b9f8:	3b04      	subs	r3, #4
 800b9fa:	2a00      	cmp	r2, #0
 800b9fc:	d1f0      	bne.n	800b9e0 <quorem+0xf0>
 800b9fe:	3c01      	subs	r4, #1
 800ba00:	e7eb      	b.n	800b9da <quorem+0xea>
 800ba02:	2000      	movs	r0, #0
 800ba04:	e7ee      	b.n	800b9e4 <quorem+0xf4>
	...

0800ba08 <_dtoa_r>:
 800ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba0c:	ec59 8b10 	vmov	r8, r9, d0
 800ba10:	b095      	sub	sp, #84	; 0x54
 800ba12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ba14:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800ba16:	9107      	str	r1, [sp, #28]
 800ba18:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ba1c:	4606      	mov	r6, r0
 800ba1e:	9209      	str	r2, [sp, #36]	; 0x24
 800ba20:	9310      	str	r3, [sp, #64]	; 0x40
 800ba22:	b975      	cbnz	r5, 800ba42 <_dtoa_r+0x3a>
 800ba24:	2010      	movs	r0, #16
 800ba26:	f001 f8f7 	bl	800cc18 <malloc>
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	6270      	str	r0, [r6, #36]	; 0x24
 800ba2e:	b920      	cbnz	r0, 800ba3a <_dtoa_r+0x32>
 800ba30:	4bab      	ldr	r3, [pc, #684]	; (800bce0 <_dtoa_r+0x2d8>)
 800ba32:	21ea      	movs	r1, #234	; 0xea
 800ba34:	48ab      	ldr	r0, [pc, #684]	; (800bce4 <_dtoa_r+0x2dc>)
 800ba36:	f002 fc33 	bl	800e2a0 <__assert_func>
 800ba3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ba3e:	6005      	str	r5, [r0, #0]
 800ba40:	60c5      	str	r5, [r0, #12]
 800ba42:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ba44:	6819      	ldr	r1, [r3, #0]
 800ba46:	b151      	cbz	r1, 800ba5e <_dtoa_r+0x56>
 800ba48:	685a      	ldr	r2, [r3, #4]
 800ba4a:	604a      	str	r2, [r1, #4]
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	4093      	lsls	r3, r2
 800ba50:	608b      	str	r3, [r1, #8]
 800ba52:	4630      	mov	r0, r6
 800ba54:	f001 f948 	bl	800cce8 <_Bfree>
 800ba58:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	601a      	str	r2, [r3, #0]
 800ba5e:	f1b9 0300 	subs.w	r3, r9, #0
 800ba62:	bfbb      	ittet	lt
 800ba64:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ba68:	9303      	strlt	r3, [sp, #12]
 800ba6a:	2300      	movge	r3, #0
 800ba6c:	2201      	movlt	r2, #1
 800ba6e:	bfac      	ite	ge
 800ba70:	6023      	strge	r3, [r4, #0]
 800ba72:	6022      	strlt	r2, [r4, #0]
 800ba74:	4b9c      	ldr	r3, [pc, #624]	; (800bce8 <_dtoa_r+0x2e0>)
 800ba76:	9c03      	ldr	r4, [sp, #12]
 800ba78:	43a3      	bics	r3, r4
 800ba7a:	d11a      	bne.n	800bab2 <_dtoa_r+0xaa>
 800ba7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ba7e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ba82:	6013      	str	r3, [r2, #0]
 800ba84:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ba88:	ea53 0308 	orrs.w	r3, r3, r8
 800ba8c:	f000 8512 	beq.w	800c4b4 <_dtoa_r+0xaac>
 800ba90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ba92:	b953      	cbnz	r3, 800baaa <_dtoa_r+0xa2>
 800ba94:	4b95      	ldr	r3, [pc, #596]	; (800bcec <_dtoa_r+0x2e4>)
 800ba96:	e01f      	b.n	800bad8 <_dtoa_r+0xd0>
 800ba98:	4b95      	ldr	r3, [pc, #596]	; (800bcf0 <_dtoa_r+0x2e8>)
 800ba9a:	9300      	str	r3, [sp, #0]
 800ba9c:	3308      	adds	r3, #8
 800ba9e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800baa0:	6013      	str	r3, [r2, #0]
 800baa2:	9800      	ldr	r0, [sp, #0]
 800baa4:	b015      	add	sp, #84	; 0x54
 800baa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baaa:	4b90      	ldr	r3, [pc, #576]	; (800bcec <_dtoa_r+0x2e4>)
 800baac:	9300      	str	r3, [sp, #0]
 800baae:	3303      	adds	r3, #3
 800bab0:	e7f5      	b.n	800ba9e <_dtoa_r+0x96>
 800bab2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bab6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800baba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800babe:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800bac2:	d10b      	bne.n	800badc <_dtoa_r+0xd4>
 800bac4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bac6:	2301      	movs	r3, #1
 800bac8:	6013      	str	r3, [r2, #0]
 800baca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bacc:	2b00      	cmp	r3, #0
 800bace:	f000 84ee 	beq.w	800c4ae <_dtoa_r+0xaa6>
 800bad2:	4888      	ldr	r0, [pc, #544]	; (800bcf4 <_dtoa_r+0x2ec>)
 800bad4:	6018      	str	r0, [r3, #0]
 800bad6:	1e43      	subs	r3, r0, #1
 800bad8:	9300      	str	r3, [sp, #0]
 800bada:	e7e2      	b.n	800baa2 <_dtoa_r+0x9a>
 800badc:	a913      	add	r1, sp, #76	; 0x4c
 800bade:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bae2:	aa12      	add	r2, sp, #72	; 0x48
 800bae4:	4630      	mov	r0, r6
 800bae6:	f001 fca7 	bl	800d438 <__d2b>
 800baea:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800baee:	4605      	mov	r5, r0
 800baf0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800baf2:	2900      	cmp	r1, #0
 800baf4:	d047      	beq.n	800bb86 <_dtoa_r+0x17e>
 800baf6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800baf8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bafc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bb00:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800bb04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bb08:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bb0c:	2400      	movs	r4, #0
 800bb0e:	ec43 2b16 	vmov	d6, r2, r3
 800bb12:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800bb16:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800bcc8 <_dtoa_r+0x2c0>
 800bb1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bb1e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800bcd0 <_dtoa_r+0x2c8>
 800bb22:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bb26:	eeb0 7b46 	vmov.f64	d7, d6
 800bb2a:	ee06 1a90 	vmov	s13, r1
 800bb2e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800bb32:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800bcd8 <_dtoa_r+0x2d0>
 800bb36:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bb3a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bb3e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb46:	ee16 ba90 	vmov	fp, s13
 800bb4a:	9411      	str	r4, [sp, #68]	; 0x44
 800bb4c:	d508      	bpl.n	800bb60 <_dtoa_r+0x158>
 800bb4e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bb52:	eeb4 6b47 	vcmp.f64	d6, d7
 800bb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb5a:	bf18      	it	ne
 800bb5c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800bb60:	f1bb 0f16 	cmp.w	fp, #22
 800bb64:	d832      	bhi.n	800bbcc <_dtoa_r+0x1c4>
 800bb66:	4b64      	ldr	r3, [pc, #400]	; (800bcf8 <_dtoa_r+0x2f0>)
 800bb68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bb6c:	ed93 7b00 	vldr	d7, [r3]
 800bb70:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800bb74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bb78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb7c:	d501      	bpl.n	800bb82 <_dtoa_r+0x17a>
 800bb7e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bb82:	2300      	movs	r3, #0
 800bb84:	e023      	b.n	800bbce <_dtoa_r+0x1c6>
 800bb86:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bb88:	4401      	add	r1, r0
 800bb8a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800bb8e:	2b20      	cmp	r3, #32
 800bb90:	bfc3      	ittte	gt
 800bb92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bb96:	fa04 f303 	lslgt.w	r3, r4, r3
 800bb9a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800bb9e:	f1c3 0320 	rsble	r3, r3, #32
 800bba2:	bfc6      	itte	gt
 800bba4:	fa28 f804 	lsrgt.w	r8, r8, r4
 800bba8:	ea43 0308 	orrgt.w	r3, r3, r8
 800bbac:	fa08 f303 	lslle.w	r3, r8, r3
 800bbb0:	ee07 3a90 	vmov	s15, r3
 800bbb4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bbb8:	3901      	subs	r1, #1
 800bbba:	ed8d 7b00 	vstr	d7, [sp]
 800bbbe:	9c01      	ldr	r4, [sp, #4]
 800bbc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbc4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800bbc8:	2401      	movs	r4, #1
 800bbca:	e7a0      	b.n	800bb0e <_dtoa_r+0x106>
 800bbcc:	2301      	movs	r3, #1
 800bbce:	930f      	str	r3, [sp, #60]	; 0x3c
 800bbd0:	1a43      	subs	r3, r0, r1
 800bbd2:	1e5a      	subs	r2, r3, #1
 800bbd4:	bf45      	ittet	mi
 800bbd6:	f1c3 0301 	rsbmi	r3, r3, #1
 800bbda:	9305      	strmi	r3, [sp, #20]
 800bbdc:	2300      	movpl	r3, #0
 800bbde:	2300      	movmi	r3, #0
 800bbe0:	9206      	str	r2, [sp, #24]
 800bbe2:	bf54      	ite	pl
 800bbe4:	9305      	strpl	r3, [sp, #20]
 800bbe6:	9306      	strmi	r3, [sp, #24]
 800bbe8:	f1bb 0f00 	cmp.w	fp, #0
 800bbec:	db18      	blt.n	800bc20 <_dtoa_r+0x218>
 800bbee:	9b06      	ldr	r3, [sp, #24]
 800bbf0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800bbf4:	445b      	add	r3, fp
 800bbf6:	9306      	str	r3, [sp, #24]
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	9a07      	ldr	r2, [sp, #28]
 800bbfc:	2a09      	cmp	r2, #9
 800bbfe:	d849      	bhi.n	800bc94 <_dtoa_r+0x28c>
 800bc00:	2a05      	cmp	r2, #5
 800bc02:	bfc4      	itt	gt
 800bc04:	3a04      	subgt	r2, #4
 800bc06:	9207      	strgt	r2, [sp, #28]
 800bc08:	9a07      	ldr	r2, [sp, #28]
 800bc0a:	f1a2 0202 	sub.w	r2, r2, #2
 800bc0e:	bfcc      	ite	gt
 800bc10:	2400      	movgt	r4, #0
 800bc12:	2401      	movle	r4, #1
 800bc14:	2a03      	cmp	r2, #3
 800bc16:	d848      	bhi.n	800bcaa <_dtoa_r+0x2a2>
 800bc18:	e8df f002 	tbb	[pc, r2]
 800bc1c:	3a2c2e0b 	.word	0x3a2c2e0b
 800bc20:	9b05      	ldr	r3, [sp, #20]
 800bc22:	2200      	movs	r2, #0
 800bc24:	eba3 030b 	sub.w	r3, r3, fp
 800bc28:	9305      	str	r3, [sp, #20]
 800bc2a:	920e      	str	r2, [sp, #56]	; 0x38
 800bc2c:	f1cb 0300 	rsb	r3, fp, #0
 800bc30:	e7e3      	b.n	800bbfa <_dtoa_r+0x1f2>
 800bc32:	2200      	movs	r2, #0
 800bc34:	9208      	str	r2, [sp, #32]
 800bc36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc38:	2a00      	cmp	r2, #0
 800bc3a:	dc39      	bgt.n	800bcb0 <_dtoa_r+0x2a8>
 800bc3c:	f04f 0a01 	mov.w	sl, #1
 800bc40:	46d1      	mov	r9, sl
 800bc42:	4652      	mov	r2, sl
 800bc44:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800bc48:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800bc4a:	2100      	movs	r1, #0
 800bc4c:	6079      	str	r1, [r7, #4]
 800bc4e:	2004      	movs	r0, #4
 800bc50:	f100 0c14 	add.w	ip, r0, #20
 800bc54:	4594      	cmp	ip, r2
 800bc56:	6879      	ldr	r1, [r7, #4]
 800bc58:	d92f      	bls.n	800bcba <_dtoa_r+0x2b2>
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	930c      	str	r3, [sp, #48]	; 0x30
 800bc5e:	f001 f803 	bl	800cc68 <_Balloc>
 800bc62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc64:	9000      	str	r0, [sp, #0]
 800bc66:	4602      	mov	r2, r0
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	d149      	bne.n	800bd00 <_dtoa_r+0x2f8>
 800bc6c:	4b23      	ldr	r3, [pc, #140]	; (800bcfc <_dtoa_r+0x2f4>)
 800bc6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bc72:	e6df      	b.n	800ba34 <_dtoa_r+0x2c>
 800bc74:	2201      	movs	r2, #1
 800bc76:	e7dd      	b.n	800bc34 <_dtoa_r+0x22c>
 800bc78:	2200      	movs	r2, #0
 800bc7a:	9208      	str	r2, [sp, #32]
 800bc7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc7e:	eb0b 0a02 	add.w	sl, fp, r2
 800bc82:	f10a 0901 	add.w	r9, sl, #1
 800bc86:	464a      	mov	r2, r9
 800bc88:	2a01      	cmp	r2, #1
 800bc8a:	bfb8      	it	lt
 800bc8c:	2201      	movlt	r2, #1
 800bc8e:	e7db      	b.n	800bc48 <_dtoa_r+0x240>
 800bc90:	2201      	movs	r2, #1
 800bc92:	e7f2      	b.n	800bc7a <_dtoa_r+0x272>
 800bc94:	2401      	movs	r4, #1
 800bc96:	2200      	movs	r2, #0
 800bc98:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800bc9c:	f04f 3aff 	mov.w	sl, #4294967295
 800bca0:	2100      	movs	r1, #0
 800bca2:	46d1      	mov	r9, sl
 800bca4:	2212      	movs	r2, #18
 800bca6:	9109      	str	r1, [sp, #36]	; 0x24
 800bca8:	e7ce      	b.n	800bc48 <_dtoa_r+0x240>
 800bcaa:	2201      	movs	r2, #1
 800bcac:	9208      	str	r2, [sp, #32]
 800bcae:	e7f5      	b.n	800bc9c <_dtoa_r+0x294>
 800bcb0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800bcb4:	46d1      	mov	r9, sl
 800bcb6:	4652      	mov	r2, sl
 800bcb8:	e7c6      	b.n	800bc48 <_dtoa_r+0x240>
 800bcba:	3101      	adds	r1, #1
 800bcbc:	6079      	str	r1, [r7, #4]
 800bcbe:	0040      	lsls	r0, r0, #1
 800bcc0:	e7c6      	b.n	800bc50 <_dtoa_r+0x248>
 800bcc2:	bf00      	nop
 800bcc4:	f3af 8000 	nop.w
 800bcc8:	636f4361 	.word	0x636f4361
 800bccc:	3fd287a7 	.word	0x3fd287a7
 800bcd0:	8b60c8b3 	.word	0x8b60c8b3
 800bcd4:	3fc68a28 	.word	0x3fc68a28
 800bcd8:	509f79fb 	.word	0x509f79fb
 800bcdc:	3fd34413 	.word	0x3fd34413
 800bce0:	0800f086 	.word	0x0800f086
 800bce4:	0800f09d 	.word	0x0800f09d
 800bce8:	7ff00000 	.word	0x7ff00000
 800bcec:	0800f082 	.word	0x0800f082
 800bcf0:	0800f079 	.word	0x0800f079
 800bcf4:	0800f302 	.word	0x0800f302
 800bcf8:	0800f218 	.word	0x0800f218
 800bcfc:	0800f0fc 	.word	0x0800f0fc
 800bd00:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800bd02:	9900      	ldr	r1, [sp, #0]
 800bd04:	6011      	str	r1, [r2, #0]
 800bd06:	f1b9 0f0e 	cmp.w	r9, #14
 800bd0a:	d872      	bhi.n	800bdf2 <_dtoa_r+0x3ea>
 800bd0c:	2c00      	cmp	r4, #0
 800bd0e:	d070      	beq.n	800bdf2 <_dtoa_r+0x3ea>
 800bd10:	f1bb 0f00 	cmp.w	fp, #0
 800bd14:	f340 80a6 	ble.w	800be64 <_dtoa_r+0x45c>
 800bd18:	49ca      	ldr	r1, [pc, #808]	; (800c044 <_dtoa_r+0x63c>)
 800bd1a:	f00b 020f 	and.w	r2, fp, #15
 800bd1e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800bd22:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bd26:	ed92 7b00 	vldr	d7, [r2]
 800bd2a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800bd2e:	f000 808d 	beq.w	800be4c <_dtoa_r+0x444>
 800bd32:	4ac5      	ldr	r2, [pc, #788]	; (800c048 <_dtoa_r+0x640>)
 800bd34:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800bd38:	ed92 6b08 	vldr	d6, [r2, #32]
 800bd3c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800bd40:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bd44:	f001 010f 	and.w	r1, r1, #15
 800bd48:	2203      	movs	r2, #3
 800bd4a:	48bf      	ldr	r0, [pc, #764]	; (800c048 <_dtoa_r+0x640>)
 800bd4c:	2900      	cmp	r1, #0
 800bd4e:	d17f      	bne.n	800be50 <_dtoa_r+0x448>
 800bd50:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bd54:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bd58:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bd5e:	2900      	cmp	r1, #0
 800bd60:	f000 80b2 	beq.w	800bec8 <_dtoa_r+0x4c0>
 800bd64:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800bd68:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd6c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bd70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd74:	f140 80a8 	bpl.w	800bec8 <_dtoa_r+0x4c0>
 800bd78:	f1b9 0f00 	cmp.w	r9, #0
 800bd7c:	f000 80a4 	beq.w	800bec8 <_dtoa_r+0x4c0>
 800bd80:	f1ba 0f00 	cmp.w	sl, #0
 800bd84:	dd31      	ble.n	800bdea <_dtoa_r+0x3e2>
 800bd86:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800bd8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bd8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd92:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bd96:	3201      	adds	r2, #1
 800bd98:	4650      	mov	r0, sl
 800bd9a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bd9e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800bda2:	ee07 2a90 	vmov	s15, r2
 800bda6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bdaa:	eea7 5b06 	vfma.f64	d5, d7, d6
 800bdae:	ed8d 5b02 	vstr	d5, [sp, #8]
 800bdb2:	9c03      	ldr	r4, [sp, #12]
 800bdb4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800bdb8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	f040 8086 	bne.w	800bece <_dtoa_r+0x4c6>
 800bdc2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bdc6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bdca:	ec42 1b17 	vmov	d7, r1, r2
 800bdce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bdd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdd6:	f300 8272 	bgt.w	800c2be <_dtoa_r+0x8b6>
 800bdda:	eeb1 7b47 	vneg.f64	d7, d7
 800bdde:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bde2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bde6:	f100 8267 	bmi.w	800c2b8 <_dtoa_r+0x8b0>
 800bdea:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800bdee:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800bdf2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bdf4:	2a00      	cmp	r2, #0
 800bdf6:	f2c0 8129 	blt.w	800c04c <_dtoa_r+0x644>
 800bdfa:	f1bb 0f0e 	cmp.w	fp, #14
 800bdfe:	f300 8125 	bgt.w	800c04c <_dtoa_r+0x644>
 800be02:	4b90      	ldr	r3, [pc, #576]	; (800c044 <_dtoa_r+0x63c>)
 800be04:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800be08:	ed93 6b00 	vldr	d6, [r3]
 800be0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be0e:	2b00      	cmp	r3, #0
 800be10:	f280 80c3 	bge.w	800bf9a <_dtoa_r+0x592>
 800be14:	f1b9 0f00 	cmp.w	r9, #0
 800be18:	f300 80bf 	bgt.w	800bf9a <_dtoa_r+0x592>
 800be1c:	f040 824c 	bne.w	800c2b8 <_dtoa_r+0x8b0>
 800be20:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800be24:	ee26 6b07 	vmul.f64	d6, d6, d7
 800be28:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800be30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be34:	464c      	mov	r4, r9
 800be36:	464f      	mov	r7, r9
 800be38:	f280 8222 	bge.w	800c280 <_dtoa_r+0x878>
 800be3c:	f8dd 8000 	ldr.w	r8, [sp]
 800be40:	2331      	movs	r3, #49	; 0x31
 800be42:	f808 3b01 	strb.w	r3, [r8], #1
 800be46:	f10b 0b01 	add.w	fp, fp, #1
 800be4a:	e21e      	b.n	800c28a <_dtoa_r+0x882>
 800be4c:	2202      	movs	r2, #2
 800be4e:	e77c      	b.n	800bd4a <_dtoa_r+0x342>
 800be50:	07cc      	lsls	r4, r1, #31
 800be52:	d504      	bpl.n	800be5e <_dtoa_r+0x456>
 800be54:	ed90 6b00 	vldr	d6, [r0]
 800be58:	3201      	adds	r2, #1
 800be5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800be5e:	1049      	asrs	r1, r1, #1
 800be60:	3008      	adds	r0, #8
 800be62:	e773      	b.n	800bd4c <_dtoa_r+0x344>
 800be64:	d02e      	beq.n	800bec4 <_dtoa_r+0x4bc>
 800be66:	f1cb 0100 	rsb	r1, fp, #0
 800be6a:	4a76      	ldr	r2, [pc, #472]	; (800c044 <_dtoa_r+0x63c>)
 800be6c:	f001 000f 	and.w	r0, r1, #15
 800be70:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800be74:	ed92 7b00 	vldr	d7, [r2]
 800be78:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800be7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800be80:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800be84:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800be88:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800be8c:	486e      	ldr	r0, [pc, #440]	; (800c048 <_dtoa_r+0x640>)
 800be8e:	1109      	asrs	r1, r1, #4
 800be90:	2400      	movs	r4, #0
 800be92:	2202      	movs	r2, #2
 800be94:	b939      	cbnz	r1, 800bea6 <_dtoa_r+0x49e>
 800be96:	2c00      	cmp	r4, #0
 800be98:	f43f af60 	beq.w	800bd5c <_dtoa_r+0x354>
 800be9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bea4:	e75a      	b.n	800bd5c <_dtoa_r+0x354>
 800bea6:	07cf      	lsls	r7, r1, #31
 800bea8:	d509      	bpl.n	800bebe <_dtoa_r+0x4b6>
 800beaa:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800beae:	ed90 7b00 	vldr	d7, [r0]
 800beb2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800beb6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800beba:	3201      	adds	r2, #1
 800bebc:	2401      	movs	r4, #1
 800bebe:	1049      	asrs	r1, r1, #1
 800bec0:	3008      	adds	r0, #8
 800bec2:	e7e7      	b.n	800be94 <_dtoa_r+0x48c>
 800bec4:	2202      	movs	r2, #2
 800bec6:	e749      	b.n	800bd5c <_dtoa_r+0x354>
 800bec8:	465f      	mov	r7, fp
 800beca:	4648      	mov	r0, r9
 800becc:	e765      	b.n	800bd9a <_dtoa_r+0x392>
 800bece:	ec42 1b17 	vmov	d7, r1, r2
 800bed2:	4a5c      	ldr	r2, [pc, #368]	; (800c044 <_dtoa_r+0x63c>)
 800bed4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bed8:	ed12 4b02 	vldr	d4, [r2, #-8]
 800bedc:	9a00      	ldr	r2, [sp, #0]
 800bede:	1814      	adds	r4, r2, r0
 800bee0:	9a08      	ldr	r2, [sp, #32]
 800bee2:	b352      	cbz	r2, 800bf3a <_dtoa_r+0x532>
 800bee4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800bee8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800beec:	f8dd 8000 	ldr.w	r8, [sp]
 800bef0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bef4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bef8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800befc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bf00:	ee14 2a90 	vmov	r2, s9
 800bf04:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bf08:	3230      	adds	r2, #48	; 0x30
 800bf0a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bf0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bf12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf16:	f808 2b01 	strb.w	r2, [r8], #1
 800bf1a:	d439      	bmi.n	800bf90 <_dtoa_r+0x588>
 800bf1c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bf20:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bf24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf28:	d472      	bmi.n	800c010 <_dtoa_r+0x608>
 800bf2a:	45a0      	cmp	r8, r4
 800bf2c:	f43f af5d 	beq.w	800bdea <_dtoa_r+0x3e2>
 800bf30:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bf34:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bf38:	e7e0      	b.n	800befc <_dtoa_r+0x4f4>
 800bf3a:	f8dd 8000 	ldr.w	r8, [sp]
 800bf3e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bf42:	4621      	mov	r1, r4
 800bf44:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bf48:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bf4c:	ee14 2a90 	vmov	r2, s9
 800bf50:	3230      	adds	r2, #48	; 0x30
 800bf52:	f808 2b01 	strb.w	r2, [r8], #1
 800bf56:	45a0      	cmp	r8, r4
 800bf58:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bf5c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bf60:	d118      	bne.n	800bf94 <_dtoa_r+0x58c>
 800bf62:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800bf66:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bf6a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bf6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf72:	dc4d      	bgt.n	800c010 <_dtoa_r+0x608>
 800bf74:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bf78:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bf7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf80:	f57f af33 	bpl.w	800bdea <_dtoa_r+0x3e2>
 800bf84:	4688      	mov	r8, r1
 800bf86:	3901      	subs	r1, #1
 800bf88:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800bf8c:	2b30      	cmp	r3, #48	; 0x30
 800bf8e:	d0f9      	beq.n	800bf84 <_dtoa_r+0x57c>
 800bf90:	46bb      	mov	fp, r7
 800bf92:	e02a      	b.n	800bfea <_dtoa_r+0x5e2>
 800bf94:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bf98:	e7d6      	b.n	800bf48 <_dtoa_r+0x540>
 800bf9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf9e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800bfa2:	f8dd 8000 	ldr.w	r8, [sp]
 800bfa6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bfaa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bfae:	ee15 3a10 	vmov	r3, s10
 800bfb2:	3330      	adds	r3, #48	; 0x30
 800bfb4:	f808 3b01 	strb.w	r3, [r8], #1
 800bfb8:	9b00      	ldr	r3, [sp, #0]
 800bfba:	eba8 0303 	sub.w	r3, r8, r3
 800bfbe:	4599      	cmp	r9, r3
 800bfc0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800bfc4:	eea3 7b46 	vfms.f64	d7, d3, d6
 800bfc8:	d133      	bne.n	800c032 <_dtoa_r+0x62a>
 800bfca:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bfce:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bfd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfd6:	dc1a      	bgt.n	800c00e <_dtoa_r+0x606>
 800bfd8:	eeb4 7b46 	vcmp.f64	d7, d6
 800bfdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfe0:	d103      	bne.n	800bfea <_dtoa_r+0x5e2>
 800bfe2:	ee15 3a10 	vmov	r3, s10
 800bfe6:	07d9      	lsls	r1, r3, #31
 800bfe8:	d411      	bmi.n	800c00e <_dtoa_r+0x606>
 800bfea:	4629      	mov	r1, r5
 800bfec:	4630      	mov	r0, r6
 800bfee:	f000 fe7b 	bl	800cce8 <_Bfree>
 800bff2:	2300      	movs	r3, #0
 800bff4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bff6:	f888 3000 	strb.w	r3, [r8]
 800bffa:	f10b 0301 	add.w	r3, fp, #1
 800bffe:	6013      	str	r3, [r2, #0]
 800c000:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c002:	2b00      	cmp	r3, #0
 800c004:	f43f ad4d 	beq.w	800baa2 <_dtoa_r+0x9a>
 800c008:	f8c3 8000 	str.w	r8, [r3]
 800c00c:	e549      	b.n	800baa2 <_dtoa_r+0x9a>
 800c00e:	465f      	mov	r7, fp
 800c010:	4643      	mov	r3, r8
 800c012:	4698      	mov	r8, r3
 800c014:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c018:	2a39      	cmp	r2, #57	; 0x39
 800c01a:	d106      	bne.n	800c02a <_dtoa_r+0x622>
 800c01c:	9a00      	ldr	r2, [sp, #0]
 800c01e:	429a      	cmp	r2, r3
 800c020:	d1f7      	bne.n	800c012 <_dtoa_r+0x60a>
 800c022:	9900      	ldr	r1, [sp, #0]
 800c024:	2230      	movs	r2, #48	; 0x30
 800c026:	3701      	adds	r7, #1
 800c028:	700a      	strb	r2, [r1, #0]
 800c02a:	781a      	ldrb	r2, [r3, #0]
 800c02c:	3201      	adds	r2, #1
 800c02e:	701a      	strb	r2, [r3, #0]
 800c030:	e7ae      	b.n	800bf90 <_dtoa_r+0x588>
 800c032:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c036:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c03e:	d1b2      	bne.n	800bfa6 <_dtoa_r+0x59e>
 800c040:	e7d3      	b.n	800bfea <_dtoa_r+0x5e2>
 800c042:	bf00      	nop
 800c044:	0800f218 	.word	0x0800f218
 800c048:	0800f1f0 	.word	0x0800f1f0
 800c04c:	9908      	ldr	r1, [sp, #32]
 800c04e:	2900      	cmp	r1, #0
 800c050:	f000 80d1 	beq.w	800c1f6 <_dtoa_r+0x7ee>
 800c054:	9907      	ldr	r1, [sp, #28]
 800c056:	2901      	cmp	r1, #1
 800c058:	f300 80b4 	bgt.w	800c1c4 <_dtoa_r+0x7bc>
 800c05c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c05e:	2900      	cmp	r1, #0
 800c060:	f000 80ac 	beq.w	800c1bc <_dtoa_r+0x7b4>
 800c064:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c068:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c06c:	461c      	mov	r4, r3
 800c06e:	930a      	str	r3, [sp, #40]	; 0x28
 800c070:	9b05      	ldr	r3, [sp, #20]
 800c072:	4413      	add	r3, r2
 800c074:	9305      	str	r3, [sp, #20]
 800c076:	9b06      	ldr	r3, [sp, #24]
 800c078:	2101      	movs	r1, #1
 800c07a:	4413      	add	r3, r2
 800c07c:	4630      	mov	r0, r6
 800c07e:	9306      	str	r3, [sp, #24]
 800c080:	f000 ff38 	bl	800cef4 <__i2b>
 800c084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c086:	4607      	mov	r7, r0
 800c088:	f1b8 0f00 	cmp.w	r8, #0
 800c08c:	dd0d      	ble.n	800c0aa <_dtoa_r+0x6a2>
 800c08e:	9a06      	ldr	r2, [sp, #24]
 800c090:	2a00      	cmp	r2, #0
 800c092:	dd0a      	ble.n	800c0aa <_dtoa_r+0x6a2>
 800c094:	4542      	cmp	r2, r8
 800c096:	9905      	ldr	r1, [sp, #20]
 800c098:	bfa8      	it	ge
 800c09a:	4642      	movge	r2, r8
 800c09c:	1a89      	subs	r1, r1, r2
 800c09e:	9105      	str	r1, [sp, #20]
 800c0a0:	9906      	ldr	r1, [sp, #24]
 800c0a2:	eba8 0802 	sub.w	r8, r8, r2
 800c0a6:	1a8a      	subs	r2, r1, r2
 800c0a8:	9206      	str	r2, [sp, #24]
 800c0aa:	b303      	cbz	r3, 800c0ee <_dtoa_r+0x6e6>
 800c0ac:	9a08      	ldr	r2, [sp, #32]
 800c0ae:	2a00      	cmp	r2, #0
 800c0b0:	f000 80a6 	beq.w	800c200 <_dtoa_r+0x7f8>
 800c0b4:	2c00      	cmp	r4, #0
 800c0b6:	dd13      	ble.n	800c0e0 <_dtoa_r+0x6d8>
 800c0b8:	4639      	mov	r1, r7
 800c0ba:	4622      	mov	r2, r4
 800c0bc:	4630      	mov	r0, r6
 800c0be:	930c      	str	r3, [sp, #48]	; 0x30
 800c0c0:	f000 ffd4 	bl	800d06c <__pow5mult>
 800c0c4:	462a      	mov	r2, r5
 800c0c6:	4601      	mov	r1, r0
 800c0c8:	4607      	mov	r7, r0
 800c0ca:	4630      	mov	r0, r6
 800c0cc:	f000 ff28 	bl	800cf20 <__multiply>
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	900a      	str	r0, [sp, #40]	; 0x28
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	f000 fe07 	bl	800cce8 <_Bfree>
 800c0da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0de:	4615      	mov	r5, r2
 800c0e0:	1b1a      	subs	r2, r3, r4
 800c0e2:	d004      	beq.n	800c0ee <_dtoa_r+0x6e6>
 800c0e4:	4629      	mov	r1, r5
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	f000 ffc0 	bl	800d06c <__pow5mult>
 800c0ec:	4605      	mov	r5, r0
 800c0ee:	2101      	movs	r1, #1
 800c0f0:	4630      	mov	r0, r6
 800c0f2:	f000 feff 	bl	800cef4 <__i2b>
 800c0f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	f340 8082 	ble.w	800c204 <_dtoa_r+0x7fc>
 800c100:	461a      	mov	r2, r3
 800c102:	4601      	mov	r1, r0
 800c104:	4630      	mov	r0, r6
 800c106:	f000 ffb1 	bl	800d06c <__pow5mult>
 800c10a:	9b07      	ldr	r3, [sp, #28]
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	4604      	mov	r4, r0
 800c110:	dd7b      	ble.n	800c20a <_dtoa_r+0x802>
 800c112:	2300      	movs	r3, #0
 800c114:	930a      	str	r3, [sp, #40]	; 0x28
 800c116:	6922      	ldr	r2, [r4, #16]
 800c118:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c11c:	6910      	ldr	r0, [r2, #16]
 800c11e:	f000 fe99 	bl	800ce54 <__hi0bits>
 800c122:	f1c0 0020 	rsb	r0, r0, #32
 800c126:	9b06      	ldr	r3, [sp, #24]
 800c128:	4418      	add	r0, r3
 800c12a:	f010 001f 	ands.w	r0, r0, #31
 800c12e:	f000 808d 	beq.w	800c24c <_dtoa_r+0x844>
 800c132:	f1c0 0220 	rsb	r2, r0, #32
 800c136:	2a04      	cmp	r2, #4
 800c138:	f340 8086 	ble.w	800c248 <_dtoa_r+0x840>
 800c13c:	f1c0 001c 	rsb	r0, r0, #28
 800c140:	9b05      	ldr	r3, [sp, #20]
 800c142:	4403      	add	r3, r0
 800c144:	9305      	str	r3, [sp, #20]
 800c146:	9b06      	ldr	r3, [sp, #24]
 800c148:	4403      	add	r3, r0
 800c14a:	4480      	add	r8, r0
 800c14c:	9306      	str	r3, [sp, #24]
 800c14e:	9b05      	ldr	r3, [sp, #20]
 800c150:	2b00      	cmp	r3, #0
 800c152:	dd05      	ble.n	800c160 <_dtoa_r+0x758>
 800c154:	4629      	mov	r1, r5
 800c156:	461a      	mov	r2, r3
 800c158:	4630      	mov	r0, r6
 800c15a:	f000 ffe1 	bl	800d120 <__lshift>
 800c15e:	4605      	mov	r5, r0
 800c160:	9b06      	ldr	r3, [sp, #24]
 800c162:	2b00      	cmp	r3, #0
 800c164:	dd05      	ble.n	800c172 <_dtoa_r+0x76a>
 800c166:	4621      	mov	r1, r4
 800c168:	461a      	mov	r2, r3
 800c16a:	4630      	mov	r0, r6
 800c16c:	f000 ffd8 	bl	800d120 <__lshift>
 800c170:	4604      	mov	r4, r0
 800c172:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c174:	2b00      	cmp	r3, #0
 800c176:	d06b      	beq.n	800c250 <_dtoa_r+0x848>
 800c178:	4621      	mov	r1, r4
 800c17a:	4628      	mov	r0, r5
 800c17c:	f001 f83c 	bl	800d1f8 <__mcmp>
 800c180:	2800      	cmp	r0, #0
 800c182:	da65      	bge.n	800c250 <_dtoa_r+0x848>
 800c184:	2300      	movs	r3, #0
 800c186:	4629      	mov	r1, r5
 800c188:	220a      	movs	r2, #10
 800c18a:	4630      	mov	r0, r6
 800c18c:	f000 fdce 	bl	800cd2c <__multadd>
 800c190:	9b08      	ldr	r3, [sp, #32]
 800c192:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c196:	4605      	mov	r5, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f000 8192 	beq.w	800c4c2 <_dtoa_r+0xaba>
 800c19e:	4639      	mov	r1, r7
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	220a      	movs	r2, #10
 800c1a4:	4630      	mov	r0, r6
 800c1a6:	f000 fdc1 	bl	800cd2c <__multadd>
 800c1aa:	f1ba 0f00 	cmp.w	sl, #0
 800c1ae:	4607      	mov	r7, r0
 800c1b0:	f300 808e 	bgt.w	800c2d0 <_dtoa_r+0x8c8>
 800c1b4:	9b07      	ldr	r3, [sp, #28]
 800c1b6:	2b02      	cmp	r3, #2
 800c1b8:	dc51      	bgt.n	800c25e <_dtoa_r+0x856>
 800c1ba:	e089      	b.n	800c2d0 <_dtoa_r+0x8c8>
 800c1bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c1be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c1c2:	e751      	b.n	800c068 <_dtoa_r+0x660>
 800c1c4:	f109 34ff 	add.w	r4, r9, #4294967295
 800c1c8:	42a3      	cmp	r3, r4
 800c1ca:	bfbf      	itttt	lt
 800c1cc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800c1ce:	1ae3      	sublt	r3, r4, r3
 800c1d0:	18d2      	addlt	r2, r2, r3
 800c1d2:	4613      	movlt	r3, r2
 800c1d4:	bfb7      	itett	lt
 800c1d6:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c1d8:	1b1c      	subge	r4, r3, r4
 800c1da:	4623      	movlt	r3, r4
 800c1dc:	2400      	movlt	r4, #0
 800c1de:	f1b9 0f00 	cmp.w	r9, #0
 800c1e2:	bfb5      	itete	lt
 800c1e4:	9a05      	ldrlt	r2, [sp, #20]
 800c1e6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800c1ea:	eba2 0809 	sublt.w	r8, r2, r9
 800c1ee:	464a      	movge	r2, r9
 800c1f0:	bfb8      	it	lt
 800c1f2:	2200      	movlt	r2, #0
 800c1f4:	e73b      	b.n	800c06e <_dtoa_r+0x666>
 800c1f6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c1fa:	9f08      	ldr	r7, [sp, #32]
 800c1fc:	461c      	mov	r4, r3
 800c1fe:	e743      	b.n	800c088 <_dtoa_r+0x680>
 800c200:	461a      	mov	r2, r3
 800c202:	e76f      	b.n	800c0e4 <_dtoa_r+0x6dc>
 800c204:	9b07      	ldr	r3, [sp, #28]
 800c206:	2b01      	cmp	r3, #1
 800c208:	dc18      	bgt.n	800c23c <_dtoa_r+0x834>
 800c20a:	9b02      	ldr	r3, [sp, #8]
 800c20c:	b9b3      	cbnz	r3, 800c23c <_dtoa_r+0x834>
 800c20e:	9b03      	ldr	r3, [sp, #12]
 800c210:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c214:	b9a2      	cbnz	r2, 800c240 <_dtoa_r+0x838>
 800c216:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c21a:	0d12      	lsrs	r2, r2, #20
 800c21c:	0512      	lsls	r2, r2, #20
 800c21e:	b18a      	cbz	r2, 800c244 <_dtoa_r+0x83c>
 800c220:	9b05      	ldr	r3, [sp, #20]
 800c222:	3301      	adds	r3, #1
 800c224:	9305      	str	r3, [sp, #20]
 800c226:	9b06      	ldr	r3, [sp, #24]
 800c228:	3301      	adds	r3, #1
 800c22a:	9306      	str	r3, [sp, #24]
 800c22c:	2301      	movs	r3, #1
 800c22e:	930a      	str	r3, [sp, #40]	; 0x28
 800c230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c232:	2b00      	cmp	r3, #0
 800c234:	f47f af6f 	bne.w	800c116 <_dtoa_r+0x70e>
 800c238:	2001      	movs	r0, #1
 800c23a:	e774      	b.n	800c126 <_dtoa_r+0x71e>
 800c23c:	2300      	movs	r3, #0
 800c23e:	e7f6      	b.n	800c22e <_dtoa_r+0x826>
 800c240:	9b02      	ldr	r3, [sp, #8]
 800c242:	e7f4      	b.n	800c22e <_dtoa_r+0x826>
 800c244:	920a      	str	r2, [sp, #40]	; 0x28
 800c246:	e7f3      	b.n	800c230 <_dtoa_r+0x828>
 800c248:	d081      	beq.n	800c14e <_dtoa_r+0x746>
 800c24a:	4610      	mov	r0, r2
 800c24c:	301c      	adds	r0, #28
 800c24e:	e777      	b.n	800c140 <_dtoa_r+0x738>
 800c250:	f1b9 0f00 	cmp.w	r9, #0
 800c254:	dc37      	bgt.n	800c2c6 <_dtoa_r+0x8be>
 800c256:	9b07      	ldr	r3, [sp, #28]
 800c258:	2b02      	cmp	r3, #2
 800c25a:	dd34      	ble.n	800c2c6 <_dtoa_r+0x8be>
 800c25c:	46ca      	mov	sl, r9
 800c25e:	f1ba 0f00 	cmp.w	sl, #0
 800c262:	d10d      	bne.n	800c280 <_dtoa_r+0x878>
 800c264:	4621      	mov	r1, r4
 800c266:	4653      	mov	r3, sl
 800c268:	2205      	movs	r2, #5
 800c26a:	4630      	mov	r0, r6
 800c26c:	f000 fd5e 	bl	800cd2c <__multadd>
 800c270:	4601      	mov	r1, r0
 800c272:	4604      	mov	r4, r0
 800c274:	4628      	mov	r0, r5
 800c276:	f000 ffbf 	bl	800d1f8 <__mcmp>
 800c27a:	2800      	cmp	r0, #0
 800c27c:	f73f adde 	bgt.w	800be3c <_dtoa_r+0x434>
 800c280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c282:	f8dd 8000 	ldr.w	r8, [sp]
 800c286:	ea6f 0b03 	mvn.w	fp, r3
 800c28a:	f04f 0900 	mov.w	r9, #0
 800c28e:	4621      	mov	r1, r4
 800c290:	4630      	mov	r0, r6
 800c292:	f000 fd29 	bl	800cce8 <_Bfree>
 800c296:	2f00      	cmp	r7, #0
 800c298:	f43f aea7 	beq.w	800bfea <_dtoa_r+0x5e2>
 800c29c:	f1b9 0f00 	cmp.w	r9, #0
 800c2a0:	d005      	beq.n	800c2ae <_dtoa_r+0x8a6>
 800c2a2:	45b9      	cmp	r9, r7
 800c2a4:	d003      	beq.n	800c2ae <_dtoa_r+0x8a6>
 800c2a6:	4649      	mov	r1, r9
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	f000 fd1d 	bl	800cce8 <_Bfree>
 800c2ae:	4639      	mov	r1, r7
 800c2b0:	4630      	mov	r0, r6
 800c2b2:	f000 fd19 	bl	800cce8 <_Bfree>
 800c2b6:	e698      	b.n	800bfea <_dtoa_r+0x5e2>
 800c2b8:	2400      	movs	r4, #0
 800c2ba:	4627      	mov	r7, r4
 800c2bc:	e7e0      	b.n	800c280 <_dtoa_r+0x878>
 800c2be:	46bb      	mov	fp, r7
 800c2c0:	4604      	mov	r4, r0
 800c2c2:	4607      	mov	r7, r0
 800c2c4:	e5ba      	b.n	800be3c <_dtoa_r+0x434>
 800c2c6:	9b08      	ldr	r3, [sp, #32]
 800c2c8:	46ca      	mov	sl, r9
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	f000 8100 	beq.w	800c4d0 <_dtoa_r+0xac8>
 800c2d0:	f1b8 0f00 	cmp.w	r8, #0
 800c2d4:	dd05      	ble.n	800c2e2 <_dtoa_r+0x8da>
 800c2d6:	4639      	mov	r1, r7
 800c2d8:	4642      	mov	r2, r8
 800c2da:	4630      	mov	r0, r6
 800c2dc:	f000 ff20 	bl	800d120 <__lshift>
 800c2e0:	4607      	mov	r7, r0
 800c2e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d05d      	beq.n	800c3a4 <_dtoa_r+0x99c>
 800c2e8:	6879      	ldr	r1, [r7, #4]
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	f000 fcbc 	bl	800cc68 <_Balloc>
 800c2f0:	4680      	mov	r8, r0
 800c2f2:	b928      	cbnz	r0, 800c300 <_dtoa_r+0x8f8>
 800c2f4:	4b82      	ldr	r3, [pc, #520]	; (800c500 <_dtoa_r+0xaf8>)
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c2fc:	f7ff bb9a 	b.w	800ba34 <_dtoa_r+0x2c>
 800c300:	693a      	ldr	r2, [r7, #16]
 800c302:	3202      	adds	r2, #2
 800c304:	0092      	lsls	r2, r2, #2
 800c306:	f107 010c 	add.w	r1, r7, #12
 800c30a:	300c      	adds	r0, #12
 800c30c:	f000 fc9e 	bl	800cc4c <memcpy>
 800c310:	2201      	movs	r2, #1
 800c312:	4641      	mov	r1, r8
 800c314:	4630      	mov	r0, r6
 800c316:	f000 ff03 	bl	800d120 <__lshift>
 800c31a:	9b00      	ldr	r3, [sp, #0]
 800c31c:	3301      	adds	r3, #1
 800c31e:	9305      	str	r3, [sp, #20]
 800c320:	9b00      	ldr	r3, [sp, #0]
 800c322:	4453      	add	r3, sl
 800c324:	9309      	str	r3, [sp, #36]	; 0x24
 800c326:	9b02      	ldr	r3, [sp, #8]
 800c328:	f003 0301 	and.w	r3, r3, #1
 800c32c:	46b9      	mov	r9, r7
 800c32e:	9308      	str	r3, [sp, #32]
 800c330:	4607      	mov	r7, r0
 800c332:	9b05      	ldr	r3, [sp, #20]
 800c334:	4621      	mov	r1, r4
 800c336:	3b01      	subs	r3, #1
 800c338:	4628      	mov	r0, r5
 800c33a:	9302      	str	r3, [sp, #8]
 800c33c:	f7ff fad8 	bl	800b8f0 <quorem>
 800c340:	4603      	mov	r3, r0
 800c342:	3330      	adds	r3, #48	; 0x30
 800c344:	9006      	str	r0, [sp, #24]
 800c346:	4649      	mov	r1, r9
 800c348:	4628      	mov	r0, r5
 800c34a:	930a      	str	r3, [sp, #40]	; 0x28
 800c34c:	f000 ff54 	bl	800d1f8 <__mcmp>
 800c350:	463a      	mov	r2, r7
 800c352:	4682      	mov	sl, r0
 800c354:	4621      	mov	r1, r4
 800c356:	4630      	mov	r0, r6
 800c358:	f000 ff6a 	bl	800d230 <__mdiff>
 800c35c:	68c2      	ldr	r2, [r0, #12]
 800c35e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c360:	4680      	mov	r8, r0
 800c362:	bb0a      	cbnz	r2, 800c3a8 <_dtoa_r+0x9a0>
 800c364:	4601      	mov	r1, r0
 800c366:	4628      	mov	r0, r5
 800c368:	f000 ff46 	bl	800d1f8 <__mcmp>
 800c36c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c36e:	4602      	mov	r2, r0
 800c370:	4641      	mov	r1, r8
 800c372:	4630      	mov	r0, r6
 800c374:	920e      	str	r2, [sp, #56]	; 0x38
 800c376:	930a      	str	r3, [sp, #40]	; 0x28
 800c378:	f000 fcb6 	bl	800cce8 <_Bfree>
 800c37c:	9b07      	ldr	r3, [sp, #28]
 800c37e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c380:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c384:	ea43 0102 	orr.w	r1, r3, r2
 800c388:	9b08      	ldr	r3, [sp, #32]
 800c38a:	430b      	orrs	r3, r1
 800c38c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c38e:	d10d      	bne.n	800c3ac <_dtoa_r+0x9a4>
 800c390:	2b39      	cmp	r3, #57	; 0x39
 800c392:	d029      	beq.n	800c3e8 <_dtoa_r+0x9e0>
 800c394:	f1ba 0f00 	cmp.w	sl, #0
 800c398:	dd01      	ble.n	800c39e <_dtoa_r+0x996>
 800c39a:	9b06      	ldr	r3, [sp, #24]
 800c39c:	3331      	adds	r3, #49	; 0x31
 800c39e:	9a02      	ldr	r2, [sp, #8]
 800c3a0:	7013      	strb	r3, [r2, #0]
 800c3a2:	e774      	b.n	800c28e <_dtoa_r+0x886>
 800c3a4:	4638      	mov	r0, r7
 800c3a6:	e7b8      	b.n	800c31a <_dtoa_r+0x912>
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	e7e1      	b.n	800c370 <_dtoa_r+0x968>
 800c3ac:	f1ba 0f00 	cmp.w	sl, #0
 800c3b0:	db06      	blt.n	800c3c0 <_dtoa_r+0x9b8>
 800c3b2:	9907      	ldr	r1, [sp, #28]
 800c3b4:	ea41 0a0a 	orr.w	sl, r1, sl
 800c3b8:	9908      	ldr	r1, [sp, #32]
 800c3ba:	ea5a 0101 	orrs.w	r1, sl, r1
 800c3be:	d120      	bne.n	800c402 <_dtoa_r+0x9fa>
 800c3c0:	2a00      	cmp	r2, #0
 800c3c2:	ddec      	ble.n	800c39e <_dtoa_r+0x996>
 800c3c4:	4629      	mov	r1, r5
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	9305      	str	r3, [sp, #20]
 800c3cc:	f000 fea8 	bl	800d120 <__lshift>
 800c3d0:	4621      	mov	r1, r4
 800c3d2:	4605      	mov	r5, r0
 800c3d4:	f000 ff10 	bl	800d1f8 <__mcmp>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	9b05      	ldr	r3, [sp, #20]
 800c3dc:	dc02      	bgt.n	800c3e4 <_dtoa_r+0x9dc>
 800c3de:	d1de      	bne.n	800c39e <_dtoa_r+0x996>
 800c3e0:	07da      	lsls	r2, r3, #31
 800c3e2:	d5dc      	bpl.n	800c39e <_dtoa_r+0x996>
 800c3e4:	2b39      	cmp	r3, #57	; 0x39
 800c3e6:	d1d8      	bne.n	800c39a <_dtoa_r+0x992>
 800c3e8:	9a02      	ldr	r2, [sp, #8]
 800c3ea:	2339      	movs	r3, #57	; 0x39
 800c3ec:	7013      	strb	r3, [r2, #0]
 800c3ee:	4643      	mov	r3, r8
 800c3f0:	4698      	mov	r8, r3
 800c3f2:	3b01      	subs	r3, #1
 800c3f4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c3f8:	2a39      	cmp	r2, #57	; 0x39
 800c3fa:	d051      	beq.n	800c4a0 <_dtoa_r+0xa98>
 800c3fc:	3201      	adds	r2, #1
 800c3fe:	701a      	strb	r2, [r3, #0]
 800c400:	e745      	b.n	800c28e <_dtoa_r+0x886>
 800c402:	2a00      	cmp	r2, #0
 800c404:	dd03      	ble.n	800c40e <_dtoa_r+0xa06>
 800c406:	2b39      	cmp	r3, #57	; 0x39
 800c408:	d0ee      	beq.n	800c3e8 <_dtoa_r+0x9e0>
 800c40a:	3301      	adds	r3, #1
 800c40c:	e7c7      	b.n	800c39e <_dtoa_r+0x996>
 800c40e:	9a05      	ldr	r2, [sp, #20]
 800c410:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c412:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c416:	428a      	cmp	r2, r1
 800c418:	d02b      	beq.n	800c472 <_dtoa_r+0xa6a>
 800c41a:	4629      	mov	r1, r5
 800c41c:	2300      	movs	r3, #0
 800c41e:	220a      	movs	r2, #10
 800c420:	4630      	mov	r0, r6
 800c422:	f000 fc83 	bl	800cd2c <__multadd>
 800c426:	45b9      	cmp	r9, r7
 800c428:	4605      	mov	r5, r0
 800c42a:	f04f 0300 	mov.w	r3, #0
 800c42e:	f04f 020a 	mov.w	r2, #10
 800c432:	4649      	mov	r1, r9
 800c434:	4630      	mov	r0, r6
 800c436:	d107      	bne.n	800c448 <_dtoa_r+0xa40>
 800c438:	f000 fc78 	bl	800cd2c <__multadd>
 800c43c:	4681      	mov	r9, r0
 800c43e:	4607      	mov	r7, r0
 800c440:	9b05      	ldr	r3, [sp, #20]
 800c442:	3301      	adds	r3, #1
 800c444:	9305      	str	r3, [sp, #20]
 800c446:	e774      	b.n	800c332 <_dtoa_r+0x92a>
 800c448:	f000 fc70 	bl	800cd2c <__multadd>
 800c44c:	4639      	mov	r1, r7
 800c44e:	4681      	mov	r9, r0
 800c450:	2300      	movs	r3, #0
 800c452:	220a      	movs	r2, #10
 800c454:	4630      	mov	r0, r6
 800c456:	f000 fc69 	bl	800cd2c <__multadd>
 800c45a:	4607      	mov	r7, r0
 800c45c:	e7f0      	b.n	800c440 <_dtoa_r+0xa38>
 800c45e:	f1ba 0f00 	cmp.w	sl, #0
 800c462:	9a00      	ldr	r2, [sp, #0]
 800c464:	bfcc      	ite	gt
 800c466:	46d0      	movgt	r8, sl
 800c468:	f04f 0801 	movle.w	r8, #1
 800c46c:	4490      	add	r8, r2
 800c46e:	f04f 0900 	mov.w	r9, #0
 800c472:	4629      	mov	r1, r5
 800c474:	2201      	movs	r2, #1
 800c476:	4630      	mov	r0, r6
 800c478:	9302      	str	r3, [sp, #8]
 800c47a:	f000 fe51 	bl	800d120 <__lshift>
 800c47e:	4621      	mov	r1, r4
 800c480:	4605      	mov	r5, r0
 800c482:	f000 feb9 	bl	800d1f8 <__mcmp>
 800c486:	2800      	cmp	r0, #0
 800c488:	dcb1      	bgt.n	800c3ee <_dtoa_r+0x9e6>
 800c48a:	d102      	bne.n	800c492 <_dtoa_r+0xa8a>
 800c48c:	9b02      	ldr	r3, [sp, #8]
 800c48e:	07db      	lsls	r3, r3, #31
 800c490:	d4ad      	bmi.n	800c3ee <_dtoa_r+0x9e6>
 800c492:	4643      	mov	r3, r8
 800c494:	4698      	mov	r8, r3
 800c496:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c49a:	2a30      	cmp	r2, #48	; 0x30
 800c49c:	d0fa      	beq.n	800c494 <_dtoa_r+0xa8c>
 800c49e:	e6f6      	b.n	800c28e <_dtoa_r+0x886>
 800c4a0:	9a00      	ldr	r2, [sp, #0]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d1a4      	bne.n	800c3f0 <_dtoa_r+0x9e8>
 800c4a6:	f10b 0b01 	add.w	fp, fp, #1
 800c4aa:	2331      	movs	r3, #49	; 0x31
 800c4ac:	e778      	b.n	800c3a0 <_dtoa_r+0x998>
 800c4ae:	4b15      	ldr	r3, [pc, #84]	; (800c504 <_dtoa_r+0xafc>)
 800c4b0:	f7ff bb12 	b.w	800bad8 <_dtoa_r+0xd0>
 800c4b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	f47f aaee 	bne.w	800ba98 <_dtoa_r+0x90>
 800c4bc:	4b12      	ldr	r3, [pc, #72]	; (800c508 <_dtoa_r+0xb00>)
 800c4be:	f7ff bb0b 	b.w	800bad8 <_dtoa_r+0xd0>
 800c4c2:	f1ba 0f00 	cmp.w	sl, #0
 800c4c6:	dc03      	bgt.n	800c4d0 <_dtoa_r+0xac8>
 800c4c8:	9b07      	ldr	r3, [sp, #28]
 800c4ca:	2b02      	cmp	r3, #2
 800c4cc:	f73f aec7 	bgt.w	800c25e <_dtoa_r+0x856>
 800c4d0:	f8dd 8000 	ldr.w	r8, [sp]
 800c4d4:	4621      	mov	r1, r4
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	f7ff fa0a 	bl	800b8f0 <quorem>
 800c4dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c4e0:	f808 3b01 	strb.w	r3, [r8], #1
 800c4e4:	9a00      	ldr	r2, [sp, #0]
 800c4e6:	eba8 0202 	sub.w	r2, r8, r2
 800c4ea:	4592      	cmp	sl, r2
 800c4ec:	ddb7      	ble.n	800c45e <_dtoa_r+0xa56>
 800c4ee:	4629      	mov	r1, r5
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	220a      	movs	r2, #10
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	f000 fc19 	bl	800cd2c <__multadd>
 800c4fa:	4605      	mov	r5, r0
 800c4fc:	e7ea      	b.n	800c4d4 <_dtoa_r+0xacc>
 800c4fe:	bf00      	nop
 800c500:	0800f0fc 	.word	0x0800f0fc
 800c504:	0800f301 	.word	0x0800f301
 800c508:	0800f079 	.word	0x0800f079

0800c50c <rshift>:
 800c50c:	6903      	ldr	r3, [r0, #16]
 800c50e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c512:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c516:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c51a:	f100 0414 	add.w	r4, r0, #20
 800c51e:	dd45      	ble.n	800c5ac <rshift+0xa0>
 800c520:	f011 011f 	ands.w	r1, r1, #31
 800c524:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c528:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c52c:	d10c      	bne.n	800c548 <rshift+0x3c>
 800c52e:	f100 0710 	add.w	r7, r0, #16
 800c532:	4629      	mov	r1, r5
 800c534:	42b1      	cmp	r1, r6
 800c536:	d334      	bcc.n	800c5a2 <rshift+0x96>
 800c538:	1a9b      	subs	r3, r3, r2
 800c53a:	009b      	lsls	r3, r3, #2
 800c53c:	1eea      	subs	r2, r5, #3
 800c53e:	4296      	cmp	r6, r2
 800c540:	bf38      	it	cc
 800c542:	2300      	movcc	r3, #0
 800c544:	4423      	add	r3, r4
 800c546:	e015      	b.n	800c574 <rshift+0x68>
 800c548:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c54c:	f1c1 0820 	rsb	r8, r1, #32
 800c550:	40cf      	lsrs	r7, r1
 800c552:	f105 0e04 	add.w	lr, r5, #4
 800c556:	46a1      	mov	r9, r4
 800c558:	4576      	cmp	r6, lr
 800c55a:	46f4      	mov	ip, lr
 800c55c:	d815      	bhi.n	800c58a <rshift+0x7e>
 800c55e:	1a9b      	subs	r3, r3, r2
 800c560:	009a      	lsls	r2, r3, #2
 800c562:	3a04      	subs	r2, #4
 800c564:	3501      	adds	r5, #1
 800c566:	42ae      	cmp	r6, r5
 800c568:	bf38      	it	cc
 800c56a:	2200      	movcc	r2, #0
 800c56c:	18a3      	adds	r3, r4, r2
 800c56e:	50a7      	str	r7, [r4, r2]
 800c570:	b107      	cbz	r7, 800c574 <rshift+0x68>
 800c572:	3304      	adds	r3, #4
 800c574:	1b1a      	subs	r2, r3, r4
 800c576:	42a3      	cmp	r3, r4
 800c578:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c57c:	bf08      	it	eq
 800c57e:	2300      	moveq	r3, #0
 800c580:	6102      	str	r2, [r0, #16]
 800c582:	bf08      	it	eq
 800c584:	6143      	streq	r3, [r0, #20]
 800c586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c58a:	f8dc c000 	ldr.w	ip, [ip]
 800c58e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c592:	ea4c 0707 	orr.w	r7, ip, r7
 800c596:	f849 7b04 	str.w	r7, [r9], #4
 800c59a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c59e:	40cf      	lsrs	r7, r1
 800c5a0:	e7da      	b.n	800c558 <rshift+0x4c>
 800c5a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800c5a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800c5aa:	e7c3      	b.n	800c534 <rshift+0x28>
 800c5ac:	4623      	mov	r3, r4
 800c5ae:	e7e1      	b.n	800c574 <rshift+0x68>

0800c5b0 <__hexdig_fun>:
 800c5b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c5b4:	2b09      	cmp	r3, #9
 800c5b6:	d802      	bhi.n	800c5be <__hexdig_fun+0xe>
 800c5b8:	3820      	subs	r0, #32
 800c5ba:	b2c0      	uxtb	r0, r0
 800c5bc:	4770      	bx	lr
 800c5be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c5c2:	2b05      	cmp	r3, #5
 800c5c4:	d801      	bhi.n	800c5ca <__hexdig_fun+0x1a>
 800c5c6:	3847      	subs	r0, #71	; 0x47
 800c5c8:	e7f7      	b.n	800c5ba <__hexdig_fun+0xa>
 800c5ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c5ce:	2b05      	cmp	r3, #5
 800c5d0:	d801      	bhi.n	800c5d6 <__hexdig_fun+0x26>
 800c5d2:	3827      	subs	r0, #39	; 0x27
 800c5d4:	e7f1      	b.n	800c5ba <__hexdig_fun+0xa>
 800c5d6:	2000      	movs	r0, #0
 800c5d8:	4770      	bx	lr
	...

0800c5dc <__gethex>:
 800c5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e0:	ed2d 8b02 	vpush	{d8}
 800c5e4:	b089      	sub	sp, #36	; 0x24
 800c5e6:	ee08 0a10 	vmov	s16, r0
 800c5ea:	9304      	str	r3, [sp, #16]
 800c5ec:	4bbc      	ldr	r3, [pc, #752]	; (800c8e0 <__gethex+0x304>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	9301      	str	r3, [sp, #4]
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	468b      	mov	fp, r1
 800c5f6:	4690      	mov	r8, r2
 800c5f8:	f7f3 fe2c 	bl	8000254 <strlen>
 800c5fc:	9b01      	ldr	r3, [sp, #4]
 800c5fe:	f8db 2000 	ldr.w	r2, [fp]
 800c602:	4403      	add	r3, r0
 800c604:	4682      	mov	sl, r0
 800c606:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c60a:	9305      	str	r3, [sp, #20]
 800c60c:	1c93      	adds	r3, r2, #2
 800c60e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c612:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c616:	32fe      	adds	r2, #254	; 0xfe
 800c618:	18d1      	adds	r1, r2, r3
 800c61a:	461f      	mov	r7, r3
 800c61c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c620:	9100      	str	r1, [sp, #0]
 800c622:	2830      	cmp	r0, #48	; 0x30
 800c624:	d0f8      	beq.n	800c618 <__gethex+0x3c>
 800c626:	f7ff ffc3 	bl	800c5b0 <__hexdig_fun>
 800c62a:	4604      	mov	r4, r0
 800c62c:	2800      	cmp	r0, #0
 800c62e:	d13a      	bne.n	800c6a6 <__gethex+0xca>
 800c630:	9901      	ldr	r1, [sp, #4]
 800c632:	4652      	mov	r2, sl
 800c634:	4638      	mov	r0, r7
 800c636:	f7fe fa98 	bl	800ab6a <strncmp>
 800c63a:	4605      	mov	r5, r0
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d168      	bne.n	800c712 <__gethex+0x136>
 800c640:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c644:	eb07 060a 	add.w	r6, r7, sl
 800c648:	f7ff ffb2 	bl	800c5b0 <__hexdig_fun>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	d062      	beq.n	800c716 <__gethex+0x13a>
 800c650:	4633      	mov	r3, r6
 800c652:	7818      	ldrb	r0, [r3, #0]
 800c654:	2830      	cmp	r0, #48	; 0x30
 800c656:	461f      	mov	r7, r3
 800c658:	f103 0301 	add.w	r3, r3, #1
 800c65c:	d0f9      	beq.n	800c652 <__gethex+0x76>
 800c65e:	f7ff ffa7 	bl	800c5b0 <__hexdig_fun>
 800c662:	2301      	movs	r3, #1
 800c664:	fab0 f480 	clz	r4, r0
 800c668:	0964      	lsrs	r4, r4, #5
 800c66a:	4635      	mov	r5, r6
 800c66c:	9300      	str	r3, [sp, #0]
 800c66e:	463a      	mov	r2, r7
 800c670:	4616      	mov	r6, r2
 800c672:	3201      	adds	r2, #1
 800c674:	7830      	ldrb	r0, [r6, #0]
 800c676:	f7ff ff9b 	bl	800c5b0 <__hexdig_fun>
 800c67a:	2800      	cmp	r0, #0
 800c67c:	d1f8      	bne.n	800c670 <__gethex+0x94>
 800c67e:	9901      	ldr	r1, [sp, #4]
 800c680:	4652      	mov	r2, sl
 800c682:	4630      	mov	r0, r6
 800c684:	f7fe fa71 	bl	800ab6a <strncmp>
 800c688:	b980      	cbnz	r0, 800c6ac <__gethex+0xd0>
 800c68a:	b94d      	cbnz	r5, 800c6a0 <__gethex+0xc4>
 800c68c:	eb06 050a 	add.w	r5, r6, sl
 800c690:	462a      	mov	r2, r5
 800c692:	4616      	mov	r6, r2
 800c694:	3201      	adds	r2, #1
 800c696:	7830      	ldrb	r0, [r6, #0]
 800c698:	f7ff ff8a 	bl	800c5b0 <__hexdig_fun>
 800c69c:	2800      	cmp	r0, #0
 800c69e:	d1f8      	bne.n	800c692 <__gethex+0xb6>
 800c6a0:	1bad      	subs	r5, r5, r6
 800c6a2:	00ad      	lsls	r5, r5, #2
 800c6a4:	e004      	b.n	800c6b0 <__gethex+0xd4>
 800c6a6:	2400      	movs	r4, #0
 800c6a8:	4625      	mov	r5, r4
 800c6aa:	e7e0      	b.n	800c66e <__gethex+0x92>
 800c6ac:	2d00      	cmp	r5, #0
 800c6ae:	d1f7      	bne.n	800c6a0 <__gethex+0xc4>
 800c6b0:	7833      	ldrb	r3, [r6, #0]
 800c6b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c6b6:	2b50      	cmp	r3, #80	; 0x50
 800c6b8:	d13b      	bne.n	800c732 <__gethex+0x156>
 800c6ba:	7873      	ldrb	r3, [r6, #1]
 800c6bc:	2b2b      	cmp	r3, #43	; 0x2b
 800c6be:	d02c      	beq.n	800c71a <__gethex+0x13e>
 800c6c0:	2b2d      	cmp	r3, #45	; 0x2d
 800c6c2:	d02e      	beq.n	800c722 <__gethex+0x146>
 800c6c4:	1c71      	adds	r1, r6, #1
 800c6c6:	f04f 0900 	mov.w	r9, #0
 800c6ca:	7808      	ldrb	r0, [r1, #0]
 800c6cc:	f7ff ff70 	bl	800c5b0 <__hexdig_fun>
 800c6d0:	1e43      	subs	r3, r0, #1
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	2b18      	cmp	r3, #24
 800c6d6:	d82c      	bhi.n	800c732 <__gethex+0x156>
 800c6d8:	f1a0 0210 	sub.w	r2, r0, #16
 800c6dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c6e0:	f7ff ff66 	bl	800c5b0 <__hexdig_fun>
 800c6e4:	1e43      	subs	r3, r0, #1
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	2b18      	cmp	r3, #24
 800c6ea:	d91d      	bls.n	800c728 <__gethex+0x14c>
 800c6ec:	f1b9 0f00 	cmp.w	r9, #0
 800c6f0:	d000      	beq.n	800c6f4 <__gethex+0x118>
 800c6f2:	4252      	negs	r2, r2
 800c6f4:	4415      	add	r5, r2
 800c6f6:	f8cb 1000 	str.w	r1, [fp]
 800c6fa:	b1e4      	cbz	r4, 800c736 <__gethex+0x15a>
 800c6fc:	9b00      	ldr	r3, [sp, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	bf14      	ite	ne
 800c702:	2700      	movne	r7, #0
 800c704:	2706      	moveq	r7, #6
 800c706:	4638      	mov	r0, r7
 800c708:	b009      	add	sp, #36	; 0x24
 800c70a:	ecbd 8b02 	vpop	{d8}
 800c70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c712:	463e      	mov	r6, r7
 800c714:	4625      	mov	r5, r4
 800c716:	2401      	movs	r4, #1
 800c718:	e7ca      	b.n	800c6b0 <__gethex+0xd4>
 800c71a:	f04f 0900 	mov.w	r9, #0
 800c71e:	1cb1      	adds	r1, r6, #2
 800c720:	e7d3      	b.n	800c6ca <__gethex+0xee>
 800c722:	f04f 0901 	mov.w	r9, #1
 800c726:	e7fa      	b.n	800c71e <__gethex+0x142>
 800c728:	230a      	movs	r3, #10
 800c72a:	fb03 0202 	mla	r2, r3, r2, r0
 800c72e:	3a10      	subs	r2, #16
 800c730:	e7d4      	b.n	800c6dc <__gethex+0x100>
 800c732:	4631      	mov	r1, r6
 800c734:	e7df      	b.n	800c6f6 <__gethex+0x11a>
 800c736:	1bf3      	subs	r3, r6, r7
 800c738:	3b01      	subs	r3, #1
 800c73a:	4621      	mov	r1, r4
 800c73c:	2b07      	cmp	r3, #7
 800c73e:	dc0b      	bgt.n	800c758 <__gethex+0x17c>
 800c740:	ee18 0a10 	vmov	r0, s16
 800c744:	f000 fa90 	bl	800cc68 <_Balloc>
 800c748:	4604      	mov	r4, r0
 800c74a:	b940      	cbnz	r0, 800c75e <__gethex+0x182>
 800c74c:	4b65      	ldr	r3, [pc, #404]	; (800c8e4 <__gethex+0x308>)
 800c74e:	4602      	mov	r2, r0
 800c750:	21de      	movs	r1, #222	; 0xde
 800c752:	4865      	ldr	r0, [pc, #404]	; (800c8e8 <__gethex+0x30c>)
 800c754:	f001 fda4 	bl	800e2a0 <__assert_func>
 800c758:	3101      	adds	r1, #1
 800c75a:	105b      	asrs	r3, r3, #1
 800c75c:	e7ee      	b.n	800c73c <__gethex+0x160>
 800c75e:	f100 0914 	add.w	r9, r0, #20
 800c762:	f04f 0b00 	mov.w	fp, #0
 800c766:	f1ca 0301 	rsb	r3, sl, #1
 800c76a:	f8cd 9008 	str.w	r9, [sp, #8]
 800c76e:	f8cd b000 	str.w	fp, [sp]
 800c772:	9306      	str	r3, [sp, #24]
 800c774:	42b7      	cmp	r7, r6
 800c776:	d340      	bcc.n	800c7fa <__gethex+0x21e>
 800c778:	9802      	ldr	r0, [sp, #8]
 800c77a:	9b00      	ldr	r3, [sp, #0]
 800c77c:	f840 3b04 	str.w	r3, [r0], #4
 800c780:	eba0 0009 	sub.w	r0, r0, r9
 800c784:	1080      	asrs	r0, r0, #2
 800c786:	0146      	lsls	r6, r0, #5
 800c788:	6120      	str	r0, [r4, #16]
 800c78a:	4618      	mov	r0, r3
 800c78c:	f000 fb62 	bl	800ce54 <__hi0bits>
 800c790:	1a30      	subs	r0, r6, r0
 800c792:	f8d8 6000 	ldr.w	r6, [r8]
 800c796:	42b0      	cmp	r0, r6
 800c798:	dd63      	ble.n	800c862 <__gethex+0x286>
 800c79a:	1b87      	subs	r7, r0, r6
 800c79c:	4639      	mov	r1, r7
 800c79e:	4620      	mov	r0, r4
 800c7a0:	f000 fefd 	bl	800d59e <__any_on>
 800c7a4:	4682      	mov	sl, r0
 800c7a6:	b1a8      	cbz	r0, 800c7d4 <__gethex+0x1f8>
 800c7a8:	1e7b      	subs	r3, r7, #1
 800c7aa:	1159      	asrs	r1, r3, #5
 800c7ac:	f003 021f 	and.w	r2, r3, #31
 800c7b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c7b4:	f04f 0a01 	mov.w	sl, #1
 800c7b8:	fa0a f202 	lsl.w	r2, sl, r2
 800c7bc:	420a      	tst	r2, r1
 800c7be:	d009      	beq.n	800c7d4 <__gethex+0x1f8>
 800c7c0:	4553      	cmp	r3, sl
 800c7c2:	dd05      	ble.n	800c7d0 <__gethex+0x1f4>
 800c7c4:	1eb9      	subs	r1, r7, #2
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	f000 fee9 	bl	800d59e <__any_on>
 800c7cc:	2800      	cmp	r0, #0
 800c7ce:	d145      	bne.n	800c85c <__gethex+0x280>
 800c7d0:	f04f 0a02 	mov.w	sl, #2
 800c7d4:	4639      	mov	r1, r7
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	f7ff fe98 	bl	800c50c <rshift>
 800c7dc:	443d      	add	r5, r7
 800c7de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7e2:	42ab      	cmp	r3, r5
 800c7e4:	da4c      	bge.n	800c880 <__gethex+0x2a4>
 800c7e6:	ee18 0a10 	vmov	r0, s16
 800c7ea:	4621      	mov	r1, r4
 800c7ec:	f000 fa7c 	bl	800cce8 <_Bfree>
 800c7f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	6013      	str	r3, [r2, #0]
 800c7f6:	27a3      	movs	r7, #163	; 0xa3
 800c7f8:	e785      	b.n	800c706 <__gethex+0x12a>
 800c7fa:	1e73      	subs	r3, r6, #1
 800c7fc:	9a05      	ldr	r2, [sp, #20]
 800c7fe:	9303      	str	r3, [sp, #12]
 800c800:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c804:	4293      	cmp	r3, r2
 800c806:	d019      	beq.n	800c83c <__gethex+0x260>
 800c808:	f1bb 0f20 	cmp.w	fp, #32
 800c80c:	d107      	bne.n	800c81e <__gethex+0x242>
 800c80e:	9b02      	ldr	r3, [sp, #8]
 800c810:	9a00      	ldr	r2, [sp, #0]
 800c812:	f843 2b04 	str.w	r2, [r3], #4
 800c816:	9302      	str	r3, [sp, #8]
 800c818:	2300      	movs	r3, #0
 800c81a:	9300      	str	r3, [sp, #0]
 800c81c:	469b      	mov	fp, r3
 800c81e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c822:	f7ff fec5 	bl	800c5b0 <__hexdig_fun>
 800c826:	9b00      	ldr	r3, [sp, #0]
 800c828:	f000 000f 	and.w	r0, r0, #15
 800c82c:	fa00 f00b 	lsl.w	r0, r0, fp
 800c830:	4303      	orrs	r3, r0
 800c832:	9300      	str	r3, [sp, #0]
 800c834:	f10b 0b04 	add.w	fp, fp, #4
 800c838:	9b03      	ldr	r3, [sp, #12]
 800c83a:	e00d      	b.n	800c858 <__gethex+0x27c>
 800c83c:	9b03      	ldr	r3, [sp, #12]
 800c83e:	9a06      	ldr	r2, [sp, #24]
 800c840:	4413      	add	r3, r2
 800c842:	42bb      	cmp	r3, r7
 800c844:	d3e0      	bcc.n	800c808 <__gethex+0x22c>
 800c846:	4618      	mov	r0, r3
 800c848:	9901      	ldr	r1, [sp, #4]
 800c84a:	9307      	str	r3, [sp, #28]
 800c84c:	4652      	mov	r2, sl
 800c84e:	f7fe f98c 	bl	800ab6a <strncmp>
 800c852:	9b07      	ldr	r3, [sp, #28]
 800c854:	2800      	cmp	r0, #0
 800c856:	d1d7      	bne.n	800c808 <__gethex+0x22c>
 800c858:	461e      	mov	r6, r3
 800c85a:	e78b      	b.n	800c774 <__gethex+0x198>
 800c85c:	f04f 0a03 	mov.w	sl, #3
 800c860:	e7b8      	b.n	800c7d4 <__gethex+0x1f8>
 800c862:	da0a      	bge.n	800c87a <__gethex+0x29e>
 800c864:	1a37      	subs	r7, r6, r0
 800c866:	4621      	mov	r1, r4
 800c868:	ee18 0a10 	vmov	r0, s16
 800c86c:	463a      	mov	r2, r7
 800c86e:	f000 fc57 	bl	800d120 <__lshift>
 800c872:	1bed      	subs	r5, r5, r7
 800c874:	4604      	mov	r4, r0
 800c876:	f100 0914 	add.w	r9, r0, #20
 800c87a:	f04f 0a00 	mov.w	sl, #0
 800c87e:	e7ae      	b.n	800c7de <__gethex+0x202>
 800c880:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c884:	42a8      	cmp	r0, r5
 800c886:	dd72      	ble.n	800c96e <__gethex+0x392>
 800c888:	1b45      	subs	r5, r0, r5
 800c88a:	42ae      	cmp	r6, r5
 800c88c:	dc36      	bgt.n	800c8fc <__gethex+0x320>
 800c88e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c892:	2b02      	cmp	r3, #2
 800c894:	d02a      	beq.n	800c8ec <__gethex+0x310>
 800c896:	2b03      	cmp	r3, #3
 800c898:	d02c      	beq.n	800c8f4 <__gethex+0x318>
 800c89a:	2b01      	cmp	r3, #1
 800c89c:	d115      	bne.n	800c8ca <__gethex+0x2ee>
 800c89e:	42ae      	cmp	r6, r5
 800c8a0:	d113      	bne.n	800c8ca <__gethex+0x2ee>
 800c8a2:	2e01      	cmp	r6, #1
 800c8a4:	d10b      	bne.n	800c8be <__gethex+0x2e2>
 800c8a6:	9a04      	ldr	r2, [sp, #16]
 800c8a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c8ac:	6013      	str	r3, [r2, #0]
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	6123      	str	r3, [r4, #16]
 800c8b2:	f8c9 3000 	str.w	r3, [r9]
 800c8b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c8b8:	2762      	movs	r7, #98	; 0x62
 800c8ba:	601c      	str	r4, [r3, #0]
 800c8bc:	e723      	b.n	800c706 <__gethex+0x12a>
 800c8be:	1e71      	subs	r1, r6, #1
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	f000 fe6c 	bl	800d59e <__any_on>
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	d1ed      	bne.n	800c8a6 <__gethex+0x2ca>
 800c8ca:	ee18 0a10 	vmov	r0, s16
 800c8ce:	4621      	mov	r1, r4
 800c8d0:	f000 fa0a 	bl	800cce8 <_Bfree>
 800c8d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	6013      	str	r3, [r2, #0]
 800c8da:	2750      	movs	r7, #80	; 0x50
 800c8dc:	e713      	b.n	800c706 <__gethex+0x12a>
 800c8de:	bf00      	nop
 800c8e0:	0800f178 	.word	0x0800f178
 800c8e4:	0800f0fc 	.word	0x0800f0fc
 800c8e8:	0800f10d 	.word	0x0800f10d
 800c8ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d1eb      	bne.n	800c8ca <__gethex+0x2ee>
 800c8f2:	e7d8      	b.n	800c8a6 <__gethex+0x2ca>
 800c8f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d1d5      	bne.n	800c8a6 <__gethex+0x2ca>
 800c8fa:	e7e6      	b.n	800c8ca <__gethex+0x2ee>
 800c8fc:	1e6f      	subs	r7, r5, #1
 800c8fe:	f1ba 0f00 	cmp.w	sl, #0
 800c902:	d131      	bne.n	800c968 <__gethex+0x38c>
 800c904:	b127      	cbz	r7, 800c910 <__gethex+0x334>
 800c906:	4639      	mov	r1, r7
 800c908:	4620      	mov	r0, r4
 800c90a:	f000 fe48 	bl	800d59e <__any_on>
 800c90e:	4682      	mov	sl, r0
 800c910:	117b      	asrs	r3, r7, #5
 800c912:	2101      	movs	r1, #1
 800c914:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c918:	f007 071f 	and.w	r7, r7, #31
 800c91c:	fa01 f707 	lsl.w	r7, r1, r7
 800c920:	421f      	tst	r7, r3
 800c922:	4629      	mov	r1, r5
 800c924:	4620      	mov	r0, r4
 800c926:	bf18      	it	ne
 800c928:	f04a 0a02 	orrne.w	sl, sl, #2
 800c92c:	1b76      	subs	r6, r6, r5
 800c92e:	f7ff fded 	bl	800c50c <rshift>
 800c932:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c936:	2702      	movs	r7, #2
 800c938:	f1ba 0f00 	cmp.w	sl, #0
 800c93c:	d048      	beq.n	800c9d0 <__gethex+0x3f4>
 800c93e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c942:	2b02      	cmp	r3, #2
 800c944:	d015      	beq.n	800c972 <__gethex+0x396>
 800c946:	2b03      	cmp	r3, #3
 800c948:	d017      	beq.n	800c97a <__gethex+0x39e>
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d109      	bne.n	800c962 <__gethex+0x386>
 800c94e:	f01a 0f02 	tst.w	sl, #2
 800c952:	d006      	beq.n	800c962 <__gethex+0x386>
 800c954:	f8d9 0000 	ldr.w	r0, [r9]
 800c958:	ea4a 0a00 	orr.w	sl, sl, r0
 800c95c:	f01a 0f01 	tst.w	sl, #1
 800c960:	d10e      	bne.n	800c980 <__gethex+0x3a4>
 800c962:	f047 0710 	orr.w	r7, r7, #16
 800c966:	e033      	b.n	800c9d0 <__gethex+0x3f4>
 800c968:	f04f 0a01 	mov.w	sl, #1
 800c96c:	e7d0      	b.n	800c910 <__gethex+0x334>
 800c96e:	2701      	movs	r7, #1
 800c970:	e7e2      	b.n	800c938 <__gethex+0x35c>
 800c972:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c974:	f1c3 0301 	rsb	r3, r3, #1
 800c978:	9315      	str	r3, [sp, #84]	; 0x54
 800c97a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d0f0      	beq.n	800c962 <__gethex+0x386>
 800c980:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c984:	f104 0314 	add.w	r3, r4, #20
 800c988:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c98c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c990:	f04f 0c00 	mov.w	ip, #0
 800c994:	4618      	mov	r0, r3
 800c996:	f853 2b04 	ldr.w	r2, [r3], #4
 800c99a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c99e:	d01c      	beq.n	800c9da <__gethex+0x3fe>
 800c9a0:	3201      	adds	r2, #1
 800c9a2:	6002      	str	r2, [r0, #0]
 800c9a4:	2f02      	cmp	r7, #2
 800c9a6:	f104 0314 	add.w	r3, r4, #20
 800c9aa:	d13f      	bne.n	800ca2c <__gethex+0x450>
 800c9ac:	f8d8 2000 	ldr.w	r2, [r8]
 800c9b0:	3a01      	subs	r2, #1
 800c9b2:	42b2      	cmp	r2, r6
 800c9b4:	d10a      	bne.n	800c9cc <__gethex+0x3f0>
 800c9b6:	1171      	asrs	r1, r6, #5
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c9be:	f006 061f 	and.w	r6, r6, #31
 800c9c2:	fa02 f606 	lsl.w	r6, r2, r6
 800c9c6:	421e      	tst	r6, r3
 800c9c8:	bf18      	it	ne
 800c9ca:	4617      	movne	r7, r2
 800c9cc:	f047 0720 	orr.w	r7, r7, #32
 800c9d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c9d2:	601c      	str	r4, [r3, #0]
 800c9d4:	9b04      	ldr	r3, [sp, #16]
 800c9d6:	601d      	str	r5, [r3, #0]
 800c9d8:	e695      	b.n	800c706 <__gethex+0x12a>
 800c9da:	4299      	cmp	r1, r3
 800c9dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800c9e0:	d8d8      	bhi.n	800c994 <__gethex+0x3b8>
 800c9e2:	68a3      	ldr	r3, [r4, #8]
 800c9e4:	459b      	cmp	fp, r3
 800c9e6:	db19      	blt.n	800ca1c <__gethex+0x440>
 800c9e8:	6861      	ldr	r1, [r4, #4]
 800c9ea:	ee18 0a10 	vmov	r0, s16
 800c9ee:	3101      	adds	r1, #1
 800c9f0:	f000 f93a 	bl	800cc68 <_Balloc>
 800c9f4:	4681      	mov	r9, r0
 800c9f6:	b918      	cbnz	r0, 800ca00 <__gethex+0x424>
 800c9f8:	4b1a      	ldr	r3, [pc, #104]	; (800ca64 <__gethex+0x488>)
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	2184      	movs	r1, #132	; 0x84
 800c9fe:	e6a8      	b.n	800c752 <__gethex+0x176>
 800ca00:	6922      	ldr	r2, [r4, #16]
 800ca02:	3202      	adds	r2, #2
 800ca04:	f104 010c 	add.w	r1, r4, #12
 800ca08:	0092      	lsls	r2, r2, #2
 800ca0a:	300c      	adds	r0, #12
 800ca0c:	f000 f91e 	bl	800cc4c <memcpy>
 800ca10:	4621      	mov	r1, r4
 800ca12:	ee18 0a10 	vmov	r0, s16
 800ca16:	f000 f967 	bl	800cce8 <_Bfree>
 800ca1a:	464c      	mov	r4, r9
 800ca1c:	6923      	ldr	r3, [r4, #16]
 800ca1e:	1c5a      	adds	r2, r3, #1
 800ca20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ca24:	6122      	str	r2, [r4, #16]
 800ca26:	2201      	movs	r2, #1
 800ca28:	615a      	str	r2, [r3, #20]
 800ca2a:	e7bb      	b.n	800c9a4 <__gethex+0x3c8>
 800ca2c:	6922      	ldr	r2, [r4, #16]
 800ca2e:	455a      	cmp	r2, fp
 800ca30:	dd0b      	ble.n	800ca4a <__gethex+0x46e>
 800ca32:	2101      	movs	r1, #1
 800ca34:	4620      	mov	r0, r4
 800ca36:	f7ff fd69 	bl	800c50c <rshift>
 800ca3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca3e:	3501      	adds	r5, #1
 800ca40:	42ab      	cmp	r3, r5
 800ca42:	f6ff aed0 	blt.w	800c7e6 <__gethex+0x20a>
 800ca46:	2701      	movs	r7, #1
 800ca48:	e7c0      	b.n	800c9cc <__gethex+0x3f0>
 800ca4a:	f016 061f 	ands.w	r6, r6, #31
 800ca4e:	d0fa      	beq.n	800ca46 <__gethex+0x46a>
 800ca50:	449a      	add	sl, r3
 800ca52:	f1c6 0620 	rsb	r6, r6, #32
 800ca56:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ca5a:	f000 f9fb 	bl	800ce54 <__hi0bits>
 800ca5e:	42b0      	cmp	r0, r6
 800ca60:	dbe7      	blt.n	800ca32 <__gethex+0x456>
 800ca62:	e7f0      	b.n	800ca46 <__gethex+0x46a>
 800ca64:	0800f0fc 	.word	0x0800f0fc

0800ca68 <L_shift>:
 800ca68:	f1c2 0208 	rsb	r2, r2, #8
 800ca6c:	0092      	lsls	r2, r2, #2
 800ca6e:	b570      	push	{r4, r5, r6, lr}
 800ca70:	f1c2 0620 	rsb	r6, r2, #32
 800ca74:	6843      	ldr	r3, [r0, #4]
 800ca76:	6804      	ldr	r4, [r0, #0]
 800ca78:	fa03 f506 	lsl.w	r5, r3, r6
 800ca7c:	432c      	orrs	r4, r5
 800ca7e:	40d3      	lsrs	r3, r2
 800ca80:	6004      	str	r4, [r0, #0]
 800ca82:	f840 3f04 	str.w	r3, [r0, #4]!
 800ca86:	4288      	cmp	r0, r1
 800ca88:	d3f4      	bcc.n	800ca74 <L_shift+0xc>
 800ca8a:	bd70      	pop	{r4, r5, r6, pc}

0800ca8c <__match>:
 800ca8c:	b530      	push	{r4, r5, lr}
 800ca8e:	6803      	ldr	r3, [r0, #0]
 800ca90:	3301      	adds	r3, #1
 800ca92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca96:	b914      	cbnz	r4, 800ca9e <__match+0x12>
 800ca98:	6003      	str	r3, [r0, #0]
 800ca9a:	2001      	movs	r0, #1
 800ca9c:	bd30      	pop	{r4, r5, pc}
 800ca9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caa2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800caa6:	2d19      	cmp	r5, #25
 800caa8:	bf98      	it	ls
 800caaa:	3220      	addls	r2, #32
 800caac:	42a2      	cmp	r2, r4
 800caae:	d0f0      	beq.n	800ca92 <__match+0x6>
 800cab0:	2000      	movs	r0, #0
 800cab2:	e7f3      	b.n	800ca9c <__match+0x10>

0800cab4 <__hexnan>:
 800cab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cab8:	680b      	ldr	r3, [r1, #0]
 800caba:	6801      	ldr	r1, [r0, #0]
 800cabc:	115e      	asrs	r6, r3, #5
 800cabe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cac2:	f013 031f 	ands.w	r3, r3, #31
 800cac6:	b087      	sub	sp, #28
 800cac8:	bf18      	it	ne
 800caca:	3604      	addne	r6, #4
 800cacc:	2500      	movs	r5, #0
 800cace:	1f37      	subs	r7, r6, #4
 800cad0:	4682      	mov	sl, r0
 800cad2:	4690      	mov	r8, r2
 800cad4:	9301      	str	r3, [sp, #4]
 800cad6:	f846 5c04 	str.w	r5, [r6, #-4]
 800cada:	46b9      	mov	r9, r7
 800cadc:	463c      	mov	r4, r7
 800cade:	9502      	str	r5, [sp, #8]
 800cae0:	46ab      	mov	fp, r5
 800cae2:	784a      	ldrb	r2, [r1, #1]
 800cae4:	1c4b      	adds	r3, r1, #1
 800cae6:	9303      	str	r3, [sp, #12]
 800cae8:	b342      	cbz	r2, 800cb3c <__hexnan+0x88>
 800caea:	4610      	mov	r0, r2
 800caec:	9105      	str	r1, [sp, #20]
 800caee:	9204      	str	r2, [sp, #16]
 800caf0:	f7ff fd5e 	bl	800c5b0 <__hexdig_fun>
 800caf4:	2800      	cmp	r0, #0
 800caf6:	d14f      	bne.n	800cb98 <__hexnan+0xe4>
 800caf8:	9a04      	ldr	r2, [sp, #16]
 800cafa:	9905      	ldr	r1, [sp, #20]
 800cafc:	2a20      	cmp	r2, #32
 800cafe:	d818      	bhi.n	800cb32 <__hexnan+0x7e>
 800cb00:	9b02      	ldr	r3, [sp, #8]
 800cb02:	459b      	cmp	fp, r3
 800cb04:	dd13      	ble.n	800cb2e <__hexnan+0x7a>
 800cb06:	454c      	cmp	r4, r9
 800cb08:	d206      	bcs.n	800cb18 <__hexnan+0x64>
 800cb0a:	2d07      	cmp	r5, #7
 800cb0c:	dc04      	bgt.n	800cb18 <__hexnan+0x64>
 800cb0e:	462a      	mov	r2, r5
 800cb10:	4649      	mov	r1, r9
 800cb12:	4620      	mov	r0, r4
 800cb14:	f7ff ffa8 	bl	800ca68 <L_shift>
 800cb18:	4544      	cmp	r4, r8
 800cb1a:	d950      	bls.n	800cbbe <__hexnan+0x10a>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	f1a4 0904 	sub.w	r9, r4, #4
 800cb22:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb26:	f8cd b008 	str.w	fp, [sp, #8]
 800cb2a:	464c      	mov	r4, r9
 800cb2c:	461d      	mov	r5, r3
 800cb2e:	9903      	ldr	r1, [sp, #12]
 800cb30:	e7d7      	b.n	800cae2 <__hexnan+0x2e>
 800cb32:	2a29      	cmp	r2, #41	; 0x29
 800cb34:	d156      	bne.n	800cbe4 <__hexnan+0x130>
 800cb36:	3102      	adds	r1, #2
 800cb38:	f8ca 1000 	str.w	r1, [sl]
 800cb3c:	f1bb 0f00 	cmp.w	fp, #0
 800cb40:	d050      	beq.n	800cbe4 <__hexnan+0x130>
 800cb42:	454c      	cmp	r4, r9
 800cb44:	d206      	bcs.n	800cb54 <__hexnan+0xa0>
 800cb46:	2d07      	cmp	r5, #7
 800cb48:	dc04      	bgt.n	800cb54 <__hexnan+0xa0>
 800cb4a:	462a      	mov	r2, r5
 800cb4c:	4649      	mov	r1, r9
 800cb4e:	4620      	mov	r0, r4
 800cb50:	f7ff ff8a 	bl	800ca68 <L_shift>
 800cb54:	4544      	cmp	r4, r8
 800cb56:	d934      	bls.n	800cbc2 <__hexnan+0x10e>
 800cb58:	f1a8 0204 	sub.w	r2, r8, #4
 800cb5c:	4623      	mov	r3, r4
 800cb5e:	f853 1b04 	ldr.w	r1, [r3], #4
 800cb62:	f842 1f04 	str.w	r1, [r2, #4]!
 800cb66:	429f      	cmp	r7, r3
 800cb68:	d2f9      	bcs.n	800cb5e <__hexnan+0xaa>
 800cb6a:	1b3b      	subs	r3, r7, r4
 800cb6c:	f023 0303 	bic.w	r3, r3, #3
 800cb70:	3304      	adds	r3, #4
 800cb72:	3401      	adds	r4, #1
 800cb74:	3e03      	subs	r6, #3
 800cb76:	42b4      	cmp	r4, r6
 800cb78:	bf88      	it	hi
 800cb7a:	2304      	movhi	r3, #4
 800cb7c:	4443      	add	r3, r8
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f843 2b04 	str.w	r2, [r3], #4
 800cb84:	429f      	cmp	r7, r3
 800cb86:	d2fb      	bcs.n	800cb80 <__hexnan+0xcc>
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	b91b      	cbnz	r3, 800cb94 <__hexnan+0xe0>
 800cb8c:	4547      	cmp	r7, r8
 800cb8e:	d127      	bne.n	800cbe0 <__hexnan+0x12c>
 800cb90:	2301      	movs	r3, #1
 800cb92:	603b      	str	r3, [r7, #0]
 800cb94:	2005      	movs	r0, #5
 800cb96:	e026      	b.n	800cbe6 <__hexnan+0x132>
 800cb98:	3501      	adds	r5, #1
 800cb9a:	2d08      	cmp	r5, #8
 800cb9c:	f10b 0b01 	add.w	fp, fp, #1
 800cba0:	dd06      	ble.n	800cbb0 <__hexnan+0xfc>
 800cba2:	4544      	cmp	r4, r8
 800cba4:	d9c3      	bls.n	800cb2e <__hexnan+0x7a>
 800cba6:	2300      	movs	r3, #0
 800cba8:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbac:	2501      	movs	r5, #1
 800cbae:	3c04      	subs	r4, #4
 800cbb0:	6822      	ldr	r2, [r4, #0]
 800cbb2:	f000 000f 	and.w	r0, r0, #15
 800cbb6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cbba:	6022      	str	r2, [r4, #0]
 800cbbc:	e7b7      	b.n	800cb2e <__hexnan+0x7a>
 800cbbe:	2508      	movs	r5, #8
 800cbc0:	e7b5      	b.n	800cb2e <__hexnan+0x7a>
 800cbc2:	9b01      	ldr	r3, [sp, #4]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d0df      	beq.n	800cb88 <__hexnan+0xd4>
 800cbc8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbcc:	f1c3 0320 	rsb	r3, r3, #32
 800cbd0:	fa22 f303 	lsr.w	r3, r2, r3
 800cbd4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cbd8:	401a      	ands	r2, r3
 800cbda:	f846 2c04 	str.w	r2, [r6, #-4]
 800cbde:	e7d3      	b.n	800cb88 <__hexnan+0xd4>
 800cbe0:	3f04      	subs	r7, #4
 800cbe2:	e7d1      	b.n	800cb88 <__hexnan+0xd4>
 800cbe4:	2004      	movs	r0, #4
 800cbe6:	b007      	add	sp, #28
 800cbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cbec <_localeconv_r>:
 800cbec:	4800      	ldr	r0, [pc, #0]	; (800cbf0 <_localeconv_r+0x4>)
 800cbee:	4770      	bx	lr
 800cbf0:	200001b0 	.word	0x200001b0

0800cbf4 <_lseek_r>:
 800cbf4:	b538      	push	{r3, r4, r5, lr}
 800cbf6:	4d07      	ldr	r5, [pc, #28]	; (800cc14 <_lseek_r+0x20>)
 800cbf8:	4604      	mov	r4, r0
 800cbfa:	4608      	mov	r0, r1
 800cbfc:	4611      	mov	r1, r2
 800cbfe:	2200      	movs	r2, #0
 800cc00:	602a      	str	r2, [r5, #0]
 800cc02:	461a      	mov	r2, r3
 800cc04:	f7f5 fd4e 	bl	80026a4 <_lseek>
 800cc08:	1c43      	adds	r3, r0, #1
 800cc0a:	d102      	bne.n	800cc12 <_lseek_r+0x1e>
 800cc0c:	682b      	ldr	r3, [r5, #0]
 800cc0e:	b103      	cbz	r3, 800cc12 <_lseek_r+0x1e>
 800cc10:	6023      	str	r3, [r4, #0]
 800cc12:	bd38      	pop	{r3, r4, r5, pc}
 800cc14:	20000b64 	.word	0x20000b64

0800cc18 <malloc>:
 800cc18:	4b02      	ldr	r3, [pc, #8]	; (800cc24 <malloc+0xc>)
 800cc1a:	4601      	mov	r1, r0
 800cc1c:	6818      	ldr	r0, [r3, #0]
 800cc1e:	f000 bd3f 	b.w	800d6a0 <_malloc_r>
 800cc22:	bf00      	nop
 800cc24:	20000058 	.word	0x20000058

0800cc28 <__ascii_mbtowc>:
 800cc28:	b082      	sub	sp, #8
 800cc2a:	b901      	cbnz	r1, 800cc2e <__ascii_mbtowc+0x6>
 800cc2c:	a901      	add	r1, sp, #4
 800cc2e:	b142      	cbz	r2, 800cc42 <__ascii_mbtowc+0x1a>
 800cc30:	b14b      	cbz	r3, 800cc46 <__ascii_mbtowc+0x1e>
 800cc32:	7813      	ldrb	r3, [r2, #0]
 800cc34:	600b      	str	r3, [r1, #0]
 800cc36:	7812      	ldrb	r2, [r2, #0]
 800cc38:	1e10      	subs	r0, r2, #0
 800cc3a:	bf18      	it	ne
 800cc3c:	2001      	movne	r0, #1
 800cc3e:	b002      	add	sp, #8
 800cc40:	4770      	bx	lr
 800cc42:	4610      	mov	r0, r2
 800cc44:	e7fb      	b.n	800cc3e <__ascii_mbtowc+0x16>
 800cc46:	f06f 0001 	mvn.w	r0, #1
 800cc4a:	e7f8      	b.n	800cc3e <__ascii_mbtowc+0x16>

0800cc4c <memcpy>:
 800cc4c:	440a      	add	r2, r1
 800cc4e:	4291      	cmp	r1, r2
 800cc50:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc54:	d100      	bne.n	800cc58 <memcpy+0xc>
 800cc56:	4770      	bx	lr
 800cc58:	b510      	push	{r4, lr}
 800cc5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc62:	4291      	cmp	r1, r2
 800cc64:	d1f9      	bne.n	800cc5a <memcpy+0xe>
 800cc66:	bd10      	pop	{r4, pc}

0800cc68 <_Balloc>:
 800cc68:	b570      	push	{r4, r5, r6, lr}
 800cc6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc6c:	4604      	mov	r4, r0
 800cc6e:	460d      	mov	r5, r1
 800cc70:	b976      	cbnz	r6, 800cc90 <_Balloc+0x28>
 800cc72:	2010      	movs	r0, #16
 800cc74:	f7ff ffd0 	bl	800cc18 <malloc>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	6260      	str	r0, [r4, #36]	; 0x24
 800cc7c:	b920      	cbnz	r0, 800cc88 <_Balloc+0x20>
 800cc7e:	4b18      	ldr	r3, [pc, #96]	; (800cce0 <_Balloc+0x78>)
 800cc80:	4818      	ldr	r0, [pc, #96]	; (800cce4 <_Balloc+0x7c>)
 800cc82:	2166      	movs	r1, #102	; 0x66
 800cc84:	f001 fb0c 	bl	800e2a0 <__assert_func>
 800cc88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc8c:	6006      	str	r6, [r0, #0]
 800cc8e:	60c6      	str	r6, [r0, #12]
 800cc90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cc92:	68f3      	ldr	r3, [r6, #12]
 800cc94:	b183      	cbz	r3, 800ccb8 <_Balloc+0x50>
 800cc96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc9e:	b9b8      	cbnz	r0, 800ccd0 <_Balloc+0x68>
 800cca0:	2101      	movs	r1, #1
 800cca2:	fa01 f605 	lsl.w	r6, r1, r5
 800cca6:	1d72      	adds	r2, r6, #5
 800cca8:	0092      	lsls	r2, r2, #2
 800ccaa:	4620      	mov	r0, r4
 800ccac:	f000 fc98 	bl	800d5e0 <_calloc_r>
 800ccb0:	b160      	cbz	r0, 800cccc <_Balloc+0x64>
 800ccb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ccb6:	e00e      	b.n	800ccd6 <_Balloc+0x6e>
 800ccb8:	2221      	movs	r2, #33	; 0x21
 800ccba:	2104      	movs	r1, #4
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	f000 fc8f 	bl	800d5e0 <_calloc_r>
 800ccc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccc4:	60f0      	str	r0, [r6, #12]
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d1e4      	bne.n	800cc96 <_Balloc+0x2e>
 800cccc:	2000      	movs	r0, #0
 800ccce:	bd70      	pop	{r4, r5, r6, pc}
 800ccd0:	6802      	ldr	r2, [r0, #0]
 800ccd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ccdc:	e7f7      	b.n	800ccce <_Balloc+0x66>
 800ccde:	bf00      	nop
 800cce0:	0800f086 	.word	0x0800f086
 800cce4:	0800f18c 	.word	0x0800f18c

0800cce8 <_Bfree>:
 800cce8:	b570      	push	{r4, r5, r6, lr}
 800ccea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ccec:	4605      	mov	r5, r0
 800ccee:	460c      	mov	r4, r1
 800ccf0:	b976      	cbnz	r6, 800cd10 <_Bfree+0x28>
 800ccf2:	2010      	movs	r0, #16
 800ccf4:	f7ff ff90 	bl	800cc18 <malloc>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	6268      	str	r0, [r5, #36]	; 0x24
 800ccfc:	b920      	cbnz	r0, 800cd08 <_Bfree+0x20>
 800ccfe:	4b09      	ldr	r3, [pc, #36]	; (800cd24 <_Bfree+0x3c>)
 800cd00:	4809      	ldr	r0, [pc, #36]	; (800cd28 <_Bfree+0x40>)
 800cd02:	218a      	movs	r1, #138	; 0x8a
 800cd04:	f001 facc 	bl	800e2a0 <__assert_func>
 800cd08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd0c:	6006      	str	r6, [r0, #0]
 800cd0e:	60c6      	str	r6, [r0, #12]
 800cd10:	b13c      	cbz	r4, 800cd22 <_Bfree+0x3a>
 800cd12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cd14:	6862      	ldr	r2, [r4, #4]
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd1c:	6021      	str	r1, [r4, #0]
 800cd1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd22:	bd70      	pop	{r4, r5, r6, pc}
 800cd24:	0800f086 	.word	0x0800f086
 800cd28:	0800f18c 	.word	0x0800f18c

0800cd2c <__multadd>:
 800cd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd30:	690e      	ldr	r6, [r1, #16]
 800cd32:	4607      	mov	r7, r0
 800cd34:	4698      	mov	r8, r3
 800cd36:	460c      	mov	r4, r1
 800cd38:	f101 0014 	add.w	r0, r1, #20
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	6805      	ldr	r5, [r0, #0]
 800cd40:	b2a9      	uxth	r1, r5
 800cd42:	fb02 8101 	mla	r1, r2, r1, r8
 800cd46:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800cd4a:	0c2d      	lsrs	r5, r5, #16
 800cd4c:	fb02 c505 	mla	r5, r2, r5, ip
 800cd50:	b289      	uxth	r1, r1
 800cd52:	3301      	adds	r3, #1
 800cd54:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800cd58:	429e      	cmp	r6, r3
 800cd5a:	f840 1b04 	str.w	r1, [r0], #4
 800cd5e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800cd62:	dcec      	bgt.n	800cd3e <__multadd+0x12>
 800cd64:	f1b8 0f00 	cmp.w	r8, #0
 800cd68:	d022      	beq.n	800cdb0 <__multadd+0x84>
 800cd6a:	68a3      	ldr	r3, [r4, #8]
 800cd6c:	42b3      	cmp	r3, r6
 800cd6e:	dc19      	bgt.n	800cda4 <__multadd+0x78>
 800cd70:	6861      	ldr	r1, [r4, #4]
 800cd72:	4638      	mov	r0, r7
 800cd74:	3101      	adds	r1, #1
 800cd76:	f7ff ff77 	bl	800cc68 <_Balloc>
 800cd7a:	4605      	mov	r5, r0
 800cd7c:	b928      	cbnz	r0, 800cd8a <__multadd+0x5e>
 800cd7e:	4602      	mov	r2, r0
 800cd80:	4b0d      	ldr	r3, [pc, #52]	; (800cdb8 <__multadd+0x8c>)
 800cd82:	480e      	ldr	r0, [pc, #56]	; (800cdbc <__multadd+0x90>)
 800cd84:	21b5      	movs	r1, #181	; 0xb5
 800cd86:	f001 fa8b 	bl	800e2a0 <__assert_func>
 800cd8a:	6922      	ldr	r2, [r4, #16]
 800cd8c:	3202      	adds	r2, #2
 800cd8e:	f104 010c 	add.w	r1, r4, #12
 800cd92:	0092      	lsls	r2, r2, #2
 800cd94:	300c      	adds	r0, #12
 800cd96:	f7ff ff59 	bl	800cc4c <memcpy>
 800cd9a:	4621      	mov	r1, r4
 800cd9c:	4638      	mov	r0, r7
 800cd9e:	f7ff ffa3 	bl	800cce8 <_Bfree>
 800cda2:	462c      	mov	r4, r5
 800cda4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cda8:	3601      	adds	r6, #1
 800cdaa:	f8c3 8014 	str.w	r8, [r3, #20]
 800cdae:	6126      	str	r6, [r4, #16]
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdb6:	bf00      	nop
 800cdb8:	0800f0fc 	.word	0x0800f0fc
 800cdbc:	0800f18c 	.word	0x0800f18c

0800cdc0 <__s2b>:
 800cdc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdc4:	460c      	mov	r4, r1
 800cdc6:	4615      	mov	r5, r2
 800cdc8:	461f      	mov	r7, r3
 800cdca:	2209      	movs	r2, #9
 800cdcc:	3308      	adds	r3, #8
 800cdce:	4606      	mov	r6, r0
 800cdd0:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	db09      	blt.n	800cdf0 <__s2b+0x30>
 800cddc:	4630      	mov	r0, r6
 800cdde:	f7ff ff43 	bl	800cc68 <_Balloc>
 800cde2:	b940      	cbnz	r0, 800cdf6 <__s2b+0x36>
 800cde4:	4602      	mov	r2, r0
 800cde6:	4b19      	ldr	r3, [pc, #100]	; (800ce4c <__s2b+0x8c>)
 800cde8:	4819      	ldr	r0, [pc, #100]	; (800ce50 <__s2b+0x90>)
 800cdea:	21ce      	movs	r1, #206	; 0xce
 800cdec:	f001 fa58 	bl	800e2a0 <__assert_func>
 800cdf0:	0052      	lsls	r2, r2, #1
 800cdf2:	3101      	adds	r1, #1
 800cdf4:	e7f0      	b.n	800cdd8 <__s2b+0x18>
 800cdf6:	9b08      	ldr	r3, [sp, #32]
 800cdf8:	6143      	str	r3, [r0, #20]
 800cdfa:	2d09      	cmp	r5, #9
 800cdfc:	f04f 0301 	mov.w	r3, #1
 800ce00:	6103      	str	r3, [r0, #16]
 800ce02:	dd16      	ble.n	800ce32 <__s2b+0x72>
 800ce04:	f104 0909 	add.w	r9, r4, #9
 800ce08:	46c8      	mov	r8, r9
 800ce0a:	442c      	add	r4, r5
 800ce0c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ce10:	4601      	mov	r1, r0
 800ce12:	3b30      	subs	r3, #48	; 0x30
 800ce14:	220a      	movs	r2, #10
 800ce16:	4630      	mov	r0, r6
 800ce18:	f7ff ff88 	bl	800cd2c <__multadd>
 800ce1c:	45a0      	cmp	r8, r4
 800ce1e:	d1f5      	bne.n	800ce0c <__s2b+0x4c>
 800ce20:	f1a5 0408 	sub.w	r4, r5, #8
 800ce24:	444c      	add	r4, r9
 800ce26:	1b2d      	subs	r5, r5, r4
 800ce28:	1963      	adds	r3, r4, r5
 800ce2a:	42bb      	cmp	r3, r7
 800ce2c:	db04      	blt.n	800ce38 <__s2b+0x78>
 800ce2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce32:	340a      	adds	r4, #10
 800ce34:	2509      	movs	r5, #9
 800ce36:	e7f6      	b.n	800ce26 <__s2b+0x66>
 800ce38:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce3c:	4601      	mov	r1, r0
 800ce3e:	3b30      	subs	r3, #48	; 0x30
 800ce40:	220a      	movs	r2, #10
 800ce42:	4630      	mov	r0, r6
 800ce44:	f7ff ff72 	bl	800cd2c <__multadd>
 800ce48:	e7ee      	b.n	800ce28 <__s2b+0x68>
 800ce4a:	bf00      	nop
 800ce4c:	0800f0fc 	.word	0x0800f0fc
 800ce50:	0800f18c 	.word	0x0800f18c

0800ce54 <__hi0bits>:
 800ce54:	0c03      	lsrs	r3, r0, #16
 800ce56:	041b      	lsls	r3, r3, #16
 800ce58:	b9d3      	cbnz	r3, 800ce90 <__hi0bits+0x3c>
 800ce5a:	0400      	lsls	r0, r0, #16
 800ce5c:	2310      	movs	r3, #16
 800ce5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ce62:	bf04      	itt	eq
 800ce64:	0200      	lsleq	r0, r0, #8
 800ce66:	3308      	addeq	r3, #8
 800ce68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ce6c:	bf04      	itt	eq
 800ce6e:	0100      	lsleq	r0, r0, #4
 800ce70:	3304      	addeq	r3, #4
 800ce72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ce76:	bf04      	itt	eq
 800ce78:	0080      	lsleq	r0, r0, #2
 800ce7a:	3302      	addeq	r3, #2
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	db05      	blt.n	800ce8c <__hi0bits+0x38>
 800ce80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ce84:	f103 0301 	add.w	r3, r3, #1
 800ce88:	bf08      	it	eq
 800ce8a:	2320      	moveq	r3, #32
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	4770      	bx	lr
 800ce90:	2300      	movs	r3, #0
 800ce92:	e7e4      	b.n	800ce5e <__hi0bits+0xa>

0800ce94 <__lo0bits>:
 800ce94:	6803      	ldr	r3, [r0, #0]
 800ce96:	f013 0207 	ands.w	r2, r3, #7
 800ce9a:	4601      	mov	r1, r0
 800ce9c:	d00b      	beq.n	800ceb6 <__lo0bits+0x22>
 800ce9e:	07da      	lsls	r2, r3, #31
 800cea0:	d424      	bmi.n	800ceec <__lo0bits+0x58>
 800cea2:	0798      	lsls	r0, r3, #30
 800cea4:	bf49      	itett	mi
 800cea6:	085b      	lsrmi	r3, r3, #1
 800cea8:	089b      	lsrpl	r3, r3, #2
 800ceaa:	2001      	movmi	r0, #1
 800ceac:	600b      	strmi	r3, [r1, #0]
 800ceae:	bf5c      	itt	pl
 800ceb0:	600b      	strpl	r3, [r1, #0]
 800ceb2:	2002      	movpl	r0, #2
 800ceb4:	4770      	bx	lr
 800ceb6:	b298      	uxth	r0, r3
 800ceb8:	b9b0      	cbnz	r0, 800cee8 <__lo0bits+0x54>
 800ceba:	0c1b      	lsrs	r3, r3, #16
 800cebc:	2010      	movs	r0, #16
 800cebe:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cec2:	bf04      	itt	eq
 800cec4:	0a1b      	lsreq	r3, r3, #8
 800cec6:	3008      	addeq	r0, #8
 800cec8:	071a      	lsls	r2, r3, #28
 800ceca:	bf04      	itt	eq
 800cecc:	091b      	lsreq	r3, r3, #4
 800cece:	3004      	addeq	r0, #4
 800ced0:	079a      	lsls	r2, r3, #30
 800ced2:	bf04      	itt	eq
 800ced4:	089b      	lsreq	r3, r3, #2
 800ced6:	3002      	addeq	r0, #2
 800ced8:	07da      	lsls	r2, r3, #31
 800ceda:	d403      	bmi.n	800cee4 <__lo0bits+0x50>
 800cedc:	085b      	lsrs	r3, r3, #1
 800cede:	f100 0001 	add.w	r0, r0, #1
 800cee2:	d005      	beq.n	800cef0 <__lo0bits+0x5c>
 800cee4:	600b      	str	r3, [r1, #0]
 800cee6:	4770      	bx	lr
 800cee8:	4610      	mov	r0, r2
 800ceea:	e7e8      	b.n	800cebe <__lo0bits+0x2a>
 800ceec:	2000      	movs	r0, #0
 800ceee:	4770      	bx	lr
 800cef0:	2020      	movs	r0, #32
 800cef2:	4770      	bx	lr

0800cef4 <__i2b>:
 800cef4:	b510      	push	{r4, lr}
 800cef6:	460c      	mov	r4, r1
 800cef8:	2101      	movs	r1, #1
 800cefa:	f7ff feb5 	bl	800cc68 <_Balloc>
 800cefe:	4602      	mov	r2, r0
 800cf00:	b928      	cbnz	r0, 800cf0e <__i2b+0x1a>
 800cf02:	4b05      	ldr	r3, [pc, #20]	; (800cf18 <__i2b+0x24>)
 800cf04:	4805      	ldr	r0, [pc, #20]	; (800cf1c <__i2b+0x28>)
 800cf06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cf0a:	f001 f9c9 	bl	800e2a0 <__assert_func>
 800cf0e:	2301      	movs	r3, #1
 800cf10:	6144      	str	r4, [r0, #20]
 800cf12:	6103      	str	r3, [r0, #16]
 800cf14:	bd10      	pop	{r4, pc}
 800cf16:	bf00      	nop
 800cf18:	0800f0fc 	.word	0x0800f0fc
 800cf1c:	0800f18c 	.word	0x0800f18c

0800cf20 <__multiply>:
 800cf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf24:	4614      	mov	r4, r2
 800cf26:	690a      	ldr	r2, [r1, #16]
 800cf28:	6923      	ldr	r3, [r4, #16]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	bfb8      	it	lt
 800cf2e:	460b      	movlt	r3, r1
 800cf30:	460d      	mov	r5, r1
 800cf32:	bfbc      	itt	lt
 800cf34:	4625      	movlt	r5, r4
 800cf36:	461c      	movlt	r4, r3
 800cf38:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cf3c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cf40:	68ab      	ldr	r3, [r5, #8]
 800cf42:	6869      	ldr	r1, [r5, #4]
 800cf44:	eb0a 0709 	add.w	r7, sl, r9
 800cf48:	42bb      	cmp	r3, r7
 800cf4a:	b085      	sub	sp, #20
 800cf4c:	bfb8      	it	lt
 800cf4e:	3101      	addlt	r1, #1
 800cf50:	f7ff fe8a 	bl	800cc68 <_Balloc>
 800cf54:	b930      	cbnz	r0, 800cf64 <__multiply+0x44>
 800cf56:	4602      	mov	r2, r0
 800cf58:	4b42      	ldr	r3, [pc, #264]	; (800d064 <__multiply+0x144>)
 800cf5a:	4843      	ldr	r0, [pc, #268]	; (800d068 <__multiply+0x148>)
 800cf5c:	f240 115d 	movw	r1, #349	; 0x15d
 800cf60:	f001 f99e 	bl	800e2a0 <__assert_func>
 800cf64:	f100 0614 	add.w	r6, r0, #20
 800cf68:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800cf6c:	4633      	mov	r3, r6
 800cf6e:	2200      	movs	r2, #0
 800cf70:	4543      	cmp	r3, r8
 800cf72:	d31e      	bcc.n	800cfb2 <__multiply+0x92>
 800cf74:	f105 0c14 	add.w	ip, r5, #20
 800cf78:	f104 0314 	add.w	r3, r4, #20
 800cf7c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cf80:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cf84:	9202      	str	r2, [sp, #8]
 800cf86:	ebac 0205 	sub.w	r2, ip, r5
 800cf8a:	3a15      	subs	r2, #21
 800cf8c:	f022 0203 	bic.w	r2, r2, #3
 800cf90:	3204      	adds	r2, #4
 800cf92:	f105 0115 	add.w	r1, r5, #21
 800cf96:	458c      	cmp	ip, r1
 800cf98:	bf38      	it	cc
 800cf9a:	2204      	movcc	r2, #4
 800cf9c:	9201      	str	r2, [sp, #4]
 800cf9e:	9a02      	ldr	r2, [sp, #8]
 800cfa0:	9303      	str	r3, [sp, #12]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d808      	bhi.n	800cfb8 <__multiply+0x98>
 800cfa6:	2f00      	cmp	r7, #0
 800cfa8:	dc55      	bgt.n	800d056 <__multiply+0x136>
 800cfaa:	6107      	str	r7, [r0, #16]
 800cfac:	b005      	add	sp, #20
 800cfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb2:	f843 2b04 	str.w	r2, [r3], #4
 800cfb6:	e7db      	b.n	800cf70 <__multiply+0x50>
 800cfb8:	f8b3 a000 	ldrh.w	sl, [r3]
 800cfbc:	f1ba 0f00 	cmp.w	sl, #0
 800cfc0:	d020      	beq.n	800d004 <__multiply+0xe4>
 800cfc2:	f105 0e14 	add.w	lr, r5, #20
 800cfc6:	46b1      	mov	r9, r6
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f85e 4b04 	ldr.w	r4, [lr], #4
 800cfce:	f8d9 b000 	ldr.w	fp, [r9]
 800cfd2:	b2a1      	uxth	r1, r4
 800cfd4:	fa1f fb8b 	uxth.w	fp, fp
 800cfd8:	fb0a b101 	mla	r1, sl, r1, fp
 800cfdc:	4411      	add	r1, r2
 800cfde:	f8d9 2000 	ldr.w	r2, [r9]
 800cfe2:	0c24      	lsrs	r4, r4, #16
 800cfe4:	0c12      	lsrs	r2, r2, #16
 800cfe6:	fb0a 2404 	mla	r4, sl, r4, r2
 800cfea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800cfee:	b289      	uxth	r1, r1
 800cff0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cff4:	45f4      	cmp	ip, lr
 800cff6:	f849 1b04 	str.w	r1, [r9], #4
 800cffa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800cffe:	d8e4      	bhi.n	800cfca <__multiply+0xaa>
 800d000:	9901      	ldr	r1, [sp, #4]
 800d002:	5072      	str	r2, [r6, r1]
 800d004:	9a03      	ldr	r2, [sp, #12]
 800d006:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d00a:	3304      	adds	r3, #4
 800d00c:	f1b9 0f00 	cmp.w	r9, #0
 800d010:	d01f      	beq.n	800d052 <__multiply+0x132>
 800d012:	6834      	ldr	r4, [r6, #0]
 800d014:	f105 0114 	add.w	r1, r5, #20
 800d018:	46b6      	mov	lr, r6
 800d01a:	f04f 0a00 	mov.w	sl, #0
 800d01e:	880a      	ldrh	r2, [r1, #0]
 800d020:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d024:	fb09 b202 	mla	r2, r9, r2, fp
 800d028:	4492      	add	sl, r2
 800d02a:	b2a4      	uxth	r4, r4
 800d02c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d030:	f84e 4b04 	str.w	r4, [lr], #4
 800d034:	f851 4b04 	ldr.w	r4, [r1], #4
 800d038:	f8be 2000 	ldrh.w	r2, [lr]
 800d03c:	0c24      	lsrs	r4, r4, #16
 800d03e:	fb09 2404 	mla	r4, r9, r4, r2
 800d042:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d046:	458c      	cmp	ip, r1
 800d048:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d04c:	d8e7      	bhi.n	800d01e <__multiply+0xfe>
 800d04e:	9a01      	ldr	r2, [sp, #4]
 800d050:	50b4      	str	r4, [r6, r2]
 800d052:	3604      	adds	r6, #4
 800d054:	e7a3      	b.n	800cf9e <__multiply+0x7e>
 800d056:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d1a5      	bne.n	800cfaa <__multiply+0x8a>
 800d05e:	3f01      	subs	r7, #1
 800d060:	e7a1      	b.n	800cfa6 <__multiply+0x86>
 800d062:	bf00      	nop
 800d064:	0800f0fc 	.word	0x0800f0fc
 800d068:	0800f18c 	.word	0x0800f18c

0800d06c <__pow5mult>:
 800d06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d070:	4615      	mov	r5, r2
 800d072:	f012 0203 	ands.w	r2, r2, #3
 800d076:	4606      	mov	r6, r0
 800d078:	460f      	mov	r7, r1
 800d07a:	d007      	beq.n	800d08c <__pow5mult+0x20>
 800d07c:	4c25      	ldr	r4, [pc, #148]	; (800d114 <__pow5mult+0xa8>)
 800d07e:	3a01      	subs	r2, #1
 800d080:	2300      	movs	r3, #0
 800d082:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d086:	f7ff fe51 	bl	800cd2c <__multadd>
 800d08a:	4607      	mov	r7, r0
 800d08c:	10ad      	asrs	r5, r5, #2
 800d08e:	d03d      	beq.n	800d10c <__pow5mult+0xa0>
 800d090:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d092:	b97c      	cbnz	r4, 800d0b4 <__pow5mult+0x48>
 800d094:	2010      	movs	r0, #16
 800d096:	f7ff fdbf 	bl	800cc18 <malloc>
 800d09a:	4602      	mov	r2, r0
 800d09c:	6270      	str	r0, [r6, #36]	; 0x24
 800d09e:	b928      	cbnz	r0, 800d0ac <__pow5mult+0x40>
 800d0a0:	4b1d      	ldr	r3, [pc, #116]	; (800d118 <__pow5mult+0xac>)
 800d0a2:	481e      	ldr	r0, [pc, #120]	; (800d11c <__pow5mult+0xb0>)
 800d0a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d0a8:	f001 f8fa 	bl	800e2a0 <__assert_func>
 800d0ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0b0:	6004      	str	r4, [r0, #0]
 800d0b2:	60c4      	str	r4, [r0, #12]
 800d0b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d0b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0bc:	b94c      	cbnz	r4, 800d0d2 <__pow5mult+0x66>
 800d0be:	f240 2171 	movw	r1, #625	; 0x271
 800d0c2:	4630      	mov	r0, r6
 800d0c4:	f7ff ff16 	bl	800cef4 <__i2b>
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800d0ce:	4604      	mov	r4, r0
 800d0d0:	6003      	str	r3, [r0, #0]
 800d0d2:	f04f 0900 	mov.w	r9, #0
 800d0d6:	07eb      	lsls	r3, r5, #31
 800d0d8:	d50a      	bpl.n	800d0f0 <__pow5mult+0x84>
 800d0da:	4639      	mov	r1, r7
 800d0dc:	4622      	mov	r2, r4
 800d0de:	4630      	mov	r0, r6
 800d0e0:	f7ff ff1e 	bl	800cf20 <__multiply>
 800d0e4:	4639      	mov	r1, r7
 800d0e6:	4680      	mov	r8, r0
 800d0e8:	4630      	mov	r0, r6
 800d0ea:	f7ff fdfd 	bl	800cce8 <_Bfree>
 800d0ee:	4647      	mov	r7, r8
 800d0f0:	106d      	asrs	r5, r5, #1
 800d0f2:	d00b      	beq.n	800d10c <__pow5mult+0xa0>
 800d0f4:	6820      	ldr	r0, [r4, #0]
 800d0f6:	b938      	cbnz	r0, 800d108 <__pow5mult+0x9c>
 800d0f8:	4622      	mov	r2, r4
 800d0fa:	4621      	mov	r1, r4
 800d0fc:	4630      	mov	r0, r6
 800d0fe:	f7ff ff0f 	bl	800cf20 <__multiply>
 800d102:	6020      	str	r0, [r4, #0]
 800d104:	f8c0 9000 	str.w	r9, [r0]
 800d108:	4604      	mov	r4, r0
 800d10a:	e7e4      	b.n	800d0d6 <__pow5mult+0x6a>
 800d10c:	4638      	mov	r0, r7
 800d10e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d112:	bf00      	nop
 800d114:	0800f2e0 	.word	0x0800f2e0
 800d118:	0800f086 	.word	0x0800f086
 800d11c:	0800f18c 	.word	0x0800f18c

0800d120 <__lshift>:
 800d120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d124:	460c      	mov	r4, r1
 800d126:	6849      	ldr	r1, [r1, #4]
 800d128:	6923      	ldr	r3, [r4, #16]
 800d12a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d12e:	68a3      	ldr	r3, [r4, #8]
 800d130:	4607      	mov	r7, r0
 800d132:	4691      	mov	r9, r2
 800d134:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d138:	f108 0601 	add.w	r6, r8, #1
 800d13c:	42b3      	cmp	r3, r6
 800d13e:	db0b      	blt.n	800d158 <__lshift+0x38>
 800d140:	4638      	mov	r0, r7
 800d142:	f7ff fd91 	bl	800cc68 <_Balloc>
 800d146:	4605      	mov	r5, r0
 800d148:	b948      	cbnz	r0, 800d15e <__lshift+0x3e>
 800d14a:	4602      	mov	r2, r0
 800d14c:	4b28      	ldr	r3, [pc, #160]	; (800d1f0 <__lshift+0xd0>)
 800d14e:	4829      	ldr	r0, [pc, #164]	; (800d1f4 <__lshift+0xd4>)
 800d150:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d154:	f001 f8a4 	bl	800e2a0 <__assert_func>
 800d158:	3101      	adds	r1, #1
 800d15a:	005b      	lsls	r3, r3, #1
 800d15c:	e7ee      	b.n	800d13c <__lshift+0x1c>
 800d15e:	2300      	movs	r3, #0
 800d160:	f100 0114 	add.w	r1, r0, #20
 800d164:	f100 0210 	add.w	r2, r0, #16
 800d168:	4618      	mov	r0, r3
 800d16a:	4553      	cmp	r3, sl
 800d16c:	db33      	blt.n	800d1d6 <__lshift+0xb6>
 800d16e:	6920      	ldr	r0, [r4, #16]
 800d170:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d174:	f104 0314 	add.w	r3, r4, #20
 800d178:	f019 091f 	ands.w	r9, r9, #31
 800d17c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d180:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d184:	d02b      	beq.n	800d1de <__lshift+0xbe>
 800d186:	f1c9 0e20 	rsb	lr, r9, #32
 800d18a:	468a      	mov	sl, r1
 800d18c:	2200      	movs	r2, #0
 800d18e:	6818      	ldr	r0, [r3, #0]
 800d190:	fa00 f009 	lsl.w	r0, r0, r9
 800d194:	4302      	orrs	r2, r0
 800d196:	f84a 2b04 	str.w	r2, [sl], #4
 800d19a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d19e:	459c      	cmp	ip, r3
 800d1a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d1a4:	d8f3      	bhi.n	800d18e <__lshift+0x6e>
 800d1a6:	ebac 0304 	sub.w	r3, ip, r4
 800d1aa:	3b15      	subs	r3, #21
 800d1ac:	f023 0303 	bic.w	r3, r3, #3
 800d1b0:	3304      	adds	r3, #4
 800d1b2:	f104 0015 	add.w	r0, r4, #21
 800d1b6:	4584      	cmp	ip, r0
 800d1b8:	bf38      	it	cc
 800d1ba:	2304      	movcc	r3, #4
 800d1bc:	50ca      	str	r2, [r1, r3]
 800d1be:	b10a      	cbz	r2, 800d1c4 <__lshift+0xa4>
 800d1c0:	f108 0602 	add.w	r6, r8, #2
 800d1c4:	3e01      	subs	r6, #1
 800d1c6:	4638      	mov	r0, r7
 800d1c8:	612e      	str	r6, [r5, #16]
 800d1ca:	4621      	mov	r1, r4
 800d1cc:	f7ff fd8c 	bl	800cce8 <_Bfree>
 800d1d0:	4628      	mov	r0, r5
 800d1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d1da:	3301      	adds	r3, #1
 800d1dc:	e7c5      	b.n	800d16a <__lshift+0x4a>
 800d1de:	3904      	subs	r1, #4
 800d1e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d1e8:	459c      	cmp	ip, r3
 800d1ea:	d8f9      	bhi.n	800d1e0 <__lshift+0xc0>
 800d1ec:	e7ea      	b.n	800d1c4 <__lshift+0xa4>
 800d1ee:	bf00      	nop
 800d1f0:	0800f0fc 	.word	0x0800f0fc
 800d1f4:	0800f18c 	.word	0x0800f18c

0800d1f8 <__mcmp>:
 800d1f8:	b530      	push	{r4, r5, lr}
 800d1fa:	6902      	ldr	r2, [r0, #16]
 800d1fc:	690c      	ldr	r4, [r1, #16]
 800d1fe:	1b12      	subs	r2, r2, r4
 800d200:	d10e      	bne.n	800d220 <__mcmp+0x28>
 800d202:	f100 0314 	add.w	r3, r0, #20
 800d206:	3114      	adds	r1, #20
 800d208:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d20c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d210:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d214:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d218:	42a5      	cmp	r5, r4
 800d21a:	d003      	beq.n	800d224 <__mcmp+0x2c>
 800d21c:	d305      	bcc.n	800d22a <__mcmp+0x32>
 800d21e:	2201      	movs	r2, #1
 800d220:	4610      	mov	r0, r2
 800d222:	bd30      	pop	{r4, r5, pc}
 800d224:	4283      	cmp	r3, r0
 800d226:	d3f3      	bcc.n	800d210 <__mcmp+0x18>
 800d228:	e7fa      	b.n	800d220 <__mcmp+0x28>
 800d22a:	f04f 32ff 	mov.w	r2, #4294967295
 800d22e:	e7f7      	b.n	800d220 <__mcmp+0x28>

0800d230 <__mdiff>:
 800d230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d234:	460c      	mov	r4, r1
 800d236:	4606      	mov	r6, r0
 800d238:	4611      	mov	r1, r2
 800d23a:	4620      	mov	r0, r4
 800d23c:	4617      	mov	r7, r2
 800d23e:	f7ff ffdb 	bl	800d1f8 <__mcmp>
 800d242:	1e05      	subs	r5, r0, #0
 800d244:	d110      	bne.n	800d268 <__mdiff+0x38>
 800d246:	4629      	mov	r1, r5
 800d248:	4630      	mov	r0, r6
 800d24a:	f7ff fd0d 	bl	800cc68 <_Balloc>
 800d24e:	b930      	cbnz	r0, 800d25e <__mdiff+0x2e>
 800d250:	4b39      	ldr	r3, [pc, #228]	; (800d338 <__mdiff+0x108>)
 800d252:	4602      	mov	r2, r0
 800d254:	f240 2132 	movw	r1, #562	; 0x232
 800d258:	4838      	ldr	r0, [pc, #224]	; (800d33c <__mdiff+0x10c>)
 800d25a:	f001 f821 	bl	800e2a0 <__assert_func>
 800d25e:	2301      	movs	r3, #1
 800d260:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d264:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d268:	bfa4      	itt	ge
 800d26a:	463b      	movge	r3, r7
 800d26c:	4627      	movge	r7, r4
 800d26e:	4630      	mov	r0, r6
 800d270:	6879      	ldr	r1, [r7, #4]
 800d272:	bfa6      	itte	ge
 800d274:	461c      	movge	r4, r3
 800d276:	2500      	movge	r5, #0
 800d278:	2501      	movlt	r5, #1
 800d27a:	f7ff fcf5 	bl	800cc68 <_Balloc>
 800d27e:	b920      	cbnz	r0, 800d28a <__mdiff+0x5a>
 800d280:	4b2d      	ldr	r3, [pc, #180]	; (800d338 <__mdiff+0x108>)
 800d282:	4602      	mov	r2, r0
 800d284:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d288:	e7e6      	b.n	800d258 <__mdiff+0x28>
 800d28a:	693e      	ldr	r6, [r7, #16]
 800d28c:	60c5      	str	r5, [r0, #12]
 800d28e:	6925      	ldr	r5, [r4, #16]
 800d290:	f107 0114 	add.w	r1, r7, #20
 800d294:	f104 0914 	add.w	r9, r4, #20
 800d298:	f100 0e14 	add.w	lr, r0, #20
 800d29c:	f107 0210 	add.w	r2, r7, #16
 800d2a0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d2a4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d2a8:	46f2      	mov	sl, lr
 800d2aa:	2700      	movs	r7, #0
 800d2ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800d2b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d2b4:	fa1f f883 	uxth.w	r8, r3
 800d2b8:	fa17 f78b 	uxtah	r7, r7, fp
 800d2bc:	0c1b      	lsrs	r3, r3, #16
 800d2be:	eba7 0808 	sub.w	r8, r7, r8
 800d2c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d2c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d2ca:	fa1f f888 	uxth.w	r8, r8
 800d2ce:	141f      	asrs	r7, r3, #16
 800d2d0:	454d      	cmp	r5, r9
 800d2d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d2d6:	f84a 3b04 	str.w	r3, [sl], #4
 800d2da:	d8e7      	bhi.n	800d2ac <__mdiff+0x7c>
 800d2dc:	1b2b      	subs	r3, r5, r4
 800d2de:	3b15      	subs	r3, #21
 800d2e0:	f023 0303 	bic.w	r3, r3, #3
 800d2e4:	3304      	adds	r3, #4
 800d2e6:	3415      	adds	r4, #21
 800d2e8:	42a5      	cmp	r5, r4
 800d2ea:	bf38      	it	cc
 800d2ec:	2304      	movcc	r3, #4
 800d2ee:	4419      	add	r1, r3
 800d2f0:	4473      	add	r3, lr
 800d2f2:	469e      	mov	lr, r3
 800d2f4:	460d      	mov	r5, r1
 800d2f6:	4565      	cmp	r5, ip
 800d2f8:	d30e      	bcc.n	800d318 <__mdiff+0xe8>
 800d2fa:	f10c 0203 	add.w	r2, ip, #3
 800d2fe:	1a52      	subs	r2, r2, r1
 800d300:	f022 0203 	bic.w	r2, r2, #3
 800d304:	3903      	subs	r1, #3
 800d306:	458c      	cmp	ip, r1
 800d308:	bf38      	it	cc
 800d30a:	2200      	movcc	r2, #0
 800d30c:	441a      	add	r2, r3
 800d30e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d312:	b17b      	cbz	r3, 800d334 <__mdiff+0x104>
 800d314:	6106      	str	r6, [r0, #16]
 800d316:	e7a5      	b.n	800d264 <__mdiff+0x34>
 800d318:	f855 8b04 	ldr.w	r8, [r5], #4
 800d31c:	fa17 f488 	uxtah	r4, r7, r8
 800d320:	1422      	asrs	r2, r4, #16
 800d322:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d326:	b2a4      	uxth	r4, r4
 800d328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d32c:	f84e 4b04 	str.w	r4, [lr], #4
 800d330:	1417      	asrs	r7, r2, #16
 800d332:	e7e0      	b.n	800d2f6 <__mdiff+0xc6>
 800d334:	3e01      	subs	r6, #1
 800d336:	e7ea      	b.n	800d30e <__mdiff+0xde>
 800d338:	0800f0fc 	.word	0x0800f0fc
 800d33c:	0800f18c 	.word	0x0800f18c

0800d340 <__ulp>:
 800d340:	b082      	sub	sp, #8
 800d342:	ed8d 0b00 	vstr	d0, [sp]
 800d346:	9b01      	ldr	r3, [sp, #4]
 800d348:	4912      	ldr	r1, [pc, #72]	; (800d394 <__ulp+0x54>)
 800d34a:	4019      	ands	r1, r3
 800d34c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d350:	2900      	cmp	r1, #0
 800d352:	dd05      	ble.n	800d360 <__ulp+0x20>
 800d354:	2200      	movs	r2, #0
 800d356:	460b      	mov	r3, r1
 800d358:	ec43 2b10 	vmov	d0, r2, r3
 800d35c:	b002      	add	sp, #8
 800d35e:	4770      	bx	lr
 800d360:	4249      	negs	r1, r1
 800d362:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d366:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d36a:	f04f 0200 	mov.w	r2, #0
 800d36e:	f04f 0300 	mov.w	r3, #0
 800d372:	da04      	bge.n	800d37e <__ulp+0x3e>
 800d374:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d378:	fa41 f300 	asr.w	r3, r1, r0
 800d37c:	e7ec      	b.n	800d358 <__ulp+0x18>
 800d37e:	f1a0 0114 	sub.w	r1, r0, #20
 800d382:	291e      	cmp	r1, #30
 800d384:	bfda      	itte	le
 800d386:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d38a:	fa20 f101 	lsrle.w	r1, r0, r1
 800d38e:	2101      	movgt	r1, #1
 800d390:	460a      	mov	r2, r1
 800d392:	e7e1      	b.n	800d358 <__ulp+0x18>
 800d394:	7ff00000 	.word	0x7ff00000

0800d398 <__b2d>:
 800d398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d39a:	6905      	ldr	r5, [r0, #16]
 800d39c:	f100 0714 	add.w	r7, r0, #20
 800d3a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d3a4:	1f2e      	subs	r6, r5, #4
 800d3a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	f7ff fd52 	bl	800ce54 <__hi0bits>
 800d3b0:	f1c0 0320 	rsb	r3, r0, #32
 800d3b4:	280a      	cmp	r0, #10
 800d3b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d434 <__b2d+0x9c>
 800d3ba:	600b      	str	r3, [r1, #0]
 800d3bc:	dc14      	bgt.n	800d3e8 <__b2d+0x50>
 800d3be:	f1c0 0e0b 	rsb	lr, r0, #11
 800d3c2:	fa24 f10e 	lsr.w	r1, r4, lr
 800d3c6:	42b7      	cmp	r7, r6
 800d3c8:	ea41 030c 	orr.w	r3, r1, ip
 800d3cc:	bf34      	ite	cc
 800d3ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d3d2:	2100      	movcs	r1, #0
 800d3d4:	3015      	adds	r0, #21
 800d3d6:	fa04 f000 	lsl.w	r0, r4, r0
 800d3da:	fa21 f10e 	lsr.w	r1, r1, lr
 800d3de:	ea40 0201 	orr.w	r2, r0, r1
 800d3e2:	ec43 2b10 	vmov	d0, r2, r3
 800d3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3e8:	42b7      	cmp	r7, r6
 800d3ea:	bf3a      	itte	cc
 800d3ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d3f0:	f1a5 0608 	subcc.w	r6, r5, #8
 800d3f4:	2100      	movcs	r1, #0
 800d3f6:	380b      	subs	r0, #11
 800d3f8:	d017      	beq.n	800d42a <__b2d+0x92>
 800d3fa:	f1c0 0c20 	rsb	ip, r0, #32
 800d3fe:	fa04 f500 	lsl.w	r5, r4, r0
 800d402:	42be      	cmp	r6, r7
 800d404:	fa21 f40c 	lsr.w	r4, r1, ip
 800d408:	ea45 0504 	orr.w	r5, r5, r4
 800d40c:	bf8c      	ite	hi
 800d40e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d412:	2400      	movls	r4, #0
 800d414:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d418:	fa01 f000 	lsl.w	r0, r1, r0
 800d41c:	fa24 f40c 	lsr.w	r4, r4, ip
 800d420:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d424:	ea40 0204 	orr.w	r2, r0, r4
 800d428:	e7db      	b.n	800d3e2 <__b2d+0x4a>
 800d42a:	ea44 030c 	orr.w	r3, r4, ip
 800d42e:	460a      	mov	r2, r1
 800d430:	e7d7      	b.n	800d3e2 <__b2d+0x4a>
 800d432:	bf00      	nop
 800d434:	3ff00000 	.word	0x3ff00000

0800d438 <__d2b>:
 800d438:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d43c:	4689      	mov	r9, r1
 800d43e:	2101      	movs	r1, #1
 800d440:	ec57 6b10 	vmov	r6, r7, d0
 800d444:	4690      	mov	r8, r2
 800d446:	f7ff fc0f 	bl	800cc68 <_Balloc>
 800d44a:	4604      	mov	r4, r0
 800d44c:	b930      	cbnz	r0, 800d45c <__d2b+0x24>
 800d44e:	4602      	mov	r2, r0
 800d450:	4b25      	ldr	r3, [pc, #148]	; (800d4e8 <__d2b+0xb0>)
 800d452:	4826      	ldr	r0, [pc, #152]	; (800d4ec <__d2b+0xb4>)
 800d454:	f240 310a 	movw	r1, #778	; 0x30a
 800d458:	f000 ff22 	bl	800e2a0 <__assert_func>
 800d45c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d460:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d464:	bb35      	cbnz	r5, 800d4b4 <__d2b+0x7c>
 800d466:	2e00      	cmp	r6, #0
 800d468:	9301      	str	r3, [sp, #4]
 800d46a:	d028      	beq.n	800d4be <__d2b+0x86>
 800d46c:	4668      	mov	r0, sp
 800d46e:	9600      	str	r6, [sp, #0]
 800d470:	f7ff fd10 	bl	800ce94 <__lo0bits>
 800d474:	9900      	ldr	r1, [sp, #0]
 800d476:	b300      	cbz	r0, 800d4ba <__d2b+0x82>
 800d478:	9a01      	ldr	r2, [sp, #4]
 800d47a:	f1c0 0320 	rsb	r3, r0, #32
 800d47e:	fa02 f303 	lsl.w	r3, r2, r3
 800d482:	430b      	orrs	r3, r1
 800d484:	40c2      	lsrs	r2, r0
 800d486:	6163      	str	r3, [r4, #20]
 800d488:	9201      	str	r2, [sp, #4]
 800d48a:	9b01      	ldr	r3, [sp, #4]
 800d48c:	61a3      	str	r3, [r4, #24]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	bf14      	ite	ne
 800d492:	2202      	movne	r2, #2
 800d494:	2201      	moveq	r2, #1
 800d496:	6122      	str	r2, [r4, #16]
 800d498:	b1d5      	cbz	r5, 800d4d0 <__d2b+0x98>
 800d49a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d49e:	4405      	add	r5, r0
 800d4a0:	f8c9 5000 	str.w	r5, [r9]
 800d4a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d4a8:	f8c8 0000 	str.w	r0, [r8]
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	b003      	add	sp, #12
 800d4b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4b8:	e7d5      	b.n	800d466 <__d2b+0x2e>
 800d4ba:	6161      	str	r1, [r4, #20]
 800d4bc:	e7e5      	b.n	800d48a <__d2b+0x52>
 800d4be:	a801      	add	r0, sp, #4
 800d4c0:	f7ff fce8 	bl	800ce94 <__lo0bits>
 800d4c4:	9b01      	ldr	r3, [sp, #4]
 800d4c6:	6163      	str	r3, [r4, #20]
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	6122      	str	r2, [r4, #16]
 800d4cc:	3020      	adds	r0, #32
 800d4ce:	e7e3      	b.n	800d498 <__d2b+0x60>
 800d4d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d4d8:	f8c9 0000 	str.w	r0, [r9]
 800d4dc:	6918      	ldr	r0, [r3, #16]
 800d4de:	f7ff fcb9 	bl	800ce54 <__hi0bits>
 800d4e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4e6:	e7df      	b.n	800d4a8 <__d2b+0x70>
 800d4e8:	0800f0fc 	.word	0x0800f0fc
 800d4ec:	0800f18c 	.word	0x0800f18c

0800d4f0 <__ratio>:
 800d4f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f4:	468a      	mov	sl, r1
 800d4f6:	4669      	mov	r1, sp
 800d4f8:	4683      	mov	fp, r0
 800d4fa:	f7ff ff4d 	bl	800d398 <__b2d>
 800d4fe:	a901      	add	r1, sp, #4
 800d500:	4650      	mov	r0, sl
 800d502:	ec59 8b10 	vmov	r8, r9, d0
 800d506:	ee10 6a10 	vmov	r6, s0
 800d50a:	f7ff ff45 	bl	800d398 <__b2d>
 800d50e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d512:	f8da 2010 	ldr.w	r2, [sl, #16]
 800d516:	eba3 0c02 	sub.w	ip, r3, r2
 800d51a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d51e:	1a9b      	subs	r3, r3, r2
 800d520:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d524:	ec55 4b10 	vmov	r4, r5, d0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	ee10 0a10 	vmov	r0, s0
 800d52e:	bfce      	itee	gt
 800d530:	464a      	movgt	r2, r9
 800d532:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d536:	462a      	movle	r2, r5
 800d538:	464f      	mov	r7, r9
 800d53a:	4629      	mov	r1, r5
 800d53c:	bfcc      	ite	gt
 800d53e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d542:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d546:	ec47 6b17 	vmov	d7, r6, r7
 800d54a:	ec41 0b16 	vmov	d6, r0, r1
 800d54e:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800d552:	b003      	add	sp, #12
 800d554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d558 <__copybits>:
 800d558:	3901      	subs	r1, #1
 800d55a:	b570      	push	{r4, r5, r6, lr}
 800d55c:	1149      	asrs	r1, r1, #5
 800d55e:	6914      	ldr	r4, [r2, #16]
 800d560:	3101      	adds	r1, #1
 800d562:	f102 0314 	add.w	r3, r2, #20
 800d566:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d56a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d56e:	1f05      	subs	r5, r0, #4
 800d570:	42a3      	cmp	r3, r4
 800d572:	d30c      	bcc.n	800d58e <__copybits+0x36>
 800d574:	1aa3      	subs	r3, r4, r2
 800d576:	3b11      	subs	r3, #17
 800d578:	f023 0303 	bic.w	r3, r3, #3
 800d57c:	3211      	adds	r2, #17
 800d57e:	42a2      	cmp	r2, r4
 800d580:	bf88      	it	hi
 800d582:	2300      	movhi	r3, #0
 800d584:	4418      	add	r0, r3
 800d586:	2300      	movs	r3, #0
 800d588:	4288      	cmp	r0, r1
 800d58a:	d305      	bcc.n	800d598 <__copybits+0x40>
 800d58c:	bd70      	pop	{r4, r5, r6, pc}
 800d58e:	f853 6b04 	ldr.w	r6, [r3], #4
 800d592:	f845 6f04 	str.w	r6, [r5, #4]!
 800d596:	e7eb      	b.n	800d570 <__copybits+0x18>
 800d598:	f840 3b04 	str.w	r3, [r0], #4
 800d59c:	e7f4      	b.n	800d588 <__copybits+0x30>

0800d59e <__any_on>:
 800d59e:	f100 0214 	add.w	r2, r0, #20
 800d5a2:	6900      	ldr	r0, [r0, #16]
 800d5a4:	114b      	asrs	r3, r1, #5
 800d5a6:	4298      	cmp	r0, r3
 800d5a8:	b510      	push	{r4, lr}
 800d5aa:	db11      	blt.n	800d5d0 <__any_on+0x32>
 800d5ac:	dd0a      	ble.n	800d5c4 <__any_on+0x26>
 800d5ae:	f011 011f 	ands.w	r1, r1, #31
 800d5b2:	d007      	beq.n	800d5c4 <__any_on+0x26>
 800d5b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d5b8:	fa24 f001 	lsr.w	r0, r4, r1
 800d5bc:	fa00 f101 	lsl.w	r1, r0, r1
 800d5c0:	428c      	cmp	r4, r1
 800d5c2:	d10b      	bne.n	800d5dc <__any_on+0x3e>
 800d5c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d803      	bhi.n	800d5d4 <__any_on+0x36>
 800d5cc:	2000      	movs	r0, #0
 800d5ce:	bd10      	pop	{r4, pc}
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	e7f7      	b.n	800d5c4 <__any_on+0x26>
 800d5d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d5d8:	2900      	cmp	r1, #0
 800d5da:	d0f5      	beq.n	800d5c8 <__any_on+0x2a>
 800d5dc:	2001      	movs	r0, #1
 800d5de:	e7f6      	b.n	800d5ce <__any_on+0x30>

0800d5e0 <_calloc_r>:
 800d5e0:	b513      	push	{r0, r1, r4, lr}
 800d5e2:	434a      	muls	r2, r1
 800d5e4:	4611      	mov	r1, r2
 800d5e6:	9201      	str	r2, [sp, #4]
 800d5e8:	f000 f85a 	bl	800d6a0 <_malloc_r>
 800d5ec:	4604      	mov	r4, r0
 800d5ee:	b118      	cbz	r0, 800d5f8 <_calloc_r+0x18>
 800d5f0:	9a01      	ldr	r2, [sp, #4]
 800d5f2:	2100      	movs	r1, #0
 800d5f4:	f7fc fbd4 	bl	8009da0 <memset>
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	b002      	add	sp, #8
 800d5fc:	bd10      	pop	{r4, pc}
	...

0800d600 <_free_r>:
 800d600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d602:	2900      	cmp	r1, #0
 800d604:	d048      	beq.n	800d698 <_free_r+0x98>
 800d606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d60a:	9001      	str	r0, [sp, #4]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	f1a1 0404 	sub.w	r4, r1, #4
 800d612:	bfb8      	it	lt
 800d614:	18e4      	addlt	r4, r4, r3
 800d616:	f001 f847 	bl	800e6a8 <__malloc_lock>
 800d61a:	4a20      	ldr	r2, [pc, #128]	; (800d69c <_free_r+0x9c>)
 800d61c:	9801      	ldr	r0, [sp, #4]
 800d61e:	6813      	ldr	r3, [r2, #0]
 800d620:	4615      	mov	r5, r2
 800d622:	b933      	cbnz	r3, 800d632 <_free_r+0x32>
 800d624:	6063      	str	r3, [r4, #4]
 800d626:	6014      	str	r4, [r2, #0]
 800d628:	b003      	add	sp, #12
 800d62a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d62e:	f001 b841 	b.w	800e6b4 <__malloc_unlock>
 800d632:	42a3      	cmp	r3, r4
 800d634:	d90b      	bls.n	800d64e <_free_r+0x4e>
 800d636:	6821      	ldr	r1, [r4, #0]
 800d638:	1862      	adds	r2, r4, r1
 800d63a:	4293      	cmp	r3, r2
 800d63c:	bf04      	itt	eq
 800d63e:	681a      	ldreq	r2, [r3, #0]
 800d640:	685b      	ldreq	r3, [r3, #4]
 800d642:	6063      	str	r3, [r4, #4]
 800d644:	bf04      	itt	eq
 800d646:	1852      	addeq	r2, r2, r1
 800d648:	6022      	streq	r2, [r4, #0]
 800d64a:	602c      	str	r4, [r5, #0]
 800d64c:	e7ec      	b.n	800d628 <_free_r+0x28>
 800d64e:	461a      	mov	r2, r3
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	b10b      	cbz	r3, 800d658 <_free_r+0x58>
 800d654:	42a3      	cmp	r3, r4
 800d656:	d9fa      	bls.n	800d64e <_free_r+0x4e>
 800d658:	6811      	ldr	r1, [r2, #0]
 800d65a:	1855      	adds	r5, r2, r1
 800d65c:	42a5      	cmp	r5, r4
 800d65e:	d10b      	bne.n	800d678 <_free_r+0x78>
 800d660:	6824      	ldr	r4, [r4, #0]
 800d662:	4421      	add	r1, r4
 800d664:	1854      	adds	r4, r2, r1
 800d666:	42a3      	cmp	r3, r4
 800d668:	6011      	str	r1, [r2, #0]
 800d66a:	d1dd      	bne.n	800d628 <_free_r+0x28>
 800d66c:	681c      	ldr	r4, [r3, #0]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	6053      	str	r3, [r2, #4]
 800d672:	4421      	add	r1, r4
 800d674:	6011      	str	r1, [r2, #0]
 800d676:	e7d7      	b.n	800d628 <_free_r+0x28>
 800d678:	d902      	bls.n	800d680 <_free_r+0x80>
 800d67a:	230c      	movs	r3, #12
 800d67c:	6003      	str	r3, [r0, #0]
 800d67e:	e7d3      	b.n	800d628 <_free_r+0x28>
 800d680:	6825      	ldr	r5, [r4, #0]
 800d682:	1961      	adds	r1, r4, r5
 800d684:	428b      	cmp	r3, r1
 800d686:	bf04      	itt	eq
 800d688:	6819      	ldreq	r1, [r3, #0]
 800d68a:	685b      	ldreq	r3, [r3, #4]
 800d68c:	6063      	str	r3, [r4, #4]
 800d68e:	bf04      	itt	eq
 800d690:	1949      	addeq	r1, r1, r5
 800d692:	6021      	streq	r1, [r4, #0]
 800d694:	6054      	str	r4, [r2, #4]
 800d696:	e7c7      	b.n	800d628 <_free_r+0x28>
 800d698:	b003      	add	sp, #12
 800d69a:	bd30      	pop	{r4, r5, pc}
 800d69c:	20000434 	.word	0x20000434

0800d6a0 <_malloc_r>:
 800d6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6a2:	1ccd      	adds	r5, r1, #3
 800d6a4:	f025 0503 	bic.w	r5, r5, #3
 800d6a8:	3508      	adds	r5, #8
 800d6aa:	2d0c      	cmp	r5, #12
 800d6ac:	bf38      	it	cc
 800d6ae:	250c      	movcc	r5, #12
 800d6b0:	2d00      	cmp	r5, #0
 800d6b2:	4606      	mov	r6, r0
 800d6b4:	db01      	blt.n	800d6ba <_malloc_r+0x1a>
 800d6b6:	42a9      	cmp	r1, r5
 800d6b8:	d903      	bls.n	800d6c2 <_malloc_r+0x22>
 800d6ba:	230c      	movs	r3, #12
 800d6bc:	6033      	str	r3, [r6, #0]
 800d6be:	2000      	movs	r0, #0
 800d6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6c2:	f000 fff1 	bl	800e6a8 <__malloc_lock>
 800d6c6:	4921      	ldr	r1, [pc, #132]	; (800d74c <_malloc_r+0xac>)
 800d6c8:	680a      	ldr	r2, [r1, #0]
 800d6ca:	4614      	mov	r4, r2
 800d6cc:	b99c      	cbnz	r4, 800d6f6 <_malloc_r+0x56>
 800d6ce:	4f20      	ldr	r7, [pc, #128]	; (800d750 <_malloc_r+0xb0>)
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	b923      	cbnz	r3, 800d6de <_malloc_r+0x3e>
 800d6d4:	4621      	mov	r1, r4
 800d6d6:	4630      	mov	r0, r6
 800d6d8:	f000 fcd2 	bl	800e080 <_sbrk_r>
 800d6dc:	6038      	str	r0, [r7, #0]
 800d6de:	4629      	mov	r1, r5
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	f000 fccd 	bl	800e080 <_sbrk_r>
 800d6e6:	1c43      	adds	r3, r0, #1
 800d6e8:	d123      	bne.n	800d732 <_malloc_r+0x92>
 800d6ea:	230c      	movs	r3, #12
 800d6ec:	6033      	str	r3, [r6, #0]
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	f000 ffe0 	bl	800e6b4 <__malloc_unlock>
 800d6f4:	e7e3      	b.n	800d6be <_malloc_r+0x1e>
 800d6f6:	6823      	ldr	r3, [r4, #0]
 800d6f8:	1b5b      	subs	r3, r3, r5
 800d6fa:	d417      	bmi.n	800d72c <_malloc_r+0x8c>
 800d6fc:	2b0b      	cmp	r3, #11
 800d6fe:	d903      	bls.n	800d708 <_malloc_r+0x68>
 800d700:	6023      	str	r3, [r4, #0]
 800d702:	441c      	add	r4, r3
 800d704:	6025      	str	r5, [r4, #0]
 800d706:	e004      	b.n	800d712 <_malloc_r+0x72>
 800d708:	6863      	ldr	r3, [r4, #4]
 800d70a:	42a2      	cmp	r2, r4
 800d70c:	bf0c      	ite	eq
 800d70e:	600b      	streq	r3, [r1, #0]
 800d710:	6053      	strne	r3, [r2, #4]
 800d712:	4630      	mov	r0, r6
 800d714:	f000 ffce 	bl	800e6b4 <__malloc_unlock>
 800d718:	f104 000b 	add.w	r0, r4, #11
 800d71c:	1d23      	adds	r3, r4, #4
 800d71e:	f020 0007 	bic.w	r0, r0, #7
 800d722:	1ac2      	subs	r2, r0, r3
 800d724:	d0cc      	beq.n	800d6c0 <_malloc_r+0x20>
 800d726:	1a1b      	subs	r3, r3, r0
 800d728:	50a3      	str	r3, [r4, r2]
 800d72a:	e7c9      	b.n	800d6c0 <_malloc_r+0x20>
 800d72c:	4622      	mov	r2, r4
 800d72e:	6864      	ldr	r4, [r4, #4]
 800d730:	e7cc      	b.n	800d6cc <_malloc_r+0x2c>
 800d732:	1cc4      	adds	r4, r0, #3
 800d734:	f024 0403 	bic.w	r4, r4, #3
 800d738:	42a0      	cmp	r0, r4
 800d73a:	d0e3      	beq.n	800d704 <_malloc_r+0x64>
 800d73c:	1a21      	subs	r1, r4, r0
 800d73e:	4630      	mov	r0, r6
 800d740:	f000 fc9e 	bl	800e080 <_sbrk_r>
 800d744:	3001      	adds	r0, #1
 800d746:	d1dd      	bne.n	800d704 <_malloc_r+0x64>
 800d748:	e7cf      	b.n	800d6ea <_malloc_r+0x4a>
 800d74a:	bf00      	nop
 800d74c:	20000434 	.word	0x20000434
 800d750:	20000438 	.word	0x20000438

0800d754 <__ssputs_r>:
 800d754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d758:	688e      	ldr	r6, [r1, #8]
 800d75a:	429e      	cmp	r6, r3
 800d75c:	4682      	mov	sl, r0
 800d75e:	460c      	mov	r4, r1
 800d760:	4690      	mov	r8, r2
 800d762:	461f      	mov	r7, r3
 800d764:	d838      	bhi.n	800d7d8 <__ssputs_r+0x84>
 800d766:	898a      	ldrh	r2, [r1, #12]
 800d768:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d76c:	d032      	beq.n	800d7d4 <__ssputs_r+0x80>
 800d76e:	6825      	ldr	r5, [r4, #0]
 800d770:	6909      	ldr	r1, [r1, #16]
 800d772:	eba5 0901 	sub.w	r9, r5, r1
 800d776:	6965      	ldr	r5, [r4, #20]
 800d778:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d77c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d780:	3301      	adds	r3, #1
 800d782:	444b      	add	r3, r9
 800d784:	106d      	asrs	r5, r5, #1
 800d786:	429d      	cmp	r5, r3
 800d788:	bf38      	it	cc
 800d78a:	461d      	movcc	r5, r3
 800d78c:	0553      	lsls	r3, r2, #21
 800d78e:	d531      	bpl.n	800d7f4 <__ssputs_r+0xa0>
 800d790:	4629      	mov	r1, r5
 800d792:	f7ff ff85 	bl	800d6a0 <_malloc_r>
 800d796:	4606      	mov	r6, r0
 800d798:	b950      	cbnz	r0, 800d7b0 <__ssputs_r+0x5c>
 800d79a:	230c      	movs	r3, #12
 800d79c:	f8ca 3000 	str.w	r3, [sl]
 800d7a0:	89a3      	ldrh	r3, [r4, #12]
 800d7a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7a6:	81a3      	strh	r3, [r4, #12]
 800d7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7b0:	6921      	ldr	r1, [r4, #16]
 800d7b2:	464a      	mov	r2, r9
 800d7b4:	f7ff fa4a 	bl	800cc4c <memcpy>
 800d7b8:	89a3      	ldrh	r3, [r4, #12]
 800d7ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d7be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7c2:	81a3      	strh	r3, [r4, #12]
 800d7c4:	6126      	str	r6, [r4, #16]
 800d7c6:	6165      	str	r5, [r4, #20]
 800d7c8:	444e      	add	r6, r9
 800d7ca:	eba5 0509 	sub.w	r5, r5, r9
 800d7ce:	6026      	str	r6, [r4, #0]
 800d7d0:	60a5      	str	r5, [r4, #8]
 800d7d2:	463e      	mov	r6, r7
 800d7d4:	42be      	cmp	r6, r7
 800d7d6:	d900      	bls.n	800d7da <__ssputs_r+0x86>
 800d7d8:	463e      	mov	r6, r7
 800d7da:	4632      	mov	r2, r6
 800d7dc:	6820      	ldr	r0, [r4, #0]
 800d7de:	4641      	mov	r1, r8
 800d7e0:	f000 ff48 	bl	800e674 <memmove>
 800d7e4:	68a3      	ldr	r3, [r4, #8]
 800d7e6:	6822      	ldr	r2, [r4, #0]
 800d7e8:	1b9b      	subs	r3, r3, r6
 800d7ea:	4432      	add	r2, r6
 800d7ec:	60a3      	str	r3, [r4, #8]
 800d7ee:	6022      	str	r2, [r4, #0]
 800d7f0:	2000      	movs	r0, #0
 800d7f2:	e7db      	b.n	800d7ac <__ssputs_r+0x58>
 800d7f4:	462a      	mov	r2, r5
 800d7f6:	f000 ff63 	bl	800e6c0 <_realloc_r>
 800d7fa:	4606      	mov	r6, r0
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	d1e1      	bne.n	800d7c4 <__ssputs_r+0x70>
 800d800:	6921      	ldr	r1, [r4, #16]
 800d802:	4650      	mov	r0, sl
 800d804:	f7ff fefc 	bl	800d600 <_free_r>
 800d808:	e7c7      	b.n	800d79a <__ssputs_r+0x46>
	...

0800d80c <_svfiprintf_r>:
 800d80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d810:	4698      	mov	r8, r3
 800d812:	898b      	ldrh	r3, [r1, #12]
 800d814:	061b      	lsls	r3, r3, #24
 800d816:	b09d      	sub	sp, #116	; 0x74
 800d818:	4607      	mov	r7, r0
 800d81a:	460d      	mov	r5, r1
 800d81c:	4614      	mov	r4, r2
 800d81e:	d50e      	bpl.n	800d83e <_svfiprintf_r+0x32>
 800d820:	690b      	ldr	r3, [r1, #16]
 800d822:	b963      	cbnz	r3, 800d83e <_svfiprintf_r+0x32>
 800d824:	2140      	movs	r1, #64	; 0x40
 800d826:	f7ff ff3b 	bl	800d6a0 <_malloc_r>
 800d82a:	6028      	str	r0, [r5, #0]
 800d82c:	6128      	str	r0, [r5, #16]
 800d82e:	b920      	cbnz	r0, 800d83a <_svfiprintf_r+0x2e>
 800d830:	230c      	movs	r3, #12
 800d832:	603b      	str	r3, [r7, #0]
 800d834:	f04f 30ff 	mov.w	r0, #4294967295
 800d838:	e0d1      	b.n	800d9de <_svfiprintf_r+0x1d2>
 800d83a:	2340      	movs	r3, #64	; 0x40
 800d83c:	616b      	str	r3, [r5, #20]
 800d83e:	2300      	movs	r3, #0
 800d840:	9309      	str	r3, [sp, #36]	; 0x24
 800d842:	2320      	movs	r3, #32
 800d844:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d848:	f8cd 800c 	str.w	r8, [sp, #12]
 800d84c:	2330      	movs	r3, #48	; 0x30
 800d84e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d9f8 <_svfiprintf_r+0x1ec>
 800d852:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d856:	f04f 0901 	mov.w	r9, #1
 800d85a:	4623      	mov	r3, r4
 800d85c:	469a      	mov	sl, r3
 800d85e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d862:	b10a      	cbz	r2, 800d868 <_svfiprintf_r+0x5c>
 800d864:	2a25      	cmp	r2, #37	; 0x25
 800d866:	d1f9      	bne.n	800d85c <_svfiprintf_r+0x50>
 800d868:	ebba 0b04 	subs.w	fp, sl, r4
 800d86c:	d00b      	beq.n	800d886 <_svfiprintf_r+0x7a>
 800d86e:	465b      	mov	r3, fp
 800d870:	4622      	mov	r2, r4
 800d872:	4629      	mov	r1, r5
 800d874:	4638      	mov	r0, r7
 800d876:	f7ff ff6d 	bl	800d754 <__ssputs_r>
 800d87a:	3001      	adds	r0, #1
 800d87c:	f000 80aa 	beq.w	800d9d4 <_svfiprintf_r+0x1c8>
 800d880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d882:	445a      	add	r2, fp
 800d884:	9209      	str	r2, [sp, #36]	; 0x24
 800d886:	f89a 3000 	ldrb.w	r3, [sl]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	f000 80a2 	beq.w	800d9d4 <_svfiprintf_r+0x1c8>
 800d890:	2300      	movs	r3, #0
 800d892:	f04f 32ff 	mov.w	r2, #4294967295
 800d896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d89a:	f10a 0a01 	add.w	sl, sl, #1
 800d89e:	9304      	str	r3, [sp, #16]
 800d8a0:	9307      	str	r3, [sp, #28]
 800d8a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8a6:	931a      	str	r3, [sp, #104]	; 0x68
 800d8a8:	4654      	mov	r4, sl
 800d8aa:	2205      	movs	r2, #5
 800d8ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8b0:	4851      	ldr	r0, [pc, #324]	; (800d9f8 <_svfiprintf_r+0x1ec>)
 800d8b2:	f7f2 fcdd 	bl	8000270 <memchr>
 800d8b6:	9a04      	ldr	r2, [sp, #16]
 800d8b8:	b9d8      	cbnz	r0, 800d8f2 <_svfiprintf_r+0xe6>
 800d8ba:	06d0      	lsls	r0, r2, #27
 800d8bc:	bf44      	itt	mi
 800d8be:	2320      	movmi	r3, #32
 800d8c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8c4:	0711      	lsls	r1, r2, #28
 800d8c6:	bf44      	itt	mi
 800d8c8:	232b      	movmi	r3, #43	; 0x2b
 800d8ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8ce:	f89a 3000 	ldrb.w	r3, [sl]
 800d8d2:	2b2a      	cmp	r3, #42	; 0x2a
 800d8d4:	d015      	beq.n	800d902 <_svfiprintf_r+0xf6>
 800d8d6:	9a07      	ldr	r2, [sp, #28]
 800d8d8:	4654      	mov	r4, sl
 800d8da:	2000      	movs	r0, #0
 800d8dc:	f04f 0c0a 	mov.w	ip, #10
 800d8e0:	4621      	mov	r1, r4
 800d8e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8e6:	3b30      	subs	r3, #48	; 0x30
 800d8e8:	2b09      	cmp	r3, #9
 800d8ea:	d94e      	bls.n	800d98a <_svfiprintf_r+0x17e>
 800d8ec:	b1b0      	cbz	r0, 800d91c <_svfiprintf_r+0x110>
 800d8ee:	9207      	str	r2, [sp, #28]
 800d8f0:	e014      	b.n	800d91c <_svfiprintf_r+0x110>
 800d8f2:	eba0 0308 	sub.w	r3, r0, r8
 800d8f6:	fa09 f303 	lsl.w	r3, r9, r3
 800d8fa:	4313      	orrs	r3, r2
 800d8fc:	9304      	str	r3, [sp, #16]
 800d8fe:	46a2      	mov	sl, r4
 800d900:	e7d2      	b.n	800d8a8 <_svfiprintf_r+0x9c>
 800d902:	9b03      	ldr	r3, [sp, #12]
 800d904:	1d19      	adds	r1, r3, #4
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	9103      	str	r1, [sp, #12]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	bfbb      	ittet	lt
 800d90e:	425b      	neglt	r3, r3
 800d910:	f042 0202 	orrlt.w	r2, r2, #2
 800d914:	9307      	strge	r3, [sp, #28]
 800d916:	9307      	strlt	r3, [sp, #28]
 800d918:	bfb8      	it	lt
 800d91a:	9204      	strlt	r2, [sp, #16]
 800d91c:	7823      	ldrb	r3, [r4, #0]
 800d91e:	2b2e      	cmp	r3, #46	; 0x2e
 800d920:	d10c      	bne.n	800d93c <_svfiprintf_r+0x130>
 800d922:	7863      	ldrb	r3, [r4, #1]
 800d924:	2b2a      	cmp	r3, #42	; 0x2a
 800d926:	d135      	bne.n	800d994 <_svfiprintf_r+0x188>
 800d928:	9b03      	ldr	r3, [sp, #12]
 800d92a:	1d1a      	adds	r2, r3, #4
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	9203      	str	r2, [sp, #12]
 800d930:	2b00      	cmp	r3, #0
 800d932:	bfb8      	it	lt
 800d934:	f04f 33ff 	movlt.w	r3, #4294967295
 800d938:	3402      	adds	r4, #2
 800d93a:	9305      	str	r3, [sp, #20]
 800d93c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800da08 <_svfiprintf_r+0x1fc>
 800d940:	7821      	ldrb	r1, [r4, #0]
 800d942:	2203      	movs	r2, #3
 800d944:	4650      	mov	r0, sl
 800d946:	f7f2 fc93 	bl	8000270 <memchr>
 800d94a:	b140      	cbz	r0, 800d95e <_svfiprintf_r+0x152>
 800d94c:	2340      	movs	r3, #64	; 0x40
 800d94e:	eba0 000a 	sub.w	r0, r0, sl
 800d952:	fa03 f000 	lsl.w	r0, r3, r0
 800d956:	9b04      	ldr	r3, [sp, #16]
 800d958:	4303      	orrs	r3, r0
 800d95a:	3401      	adds	r4, #1
 800d95c:	9304      	str	r3, [sp, #16]
 800d95e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d962:	4826      	ldr	r0, [pc, #152]	; (800d9fc <_svfiprintf_r+0x1f0>)
 800d964:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d968:	2206      	movs	r2, #6
 800d96a:	f7f2 fc81 	bl	8000270 <memchr>
 800d96e:	2800      	cmp	r0, #0
 800d970:	d038      	beq.n	800d9e4 <_svfiprintf_r+0x1d8>
 800d972:	4b23      	ldr	r3, [pc, #140]	; (800da00 <_svfiprintf_r+0x1f4>)
 800d974:	bb1b      	cbnz	r3, 800d9be <_svfiprintf_r+0x1b2>
 800d976:	9b03      	ldr	r3, [sp, #12]
 800d978:	3307      	adds	r3, #7
 800d97a:	f023 0307 	bic.w	r3, r3, #7
 800d97e:	3308      	adds	r3, #8
 800d980:	9303      	str	r3, [sp, #12]
 800d982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d984:	4433      	add	r3, r6
 800d986:	9309      	str	r3, [sp, #36]	; 0x24
 800d988:	e767      	b.n	800d85a <_svfiprintf_r+0x4e>
 800d98a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d98e:	460c      	mov	r4, r1
 800d990:	2001      	movs	r0, #1
 800d992:	e7a5      	b.n	800d8e0 <_svfiprintf_r+0xd4>
 800d994:	2300      	movs	r3, #0
 800d996:	3401      	adds	r4, #1
 800d998:	9305      	str	r3, [sp, #20]
 800d99a:	4619      	mov	r1, r3
 800d99c:	f04f 0c0a 	mov.w	ip, #10
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9a6:	3a30      	subs	r2, #48	; 0x30
 800d9a8:	2a09      	cmp	r2, #9
 800d9aa:	d903      	bls.n	800d9b4 <_svfiprintf_r+0x1a8>
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d0c5      	beq.n	800d93c <_svfiprintf_r+0x130>
 800d9b0:	9105      	str	r1, [sp, #20]
 800d9b2:	e7c3      	b.n	800d93c <_svfiprintf_r+0x130>
 800d9b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9b8:	4604      	mov	r4, r0
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	e7f0      	b.n	800d9a0 <_svfiprintf_r+0x194>
 800d9be:	ab03      	add	r3, sp, #12
 800d9c0:	9300      	str	r3, [sp, #0]
 800d9c2:	462a      	mov	r2, r5
 800d9c4:	4b0f      	ldr	r3, [pc, #60]	; (800da04 <_svfiprintf_r+0x1f8>)
 800d9c6:	a904      	add	r1, sp, #16
 800d9c8:	4638      	mov	r0, r7
 800d9ca:	f7fc fa81 	bl	8009ed0 <_printf_float>
 800d9ce:	1c42      	adds	r2, r0, #1
 800d9d0:	4606      	mov	r6, r0
 800d9d2:	d1d6      	bne.n	800d982 <_svfiprintf_r+0x176>
 800d9d4:	89ab      	ldrh	r3, [r5, #12]
 800d9d6:	065b      	lsls	r3, r3, #25
 800d9d8:	f53f af2c 	bmi.w	800d834 <_svfiprintf_r+0x28>
 800d9dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9de:	b01d      	add	sp, #116	; 0x74
 800d9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9e4:	ab03      	add	r3, sp, #12
 800d9e6:	9300      	str	r3, [sp, #0]
 800d9e8:	462a      	mov	r2, r5
 800d9ea:	4b06      	ldr	r3, [pc, #24]	; (800da04 <_svfiprintf_r+0x1f8>)
 800d9ec:	a904      	add	r1, sp, #16
 800d9ee:	4638      	mov	r0, r7
 800d9f0:	f7fc fcfa 	bl	800a3e8 <_printf_i>
 800d9f4:	e7eb      	b.n	800d9ce <_svfiprintf_r+0x1c2>
 800d9f6:	bf00      	nop
 800d9f8:	0800f2ec 	.word	0x0800f2ec
 800d9fc:	0800f2f6 	.word	0x0800f2f6
 800da00:	08009ed1 	.word	0x08009ed1
 800da04:	0800d755 	.word	0x0800d755
 800da08:	0800f2f2 	.word	0x0800f2f2

0800da0c <_sungetc_r>:
 800da0c:	b538      	push	{r3, r4, r5, lr}
 800da0e:	1c4b      	adds	r3, r1, #1
 800da10:	4614      	mov	r4, r2
 800da12:	d103      	bne.n	800da1c <_sungetc_r+0x10>
 800da14:	f04f 35ff 	mov.w	r5, #4294967295
 800da18:	4628      	mov	r0, r5
 800da1a:	bd38      	pop	{r3, r4, r5, pc}
 800da1c:	8993      	ldrh	r3, [r2, #12]
 800da1e:	f023 0320 	bic.w	r3, r3, #32
 800da22:	8193      	strh	r3, [r2, #12]
 800da24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da26:	6852      	ldr	r2, [r2, #4]
 800da28:	b2cd      	uxtb	r5, r1
 800da2a:	b18b      	cbz	r3, 800da50 <_sungetc_r+0x44>
 800da2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800da2e:	4293      	cmp	r3, r2
 800da30:	dd08      	ble.n	800da44 <_sungetc_r+0x38>
 800da32:	6823      	ldr	r3, [r4, #0]
 800da34:	1e5a      	subs	r2, r3, #1
 800da36:	6022      	str	r2, [r4, #0]
 800da38:	f803 5c01 	strb.w	r5, [r3, #-1]
 800da3c:	6863      	ldr	r3, [r4, #4]
 800da3e:	3301      	adds	r3, #1
 800da40:	6063      	str	r3, [r4, #4]
 800da42:	e7e9      	b.n	800da18 <_sungetc_r+0xc>
 800da44:	4621      	mov	r1, r4
 800da46:	f000 fbe3 	bl	800e210 <__submore>
 800da4a:	2800      	cmp	r0, #0
 800da4c:	d0f1      	beq.n	800da32 <_sungetc_r+0x26>
 800da4e:	e7e1      	b.n	800da14 <_sungetc_r+0x8>
 800da50:	6921      	ldr	r1, [r4, #16]
 800da52:	6823      	ldr	r3, [r4, #0]
 800da54:	b151      	cbz	r1, 800da6c <_sungetc_r+0x60>
 800da56:	4299      	cmp	r1, r3
 800da58:	d208      	bcs.n	800da6c <_sungetc_r+0x60>
 800da5a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800da5e:	42a9      	cmp	r1, r5
 800da60:	d104      	bne.n	800da6c <_sungetc_r+0x60>
 800da62:	3b01      	subs	r3, #1
 800da64:	3201      	adds	r2, #1
 800da66:	6023      	str	r3, [r4, #0]
 800da68:	6062      	str	r2, [r4, #4]
 800da6a:	e7d5      	b.n	800da18 <_sungetc_r+0xc>
 800da6c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800da70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da74:	6363      	str	r3, [r4, #52]	; 0x34
 800da76:	2303      	movs	r3, #3
 800da78:	63a3      	str	r3, [r4, #56]	; 0x38
 800da7a:	4623      	mov	r3, r4
 800da7c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800da80:	6023      	str	r3, [r4, #0]
 800da82:	2301      	movs	r3, #1
 800da84:	e7dc      	b.n	800da40 <_sungetc_r+0x34>

0800da86 <__ssrefill_r>:
 800da86:	b510      	push	{r4, lr}
 800da88:	460c      	mov	r4, r1
 800da8a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800da8c:	b169      	cbz	r1, 800daaa <__ssrefill_r+0x24>
 800da8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da92:	4299      	cmp	r1, r3
 800da94:	d001      	beq.n	800da9a <__ssrefill_r+0x14>
 800da96:	f7ff fdb3 	bl	800d600 <_free_r>
 800da9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da9c:	6063      	str	r3, [r4, #4]
 800da9e:	2000      	movs	r0, #0
 800daa0:	6360      	str	r0, [r4, #52]	; 0x34
 800daa2:	b113      	cbz	r3, 800daaa <__ssrefill_r+0x24>
 800daa4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800daa6:	6023      	str	r3, [r4, #0]
 800daa8:	bd10      	pop	{r4, pc}
 800daaa:	6923      	ldr	r3, [r4, #16]
 800daac:	6023      	str	r3, [r4, #0]
 800daae:	2300      	movs	r3, #0
 800dab0:	6063      	str	r3, [r4, #4]
 800dab2:	89a3      	ldrh	r3, [r4, #12]
 800dab4:	f043 0320 	orr.w	r3, r3, #32
 800dab8:	81a3      	strh	r3, [r4, #12]
 800daba:	f04f 30ff 	mov.w	r0, #4294967295
 800dabe:	e7f3      	b.n	800daa8 <__ssrefill_r+0x22>

0800dac0 <__ssvfiscanf_r>:
 800dac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac4:	460c      	mov	r4, r1
 800dac6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800daca:	2100      	movs	r1, #0
 800dacc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800dad0:	49b2      	ldr	r1, [pc, #712]	; (800dd9c <__ssvfiscanf_r+0x2dc>)
 800dad2:	91a0      	str	r1, [sp, #640]	; 0x280
 800dad4:	f10d 0804 	add.w	r8, sp, #4
 800dad8:	49b1      	ldr	r1, [pc, #708]	; (800dda0 <__ssvfiscanf_r+0x2e0>)
 800dada:	4fb2      	ldr	r7, [pc, #712]	; (800dda4 <__ssvfiscanf_r+0x2e4>)
 800dadc:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800dda8 <__ssvfiscanf_r+0x2e8>
 800dae0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800dae4:	4606      	mov	r6, r0
 800dae6:	91a1      	str	r1, [sp, #644]	; 0x284
 800dae8:	9300      	str	r3, [sp, #0]
 800daea:	f892 a000 	ldrb.w	sl, [r2]
 800daee:	f1ba 0f00 	cmp.w	sl, #0
 800daf2:	f000 8151 	beq.w	800dd98 <__ssvfiscanf_r+0x2d8>
 800daf6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800dafa:	f013 0308 	ands.w	r3, r3, #8
 800dafe:	f102 0501 	add.w	r5, r2, #1
 800db02:	d019      	beq.n	800db38 <__ssvfiscanf_r+0x78>
 800db04:	6863      	ldr	r3, [r4, #4]
 800db06:	2b00      	cmp	r3, #0
 800db08:	dd0f      	ble.n	800db2a <__ssvfiscanf_r+0x6a>
 800db0a:	6823      	ldr	r3, [r4, #0]
 800db0c:	781a      	ldrb	r2, [r3, #0]
 800db0e:	5cba      	ldrb	r2, [r7, r2]
 800db10:	0712      	lsls	r2, r2, #28
 800db12:	d401      	bmi.n	800db18 <__ssvfiscanf_r+0x58>
 800db14:	462a      	mov	r2, r5
 800db16:	e7e8      	b.n	800daea <__ssvfiscanf_r+0x2a>
 800db18:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800db1a:	3201      	adds	r2, #1
 800db1c:	9245      	str	r2, [sp, #276]	; 0x114
 800db1e:	6862      	ldr	r2, [r4, #4]
 800db20:	3301      	adds	r3, #1
 800db22:	3a01      	subs	r2, #1
 800db24:	6062      	str	r2, [r4, #4]
 800db26:	6023      	str	r3, [r4, #0]
 800db28:	e7ec      	b.n	800db04 <__ssvfiscanf_r+0x44>
 800db2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800db2c:	4621      	mov	r1, r4
 800db2e:	4630      	mov	r0, r6
 800db30:	4798      	blx	r3
 800db32:	2800      	cmp	r0, #0
 800db34:	d0e9      	beq.n	800db0a <__ssvfiscanf_r+0x4a>
 800db36:	e7ed      	b.n	800db14 <__ssvfiscanf_r+0x54>
 800db38:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800db3c:	f040 8083 	bne.w	800dc46 <__ssvfiscanf_r+0x186>
 800db40:	9341      	str	r3, [sp, #260]	; 0x104
 800db42:	9343      	str	r3, [sp, #268]	; 0x10c
 800db44:	7853      	ldrb	r3, [r2, #1]
 800db46:	2b2a      	cmp	r3, #42	; 0x2a
 800db48:	bf02      	ittt	eq
 800db4a:	2310      	moveq	r3, #16
 800db4c:	1c95      	addeq	r5, r2, #2
 800db4e:	9341      	streq	r3, [sp, #260]	; 0x104
 800db50:	220a      	movs	r2, #10
 800db52:	46ab      	mov	fp, r5
 800db54:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800db58:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800db5c:	2b09      	cmp	r3, #9
 800db5e:	d91d      	bls.n	800db9c <__ssvfiscanf_r+0xdc>
 800db60:	4891      	ldr	r0, [pc, #580]	; (800dda8 <__ssvfiscanf_r+0x2e8>)
 800db62:	2203      	movs	r2, #3
 800db64:	f7f2 fb84 	bl	8000270 <memchr>
 800db68:	b140      	cbz	r0, 800db7c <__ssvfiscanf_r+0xbc>
 800db6a:	2301      	movs	r3, #1
 800db6c:	eba0 0009 	sub.w	r0, r0, r9
 800db70:	fa03 f000 	lsl.w	r0, r3, r0
 800db74:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800db76:	4318      	orrs	r0, r3
 800db78:	9041      	str	r0, [sp, #260]	; 0x104
 800db7a:	465d      	mov	r5, fp
 800db7c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800db80:	2b78      	cmp	r3, #120	; 0x78
 800db82:	d806      	bhi.n	800db92 <__ssvfiscanf_r+0xd2>
 800db84:	2b57      	cmp	r3, #87	; 0x57
 800db86:	d810      	bhi.n	800dbaa <__ssvfiscanf_r+0xea>
 800db88:	2b25      	cmp	r3, #37	; 0x25
 800db8a:	d05c      	beq.n	800dc46 <__ssvfiscanf_r+0x186>
 800db8c:	d856      	bhi.n	800dc3c <__ssvfiscanf_r+0x17c>
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d074      	beq.n	800dc7c <__ssvfiscanf_r+0x1bc>
 800db92:	2303      	movs	r3, #3
 800db94:	9347      	str	r3, [sp, #284]	; 0x11c
 800db96:	230a      	movs	r3, #10
 800db98:	9342      	str	r3, [sp, #264]	; 0x108
 800db9a:	e081      	b.n	800dca0 <__ssvfiscanf_r+0x1e0>
 800db9c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800db9e:	fb02 1303 	mla	r3, r2, r3, r1
 800dba2:	3b30      	subs	r3, #48	; 0x30
 800dba4:	9343      	str	r3, [sp, #268]	; 0x10c
 800dba6:	465d      	mov	r5, fp
 800dba8:	e7d3      	b.n	800db52 <__ssvfiscanf_r+0x92>
 800dbaa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800dbae:	2a20      	cmp	r2, #32
 800dbb0:	d8ef      	bhi.n	800db92 <__ssvfiscanf_r+0xd2>
 800dbb2:	a101      	add	r1, pc, #4	; (adr r1, 800dbb8 <__ssvfiscanf_r+0xf8>)
 800dbb4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dbb8:	0800dc8b 	.word	0x0800dc8b
 800dbbc:	0800db93 	.word	0x0800db93
 800dbc0:	0800db93 	.word	0x0800db93
 800dbc4:	0800dce9 	.word	0x0800dce9
 800dbc8:	0800db93 	.word	0x0800db93
 800dbcc:	0800db93 	.word	0x0800db93
 800dbd0:	0800db93 	.word	0x0800db93
 800dbd4:	0800db93 	.word	0x0800db93
 800dbd8:	0800db93 	.word	0x0800db93
 800dbdc:	0800db93 	.word	0x0800db93
 800dbe0:	0800db93 	.word	0x0800db93
 800dbe4:	0800dcff 	.word	0x0800dcff
 800dbe8:	0800dcd5 	.word	0x0800dcd5
 800dbec:	0800dc43 	.word	0x0800dc43
 800dbf0:	0800dc43 	.word	0x0800dc43
 800dbf4:	0800dc43 	.word	0x0800dc43
 800dbf8:	0800db93 	.word	0x0800db93
 800dbfc:	0800dcd9 	.word	0x0800dcd9
 800dc00:	0800db93 	.word	0x0800db93
 800dc04:	0800db93 	.word	0x0800db93
 800dc08:	0800db93 	.word	0x0800db93
 800dc0c:	0800db93 	.word	0x0800db93
 800dc10:	0800dd0f 	.word	0x0800dd0f
 800dc14:	0800dce1 	.word	0x0800dce1
 800dc18:	0800dc83 	.word	0x0800dc83
 800dc1c:	0800db93 	.word	0x0800db93
 800dc20:	0800db93 	.word	0x0800db93
 800dc24:	0800dd0b 	.word	0x0800dd0b
 800dc28:	0800db93 	.word	0x0800db93
 800dc2c:	0800dcd5 	.word	0x0800dcd5
 800dc30:	0800db93 	.word	0x0800db93
 800dc34:	0800db93 	.word	0x0800db93
 800dc38:	0800dc8b 	.word	0x0800dc8b
 800dc3c:	3b45      	subs	r3, #69	; 0x45
 800dc3e:	2b02      	cmp	r3, #2
 800dc40:	d8a7      	bhi.n	800db92 <__ssvfiscanf_r+0xd2>
 800dc42:	2305      	movs	r3, #5
 800dc44:	e02b      	b.n	800dc9e <__ssvfiscanf_r+0x1de>
 800dc46:	6863      	ldr	r3, [r4, #4]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	dd0d      	ble.n	800dc68 <__ssvfiscanf_r+0x1a8>
 800dc4c:	6823      	ldr	r3, [r4, #0]
 800dc4e:	781a      	ldrb	r2, [r3, #0]
 800dc50:	4552      	cmp	r2, sl
 800dc52:	f040 80a1 	bne.w	800dd98 <__ssvfiscanf_r+0x2d8>
 800dc56:	3301      	adds	r3, #1
 800dc58:	6862      	ldr	r2, [r4, #4]
 800dc5a:	6023      	str	r3, [r4, #0]
 800dc5c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800dc5e:	3a01      	subs	r2, #1
 800dc60:	3301      	adds	r3, #1
 800dc62:	6062      	str	r2, [r4, #4]
 800dc64:	9345      	str	r3, [sp, #276]	; 0x114
 800dc66:	e755      	b.n	800db14 <__ssvfiscanf_r+0x54>
 800dc68:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dc6a:	4621      	mov	r1, r4
 800dc6c:	4630      	mov	r0, r6
 800dc6e:	4798      	blx	r3
 800dc70:	2800      	cmp	r0, #0
 800dc72:	d0eb      	beq.n	800dc4c <__ssvfiscanf_r+0x18c>
 800dc74:	9844      	ldr	r0, [sp, #272]	; 0x110
 800dc76:	2800      	cmp	r0, #0
 800dc78:	f040 8084 	bne.w	800dd84 <__ssvfiscanf_r+0x2c4>
 800dc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc80:	e086      	b.n	800dd90 <__ssvfiscanf_r+0x2d0>
 800dc82:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800dc84:	f042 0220 	orr.w	r2, r2, #32
 800dc88:	9241      	str	r2, [sp, #260]	; 0x104
 800dc8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800dc8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc90:	9241      	str	r2, [sp, #260]	; 0x104
 800dc92:	2210      	movs	r2, #16
 800dc94:	2b6f      	cmp	r3, #111	; 0x6f
 800dc96:	9242      	str	r2, [sp, #264]	; 0x108
 800dc98:	bf34      	ite	cc
 800dc9a:	2303      	movcc	r3, #3
 800dc9c:	2304      	movcs	r3, #4
 800dc9e:	9347      	str	r3, [sp, #284]	; 0x11c
 800dca0:	6863      	ldr	r3, [r4, #4]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	dd41      	ble.n	800dd2a <__ssvfiscanf_r+0x26a>
 800dca6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800dca8:	0659      	lsls	r1, r3, #25
 800dcaa:	d404      	bmi.n	800dcb6 <__ssvfiscanf_r+0x1f6>
 800dcac:	6823      	ldr	r3, [r4, #0]
 800dcae:	781a      	ldrb	r2, [r3, #0]
 800dcb0:	5cba      	ldrb	r2, [r7, r2]
 800dcb2:	0712      	lsls	r2, r2, #28
 800dcb4:	d440      	bmi.n	800dd38 <__ssvfiscanf_r+0x278>
 800dcb6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800dcb8:	2b02      	cmp	r3, #2
 800dcba:	dc4f      	bgt.n	800dd5c <__ssvfiscanf_r+0x29c>
 800dcbc:	466b      	mov	r3, sp
 800dcbe:	4622      	mov	r2, r4
 800dcc0:	a941      	add	r1, sp, #260	; 0x104
 800dcc2:	4630      	mov	r0, r6
 800dcc4:	f000 f874 	bl	800ddb0 <_scanf_chars>
 800dcc8:	2801      	cmp	r0, #1
 800dcca:	d065      	beq.n	800dd98 <__ssvfiscanf_r+0x2d8>
 800dccc:	2802      	cmp	r0, #2
 800dcce:	f47f af21 	bne.w	800db14 <__ssvfiscanf_r+0x54>
 800dcd2:	e7cf      	b.n	800dc74 <__ssvfiscanf_r+0x1b4>
 800dcd4:	220a      	movs	r2, #10
 800dcd6:	e7dd      	b.n	800dc94 <__ssvfiscanf_r+0x1d4>
 800dcd8:	2300      	movs	r3, #0
 800dcda:	9342      	str	r3, [sp, #264]	; 0x108
 800dcdc:	2303      	movs	r3, #3
 800dcde:	e7de      	b.n	800dc9e <__ssvfiscanf_r+0x1de>
 800dce0:	2308      	movs	r3, #8
 800dce2:	9342      	str	r3, [sp, #264]	; 0x108
 800dce4:	2304      	movs	r3, #4
 800dce6:	e7da      	b.n	800dc9e <__ssvfiscanf_r+0x1de>
 800dce8:	4629      	mov	r1, r5
 800dcea:	4640      	mov	r0, r8
 800dcec:	f000 f9d8 	bl	800e0a0 <__sccl>
 800dcf0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800dcf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcf6:	9341      	str	r3, [sp, #260]	; 0x104
 800dcf8:	4605      	mov	r5, r0
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	e7cf      	b.n	800dc9e <__ssvfiscanf_r+0x1de>
 800dcfe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800dd00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd04:	9341      	str	r3, [sp, #260]	; 0x104
 800dd06:	2300      	movs	r3, #0
 800dd08:	e7c9      	b.n	800dc9e <__ssvfiscanf_r+0x1de>
 800dd0a:	2302      	movs	r3, #2
 800dd0c:	e7c7      	b.n	800dc9e <__ssvfiscanf_r+0x1de>
 800dd0e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800dd10:	06c3      	lsls	r3, r0, #27
 800dd12:	f53f aeff 	bmi.w	800db14 <__ssvfiscanf_r+0x54>
 800dd16:	9b00      	ldr	r3, [sp, #0]
 800dd18:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800dd1a:	1d19      	adds	r1, r3, #4
 800dd1c:	9100      	str	r1, [sp, #0]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	07c0      	lsls	r0, r0, #31
 800dd22:	bf4c      	ite	mi
 800dd24:	801a      	strhmi	r2, [r3, #0]
 800dd26:	601a      	strpl	r2, [r3, #0]
 800dd28:	e6f4      	b.n	800db14 <__ssvfiscanf_r+0x54>
 800dd2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dd2c:	4621      	mov	r1, r4
 800dd2e:	4630      	mov	r0, r6
 800dd30:	4798      	blx	r3
 800dd32:	2800      	cmp	r0, #0
 800dd34:	d0b7      	beq.n	800dca6 <__ssvfiscanf_r+0x1e6>
 800dd36:	e79d      	b.n	800dc74 <__ssvfiscanf_r+0x1b4>
 800dd38:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800dd3a:	3201      	adds	r2, #1
 800dd3c:	9245      	str	r2, [sp, #276]	; 0x114
 800dd3e:	6862      	ldr	r2, [r4, #4]
 800dd40:	3a01      	subs	r2, #1
 800dd42:	2a00      	cmp	r2, #0
 800dd44:	6062      	str	r2, [r4, #4]
 800dd46:	dd02      	ble.n	800dd4e <__ssvfiscanf_r+0x28e>
 800dd48:	3301      	adds	r3, #1
 800dd4a:	6023      	str	r3, [r4, #0]
 800dd4c:	e7ae      	b.n	800dcac <__ssvfiscanf_r+0x1ec>
 800dd4e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dd50:	4621      	mov	r1, r4
 800dd52:	4630      	mov	r0, r6
 800dd54:	4798      	blx	r3
 800dd56:	2800      	cmp	r0, #0
 800dd58:	d0a8      	beq.n	800dcac <__ssvfiscanf_r+0x1ec>
 800dd5a:	e78b      	b.n	800dc74 <__ssvfiscanf_r+0x1b4>
 800dd5c:	2b04      	cmp	r3, #4
 800dd5e:	dc06      	bgt.n	800dd6e <__ssvfiscanf_r+0x2ae>
 800dd60:	466b      	mov	r3, sp
 800dd62:	4622      	mov	r2, r4
 800dd64:	a941      	add	r1, sp, #260	; 0x104
 800dd66:	4630      	mov	r0, r6
 800dd68:	f000 f87a 	bl	800de60 <_scanf_i>
 800dd6c:	e7ac      	b.n	800dcc8 <__ssvfiscanf_r+0x208>
 800dd6e:	4b0f      	ldr	r3, [pc, #60]	; (800ddac <__ssvfiscanf_r+0x2ec>)
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	f43f aecf 	beq.w	800db14 <__ssvfiscanf_r+0x54>
 800dd76:	466b      	mov	r3, sp
 800dd78:	4622      	mov	r2, r4
 800dd7a:	a941      	add	r1, sp, #260	; 0x104
 800dd7c:	4630      	mov	r0, r6
 800dd7e:	f7fc fc59 	bl	800a634 <_scanf_float>
 800dd82:	e7a1      	b.n	800dcc8 <__ssvfiscanf_r+0x208>
 800dd84:	89a3      	ldrh	r3, [r4, #12]
 800dd86:	f013 0f40 	tst.w	r3, #64	; 0x40
 800dd8a:	bf18      	it	ne
 800dd8c:	f04f 30ff 	movne.w	r0, #4294967295
 800dd90:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800dd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd98:	9844      	ldr	r0, [sp, #272]	; 0x110
 800dd9a:	e7f9      	b.n	800dd90 <__ssvfiscanf_r+0x2d0>
 800dd9c:	0800da0d 	.word	0x0800da0d
 800dda0:	0800da87 	.word	0x0800da87
 800dda4:	0800ef79 	.word	0x0800ef79
 800dda8:	0800f2f2 	.word	0x0800f2f2
 800ddac:	0800a635 	.word	0x0800a635

0800ddb0 <_scanf_chars>:
 800ddb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddb4:	4615      	mov	r5, r2
 800ddb6:	688a      	ldr	r2, [r1, #8]
 800ddb8:	4680      	mov	r8, r0
 800ddba:	460c      	mov	r4, r1
 800ddbc:	b932      	cbnz	r2, 800ddcc <_scanf_chars+0x1c>
 800ddbe:	698a      	ldr	r2, [r1, #24]
 800ddc0:	2a00      	cmp	r2, #0
 800ddc2:	bf0c      	ite	eq
 800ddc4:	2201      	moveq	r2, #1
 800ddc6:	f04f 32ff 	movne.w	r2, #4294967295
 800ddca:	608a      	str	r2, [r1, #8]
 800ddcc:	6822      	ldr	r2, [r4, #0]
 800ddce:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800de5c <_scanf_chars+0xac>
 800ddd2:	06d1      	lsls	r1, r2, #27
 800ddd4:	bf5f      	itttt	pl
 800ddd6:	681a      	ldrpl	r2, [r3, #0]
 800ddd8:	1d11      	addpl	r1, r2, #4
 800ddda:	6019      	strpl	r1, [r3, #0]
 800dddc:	6816      	ldrpl	r6, [r2, #0]
 800ddde:	2700      	movs	r7, #0
 800dde0:	69a0      	ldr	r0, [r4, #24]
 800dde2:	b188      	cbz	r0, 800de08 <_scanf_chars+0x58>
 800dde4:	2801      	cmp	r0, #1
 800dde6:	d107      	bne.n	800ddf8 <_scanf_chars+0x48>
 800dde8:	682b      	ldr	r3, [r5, #0]
 800ddea:	781a      	ldrb	r2, [r3, #0]
 800ddec:	6963      	ldr	r3, [r4, #20]
 800ddee:	5c9b      	ldrb	r3, [r3, r2]
 800ddf0:	b953      	cbnz	r3, 800de08 <_scanf_chars+0x58>
 800ddf2:	bb27      	cbnz	r7, 800de3e <_scanf_chars+0x8e>
 800ddf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddf8:	2802      	cmp	r0, #2
 800ddfa:	d120      	bne.n	800de3e <_scanf_chars+0x8e>
 800ddfc:	682b      	ldr	r3, [r5, #0]
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	f813 3009 	ldrb.w	r3, [r3, r9]
 800de04:	071b      	lsls	r3, r3, #28
 800de06:	d41a      	bmi.n	800de3e <_scanf_chars+0x8e>
 800de08:	6823      	ldr	r3, [r4, #0]
 800de0a:	06da      	lsls	r2, r3, #27
 800de0c:	bf5e      	ittt	pl
 800de0e:	682b      	ldrpl	r3, [r5, #0]
 800de10:	781b      	ldrbpl	r3, [r3, #0]
 800de12:	f806 3b01 	strbpl.w	r3, [r6], #1
 800de16:	682a      	ldr	r2, [r5, #0]
 800de18:	686b      	ldr	r3, [r5, #4]
 800de1a:	3201      	adds	r2, #1
 800de1c:	602a      	str	r2, [r5, #0]
 800de1e:	68a2      	ldr	r2, [r4, #8]
 800de20:	3b01      	subs	r3, #1
 800de22:	3a01      	subs	r2, #1
 800de24:	606b      	str	r3, [r5, #4]
 800de26:	3701      	adds	r7, #1
 800de28:	60a2      	str	r2, [r4, #8]
 800de2a:	b142      	cbz	r2, 800de3e <_scanf_chars+0x8e>
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	dcd7      	bgt.n	800dde0 <_scanf_chars+0x30>
 800de30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800de34:	4629      	mov	r1, r5
 800de36:	4640      	mov	r0, r8
 800de38:	4798      	blx	r3
 800de3a:	2800      	cmp	r0, #0
 800de3c:	d0d0      	beq.n	800dde0 <_scanf_chars+0x30>
 800de3e:	6823      	ldr	r3, [r4, #0]
 800de40:	f013 0310 	ands.w	r3, r3, #16
 800de44:	d105      	bne.n	800de52 <_scanf_chars+0xa2>
 800de46:	68e2      	ldr	r2, [r4, #12]
 800de48:	3201      	adds	r2, #1
 800de4a:	60e2      	str	r2, [r4, #12]
 800de4c:	69a2      	ldr	r2, [r4, #24]
 800de4e:	b102      	cbz	r2, 800de52 <_scanf_chars+0xa2>
 800de50:	7033      	strb	r3, [r6, #0]
 800de52:	6923      	ldr	r3, [r4, #16]
 800de54:	441f      	add	r7, r3
 800de56:	6127      	str	r7, [r4, #16]
 800de58:	2000      	movs	r0, #0
 800de5a:	e7cb      	b.n	800ddf4 <_scanf_chars+0x44>
 800de5c:	0800ef79 	.word	0x0800ef79

0800de60 <_scanf_i>:
 800de60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de64:	4698      	mov	r8, r3
 800de66:	4b74      	ldr	r3, [pc, #464]	; (800e038 <_scanf_i+0x1d8>)
 800de68:	460c      	mov	r4, r1
 800de6a:	4682      	mov	sl, r0
 800de6c:	4616      	mov	r6, r2
 800de6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800de72:	b087      	sub	sp, #28
 800de74:	ab03      	add	r3, sp, #12
 800de76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800de7a:	4b70      	ldr	r3, [pc, #448]	; (800e03c <_scanf_i+0x1dc>)
 800de7c:	69a1      	ldr	r1, [r4, #24]
 800de7e:	4a70      	ldr	r2, [pc, #448]	; (800e040 <_scanf_i+0x1e0>)
 800de80:	2903      	cmp	r1, #3
 800de82:	bf18      	it	ne
 800de84:	461a      	movne	r2, r3
 800de86:	68a3      	ldr	r3, [r4, #8]
 800de88:	9201      	str	r2, [sp, #4]
 800de8a:	1e5a      	subs	r2, r3, #1
 800de8c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800de90:	bf88      	it	hi
 800de92:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800de96:	4627      	mov	r7, r4
 800de98:	bf82      	ittt	hi
 800de9a:	eb03 0905 	addhi.w	r9, r3, r5
 800de9e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dea2:	60a3      	strhi	r3, [r4, #8]
 800dea4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800dea8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800deac:	bf98      	it	ls
 800deae:	f04f 0900 	movls.w	r9, #0
 800deb2:	6023      	str	r3, [r4, #0]
 800deb4:	463d      	mov	r5, r7
 800deb6:	f04f 0b00 	mov.w	fp, #0
 800deba:	6831      	ldr	r1, [r6, #0]
 800debc:	ab03      	add	r3, sp, #12
 800debe:	7809      	ldrb	r1, [r1, #0]
 800dec0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800dec4:	2202      	movs	r2, #2
 800dec6:	f7f2 f9d3 	bl	8000270 <memchr>
 800deca:	b328      	cbz	r0, 800df18 <_scanf_i+0xb8>
 800decc:	f1bb 0f01 	cmp.w	fp, #1
 800ded0:	d159      	bne.n	800df86 <_scanf_i+0x126>
 800ded2:	6862      	ldr	r2, [r4, #4]
 800ded4:	b92a      	cbnz	r2, 800dee2 <_scanf_i+0x82>
 800ded6:	6822      	ldr	r2, [r4, #0]
 800ded8:	2308      	movs	r3, #8
 800deda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dede:	6063      	str	r3, [r4, #4]
 800dee0:	6022      	str	r2, [r4, #0]
 800dee2:	6822      	ldr	r2, [r4, #0]
 800dee4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800dee8:	6022      	str	r2, [r4, #0]
 800deea:	68a2      	ldr	r2, [r4, #8]
 800deec:	1e51      	subs	r1, r2, #1
 800deee:	60a1      	str	r1, [r4, #8]
 800def0:	b192      	cbz	r2, 800df18 <_scanf_i+0xb8>
 800def2:	6832      	ldr	r2, [r6, #0]
 800def4:	1c51      	adds	r1, r2, #1
 800def6:	6031      	str	r1, [r6, #0]
 800def8:	7812      	ldrb	r2, [r2, #0]
 800defa:	f805 2b01 	strb.w	r2, [r5], #1
 800defe:	6872      	ldr	r2, [r6, #4]
 800df00:	3a01      	subs	r2, #1
 800df02:	2a00      	cmp	r2, #0
 800df04:	6072      	str	r2, [r6, #4]
 800df06:	dc07      	bgt.n	800df18 <_scanf_i+0xb8>
 800df08:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800df0c:	4631      	mov	r1, r6
 800df0e:	4650      	mov	r0, sl
 800df10:	4790      	blx	r2
 800df12:	2800      	cmp	r0, #0
 800df14:	f040 8085 	bne.w	800e022 <_scanf_i+0x1c2>
 800df18:	f10b 0b01 	add.w	fp, fp, #1
 800df1c:	f1bb 0f03 	cmp.w	fp, #3
 800df20:	d1cb      	bne.n	800deba <_scanf_i+0x5a>
 800df22:	6863      	ldr	r3, [r4, #4]
 800df24:	b90b      	cbnz	r3, 800df2a <_scanf_i+0xca>
 800df26:	230a      	movs	r3, #10
 800df28:	6063      	str	r3, [r4, #4]
 800df2a:	6863      	ldr	r3, [r4, #4]
 800df2c:	4945      	ldr	r1, [pc, #276]	; (800e044 <_scanf_i+0x1e4>)
 800df2e:	6960      	ldr	r0, [r4, #20]
 800df30:	1ac9      	subs	r1, r1, r3
 800df32:	f000 f8b5 	bl	800e0a0 <__sccl>
 800df36:	f04f 0b00 	mov.w	fp, #0
 800df3a:	68a3      	ldr	r3, [r4, #8]
 800df3c:	6822      	ldr	r2, [r4, #0]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d03d      	beq.n	800dfbe <_scanf_i+0x15e>
 800df42:	6831      	ldr	r1, [r6, #0]
 800df44:	6960      	ldr	r0, [r4, #20]
 800df46:	f891 c000 	ldrb.w	ip, [r1]
 800df4a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800df4e:	2800      	cmp	r0, #0
 800df50:	d035      	beq.n	800dfbe <_scanf_i+0x15e>
 800df52:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800df56:	d124      	bne.n	800dfa2 <_scanf_i+0x142>
 800df58:	0510      	lsls	r0, r2, #20
 800df5a:	d522      	bpl.n	800dfa2 <_scanf_i+0x142>
 800df5c:	f10b 0b01 	add.w	fp, fp, #1
 800df60:	f1b9 0f00 	cmp.w	r9, #0
 800df64:	d003      	beq.n	800df6e <_scanf_i+0x10e>
 800df66:	3301      	adds	r3, #1
 800df68:	f109 39ff 	add.w	r9, r9, #4294967295
 800df6c:	60a3      	str	r3, [r4, #8]
 800df6e:	6873      	ldr	r3, [r6, #4]
 800df70:	3b01      	subs	r3, #1
 800df72:	2b00      	cmp	r3, #0
 800df74:	6073      	str	r3, [r6, #4]
 800df76:	dd1b      	ble.n	800dfb0 <_scanf_i+0x150>
 800df78:	6833      	ldr	r3, [r6, #0]
 800df7a:	3301      	adds	r3, #1
 800df7c:	6033      	str	r3, [r6, #0]
 800df7e:	68a3      	ldr	r3, [r4, #8]
 800df80:	3b01      	subs	r3, #1
 800df82:	60a3      	str	r3, [r4, #8]
 800df84:	e7d9      	b.n	800df3a <_scanf_i+0xda>
 800df86:	f1bb 0f02 	cmp.w	fp, #2
 800df8a:	d1ae      	bne.n	800deea <_scanf_i+0x8a>
 800df8c:	6822      	ldr	r2, [r4, #0]
 800df8e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800df92:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800df96:	d1bf      	bne.n	800df18 <_scanf_i+0xb8>
 800df98:	2310      	movs	r3, #16
 800df9a:	6063      	str	r3, [r4, #4]
 800df9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dfa0:	e7a2      	b.n	800dee8 <_scanf_i+0x88>
 800dfa2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800dfa6:	6022      	str	r2, [r4, #0]
 800dfa8:	780b      	ldrb	r3, [r1, #0]
 800dfaa:	f805 3b01 	strb.w	r3, [r5], #1
 800dfae:	e7de      	b.n	800df6e <_scanf_i+0x10e>
 800dfb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dfb4:	4631      	mov	r1, r6
 800dfb6:	4650      	mov	r0, sl
 800dfb8:	4798      	blx	r3
 800dfba:	2800      	cmp	r0, #0
 800dfbc:	d0df      	beq.n	800df7e <_scanf_i+0x11e>
 800dfbe:	6823      	ldr	r3, [r4, #0]
 800dfc0:	05d9      	lsls	r1, r3, #23
 800dfc2:	d50d      	bpl.n	800dfe0 <_scanf_i+0x180>
 800dfc4:	42bd      	cmp	r5, r7
 800dfc6:	d909      	bls.n	800dfdc <_scanf_i+0x17c>
 800dfc8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800dfcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dfd0:	4632      	mov	r2, r6
 800dfd2:	4650      	mov	r0, sl
 800dfd4:	4798      	blx	r3
 800dfd6:	f105 39ff 	add.w	r9, r5, #4294967295
 800dfda:	464d      	mov	r5, r9
 800dfdc:	42bd      	cmp	r5, r7
 800dfde:	d028      	beq.n	800e032 <_scanf_i+0x1d2>
 800dfe0:	6822      	ldr	r2, [r4, #0]
 800dfe2:	f012 0210 	ands.w	r2, r2, #16
 800dfe6:	d113      	bne.n	800e010 <_scanf_i+0x1b0>
 800dfe8:	702a      	strb	r2, [r5, #0]
 800dfea:	6863      	ldr	r3, [r4, #4]
 800dfec:	9e01      	ldr	r6, [sp, #4]
 800dfee:	4639      	mov	r1, r7
 800dff0:	4650      	mov	r0, sl
 800dff2:	47b0      	blx	r6
 800dff4:	f8d8 3000 	ldr.w	r3, [r8]
 800dff8:	6821      	ldr	r1, [r4, #0]
 800dffa:	1d1a      	adds	r2, r3, #4
 800dffc:	f8c8 2000 	str.w	r2, [r8]
 800e000:	f011 0f20 	tst.w	r1, #32
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	d00f      	beq.n	800e028 <_scanf_i+0x1c8>
 800e008:	6018      	str	r0, [r3, #0]
 800e00a:	68e3      	ldr	r3, [r4, #12]
 800e00c:	3301      	adds	r3, #1
 800e00e:	60e3      	str	r3, [r4, #12]
 800e010:	1bed      	subs	r5, r5, r7
 800e012:	44ab      	add	fp, r5
 800e014:	6925      	ldr	r5, [r4, #16]
 800e016:	445d      	add	r5, fp
 800e018:	6125      	str	r5, [r4, #16]
 800e01a:	2000      	movs	r0, #0
 800e01c:	b007      	add	sp, #28
 800e01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e022:	f04f 0b00 	mov.w	fp, #0
 800e026:	e7ca      	b.n	800dfbe <_scanf_i+0x15e>
 800e028:	07ca      	lsls	r2, r1, #31
 800e02a:	bf4c      	ite	mi
 800e02c:	8018      	strhmi	r0, [r3, #0]
 800e02e:	6018      	strpl	r0, [r3, #0]
 800e030:	e7eb      	b.n	800e00a <_scanf_i+0x1aa>
 800e032:	2001      	movs	r0, #1
 800e034:	e7f2      	b.n	800e01c <_scanf_i+0x1bc>
 800e036:	bf00      	nop
 800e038:	0800eebc 	.word	0x0800eebc
 800e03c:	0800e20d 	.word	0x0800e20d
 800e040:	0800b8a9 	.word	0x0800b8a9
 800e044:	0800f316 	.word	0x0800f316

0800e048 <_read_r>:
 800e048:	b538      	push	{r3, r4, r5, lr}
 800e04a:	4d07      	ldr	r5, [pc, #28]	; (800e068 <_read_r+0x20>)
 800e04c:	4604      	mov	r4, r0
 800e04e:	4608      	mov	r0, r1
 800e050:	4611      	mov	r1, r2
 800e052:	2200      	movs	r2, #0
 800e054:	602a      	str	r2, [r5, #0]
 800e056:	461a      	mov	r2, r3
 800e058:	f7f4 fac4 	bl	80025e4 <_read>
 800e05c:	1c43      	adds	r3, r0, #1
 800e05e:	d102      	bne.n	800e066 <_read_r+0x1e>
 800e060:	682b      	ldr	r3, [r5, #0]
 800e062:	b103      	cbz	r3, 800e066 <_read_r+0x1e>
 800e064:	6023      	str	r3, [r4, #0]
 800e066:	bd38      	pop	{r3, r4, r5, pc}
 800e068:	20000b64 	.word	0x20000b64
 800e06c:	00000000 	.word	0x00000000

0800e070 <nan>:
 800e070:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e078 <nan+0x8>
 800e074:	4770      	bx	lr
 800e076:	bf00      	nop
 800e078:	00000000 	.word	0x00000000
 800e07c:	7ff80000 	.word	0x7ff80000

0800e080 <_sbrk_r>:
 800e080:	b538      	push	{r3, r4, r5, lr}
 800e082:	4d06      	ldr	r5, [pc, #24]	; (800e09c <_sbrk_r+0x1c>)
 800e084:	2300      	movs	r3, #0
 800e086:	4604      	mov	r4, r0
 800e088:	4608      	mov	r0, r1
 800e08a:	602b      	str	r3, [r5, #0]
 800e08c:	f7f4 fb18 	bl	80026c0 <_sbrk>
 800e090:	1c43      	adds	r3, r0, #1
 800e092:	d102      	bne.n	800e09a <_sbrk_r+0x1a>
 800e094:	682b      	ldr	r3, [r5, #0]
 800e096:	b103      	cbz	r3, 800e09a <_sbrk_r+0x1a>
 800e098:	6023      	str	r3, [r4, #0]
 800e09a:	bd38      	pop	{r3, r4, r5, pc}
 800e09c:	20000b64 	.word	0x20000b64

0800e0a0 <__sccl>:
 800e0a0:	b570      	push	{r4, r5, r6, lr}
 800e0a2:	780b      	ldrb	r3, [r1, #0]
 800e0a4:	4604      	mov	r4, r0
 800e0a6:	2b5e      	cmp	r3, #94	; 0x5e
 800e0a8:	bf0b      	itete	eq
 800e0aa:	784b      	ldrbeq	r3, [r1, #1]
 800e0ac:	1c48      	addne	r0, r1, #1
 800e0ae:	1c88      	addeq	r0, r1, #2
 800e0b0:	2200      	movne	r2, #0
 800e0b2:	bf08      	it	eq
 800e0b4:	2201      	moveq	r2, #1
 800e0b6:	1e61      	subs	r1, r4, #1
 800e0b8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e0bc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800e0c0:	42a9      	cmp	r1, r5
 800e0c2:	d1fb      	bne.n	800e0bc <__sccl+0x1c>
 800e0c4:	b90b      	cbnz	r3, 800e0ca <__sccl+0x2a>
 800e0c6:	3801      	subs	r0, #1
 800e0c8:	bd70      	pop	{r4, r5, r6, pc}
 800e0ca:	f082 0101 	eor.w	r1, r2, #1
 800e0ce:	54e1      	strb	r1, [r4, r3]
 800e0d0:	1c42      	adds	r2, r0, #1
 800e0d2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800e0d6:	2d2d      	cmp	r5, #45	; 0x2d
 800e0d8:	f102 36ff 	add.w	r6, r2, #4294967295
 800e0dc:	4610      	mov	r0, r2
 800e0de:	d006      	beq.n	800e0ee <__sccl+0x4e>
 800e0e0:	2d5d      	cmp	r5, #93	; 0x5d
 800e0e2:	d0f1      	beq.n	800e0c8 <__sccl+0x28>
 800e0e4:	b90d      	cbnz	r5, 800e0ea <__sccl+0x4a>
 800e0e6:	4630      	mov	r0, r6
 800e0e8:	e7ee      	b.n	800e0c8 <__sccl+0x28>
 800e0ea:	462b      	mov	r3, r5
 800e0ec:	e7ef      	b.n	800e0ce <__sccl+0x2e>
 800e0ee:	7816      	ldrb	r6, [r2, #0]
 800e0f0:	2e5d      	cmp	r6, #93	; 0x5d
 800e0f2:	d0fa      	beq.n	800e0ea <__sccl+0x4a>
 800e0f4:	42b3      	cmp	r3, r6
 800e0f6:	dcf8      	bgt.n	800e0ea <__sccl+0x4a>
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3001      	adds	r0, #1
 800e0fc:	4286      	cmp	r6, r0
 800e0fe:	5421      	strb	r1, [r4, r0]
 800e100:	dcfb      	bgt.n	800e0fa <__sccl+0x5a>
 800e102:	43d8      	mvns	r0, r3
 800e104:	4430      	add	r0, r6
 800e106:	1c5d      	adds	r5, r3, #1
 800e108:	42b3      	cmp	r3, r6
 800e10a:	bfa8      	it	ge
 800e10c:	2000      	movge	r0, #0
 800e10e:	182b      	adds	r3, r5, r0
 800e110:	3202      	adds	r2, #2
 800e112:	e7de      	b.n	800e0d2 <__sccl+0x32>

0800e114 <_strtoul_l.isra.0>:
 800e114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e118:	4e3b      	ldr	r6, [pc, #236]	; (800e208 <_strtoul_l.isra.0+0xf4>)
 800e11a:	4686      	mov	lr, r0
 800e11c:	468c      	mov	ip, r1
 800e11e:	4660      	mov	r0, ip
 800e120:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800e124:	5da5      	ldrb	r5, [r4, r6]
 800e126:	f015 0508 	ands.w	r5, r5, #8
 800e12a:	d1f8      	bne.n	800e11e <_strtoul_l.isra.0+0xa>
 800e12c:	2c2d      	cmp	r4, #45	; 0x2d
 800e12e:	d134      	bne.n	800e19a <_strtoul_l.isra.0+0x86>
 800e130:	f89c 4000 	ldrb.w	r4, [ip]
 800e134:	f04f 0801 	mov.w	r8, #1
 800e138:	f100 0c02 	add.w	ip, r0, #2
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d05e      	beq.n	800e1fe <_strtoul_l.isra.0+0xea>
 800e140:	2b10      	cmp	r3, #16
 800e142:	d10c      	bne.n	800e15e <_strtoul_l.isra.0+0x4a>
 800e144:	2c30      	cmp	r4, #48	; 0x30
 800e146:	d10a      	bne.n	800e15e <_strtoul_l.isra.0+0x4a>
 800e148:	f89c 0000 	ldrb.w	r0, [ip]
 800e14c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e150:	2858      	cmp	r0, #88	; 0x58
 800e152:	d14f      	bne.n	800e1f4 <_strtoul_l.isra.0+0xe0>
 800e154:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800e158:	2310      	movs	r3, #16
 800e15a:	f10c 0c02 	add.w	ip, ip, #2
 800e15e:	f04f 37ff 	mov.w	r7, #4294967295
 800e162:	2500      	movs	r5, #0
 800e164:	fbb7 f7f3 	udiv	r7, r7, r3
 800e168:	fb03 f907 	mul.w	r9, r3, r7
 800e16c:	ea6f 0909 	mvn.w	r9, r9
 800e170:	4628      	mov	r0, r5
 800e172:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800e176:	2e09      	cmp	r6, #9
 800e178:	d818      	bhi.n	800e1ac <_strtoul_l.isra.0+0x98>
 800e17a:	4634      	mov	r4, r6
 800e17c:	42a3      	cmp	r3, r4
 800e17e:	dd24      	ble.n	800e1ca <_strtoul_l.isra.0+0xb6>
 800e180:	2d00      	cmp	r5, #0
 800e182:	db1f      	blt.n	800e1c4 <_strtoul_l.isra.0+0xb0>
 800e184:	4287      	cmp	r7, r0
 800e186:	d31d      	bcc.n	800e1c4 <_strtoul_l.isra.0+0xb0>
 800e188:	d101      	bne.n	800e18e <_strtoul_l.isra.0+0x7a>
 800e18a:	45a1      	cmp	r9, r4
 800e18c:	db1a      	blt.n	800e1c4 <_strtoul_l.isra.0+0xb0>
 800e18e:	fb00 4003 	mla	r0, r0, r3, r4
 800e192:	2501      	movs	r5, #1
 800e194:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800e198:	e7eb      	b.n	800e172 <_strtoul_l.isra.0+0x5e>
 800e19a:	2c2b      	cmp	r4, #43	; 0x2b
 800e19c:	bf08      	it	eq
 800e19e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800e1a2:	46a8      	mov	r8, r5
 800e1a4:	bf08      	it	eq
 800e1a6:	f100 0c02 	addeq.w	ip, r0, #2
 800e1aa:	e7c7      	b.n	800e13c <_strtoul_l.isra.0+0x28>
 800e1ac:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800e1b0:	2e19      	cmp	r6, #25
 800e1b2:	d801      	bhi.n	800e1b8 <_strtoul_l.isra.0+0xa4>
 800e1b4:	3c37      	subs	r4, #55	; 0x37
 800e1b6:	e7e1      	b.n	800e17c <_strtoul_l.isra.0+0x68>
 800e1b8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800e1bc:	2e19      	cmp	r6, #25
 800e1be:	d804      	bhi.n	800e1ca <_strtoul_l.isra.0+0xb6>
 800e1c0:	3c57      	subs	r4, #87	; 0x57
 800e1c2:	e7db      	b.n	800e17c <_strtoul_l.isra.0+0x68>
 800e1c4:	f04f 35ff 	mov.w	r5, #4294967295
 800e1c8:	e7e4      	b.n	800e194 <_strtoul_l.isra.0+0x80>
 800e1ca:	2d00      	cmp	r5, #0
 800e1cc:	da07      	bge.n	800e1de <_strtoul_l.isra.0+0xca>
 800e1ce:	2322      	movs	r3, #34	; 0x22
 800e1d0:	f8ce 3000 	str.w	r3, [lr]
 800e1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e1d8:	b942      	cbnz	r2, 800e1ec <_strtoul_l.isra.0+0xd8>
 800e1da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1de:	f1b8 0f00 	cmp.w	r8, #0
 800e1e2:	d000      	beq.n	800e1e6 <_strtoul_l.isra.0+0xd2>
 800e1e4:	4240      	negs	r0, r0
 800e1e6:	2a00      	cmp	r2, #0
 800e1e8:	d0f7      	beq.n	800e1da <_strtoul_l.isra.0+0xc6>
 800e1ea:	b10d      	cbz	r5, 800e1f0 <_strtoul_l.isra.0+0xdc>
 800e1ec:	f10c 31ff 	add.w	r1, ip, #4294967295
 800e1f0:	6011      	str	r1, [r2, #0]
 800e1f2:	e7f2      	b.n	800e1da <_strtoul_l.isra.0+0xc6>
 800e1f4:	2430      	movs	r4, #48	; 0x30
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d1b1      	bne.n	800e15e <_strtoul_l.isra.0+0x4a>
 800e1fa:	2308      	movs	r3, #8
 800e1fc:	e7af      	b.n	800e15e <_strtoul_l.isra.0+0x4a>
 800e1fe:	2c30      	cmp	r4, #48	; 0x30
 800e200:	d0a2      	beq.n	800e148 <_strtoul_l.isra.0+0x34>
 800e202:	230a      	movs	r3, #10
 800e204:	e7ab      	b.n	800e15e <_strtoul_l.isra.0+0x4a>
 800e206:	bf00      	nop
 800e208:	0800ef79 	.word	0x0800ef79

0800e20c <_strtoul_r>:
 800e20c:	f7ff bf82 	b.w	800e114 <_strtoul_l.isra.0>

0800e210 <__submore>:
 800e210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e214:	460c      	mov	r4, r1
 800e216:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e21c:	4299      	cmp	r1, r3
 800e21e:	d11d      	bne.n	800e25c <__submore+0x4c>
 800e220:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e224:	f7ff fa3c 	bl	800d6a0 <_malloc_r>
 800e228:	b918      	cbnz	r0, 800e232 <__submore+0x22>
 800e22a:	f04f 30ff 	mov.w	r0, #4294967295
 800e22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e236:	63a3      	str	r3, [r4, #56]	; 0x38
 800e238:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e23c:	6360      	str	r0, [r4, #52]	; 0x34
 800e23e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e242:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e246:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800e24a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e24e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800e252:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e256:	6020      	str	r0, [r4, #0]
 800e258:	2000      	movs	r0, #0
 800e25a:	e7e8      	b.n	800e22e <__submore+0x1e>
 800e25c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e25e:	0077      	lsls	r7, r6, #1
 800e260:	463a      	mov	r2, r7
 800e262:	f000 fa2d 	bl	800e6c0 <_realloc_r>
 800e266:	4605      	mov	r5, r0
 800e268:	2800      	cmp	r0, #0
 800e26a:	d0de      	beq.n	800e22a <__submore+0x1a>
 800e26c:	eb00 0806 	add.w	r8, r0, r6
 800e270:	4601      	mov	r1, r0
 800e272:	4632      	mov	r2, r6
 800e274:	4640      	mov	r0, r8
 800e276:	f7fe fce9 	bl	800cc4c <memcpy>
 800e27a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e27e:	f8c4 8000 	str.w	r8, [r4]
 800e282:	e7e9      	b.n	800e258 <__submore+0x48>

0800e284 <__ascii_wctomb>:
 800e284:	b149      	cbz	r1, 800e29a <__ascii_wctomb+0x16>
 800e286:	2aff      	cmp	r2, #255	; 0xff
 800e288:	bf85      	ittet	hi
 800e28a:	238a      	movhi	r3, #138	; 0x8a
 800e28c:	6003      	strhi	r3, [r0, #0]
 800e28e:	700a      	strbls	r2, [r1, #0]
 800e290:	f04f 30ff 	movhi.w	r0, #4294967295
 800e294:	bf98      	it	ls
 800e296:	2001      	movls	r0, #1
 800e298:	4770      	bx	lr
 800e29a:	4608      	mov	r0, r1
 800e29c:	4770      	bx	lr
	...

0800e2a0 <__assert_func>:
 800e2a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e2a2:	4614      	mov	r4, r2
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	4b09      	ldr	r3, [pc, #36]	; (800e2cc <__assert_func+0x2c>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4605      	mov	r5, r0
 800e2ac:	68d8      	ldr	r0, [r3, #12]
 800e2ae:	b14c      	cbz	r4, 800e2c4 <__assert_func+0x24>
 800e2b0:	4b07      	ldr	r3, [pc, #28]	; (800e2d0 <__assert_func+0x30>)
 800e2b2:	9100      	str	r1, [sp, #0]
 800e2b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e2b8:	4906      	ldr	r1, [pc, #24]	; (800e2d4 <__assert_func+0x34>)
 800e2ba:	462b      	mov	r3, r5
 800e2bc:	f000 f9a6 	bl	800e60c <fiprintf>
 800e2c0:	f000 fc3e 	bl	800eb40 <abort>
 800e2c4:	4b04      	ldr	r3, [pc, #16]	; (800e2d8 <__assert_func+0x38>)
 800e2c6:	461c      	mov	r4, r3
 800e2c8:	e7f3      	b.n	800e2b2 <__assert_func+0x12>
 800e2ca:	bf00      	nop
 800e2cc:	20000058 	.word	0x20000058
 800e2d0:	0800f318 	.word	0x0800f318
 800e2d4:	0800f325 	.word	0x0800f325
 800e2d8:	0800f353 	.word	0x0800f353

0800e2dc <__sflush_r>:
 800e2dc:	898a      	ldrh	r2, [r1, #12]
 800e2de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2e2:	4605      	mov	r5, r0
 800e2e4:	0710      	lsls	r0, r2, #28
 800e2e6:	460c      	mov	r4, r1
 800e2e8:	d458      	bmi.n	800e39c <__sflush_r+0xc0>
 800e2ea:	684b      	ldr	r3, [r1, #4]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	dc05      	bgt.n	800e2fc <__sflush_r+0x20>
 800e2f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	dc02      	bgt.n	800e2fc <__sflush_r+0x20>
 800e2f6:	2000      	movs	r0, #0
 800e2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e2fe:	2e00      	cmp	r6, #0
 800e300:	d0f9      	beq.n	800e2f6 <__sflush_r+0x1a>
 800e302:	2300      	movs	r3, #0
 800e304:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e308:	682f      	ldr	r7, [r5, #0]
 800e30a:	602b      	str	r3, [r5, #0]
 800e30c:	d032      	beq.n	800e374 <__sflush_r+0x98>
 800e30e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e310:	89a3      	ldrh	r3, [r4, #12]
 800e312:	075a      	lsls	r2, r3, #29
 800e314:	d505      	bpl.n	800e322 <__sflush_r+0x46>
 800e316:	6863      	ldr	r3, [r4, #4]
 800e318:	1ac0      	subs	r0, r0, r3
 800e31a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e31c:	b10b      	cbz	r3, 800e322 <__sflush_r+0x46>
 800e31e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e320:	1ac0      	subs	r0, r0, r3
 800e322:	2300      	movs	r3, #0
 800e324:	4602      	mov	r2, r0
 800e326:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e328:	6a21      	ldr	r1, [r4, #32]
 800e32a:	4628      	mov	r0, r5
 800e32c:	47b0      	blx	r6
 800e32e:	1c43      	adds	r3, r0, #1
 800e330:	89a3      	ldrh	r3, [r4, #12]
 800e332:	d106      	bne.n	800e342 <__sflush_r+0x66>
 800e334:	6829      	ldr	r1, [r5, #0]
 800e336:	291d      	cmp	r1, #29
 800e338:	d82c      	bhi.n	800e394 <__sflush_r+0xb8>
 800e33a:	4a2a      	ldr	r2, [pc, #168]	; (800e3e4 <__sflush_r+0x108>)
 800e33c:	40ca      	lsrs	r2, r1
 800e33e:	07d6      	lsls	r6, r2, #31
 800e340:	d528      	bpl.n	800e394 <__sflush_r+0xb8>
 800e342:	2200      	movs	r2, #0
 800e344:	6062      	str	r2, [r4, #4]
 800e346:	04d9      	lsls	r1, r3, #19
 800e348:	6922      	ldr	r2, [r4, #16]
 800e34a:	6022      	str	r2, [r4, #0]
 800e34c:	d504      	bpl.n	800e358 <__sflush_r+0x7c>
 800e34e:	1c42      	adds	r2, r0, #1
 800e350:	d101      	bne.n	800e356 <__sflush_r+0x7a>
 800e352:	682b      	ldr	r3, [r5, #0]
 800e354:	b903      	cbnz	r3, 800e358 <__sflush_r+0x7c>
 800e356:	6560      	str	r0, [r4, #84]	; 0x54
 800e358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e35a:	602f      	str	r7, [r5, #0]
 800e35c:	2900      	cmp	r1, #0
 800e35e:	d0ca      	beq.n	800e2f6 <__sflush_r+0x1a>
 800e360:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e364:	4299      	cmp	r1, r3
 800e366:	d002      	beq.n	800e36e <__sflush_r+0x92>
 800e368:	4628      	mov	r0, r5
 800e36a:	f7ff f949 	bl	800d600 <_free_r>
 800e36e:	2000      	movs	r0, #0
 800e370:	6360      	str	r0, [r4, #52]	; 0x34
 800e372:	e7c1      	b.n	800e2f8 <__sflush_r+0x1c>
 800e374:	6a21      	ldr	r1, [r4, #32]
 800e376:	2301      	movs	r3, #1
 800e378:	4628      	mov	r0, r5
 800e37a:	47b0      	blx	r6
 800e37c:	1c41      	adds	r1, r0, #1
 800e37e:	d1c7      	bne.n	800e310 <__sflush_r+0x34>
 800e380:	682b      	ldr	r3, [r5, #0]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d0c4      	beq.n	800e310 <__sflush_r+0x34>
 800e386:	2b1d      	cmp	r3, #29
 800e388:	d001      	beq.n	800e38e <__sflush_r+0xb2>
 800e38a:	2b16      	cmp	r3, #22
 800e38c:	d101      	bne.n	800e392 <__sflush_r+0xb6>
 800e38e:	602f      	str	r7, [r5, #0]
 800e390:	e7b1      	b.n	800e2f6 <__sflush_r+0x1a>
 800e392:	89a3      	ldrh	r3, [r4, #12]
 800e394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e398:	81a3      	strh	r3, [r4, #12]
 800e39a:	e7ad      	b.n	800e2f8 <__sflush_r+0x1c>
 800e39c:	690f      	ldr	r7, [r1, #16]
 800e39e:	2f00      	cmp	r7, #0
 800e3a0:	d0a9      	beq.n	800e2f6 <__sflush_r+0x1a>
 800e3a2:	0793      	lsls	r3, r2, #30
 800e3a4:	680e      	ldr	r6, [r1, #0]
 800e3a6:	bf08      	it	eq
 800e3a8:	694b      	ldreq	r3, [r1, #20]
 800e3aa:	600f      	str	r7, [r1, #0]
 800e3ac:	bf18      	it	ne
 800e3ae:	2300      	movne	r3, #0
 800e3b0:	eba6 0807 	sub.w	r8, r6, r7
 800e3b4:	608b      	str	r3, [r1, #8]
 800e3b6:	f1b8 0f00 	cmp.w	r8, #0
 800e3ba:	dd9c      	ble.n	800e2f6 <__sflush_r+0x1a>
 800e3bc:	6a21      	ldr	r1, [r4, #32]
 800e3be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e3c0:	4643      	mov	r3, r8
 800e3c2:	463a      	mov	r2, r7
 800e3c4:	4628      	mov	r0, r5
 800e3c6:	47b0      	blx	r6
 800e3c8:	2800      	cmp	r0, #0
 800e3ca:	dc06      	bgt.n	800e3da <__sflush_r+0xfe>
 800e3cc:	89a3      	ldrh	r3, [r4, #12]
 800e3ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3d2:	81a3      	strh	r3, [r4, #12]
 800e3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3d8:	e78e      	b.n	800e2f8 <__sflush_r+0x1c>
 800e3da:	4407      	add	r7, r0
 800e3dc:	eba8 0800 	sub.w	r8, r8, r0
 800e3e0:	e7e9      	b.n	800e3b6 <__sflush_r+0xda>
 800e3e2:	bf00      	nop
 800e3e4:	20400001 	.word	0x20400001

0800e3e8 <_fflush_r>:
 800e3e8:	b538      	push	{r3, r4, r5, lr}
 800e3ea:	690b      	ldr	r3, [r1, #16]
 800e3ec:	4605      	mov	r5, r0
 800e3ee:	460c      	mov	r4, r1
 800e3f0:	b913      	cbnz	r3, 800e3f8 <_fflush_r+0x10>
 800e3f2:	2500      	movs	r5, #0
 800e3f4:	4628      	mov	r0, r5
 800e3f6:	bd38      	pop	{r3, r4, r5, pc}
 800e3f8:	b118      	cbz	r0, 800e402 <_fflush_r+0x1a>
 800e3fa:	6983      	ldr	r3, [r0, #24]
 800e3fc:	b90b      	cbnz	r3, 800e402 <_fflush_r+0x1a>
 800e3fe:	f000 f887 	bl	800e510 <__sinit>
 800e402:	4b14      	ldr	r3, [pc, #80]	; (800e454 <_fflush_r+0x6c>)
 800e404:	429c      	cmp	r4, r3
 800e406:	d11b      	bne.n	800e440 <_fflush_r+0x58>
 800e408:	686c      	ldr	r4, [r5, #4]
 800e40a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d0ef      	beq.n	800e3f2 <_fflush_r+0xa>
 800e412:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e414:	07d0      	lsls	r0, r2, #31
 800e416:	d404      	bmi.n	800e422 <_fflush_r+0x3a>
 800e418:	0599      	lsls	r1, r3, #22
 800e41a:	d402      	bmi.n	800e422 <_fflush_r+0x3a>
 800e41c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e41e:	f000 f927 	bl	800e670 <__retarget_lock_acquire_recursive>
 800e422:	4628      	mov	r0, r5
 800e424:	4621      	mov	r1, r4
 800e426:	f7ff ff59 	bl	800e2dc <__sflush_r>
 800e42a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e42c:	07da      	lsls	r2, r3, #31
 800e42e:	4605      	mov	r5, r0
 800e430:	d4e0      	bmi.n	800e3f4 <_fflush_r+0xc>
 800e432:	89a3      	ldrh	r3, [r4, #12]
 800e434:	059b      	lsls	r3, r3, #22
 800e436:	d4dd      	bmi.n	800e3f4 <_fflush_r+0xc>
 800e438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e43a:	f000 f91a 	bl	800e672 <__retarget_lock_release_recursive>
 800e43e:	e7d9      	b.n	800e3f4 <_fflush_r+0xc>
 800e440:	4b05      	ldr	r3, [pc, #20]	; (800e458 <_fflush_r+0x70>)
 800e442:	429c      	cmp	r4, r3
 800e444:	d101      	bne.n	800e44a <_fflush_r+0x62>
 800e446:	68ac      	ldr	r4, [r5, #8]
 800e448:	e7df      	b.n	800e40a <_fflush_r+0x22>
 800e44a:	4b04      	ldr	r3, [pc, #16]	; (800e45c <_fflush_r+0x74>)
 800e44c:	429c      	cmp	r4, r3
 800e44e:	bf08      	it	eq
 800e450:	68ec      	ldreq	r4, [r5, #12]
 800e452:	e7da      	b.n	800e40a <_fflush_r+0x22>
 800e454:	0800f374 	.word	0x0800f374
 800e458:	0800f394 	.word	0x0800f394
 800e45c:	0800f354 	.word	0x0800f354

0800e460 <std>:
 800e460:	2300      	movs	r3, #0
 800e462:	b510      	push	{r4, lr}
 800e464:	4604      	mov	r4, r0
 800e466:	e9c0 3300 	strd	r3, r3, [r0]
 800e46a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e46e:	6083      	str	r3, [r0, #8]
 800e470:	8181      	strh	r1, [r0, #12]
 800e472:	6643      	str	r3, [r0, #100]	; 0x64
 800e474:	81c2      	strh	r2, [r0, #14]
 800e476:	6183      	str	r3, [r0, #24]
 800e478:	4619      	mov	r1, r3
 800e47a:	2208      	movs	r2, #8
 800e47c:	305c      	adds	r0, #92	; 0x5c
 800e47e:	f7fb fc8f 	bl	8009da0 <memset>
 800e482:	4b05      	ldr	r3, [pc, #20]	; (800e498 <std+0x38>)
 800e484:	6263      	str	r3, [r4, #36]	; 0x24
 800e486:	4b05      	ldr	r3, [pc, #20]	; (800e49c <std+0x3c>)
 800e488:	62a3      	str	r3, [r4, #40]	; 0x28
 800e48a:	4b05      	ldr	r3, [pc, #20]	; (800e4a0 <std+0x40>)
 800e48c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e48e:	4b05      	ldr	r3, [pc, #20]	; (800e4a4 <std+0x44>)
 800e490:	6224      	str	r4, [r4, #32]
 800e492:	6323      	str	r3, [r4, #48]	; 0x30
 800e494:	bd10      	pop	{r4, pc}
 800e496:	bf00      	nop
 800e498:	0800aae1 	.word	0x0800aae1
 800e49c:	0800ab07 	.word	0x0800ab07
 800e4a0:	0800ab3f 	.word	0x0800ab3f
 800e4a4:	0800ab63 	.word	0x0800ab63

0800e4a8 <_cleanup_r>:
 800e4a8:	4901      	ldr	r1, [pc, #4]	; (800e4b0 <_cleanup_r+0x8>)
 800e4aa:	f000 b8c1 	b.w	800e630 <_fwalk_reent>
 800e4ae:	bf00      	nop
 800e4b0:	0800e3e9 	.word	0x0800e3e9

0800e4b4 <__sfmoreglue>:
 800e4b4:	b570      	push	{r4, r5, r6, lr}
 800e4b6:	1e4a      	subs	r2, r1, #1
 800e4b8:	2568      	movs	r5, #104	; 0x68
 800e4ba:	4355      	muls	r5, r2
 800e4bc:	460e      	mov	r6, r1
 800e4be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e4c2:	f7ff f8ed 	bl	800d6a0 <_malloc_r>
 800e4c6:	4604      	mov	r4, r0
 800e4c8:	b140      	cbz	r0, 800e4dc <__sfmoreglue+0x28>
 800e4ca:	2100      	movs	r1, #0
 800e4cc:	e9c0 1600 	strd	r1, r6, [r0]
 800e4d0:	300c      	adds	r0, #12
 800e4d2:	60a0      	str	r0, [r4, #8]
 800e4d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e4d8:	f7fb fc62 	bl	8009da0 <memset>
 800e4dc:	4620      	mov	r0, r4
 800e4de:	bd70      	pop	{r4, r5, r6, pc}

0800e4e0 <__sfp_lock_acquire>:
 800e4e0:	4801      	ldr	r0, [pc, #4]	; (800e4e8 <__sfp_lock_acquire+0x8>)
 800e4e2:	f000 b8c5 	b.w	800e670 <__retarget_lock_acquire_recursive>
 800e4e6:	bf00      	nop
 800e4e8:	20000b70 	.word	0x20000b70

0800e4ec <__sfp_lock_release>:
 800e4ec:	4801      	ldr	r0, [pc, #4]	; (800e4f4 <__sfp_lock_release+0x8>)
 800e4ee:	f000 b8c0 	b.w	800e672 <__retarget_lock_release_recursive>
 800e4f2:	bf00      	nop
 800e4f4:	20000b70 	.word	0x20000b70

0800e4f8 <__sinit_lock_acquire>:
 800e4f8:	4801      	ldr	r0, [pc, #4]	; (800e500 <__sinit_lock_acquire+0x8>)
 800e4fa:	f000 b8b9 	b.w	800e670 <__retarget_lock_acquire_recursive>
 800e4fe:	bf00      	nop
 800e500:	20000b6b 	.word	0x20000b6b

0800e504 <__sinit_lock_release>:
 800e504:	4801      	ldr	r0, [pc, #4]	; (800e50c <__sinit_lock_release+0x8>)
 800e506:	f000 b8b4 	b.w	800e672 <__retarget_lock_release_recursive>
 800e50a:	bf00      	nop
 800e50c:	20000b6b 	.word	0x20000b6b

0800e510 <__sinit>:
 800e510:	b510      	push	{r4, lr}
 800e512:	4604      	mov	r4, r0
 800e514:	f7ff fff0 	bl	800e4f8 <__sinit_lock_acquire>
 800e518:	69a3      	ldr	r3, [r4, #24]
 800e51a:	b11b      	cbz	r3, 800e524 <__sinit+0x14>
 800e51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e520:	f7ff bff0 	b.w	800e504 <__sinit_lock_release>
 800e524:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e528:	6523      	str	r3, [r4, #80]	; 0x50
 800e52a:	4b13      	ldr	r3, [pc, #76]	; (800e578 <__sinit+0x68>)
 800e52c:	4a13      	ldr	r2, [pc, #76]	; (800e57c <__sinit+0x6c>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	62a2      	str	r2, [r4, #40]	; 0x28
 800e532:	42a3      	cmp	r3, r4
 800e534:	bf04      	itt	eq
 800e536:	2301      	moveq	r3, #1
 800e538:	61a3      	streq	r3, [r4, #24]
 800e53a:	4620      	mov	r0, r4
 800e53c:	f000 f820 	bl	800e580 <__sfp>
 800e540:	6060      	str	r0, [r4, #4]
 800e542:	4620      	mov	r0, r4
 800e544:	f000 f81c 	bl	800e580 <__sfp>
 800e548:	60a0      	str	r0, [r4, #8]
 800e54a:	4620      	mov	r0, r4
 800e54c:	f000 f818 	bl	800e580 <__sfp>
 800e550:	2200      	movs	r2, #0
 800e552:	60e0      	str	r0, [r4, #12]
 800e554:	2104      	movs	r1, #4
 800e556:	6860      	ldr	r0, [r4, #4]
 800e558:	f7ff ff82 	bl	800e460 <std>
 800e55c:	68a0      	ldr	r0, [r4, #8]
 800e55e:	2201      	movs	r2, #1
 800e560:	2109      	movs	r1, #9
 800e562:	f7ff ff7d 	bl	800e460 <std>
 800e566:	68e0      	ldr	r0, [r4, #12]
 800e568:	2202      	movs	r2, #2
 800e56a:	2112      	movs	r1, #18
 800e56c:	f7ff ff78 	bl	800e460 <std>
 800e570:	2301      	movs	r3, #1
 800e572:	61a3      	str	r3, [r4, #24]
 800e574:	e7d2      	b.n	800e51c <__sinit+0xc>
 800e576:	bf00      	nop
 800e578:	0800eee8 	.word	0x0800eee8
 800e57c:	0800e4a9 	.word	0x0800e4a9

0800e580 <__sfp>:
 800e580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e582:	4607      	mov	r7, r0
 800e584:	f7ff ffac 	bl	800e4e0 <__sfp_lock_acquire>
 800e588:	4b1e      	ldr	r3, [pc, #120]	; (800e604 <__sfp+0x84>)
 800e58a:	681e      	ldr	r6, [r3, #0]
 800e58c:	69b3      	ldr	r3, [r6, #24]
 800e58e:	b913      	cbnz	r3, 800e596 <__sfp+0x16>
 800e590:	4630      	mov	r0, r6
 800e592:	f7ff ffbd 	bl	800e510 <__sinit>
 800e596:	3648      	adds	r6, #72	; 0x48
 800e598:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e59c:	3b01      	subs	r3, #1
 800e59e:	d503      	bpl.n	800e5a8 <__sfp+0x28>
 800e5a0:	6833      	ldr	r3, [r6, #0]
 800e5a2:	b30b      	cbz	r3, 800e5e8 <__sfp+0x68>
 800e5a4:	6836      	ldr	r6, [r6, #0]
 800e5a6:	e7f7      	b.n	800e598 <__sfp+0x18>
 800e5a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e5ac:	b9d5      	cbnz	r5, 800e5e4 <__sfp+0x64>
 800e5ae:	4b16      	ldr	r3, [pc, #88]	; (800e608 <__sfp+0x88>)
 800e5b0:	60e3      	str	r3, [r4, #12]
 800e5b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e5b6:	6665      	str	r5, [r4, #100]	; 0x64
 800e5b8:	f000 f859 	bl	800e66e <__retarget_lock_init_recursive>
 800e5bc:	f7ff ff96 	bl	800e4ec <__sfp_lock_release>
 800e5c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e5c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e5c8:	6025      	str	r5, [r4, #0]
 800e5ca:	61a5      	str	r5, [r4, #24]
 800e5cc:	2208      	movs	r2, #8
 800e5ce:	4629      	mov	r1, r5
 800e5d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e5d4:	f7fb fbe4 	bl	8009da0 <memset>
 800e5d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e5dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e5e0:	4620      	mov	r0, r4
 800e5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5e4:	3468      	adds	r4, #104	; 0x68
 800e5e6:	e7d9      	b.n	800e59c <__sfp+0x1c>
 800e5e8:	2104      	movs	r1, #4
 800e5ea:	4638      	mov	r0, r7
 800e5ec:	f7ff ff62 	bl	800e4b4 <__sfmoreglue>
 800e5f0:	4604      	mov	r4, r0
 800e5f2:	6030      	str	r0, [r6, #0]
 800e5f4:	2800      	cmp	r0, #0
 800e5f6:	d1d5      	bne.n	800e5a4 <__sfp+0x24>
 800e5f8:	f7ff ff78 	bl	800e4ec <__sfp_lock_release>
 800e5fc:	230c      	movs	r3, #12
 800e5fe:	603b      	str	r3, [r7, #0]
 800e600:	e7ee      	b.n	800e5e0 <__sfp+0x60>
 800e602:	bf00      	nop
 800e604:	0800eee8 	.word	0x0800eee8
 800e608:	ffff0001 	.word	0xffff0001

0800e60c <fiprintf>:
 800e60c:	b40e      	push	{r1, r2, r3}
 800e60e:	b503      	push	{r0, r1, lr}
 800e610:	4601      	mov	r1, r0
 800e612:	ab03      	add	r3, sp, #12
 800e614:	4805      	ldr	r0, [pc, #20]	; (800e62c <fiprintf+0x20>)
 800e616:	f853 2b04 	ldr.w	r2, [r3], #4
 800e61a:	6800      	ldr	r0, [r0, #0]
 800e61c:	9301      	str	r3, [sp, #4]
 800e61e:	f000 f89f 	bl	800e760 <_vfiprintf_r>
 800e622:	b002      	add	sp, #8
 800e624:	f85d eb04 	ldr.w	lr, [sp], #4
 800e628:	b003      	add	sp, #12
 800e62a:	4770      	bx	lr
 800e62c:	20000058 	.word	0x20000058

0800e630 <_fwalk_reent>:
 800e630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e634:	4606      	mov	r6, r0
 800e636:	4688      	mov	r8, r1
 800e638:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e63c:	2700      	movs	r7, #0
 800e63e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e642:	f1b9 0901 	subs.w	r9, r9, #1
 800e646:	d505      	bpl.n	800e654 <_fwalk_reent+0x24>
 800e648:	6824      	ldr	r4, [r4, #0]
 800e64a:	2c00      	cmp	r4, #0
 800e64c:	d1f7      	bne.n	800e63e <_fwalk_reent+0xe>
 800e64e:	4638      	mov	r0, r7
 800e650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e654:	89ab      	ldrh	r3, [r5, #12]
 800e656:	2b01      	cmp	r3, #1
 800e658:	d907      	bls.n	800e66a <_fwalk_reent+0x3a>
 800e65a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e65e:	3301      	adds	r3, #1
 800e660:	d003      	beq.n	800e66a <_fwalk_reent+0x3a>
 800e662:	4629      	mov	r1, r5
 800e664:	4630      	mov	r0, r6
 800e666:	47c0      	blx	r8
 800e668:	4307      	orrs	r7, r0
 800e66a:	3568      	adds	r5, #104	; 0x68
 800e66c:	e7e9      	b.n	800e642 <_fwalk_reent+0x12>

0800e66e <__retarget_lock_init_recursive>:
 800e66e:	4770      	bx	lr

0800e670 <__retarget_lock_acquire_recursive>:
 800e670:	4770      	bx	lr

0800e672 <__retarget_lock_release_recursive>:
 800e672:	4770      	bx	lr

0800e674 <memmove>:
 800e674:	4288      	cmp	r0, r1
 800e676:	b510      	push	{r4, lr}
 800e678:	eb01 0402 	add.w	r4, r1, r2
 800e67c:	d902      	bls.n	800e684 <memmove+0x10>
 800e67e:	4284      	cmp	r4, r0
 800e680:	4623      	mov	r3, r4
 800e682:	d807      	bhi.n	800e694 <memmove+0x20>
 800e684:	1e43      	subs	r3, r0, #1
 800e686:	42a1      	cmp	r1, r4
 800e688:	d008      	beq.n	800e69c <memmove+0x28>
 800e68a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e68e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e692:	e7f8      	b.n	800e686 <memmove+0x12>
 800e694:	4402      	add	r2, r0
 800e696:	4601      	mov	r1, r0
 800e698:	428a      	cmp	r2, r1
 800e69a:	d100      	bne.n	800e69e <memmove+0x2a>
 800e69c:	bd10      	pop	{r4, pc}
 800e69e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e6a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e6a6:	e7f7      	b.n	800e698 <memmove+0x24>

0800e6a8 <__malloc_lock>:
 800e6a8:	4801      	ldr	r0, [pc, #4]	; (800e6b0 <__malloc_lock+0x8>)
 800e6aa:	f7ff bfe1 	b.w	800e670 <__retarget_lock_acquire_recursive>
 800e6ae:	bf00      	nop
 800e6b0:	20000b6c 	.word	0x20000b6c

0800e6b4 <__malloc_unlock>:
 800e6b4:	4801      	ldr	r0, [pc, #4]	; (800e6bc <__malloc_unlock+0x8>)
 800e6b6:	f7ff bfdc 	b.w	800e672 <__retarget_lock_release_recursive>
 800e6ba:	bf00      	nop
 800e6bc:	20000b6c 	.word	0x20000b6c

0800e6c0 <_realloc_r>:
 800e6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6c2:	4607      	mov	r7, r0
 800e6c4:	4614      	mov	r4, r2
 800e6c6:	460e      	mov	r6, r1
 800e6c8:	b921      	cbnz	r1, 800e6d4 <_realloc_r+0x14>
 800e6ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e6ce:	4611      	mov	r1, r2
 800e6d0:	f7fe bfe6 	b.w	800d6a0 <_malloc_r>
 800e6d4:	b922      	cbnz	r2, 800e6e0 <_realloc_r+0x20>
 800e6d6:	f7fe ff93 	bl	800d600 <_free_r>
 800e6da:	4625      	mov	r5, r4
 800e6dc:	4628      	mov	r0, r5
 800e6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6e0:	f000 fa9a 	bl	800ec18 <_malloc_usable_size_r>
 800e6e4:	42a0      	cmp	r0, r4
 800e6e6:	d20f      	bcs.n	800e708 <_realloc_r+0x48>
 800e6e8:	4621      	mov	r1, r4
 800e6ea:	4638      	mov	r0, r7
 800e6ec:	f7fe ffd8 	bl	800d6a0 <_malloc_r>
 800e6f0:	4605      	mov	r5, r0
 800e6f2:	2800      	cmp	r0, #0
 800e6f4:	d0f2      	beq.n	800e6dc <_realloc_r+0x1c>
 800e6f6:	4631      	mov	r1, r6
 800e6f8:	4622      	mov	r2, r4
 800e6fa:	f7fe faa7 	bl	800cc4c <memcpy>
 800e6fe:	4631      	mov	r1, r6
 800e700:	4638      	mov	r0, r7
 800e702:	f7fe ff7d 	bl	800d600 <_free_r>
 800e706:	e7e9      	b.n	800e6dc <_realloc_r+0x1c>
 800e708:	4635      	mov	r5, r6
 800e70a:	e7e7      	b.n	800e6dc <_realloc_r+0x1c>

0800e70c <__sfputc_r>:
 800e70c:	6893      	ldr	r3, [r2, #8]
 800e70e:	3b01      	subs	r3, #1
 800e710:	2b00      	cmp	r3, #0
 800e712:	b410      	push	{r4}
 800e714:	6093      	str	r3, [r2, #8]
 800e716:	da08      	bge.n	800e72a <__sfputc_r+0x1e>
 800e718:	6994      	ldr	r4, [r2, #24]
 800e71a:	42a3      	cmp	r3, r4
 800e71c:	db01      	blt.n	800e722 <__sfputc_r+0x16>
 800e71e:	290a      	cmp	r1, #10
 800e720:	d103      	bne.n	800e72a <__sfputc_r+0x1e>
 800e722:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e726:	f000 b94b 	b.w	800e9c0 <__swbuf_r>
 800e72a:	6813      	ldr	r3, [r2, #0]
 800e72c:	1c58      	adds	r0, r3, #1
 800e72e:	6010      	str	r0, [r2, #0]
 800e730:	7019      	strb	r1, [r3, #0]
 800e732:	4608      	mov	r0, r1
 800e734:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e738:	4770      	bx	lr

0800e73a <__sfputs_r>:
 800e73a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e73c:	4606      	mov	r6, r0
 800e73e:	460f      	mov	r7, r1
 800e740:	4614      	mov	r4, r2
 800e742:	18d5      	adds	r5, r2, r3
 800e744:	42ac      	cmp	r4, r5
 800e746:	d101      	bne.n	800e74c <__sfputs_r+0x12>
 800e748:	2000      	movs	r0, #0
 800e74a:	e007      	b.n	800e75c <__sfputs_r+0x22>
 800e74c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e750:	463a      	mov	r2, r7
 800e752:	4630      	mov	r0, r6
 800e754:	f7ff ffda 	bl	800e70c <__sfputc_r>
 800e758:	1c43      	adds	r3, r0, #1
 800e75a:	d1f3      	bne.n	800e744 <__sfputs_r+0xa>
 800e75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e760 <_vfiprintf_r>:
 800e760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e764:	460d      	mov	r5, r1
 800e766:	b09d      	sub	sp, #116	; 0x74
 800e768:	4614      	mov	r4, r2
 800e76a:	4698      	mov	r8, r3
 800e76c:	4606      	mov	r6, r0
 800e76e:	b118      	cbz	r0, 800e778 <_vfiprintf_r+0x18>
 800e770:	6983      	ldr	r3, [r0, #24]
 800e772:	b90b      	cbnz	r3, 800e778 <_vfiprintf_r+0x18>
 800e774:	f7ff fecc 	bl	800e510 <__sinit>
 800e778:	4b89      	ldr	r3, [pc, #548]	; (800e9a0 <_vfiprintf_r+0x240>)
 800e77a:	429d      	cmp	r5, r3
 800e77c:	d11b      	bne.n	800e7b6 <_vfiprintf_r+0x56>
 800e77e:	6875      	ldr	r5, [r6, #4]
 800e780:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e782:	07d9      	lsls	r1, r3, #31
 800e784:	d405      	bmi.n	800e792 <_vfiprintf_r+0x32>
 800e786:	89ab      	ldrh	r3, [r5, #12]
 800e788:	059a      	lsls	r2, r3, #22
 800e78a:	d402      	bmi.n	800e792 <_vfiprintf_r+0x32>
 800e78c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e78e:	f7ff ff6f 	bl	800e670 <__retarget_lock_acquire_recursive>
 800e792:	89ab      	ldrh	r3, [r5, #12]
 800e794:	071b      	lsls	r3, r3, #28
 800e796:	d501      	bpl.n	800e79c <_vfiprintf_r+0x3c>
 800e798:	692b      	ldr	r3, [r5, #16]
 800e79a:	b9eb      	cbnz	r3, 800e7d8 <_vfiprintf_r+0x78>
 800e79c:	4629      	mov	r1, r5
 800e79e:	4630      	mov	r0, r6
 800e7a0:	f000 f960 	bl	800ea64 <__swsetup_r>
 800e7a4:	b1c0      	cbz	r0, 800e7d8 <_vfiprintf_r+0x78>
 800e7a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7a8:	07dc      	lsls	r4, r3, #31
 800e7aa:	d50e      	bpl.n	800e7ca <_vfiprintf_r+0x6a>
 800e7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e7b0:	b01d      	add	sp, #116	; 0x74
 800e7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7b6:	4b7b      	ldr	r3, [pc, #492]	; (800e9a4 <_vfiprintf_r+0x244>)
 800e7b8:	429d      	cmp	r5, r3
 800e7ba:	d101      	bne.n	800e7c0 <_vfiprintf_r+0x60>
 800e7bc:	68b5      	ldr	r5, [r6, #8]
 800e7be:	e7df      	b.n	800e780 <_vfiprintf_r+0x20>
 800e7c0:	4b79      	ldr	r3, [pc, #484]	; (800e9a8 <_vfiprintf_r+0x248>)
 800e7c2:	429d      	cmp	r5, r3
 800e7c4:	bf08      	it	eq
 800e7c6:	68f5      	ldreq	r5, [r6, #12]
 800e7c8:	e7da      	b.n	800e780 <_vfiprintf_r+0x20>
 800e7ca:	89ab      	ldrh	r3, [r5, #12]
 800e7cc:	0598      	lsls	r0, r3, #22
 800e7ce:	d4ed      	bmi.n	800e7ac <_vfiprintf_r+0x4c>
 800e7d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7d2:	f7ff ff4e 	bl	800e672 <__retarget_lock_release_recursive>
 800e7d6:	e7e9      	b.n	800e7ac <_vfiprintf_r+0x4c>
 800e7d8:	2300      	movs	r3, #0
 800e7da:	9309      	str	r3, [sp, #36]	; 0x24
 800e7dc:	2320      	movs	r3, #32
 800e7de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7e6:	2330      	movs	r3, #48	; 0x30
 800e7e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e9ac <_vfiprintf_r+0x24c>
 800e7ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7f0:	f04f 0901 	mov.w	r9, #1
 800e7f4:	4623      	mov	r3, r4
 800e7f6:	469a      	mov	sl, r3
 800e7f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7fc:	b10a      	cbz	r2, 800e802 <_vfiprintf_r+0xa2>
 800e7fe:	2a25      	cmp	r2, #37	; 0x25
 800e800:	d1f9      	bne.n	800e7f6 <_vfiprintf_r+0x96>
 800e802:	ebba 0b04 	subs.w	fp, sl, r4
 800e806:	d00b      	beq.n	800e820 <_vfiprintf_r+0xc0>
 800e808:	465b      	mov	r3, fp
 800e80a:	4622      	mov	r2, r4
 800e80c:	4629      	mov	r1, r5
 800e80e:	4630      	mov	r0, r6
 800e810:	f7ff ff93 	bl	800e73a <__sfputs_r>
 800e814:	3001      	adds	r0, #1
 800e816:	f000 80aa 	beq.w	800e96e <_vfiprintf_r+0x20e>
 800e81a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e81c:	445a      	add	r2, fp
 800e81e:	9209      	str	r2, [sp, #36]	; 0x24
 800e820:	f89a 3000 	ldrb.w	r3, [sl]
 800e824:	2b00      	cmp	r3, #0
 800e826:	f000 80a2 	beq.w	800e96e <_vfiprintf_r+0x20e>
 800e82a:	2300      	movs	r3, #0
 800e82c:	f04f 32ff 	mov.w	r2, #4294967295
 800e830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e834:	f10a 0a01 	add.w	sl, sl, #1
 800e838:	9304      	str	r3, [sp, #16]
 800e83a:	9307      	str	r3, [sp, #28]
 800e83c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e840:	931a      	str	r3, [sp, #104]	; 0x68
 800e842:	4654      	mov	r4, sl
 800e844:	2205      	movs	r2, #5
 800e846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e84a:	4858      	ldr	r0, [pc, #352]	; (800e9ac <_vfiprintf_r+0x24c>)
 800e84c:	f7f1 fd10 	bl	8000270 <memchr>
 800e850:	9a04      	ldr	r2, [sp, #16]
 800e852:	b9d8      	cbnz	r0, 800e88c <_vfiprintf_r+0x12c>
 800e854:	06d1      	lsls	r1, r2, #27
 800e856:	bf44      	itt	mi
 800e858:	2320      	movmi	r3, #32
 800e85a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e85e:	0713      	lsls	r3, r2, #28
 800e860:	bf44      	itt	mi
 800e862:	232b      	movmi	r3, #43	; 0x2b
 800e864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e868:	f89a 3000 	ldrb.w	r3, [sl]
 800e86c:	2b2a      	cmp	r3, #42	; 0x2a
 800e86e:	d015      	beq.n	800e89c <_vfiprintf_r+0x13c>
 800e870:	9a07      	ldr	r2, [sp, #28]
 800e872:	4654      	mov	r4, sl
 800e874:	2000      	movs	r0, #0
 800e876:	f04f 0c0a 	mov.w	ip, #10
 800e87a:	4621      	mov	r1, r4
 800e87c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e880:	3b30      	subs	r3, #48	; 0x30
 800e882:	2b09      	cmp	r3, #9
 800e884:	d94e      	bls.n	800e924 <_vfiprintf_r+0x1c4>
 800e886:	b1b0      	cbz	r0, 800e8b6 <_vfiprintf_r+0x156>
 800e888:	9207      	str	r2, [sp, #28]
 800e88a:	e014      	b.n	800e8b6 <_vfiprintf_r+0x156>
 800e88c:	eba0 0308 	sub.w	r3, r0, r8
 800e890:	fa09 f303 	lsl.w	r3, r9, r3
 800e894:	4313      	orrs	r3, r2
 800e896:	9304      	str	r3, [sp, #16]
 800e898:	46a2      	mov	sl, r4
 800e89a:	e7d2      	b.n	800e842 <_vfiprintf_r+0xe2>
 800e89c:	9b03      	ldr	r3, [sp, #12]
 800e89e:	1d19      	adds	r1, r3, #4
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	9103      	str	r1, [sp, #12]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	bfbb      	ittet	lt
 800e8a8:	425b      	neglt	r3, r3
 800e8aa:	f042 0202 	orrlt.w	r2, r2, #2
 800e8ae:	9307      	strge	r3, [sp, #28]
 800e8b0:	9307      	strlt	r3, [sp, #28]
 800e8b2:	bfb8      	it	lt
 800e8b4:	9204      	strlt	r2, [sp, #16]
 800e8b6:	7823      	ldrb	r3, [r4, #0]
 800e8b8:	2b2e      	cmp	r3, #46	; 0x2e
 800e8ba:	d10c      	bne.n	800e8d6 <_vfiprintf_r+0x176>
 800e8bc:	7863      	ldrb	r3, [r4, #1]
 800e8be:	2b2a      	cmp	r3, #42	; 0x2a
 800e8c0:	d135      	bne.n	800e92e <_vfiprintf_r+0x1ce>
 800e8c2:	9b03      	ldr	r3, [sp, #12]
 800e8c4:	1d1a      	adds	r2, r3, #4
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	9203      	str	r2, [sp, #12]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	bfb8      	it	lt
 800e8ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800e8d2:	3402      	adds	r4, #2
 800e8d4:	9305      	str	r3, [sp, #20]
 800e8d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e9bc <_vfiprintf_r+0x25c>
 800e8da:	7821      	ldrb	r1, [r4, #0]
 800e8dc:	2203      	movs	r2, #3
 800e8de:	4650      	mov	r0, sl
 800e8e0:	f7f1 fcc6 	bl	8000270 <memchr>
 800e8e4:	b140      	cbz	r0, 800e8f8 <_vfiprintf_r+0x198>
 800e8e6:	2340      	movs	r3, #64	; 0x40
 800e8e8:	eba0 000a 	sub.w	r0, r0, sl
 800e8ec:	fa03 f000 	lsl.w	r0, r3, r0
 800e8f0:	9b04      	ldr	r3, [sp, #16]
 800e8f2:	4303      	orrs	r3, r0
 800e8f4:	3401      	adds	r4, #1
 800e8f6:	9304      	str	r3, [sp, #16]
 800e8f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8fc:	482c      	ldr	r0, [pc, #176]	; (800e9b0 <_vfiprintf_r+0x250>)
 800e8fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e902:	2206      	movs	r2, #6
 800e904:	f7f1 fcb4 	bl	8000270 <memchr>
 800e908:	2800      	cmp	r0, #0
 800e90a:	d03f      	beq.n	800e98c <_vfiprintf_r+0x22c>
 800e90c:	4b29      	ldr	r3, [pc, #164]	; (800e9b4 <_vfiprintf_r+0x254>)
 800e90e:	bb1b      	cbnz	r3, 800e958 <_vfiprintf_r+0x1f8>
 800e910:	9b03      	ldr	r3, [sp, #12]
 800e912:	3307      	adds	r3, #7
 800e914:	f023 0307 	bic.w	r3, r3, #7
 800e918:	3308      	adds	r3, #8
 800e91a:	9303      	str	r3, [sp, #12]
 800e91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e91e:	443b      	add	r3, r7
 800e920:	9309      	str	r3, [sp, #36]	; 0x24
 800e922:	e767      	b.n	800e7f4 <_vfiprintf_r+0x94>
 800e924:	fb0c 3202 	mla	r2, ip, r2, r3
 800e928:	460c      	mov	r4, r1
 800e92a:	2001      	movs	r0, #1
 800e92c:	e7a5      	b.n	800e87a <_vfiprintf_r+0x11a>
 800e92e:	2300      	movs	r3, #0
 800e930:	3401      	adds	r4, #1
 800e932:	9305      	str	r3, [sp, #20]
 800e934:	4619      	mov	r1, r3
 800e936:	f04f 0c0a 	mov.w	ip, #10
 800e93a:	4620      	mov	r0, r4
 800e93c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e940:	3a30      	subs	r2, #48	; 0x30
 800e942:	2a09      	cmp	r2, #9
 800e944:	d903      	bls.n	800e94e <_vfiprintf_r+0x1ee>
 800e946:	2b00      	cmp	r3, #0
 800e948:	d0c5      	beq.n	800e8d6 <_vfiprintf_r+0x176>
 800e94a:	9105      	str	r1, [sp, #20]
 800e94c:	e7c3      	b.n	800e8d6 <_vfiprintf_r+0x176>
 800e94e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e952:	4604      	mov	r4, r0
 800e954:	2301      	movs	r3, #1
 800e956:	e7f0      	b.n	800e93a <_vfiprintf_r+0x1da>
 800e958:	ab03      	add	r3, sp, #12
 800e95a:	9300      	str	r3, [sp, #0]
 800e95c:	462a      	mov	r2, r5
 800e95e:	4b16      	ldr	r3, [pc, #88]	; (800e9b8 <_vfiprintf_r+0x258>)
 800e960:	a904      	add	r1, sp, #16
 800e962:	4630      	mov	r0, r6
 800e964:	f7fb fab4 	bl	8009ed0 <_printf_float>
 800e968:	4607      	mov	r7, r0
 800e96a:	1c78      	adds	r0, r7, #1
 800e96c:	d1d6      	bne.n	800e91c <_vfiprintf_r+0x1bc>
 800e96e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e970:	07d9      	lsls	r1, r3, #31
 800e972:	d405      	bmi.n	800e980 <_vfiprintf_r+0x220>
 800e974:	89ab      	ldrh	r3, [r5, #12]
 800e976:	059a      	lsls	r2, r3, #22
 800e978:	d402      	bmi.n	800e980 <_vfiprintf_r+0x220>
 800e97a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e97c:	f7ff fe79 	bl	800e672 <__retarget_lock_release_recursive>
 800e980:	89ab      	ldrh	r3, [r5, #12]
 800e982:	065b      	lsls	r3, r3, #25
 800e984:	f53f af12 	bmi.w	800e7ac <_vfiprintf_r+0x4c>
 800e988:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e98a:	e711      	b.n	800e7b0 <_vfiprintf_r+0x50>
 800e98c:	ab03      	add	r3, sp, #12
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	462a      	mov	r2, r5
 800e992:	4b09      	ldr	r3, [pc, #36]	; (800e9b8 <_vfiprintf_r+0x258>)
 800e994:	a904      	add	r1, sp, #16
 800e996:	4630      	mov	r0, r6
 800e998:	f7fb fd26 	bl	800a3e8 <_printf_i>
 800e99c:	e7e4      	b.n	800e968 <_vfiprintf_r+0x208>
 800e99e:	bf00      	nop
 800e9a0:	0800f374 	.word	0x0800f374
 800e9a4:	0800f394 	.word	0x0800f394
 800e9a8:	0800f354 	.word	0x0800f354
 800e9ac:	0800f2ec 	.word	0x0800f2ec
 800e9b0:	0800f2f6 	.word	0x0800f2f6
 800e9b4:	08009ed1 	.word	0x08009ed1
 800e9b8:	0800e73b 	.word	0x0800e73b
 800e9bc:	0800f2f2 	.word	0x0800f2f2

0800e9c0 <__swbuf_r>:
 800e9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9c2:	460e      	mov	r6, r1
 800e9c4:	4614      	mov	r4, r2
 800e9c6:	4605      	mov	r5, r0
 800e9c8:	b118      	cbz	r0, 800e9d2 <__swbuf_r+0x12>
 800e9ca:	6983      	ldr	r3, [r0, #24]
 800e9cc:	b90b      	cbnz	r3, 800e9d2 <__swbuf_r+0x12>
 800e9ce:	f7ff fd9f 	bl	800e510 <__sinit>
 800e9d2:	4b21      	ldr	r3, [pc, #132]	; (800ea58 <__swbuf_r+0x98>)
 800e9d4:	429c      	cmp	r4, r3
 800e9d6:	d12b      	bne.n	800ea30 <__swbuf_r+0x70>
 800e9d8:	686c      	ldr	r4, [r5, #4]
 800e9da:	69a3      	ldr	r3, [r4, #24]
 800e9dc:	60a3      	str	r3, [r4, #8]
 800e9de:	89a3      	ldrh	r3, [r4, #12]
 800e9e0:	071a      	lsls	r2, r3, #28
 800e9e2:	d52f      	bpl.n	800ea44 <__swbuf_r+0x84>
 800e9e4:	6923      	ldr	r3, [r4, #16]
 800e9e6:	b36b      	cbz	r3, 800ea44 <__swbuf_r+0x84>
 800e9e8:	6923      	ldr	r3, [r4, #16]
 800e9ea:	6820      	ldr	r0, [r4, #0]
 800e9ec:	1ac0      	subs	r0, r0, r3
 800e9ee:	6963      	ldr	r3, [r4, #20]
 800e9f0:	b2f6      	uxtb	r6, r6
 800e9f2:	4283      	cmp	r3, r0
 800e9f4:	4637      	mov	r7, r6
 800e9f6:	dc04      	bgt.n	800ea02 <__swbuf_r+0x42>
 800e9f8:	4621      	mov	r1, r4
 800e9fa:	4628      	mov	r0, r5
 800e9fc:	f7ff fcf4 	bl	800e3e8 <_fflush_r>
 800ea00:	bb30      	cbnz	r0, 800ea50 <__swbuf_r+0x90>
 800ea02:	68a3      	ldr	r3, [r4, #8]
 800ea04:	3b01      	subs	r3, #1
 800ea06:	60a3      	str	r3, [r4, #8]
 800ea08:	6823      	ldr	r3, [r4, #0]
 800ea0a:	1c5a      	adds	r2, r3, #1
 800ea0c:	6022      	str	r2, [r4, #0]
 800ea0e:	701e      	strb	r6, [r3, #0]
 800ea10:	6963      	ldr	r3, [r4, #20]
 800ea12:	3001      	adds	r0, #1
 800ea14:	4283      	cmp	r3, r0
 800ea16:	d004      	beq.n	800ea22 <__swbuf_r+0x62>
 800ea18:	89a3      	ldrh	r3, [r4, #12]
 800ea1a:	07db      	lsls	r3, r3, #31
 800ea1c:	d506      	bpl.n	800ea2c <__swbuf_r+0x6c>
 800ea1e:	2e0a      	cmp	r6, #10
 800ea20:	d104      	bne.n	800ea2c <__swbuf_r+0x6c>
 800ea22:	4621      	mov	r1, r4
 800ea24:	4628      	mov	r0, r5
 800ea26:	f7ff fcdf 	bl	800e3e8 <_fflush_r>
 800ea2a:	b988      	cbnz	r0, 800ea50 <__swbuf_r+0x90>
 800ea2c:	4638      	mov	r0, r7
 800ea2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea30:	4b0a      	ldr	r3, [pc, #40]	; (800ea5c <__swbuf_r+0x9c>)
 800ea32:	429c      	cmp	r4, r3
 800ea34:	d101      	bne.n	800ea3a <__swbuf_r+0x7a>
 800ea36:	68ac      	ldr	r4, [r5, #8]
 800ea38:	e7cf      	b.n	800e9da <__swbuf_r+0x1a>
 800ea3a:	4b09      	ldr	r3, [pc, #36]	; (800ea60 <__swbuf_r+0xa0>)
 800ea3c:	429c      	cmp	r4, r3
 800ea3e:	bf08      	it	eq
 800ea40:	68ec      	ldreq	r4, [r5, #12]
 800ea42:	e7ca      	b.n	800e9da <__swbuf_r+0x1a>
 800ea44:	4621      	mov	r1, r4
 800ea46:	4628      	mov	r0, r5
 800ea48:	f000 f80c 	bl	800ea64 <__swsetup_r>
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	d0cb      	beq.n	800e9e8 <__swbuf_r+0x28>
 800ea50:	f04f 37ff 	mov.w	r7, #4294967295
 800ea54:	e7ea      	b.n	800ea2c <__swbuf_r+0x6c>
 800ea56:	bf00      	nop
 800ea58:	0800f374 	.word	0x0800f374
 800ea5c:	0800f394 	.word	0x0800f394
 800ea60:	0800f354 	.word	0x0800f354

0800ea64 <__swsetup_r>:
 800ea64:	4b32      	ldr	r3, [pc, #200]	; (800eb30 <__swsetup_r+0xcc>)
 800ea66:	b570      	push	{r4, r5, r6, lr}
 800ea68:	681d      	ldr	r5, [r3, #0]
 800ea6a:	4606      	mov	r6, r0
 800ea6c:	460c      	mov	r4, r1
 800ea6e:	b125      	cbz	r5, 800ea7a <__swsetup_r+0x16>
 800ea70:	69ab      	ldr	r3, [r5, #24]
 800ea72:	b913      	cbnz	r3, 800ea7a <__swsetup_r+0x16>
 800ea74:	4628      	mov	r0, r5
 800ea76:	f7ff fd4b 	bl	800e510 <__sinit>
 800ea7a:	4b2e      	ldr	r3, [pc, #184]	; (800eb34 <__swsetup_r+0xd0>)
 800ea7c:	429c      	cmp	r4, r3
 800ea7e:	d10f      	bne.n	800eaa0 <__swsetup_r+0x3c>
 800ea80:	686c      	ldr	r4, [r5, #4]
 800ea82:	89a3      	ldrh	r3, [r4, #12]
 800ea84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea88:	0719      	lsls	r1, r3, #28
 800ea8a:	d42c      	bmi.n	800eae6 <__swsetup_r+0x82>
 800ea8c:	06dd      	lsls	r5, r3, #27
 800ea8e:	d411      	bmi.n	800eab4 <__swsetup_r+0x50>
 800ea90:	2309      	movs	r3, #9
 800ea92:	6033      	str	r3, [r6, #0]
 800ea94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ea98:	81a3      	strh	r3, [r4, #12]
 800ea9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ea9e:	e03e      	b.n	800eb1e <__swsetup_r+0xba>
 800eaa0:	4b25      	ldr	r3, [pc, #148]	; (800eb38 <__swsetup_r+0xd4>)
 800eaa2:	429c      	cmp	r4, r3
 800eaa4:	d101      	bne.n	800eaaa <__swsetup_r+0x46>
 800eaa6:	68ac      	ldr	r4, [r5, #8]
 800eaa8:	e7eb      	b.n	800ea82 <__swsetup_r+0x1e>
 800eaaa:	4b24      	ldr	r3, [pc, #144]	; (800eb3c <__swsetup_r+0xd8>)
 800eaac:	429c      	cmp	r4, r3
 800eaae:	bf08      	it	eq
 800eab0:	68ec      	ldreq	r4, [r5, #12]
 800eab2:	e7e6      	b.n	800ea82 <__swsetup_r+0x1e>
 800eab4:	0758      	lsls	r0, r3, #29
 800eab6:	d512      	bpl.n	800eade <__swsetup_r+0x7a>
 800eab8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eaba:	b141      	cbz	r1, 800eace <__swsetup_r+0x6a>
 800eabc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eac0:	4299      	cmp	r1, r3
 800eac2:	d002      	beq.n	800eaca <__swsetup_r+0x66>
 800eac4:	4630      	mov	r0, r6
 800eac6:	f7fe fd9b 	bl	800d600 <_free_r>
 800eaca:	2300      	movs	r3, #0
 800eacc:	6363      	str	r3, [r4, #52]	; 0x34
 800eace:	89a3      	ldrh	r3, [r4, #12]
 800ead0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ead4:	81a3      	strh	r3, [r4, #12]
 800ead6:	2300      	movs	r3, #0
 800ead8:	6063      	str	r3, [r4, #4]
 800eada:	6923      	ldr	r3, [r4, #16]
 800eadc:	6023      	str	r3, [r4, #0]
 800eade:	89a3      	ldrh	r3, [r4, #12]
 800eae0:	f043 0308 	orr.w	r3, r3, #8
 800eae4:	81a3      	strh	r3, [r4, #12]
 800eae6:	6923      	ldr	r3, [r4, #16]
 800eae8:	b94b      	cbnz	r3, 800eafe <__swsetup_r+0x9a>
 800eaea:	89a3      	ldrh	r3, [r4, #12]
 800eaec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eaf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eaf4:	d003      	beq.n	800eafe <__swsetup_r+0x9a>
 800eaf6:	4621      	mov	r1, r4
 800eaf8:	4630      	mov	r0, r6
 800eafa:	f000 f84d 	bl	800eb98 <__smakebuf_r>
 800eafe:	89a0      	ldrh	r0, [r4, #12]
 800eb00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb04:	f010 0301 	ands.w	r3, r0, #1
 800eb08:	d00a      	beq.n	800eb20 <__swsetup_r+0xbc>
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	60a3      	str	r3, [r4, #8]
 800eb0e:	6963      	ldr	r3, [r4, #20]
 800eb10:	425b      	negs	r3, r3
 800eb12:	61a3      	str	r3, [r4, #24]
 800eb14:	6923      	ldr	r3, [r4, #16]
 800eb16:	b943      	cbnz	r3, 800eb2a <__swsetup_r+0xc6>
 800eb18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eb1c:	d1ba      	bne.n	800ea94 <__swsetup_r+0x30>
 800eb1e:	bd70      	pop	{r4, r5, r6, pc}
 800eb20:	0781      	lsls	r1, r0, #30
 800eb22:	bf58      	it	pl
 800eb24:	6963      	ldrpl	r3, [r4, #20]
 800eb26:	60a3      	str	r3, [r4, #8]
 800eb28:	e7f4      	b.n	800eb14 <__swsetup_r+0xb0>
 800eb2a:	2000      	movs	r0, #0
 800eb2c:	e7f7      	b.n	800eb1e <__swsetup_r+0xba>
 800eb2e:	bf00      	nop
 800eb30:	20000058 	.word	0x20000058
 800eb34:	0800f374 	.word	0x0800f374
 800eb38:	0800f394 	.word	0x0800f394
 800eb3c:	0800f354 	.word	0x0800f354

0800eb40 <abort>:
 800eb40:	b508      	push	{r3, lr}
 800eb42:	2006      	movs	r0, #6
 800eb44:	f000 f898 	bl	800ec78 <raise>
 800eb48:	2001      	movs	r0, #1
 800eb4a:	f7f3 fd41 	bl	80025d0 <_exit>

0800eb4e <__swhatbuf_r>:
 800eb4e:	b570      	push	{r4, r5, r6, lr}
 800eb50:	460e      	mov	r6, r1
 800eb52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb56:	2900      	cmp	r1, #0
 800eb58:	b096      	sub	sp, #88	; 0x58
 800eb5a:	4614      	mov	r4, r2
 800eb5c:	461d      	mov	r5, r3
 800eb5e:	da07      	bge.n	800eb70 <__swhatbuf_r+0x22>
 800eb60:	2300      	movs	r3, #0
 800eb62:	602b      	str	r3, [r5, #0]
 800eb64:	89b3      	ldrh	r3, [r6, #12]
 800eb66:	061a      	lsls	r2, r3, #24
 800eb68:	d410      	bmi.n	800eb8c <__swhatbuf_r+0x3e>
 800eb6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb6e:	e00e      	b.n	800eb8e <__swhatbuf_r+0x40>
 800eb70:	466a      	mov	r2, sp
 800eb72:	f000 f89d 	bl	800ecb0 <_fstat_r>
 800eb76:	2800      	cmp	r0, #0
 800eb78:	dbf2      	blt.n	800eb60 <__swhatbuf_r+0x12>
 800eb7a:	9a01      	ldr	r2, [sp, #4]
 800eb7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eb80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eb84:	425a      	negs	r2, r3
 800eb86:	415a      	adcs	r2, r3
 800eb88:	602a      	str	r2, [r5, #0]
 800eb8a:	e7ee      	b.n	800eb6a <__swhatbuf_r+0x1c>
 800eb8c:	2340      	movs	r3, #64	; 0x40
 800eb8e:	2000      	movs	r0, #0
 800eb90:	6023      	str	r3, [r4, #0]
 800eb92:	b016      	add	sp, #88	; 0x58
 800eb94:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eb98 <__smakebuf_r>:
 800eb98:	898b      	ldrh	r3, [r1, #12]
 800eb9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb9c:	079d      	lsls	r5, r3, #30
 800eb9e:	4606      	mov	r6, r0
 800eba0:	460c      	mov	r4, r1
 800eba2:	d507      	bpl.n	800ebb4 <__smakebuf_r+0x1c>
 800eba4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eba8:	6023      	str	r3, [r4, #0]
 800ebaa:	6123      	str	r3, [r4, #16]
 800ebac:	2301      	movs	r3, #1
 800ebae:	6163      	str	r3, [r4, #20]
 800ebb0:	b002      	add	sp, #8
 800ebb2:	bd70      	pop	{r4, r5, r6, pc}
 800ebb4:	ab01      	add	r3, sp, #4
 800ebb6:	466a      	mov	r2, sp
 800ebb8:	f7ff ffc9 	bl	800eb4e <__swhatbuf_r>
 800ebbc:	9900      	ldr	r1, [sp, #0]
 800ebbe:	4605      	mov	r5, r0
 800ebc0:	4630      	mov	r0, r6
 800ebc2:	f7fe fd6d 	bl	800d6a0 <_malloc_r>
 800ebc6:	b948      	cbnz	r0, 800ebdc <__smakebuf_r+0x44>
 800ebc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebcc:	059a      	lsls	r2, r3, #22
 800ebce:	d4ef      	bmi.n	800ebb0 <__smakebuf_r+0x18>
 800ebd0:	f023 0303 	bic.w	r3, r3, #3
 800ebd4:	f043 0302 	orr.w	r3, r3, #2
 800ebd8:	81a3      	strh	r3, [r4, #12]
 800ebda:	e7e3      	b.n	800eba4 <__smakebuf_r+0xc>
 800ebdc:	4b0d      	ldr	r3, [pc, #52]	; (800ec14 <__smakebuf_r+0x7c>)
 800ebde:	62b3      	str	r3, [r6, #40]	; 0x28
 800ebe0:	89a3      	ldrh	r3, [r4, #12]
 800ebe2:	6020      	str	r0, [r4, #0]
 800ebe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebe8:	81a3      	strh	r3, [r4, #12]
 800ebea:	9b00      	ldr	r3, [sp, #0]
 800ebec:	6163      	str	r3, [r4, #20]
 800ebee:	9b01      	ldr	r3, [sp, #4]
 800ebf0:	6120      	str	r0, [r4, #16]
 800ebf2:	b15b      	cbz	r3, 800ec0c <__smakebuf_r+0x74>
 800ebf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebf8:	4630      	mov	r0, r6
 800ebfa:	f000 f86b 	bl	800ecd4 <_isatty_r>
 800ebfe:	b128      	cbz	r0, 800ec0c <__smakebuf_r+0x74>
 800ec00:	89a3      	ldrh	r3, [r4, #12]
 800ec02:	f023 0303 	bic.w	r3, r3, #3
 800ec06:	f043 0301 	orr.w	r3, r3, #1
 800ec0a:	81a3      	strh	r3, [r4, #12]
 800ec0c:	89a0      	ldrh	r0, [r4, #12]
 800ec0e:	4305      	orrs	r5, r0
 800ec10:	81a5      	strh	r5, [r4, #12]
 800ec12:	e7cd      	b.n	800ebb0 <__smakebuf_r+0x18>
 800ec14:	0800e4a9 	.word	0x0800e4a9

0800ec18 <_malloc_usable_size_r>:
 800ec18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec1c:	1f18      	subs	r0, r3, #4
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	bfbc      	itt	lt
 800ec22:	580b      	ldrlt	r3, [r1, r0]
 800ec24:	18c0      	addlt	r0, r0, r3
 800ec26:	4770      	bx	lr

0800ec28 <_raise_r>:
 800ec28:	291f      	cmp	r1, #31
 800ec2a:	b538      	push	{r3, r4, r5, lr}
 800ec2c:	4604      	mov	r4, r0
 800ec2e:	460d      	mov	r5, r1
 800ec30:	d904      	bls.n	800ec3c <_raise_r+0x14>
 800ec32:	2316      	movs	r3, #22
 800ec34:	6003      	str	r3, [r0, #0]
 800ec36:	f04f 30ff 	mov.w	r0, #4294967295
 800ec3a:	bd38      	pop	{r3, r4, r5, pc}
 800ec3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ec3e:	b112      	cbz	r2, 800ec46 <_raise_r+0x1e>
 800ec40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec44:	b94b      	cbnz	r3, 800ec5a <_raise_r+0x32>
 800ec46:	4620      	mov	r0, r4
 800ec48:	f000 f830 	bl	800ecac <_getpid_r>
 800ec4c:	462a      	mov	r2, r5
 800ec4e:	4601      	mov	r1, r0
 800ec50:	4620      	mov	r0, r4
 800ec52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec56:	f000 b817 	b.w	800ec88 <_kill_r>
 800ec5a:	2b01      	cmp	r3, #1
 800ec5c:	d00a      	beq.n	800ec74 <_raise_r+0x4c>
 800ec5e:	1c59      	adds	r1, r3, #1
 800ec60:	d103      	bne.n	800ec6a <_raise_r+0x42>
 800ec62:	2316      	movs	r3, #22
 800ec64:	6003      	str	r3, [r0, #0]
 800ec66:	2001      	movs	r0, #1
 800ec68:	e7e7      	b.n	800ec3a <_raise_r+0x12>
 800ec6a:	2400      	movs	r4, #0
 800ec6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ec70:	4628      	mov	r0, r5
 800ec72:	4798      	blx	r3
 800ec74:	2000      	movs	r0, #0
 800ec76:	e7e0      	b.n	800ec3a <_raise_r+0x12>

0800ec78 <raise>:
 800ec78:	4b02      	ldr	r3, [pc, #8]	; (800ec84 <raise+0xc>)
 800ec7a:	4601      	mov	r1, r0
 800ec7c:	6818      	ldr	r0, [r3, #0]
 800ec7e:	f7ff bfd3 	b.w	800ec28 <_raise_r>
 800ec82:	bf00      	nop
 800ec84:	20000058 	.word	0x20000058

0800ec88 <_kill_r>:
 800ec88:	b538      	push	{r3, r4, r5, lr}
 800ec8a:	4d07      	ldr	r5, [pc, #28]	; (800eca8 <_kill_r+0x20>)
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	4604      	mov	r4, r0
 800ec90:	4608      	mov	r0, r1
 800ec92:	4611      	mov	r1, r2
 800ec94:	602b      	str	r3, [r5, #0]
 800ec96:	f7f3 fc8b 	bl	80025b0 <_kill>
 800ec9a:	1c43      	adds	r3, r0, #1
 800ec9c:	d102      	bne.n	800eca4 <_kill_r+0x1c>
 800ec9e:	682b      	ldr	r3, [r5, #0]
 800eca0:	b103      	cbz	r3, 800eca4 <_kill_r+0x1c>
 800eca2:	6023      	str	r3, [r4, #0]
 800eca4:	bd38      	pop	{r3, r4, r5, pc}
 800eca6:	bf00      	nop
 800eca8:	20000b64 	.word	0x20000b64

0800ecac <_getpid_r>:
 800ecac:	f7f3 bc78 	b.w	80025a0 <_getpid>

0800ecb0 <_fstat_r>:
 800ecb0:	b538      	push	{r3, r4, r5, lr}
 800ecb2:	4d07      	ldr	r5, [pc, #28]	; (800ecd0 <_fstat_r+0x20>)
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	4608      	mov	r0, r1
 800ecba:	4611      	mov	r1, r2
 800ecbc:	602b      	str	r3, [r5, #0]
 800ecbe:	f7f3 fcd6 	bl	800266e <_fstat>
 800ecc2:	1c43      	adds	r3, r0, #1
 800ecc4:	d102      	bne.n	800eccc <_fstat_r+0x1c>
 800ecc6:	682b      	ldr	r3, [r5, #0]
 800ecc8:	b103      	cbz	r3, 800eccc <_fstat_r+0x1c>
 800ecca:	6023      	str	r3, [r4, #0]
 800eccc:	bd38      	pop	{r3, r4, r5, pc}
 800ecce:	bf00      	nop
 800ecd0:	20000b64 	.word	0x20000b64

0800ecd4 <_isatty_r>:
 800ecd4:	b538      	push	{r3, r4, r5, lr}
 800ecd6:	4d06      	ldr	r5, [pc, #24]	; (800ecf0 <_isatty_r+0x1c>)
 800ecd8:	2300      	movs	r3, #0
 800ecda:	4604      	mov	r4, r0
 800ecdc:	4608      	mov	r0, r1
 800ecde:	602b      	str	r3, [r5, #0]
 800ece0:	f7f3 fcd5 	bl	800268e <_isatty>
 800ece4:	1c43      	adds	r3, r0, #1
 800ece6:	d102      	bne.n	800ecee <_isatty_r+0x1a>
 800ece8:	682b      	ldr	r3, [r5, #0]
 800ecea:	b103      	cbz	r3, 800ecee <_isatty_r+0x1a>
 800ecec:	6023      	str	r3, [r4, #0]
 800ecee:	bd38      	pop	{r3, r4, r5, pc}
 800ecf0:	20000b64 	.word	0x20000b64

0800ecf4 <_init>:
 800ecf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecf6:	bf00      	nop
 800ecf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecfa:	bc08      	pop	{r3}
 800ecfc:	469e      	mov	lr, r3
 800ecfe:	4770      	bx	lr

0800ed00 <_fini>:
 800ed00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed02:	bf00      	nop
 800ed04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed06:	bc08      	pop	{r3}
 800ed08:	469e      	mov	lr, r3
 800ed0a:	4770      	bx	lr
