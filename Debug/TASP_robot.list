
TASP_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9fc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  0800cc00  0800cc00  0001cc00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d28c  0800d28c  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800d28c  0800d28c  0001d28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d294  0800d294  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d294  0800d294  0001d294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d298  0800d298  0001d298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800d29c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f0  20000208  0800d4a4  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f8  0800d4a4  000208f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020511  00000000  00000000  00020236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003836  00000000  00000000  00040747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  00043f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  000452f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b0a3  00000000  00000000  000464e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a0c1  00000000  00000000  0007158b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe841  00000000  00000000  0008b64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00189e8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065e8  00000000  00000000  00189ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000208 	.word	0x20000208
 800021c:	00000000 	.word	0x00000000
 8000220:	0800cbe4 	.word	0x0800cbe4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000020c 	.word	0x2000020c
 800023c:	0800cbe4 	.word	0x0800cbe4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b9a6 	b.w	80009ec <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f83e 	bl	8000728 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2lz>:
 80006b8:	b508      	push	{r3, lr}
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	ec43 2b17 	vmov	d7, r2, r3
 80006c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	d403      	bmi.n	80006d4 <__aeabi_d2lz+0x1c>
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006d0:	f000 b80a 	b.w	80006e8 <__aeabi_d2ulz>
 80006d4:	eeb1 7b47 	vneg.f64	d7, d7
 80006d8:	ec51 0b17 	vmov	r0, r1, d7
 80006dc:	f000 f804 	bl	80006e8 <__aeabi_d2ulz>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	bd08      	pop	{r3, pc}

080006e8 <__aeabi_d2ulz>:
 80006e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000718 <__aeabi_d2ulz+0x30>
 80006ec:	ec41 0b17 	vmov	d7, r0, r1
 80006f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000720 <__aeabi_d2ulz+0x38>
 80006f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006fc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000700:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee16 1a10 	vmov	r1, s12
 800070c:	ee17 0a90 	vmov	r0, s15
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	f3af 8000 	nop.w
 8000718:	00000000 	.word	0x00000000
 800071c:	3df00000 	.word	0x3df00000
 8000720:	00000000 	.word	0x00000000
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468c      	mov	ip, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	f040 8083 	bne.w	800083e <__udivmoddi4+0x116>
 8000738:	428a      	cmp	r2, r1
 800073a:	4617      	mov	r7, r2
 800073c:	d947      	bls.n	80007ce <__udivmoddi4+0xa6>
 800073e:	fab2 f282 	clz	r2, r2
 8000742:	b142      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000744:	f1c2 0020 	rsb	r0, r2, #32
 8000748:	fa24 f000 	lsr.w	r0, r4, r0
 800074c:	4091      	lsls	r1, r2
 800074e:	4097      	lsls	r7, r2
 8000750:	ea40 0c01 	orr.w	ip, r0, r1
 8000754:	4094      	lsls	r4, r2
 8000756:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800075a:	0c23      	lsrs	r3, r4, #16
 800075c:	fbbc f6f8 	udiv	r6, ip, r8
 8000760:	fa1f fe87 	uxth.w	lr, r7
 8000764:	fb08 c116 	mls	r1, r8, r6, ip
 8000768:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076c:	fb06 f10e 	mul.w	r1, r6, lr
 8000770:	4299      	cmp	r1, r3
 8000772:	d909      	bls.n	8000788 <__udivmoddi4+0x60>
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	f106 30ff 	add.w	r0, r6, #4294967295
 800077a:	f080 8119 	bcs.w	80009b0 <__udivmoddi4+0x288>
 800077e:	4299      	cmp	r1, r3
 8000780:	f240 8116 	bls.w	80009b0 <__udivmoddi4+0x288>
 8000784:	3e02      	subs	r6, #2
 8000786:	443b      	add	r3, r7
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	b2a4      	uxth	r4, r4
 800078c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000790:	fb08 3310 	mls	r3, r8, r0, r3
 8000794:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000798:	fb00 fe0e 	mul.w	lr, r0, lr
 800079c:	45a6      	cmp	lr, r4
 800079e:	d909      	bls.n	80007b4 <__udivmoddi4+0x8c>
 80007a0:	193c      	adds	r4, r7, r4
 80007a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007a6:	f080 8105 	bcs.w	80009b4 <__udivmoddi4+0x28c>
 80007aa:	45a6      	cmp	lr, r4
 80007ac:	f240 8102 	bls.w	80009b4 <__udivmoddi4+0x28c>
 80007b0:	3802      	subs	r0, #2
 80007b2:	443c      	add	r4, r7
 80007b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007b8:	eba4 040e 	sub.w	r4, r4, lr
 80007bc:	2600      	movs	r6, #0
 80007be:	b11d      	cbz	r5, 80007c8 <__udivmoddi4+0xa0>
 80007c0:	40d4      	lsrs	r4, r2
 80007c2:	2300      	movs	r3, #0
 80007c4:	e9c5 4300 	strd	r4, r3, [r5]
 80007c8:	4631      	mov	r1, r6
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	b902      	cbnz	r2, 80007d2 <__udivmoddi4+0xaa>
 80007d0:	deff      	udf	#255	; 0xff
 80007d2:	fab2 f282 	clz	r2, r2
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d150      	bne.n	800087c <__udivmoddi4+0x154>
 80007da:	1bcb      	subs	r3, r1, r7
 80007dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e0:	fa1f f887 	uxth.w	r8, r7
 80007e4:	2601      	movs	r6, #1
 80007e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ea:	0c21      	lsrs	r1, r4, #16
 80007ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80007f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007f4:	fb08 f30c 	mul.w	r3, r8, ip
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0xe4>
 80007fc:	1879      	adds	r1, r7, r1
 80007fe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0xe2>
 8000804:	428b      	cmp	r3, r1
 8000806:	f200 80e9 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 800080a:	4684      	mov	ip, r0
 800080c:	1ac9      	subs	r1, r1, r3
 800080e:	b2a3      	uxth	r3, r4
 8000810:	fbb1 f0fe 	udiv	r0, r1, lr
 8000814:	fb0e 1110 	mls	r1, lr, r0, r1
 8000818:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800081c:	fb08 f800 	mul.w	r8, r8, r0
 8000820:	45a0      	cmp	r8, r4
 8000822:	d907      	bls.n	8000834 <__udivmoddi4+0x10c>
 8000824:	193c      	adds	r4, r7, r4
 8000826:	f100 33ff 	add.w	r3, r0, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x10a>
 800082c:	45a0      	cmp	r8, r4
 800082e:	f200 80d9 	bhi.w	80009e4 <__udivmoddi4+0x2bc>
 8000832:	4618      	mov	r0, r3
 8000834:	eba4 0408 	sub.w	r4, r4, r8
 8000838:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800083c:	e7bf      	b.n	80007be <__udivmoddi4+0x96>
 800083e:	428b      	cmp	r3, r1
 8000840:	d909      	bls.n	8000856 <__udivmoddi4+0x12e>
 8000842:	2d00      	cmp	r5, #0
 8000844:	f000 80b1 	beq.w	80009aa <__udivmoddi4+0x282>
 8000848:	2600      	movs	r6, #0
 800084a:	e9c5 0100 	strd	r0, r1, [r5]
 800084e:	4630      	mov	r0, r6
 8000850:	4631      	mov	r1, r6
 8000852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000856:	fab3 f683 	clz	r6, r3
 800085a:	2e00      	cmp	r6, #0
 800085c:	d14a      	bne.n	80008f4 <__udivmoddi4+0x1cc>
 800085e:	428b      	cmp	r3, r1
 8000860:	d302      	bcc.n	8000868 <__udivmoddi4+0x140>
 8000862:	4282      	cmp	r2, r0
 8000864:	f200 80b8 	bhi.w	80009d8 <__udivmoddi4+0x2b0>
 8000868:	1a84      	subs	r4, r0, r2
 800086a:	eb61 0103 	sbc.w	r1, r1, r3
 800086e:	2001      	movs	r0, #1
 8000870:	468c      	mov	ip, r1
 8000872:	2d00      	cmp	r5, #0
 8000874:	d0a8      	beq.n	80007c8 <__udivmoddi4+0xa0>
 8000876:	e9c5 4c00 	strd	r4, ip, [r5]
 800087a:	e7a5      	b.n	80007c8 <__udivmoddi4+0xa0>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f603 	lsr.w	r6, r0, r3
 8000884:	4097      	lsls	r7, r2
 8000886:	fa01 f002 	lsl.w	r0, r1, r2
 800088a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800088e:	40d9      	lsrs	r1, r3
 8000890:	4330      	orrs	r0, r6
 8000892:	0c03      	lsrs	r3, r0, #16
 8000894:	fbb1 f6fe 	udiv	r6, r1, lr
 8000898:	fa1f f887 	uxth.w	r8, r7
 800089c:	fb0e 1116 	mls	r1, lr, r6, r1
 80008a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a4:	fb06 f108 	mul.w	r1, r6, r8
 80008a8:	4299      	cmp	r1, r3
 80008aa:	fa04 f402 	lsl.w	r4, r4, r2
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x19c>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008b6:	f080 808d 	bcs.w	80009d4 <__udivmoddi4+0x2ac>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 808a 	bls.w	80009d4 <__udivmoddi4+0x2ac>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b281      	uxth	r1, r0
 80008c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d4:	fb00 f308 	mul.w	r3, r0, r8
 80008d8:	428b      	cmp	r3, r1
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x1c4>
 80008dc:	1879      	adds	r1, r7, r1
 80008de:	f100 3cff 	add.w	ip, r0, #4294967295
 80008e2:	d273      	bcs.n	80009cc <__udivmoddi4+0x2a4>
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d971      	bls.n	80009cc <__udivmoddi4+0x2a4>
 80008e8:	3802      	subs	r0, #2
 80008ea:	4439      	add	r1, r7
 80008ec:	1acb      	subs	r3, r1, r3
 80008ee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008f2:	e778      	b.n	80007e6 <__udivmoddi4+0xbe>
 80008f4:	f1c6 0c20 	rsb	ip, r6, #32
 80008f8:	fa03 f406 	lsl.w	r4, r3, r6
 80008fc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000900:	431c      	orrs	r4, r3
 8000902:	fa20 f70c 	lsr.w	r7, r0, ip
 8000906:	fa01 f306 	lsl.w	r3, r1, r6
 800090a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800090e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000912:	431f      	orrs	r7, r3
 8000914:	0c3b      	lsrs	r3, r7, #16
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fa1f f884 	uxth.w	r8, r4
 800091e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000922:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000926:	fb09 fa08 	mul.w	sl, r9, r8
 800092a:	458a      	cmp	sl, r1
 800092c:	fa02 f206 	lsl.w	r2, r2, r6
 8000930:	fa00 f306 	lsl.w	r3, r0, r6
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x220>
 8000936:	1861      	adds	r1, r4, r1
 8000938:	f109 30ff 	add.w	r0, r9, #4294967295
 800093c:	d248      	bcs.n	80009d0 <__udivmoddi4+0x2a8>
 800093e:	458a      	cmp	sl, r1
 8000940:	d946      	bls.n	80009d0 <__udivmoddi4+0x2a8>
 8000942:	f1a9 0902 	sub.w	r9, r9, #2
 8000946:	4421      	add	r1, r4
 8000948:	eba1 010a 	sub.w	r1, r1, sl
 800094c:	b2bf      	uxth	r7, r7
 800094e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000952:	fb0e 1110 	mls	r1, lr, r0, r1
 8000956:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800095a:	fb00 f808 	mul.w	r8, r0, r8
 800095e:	45b8      	cmp	r8, r7
 8000960:	d907      	bls.n	8000972 <__udivmoddi4+0x24a>
 8000962:	19e7      	adds	r7, r4, r7
 8000964:	f100 31ff 	add.w	r1, r0, #4294967295
 8000968:	d22e      	bcs.n	80009c8 <__udivmoddi4+0x2a0>
 800096a:	45b8      	cmp	r8, r7
 800096c:	d92c      	bls.n	80009c8 <__udivmoddi4+0x2a0>
 800096e:	3802      	subs	r0, #2
 8000970:	4427      	add	r7, r4
 8000972:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000976:	eba7 0708 	sub.w	r7, r7, r8
 800097a:	fba0 8902 	umull	r8, r9, r0, r2
 800097e:	454f      	cmp	r7, r9
 8000980:	46c6      	mov	lr, r8
 8000982:	4649      	mov	r1, r9
 8000984:	d31a      	bcc.n	80009bc <__udivmoddi4+0x294>
 8000986:	d017      	beq.n	80009b8 <__udivmoddi4+0x290>
 8000988:	b15d      	cbz	r5, 80009a2 <__udivmoddi4+0x27a>
 800098a:	ebb3 020e 	subs.w	r2, r3, lr
 800098e:	eb67 0701 	sbc.w	r7, r7, r1
 8000992:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000996:	40f2      	lsrs	r2, r6
 8000998:	ea4c 0202 	orr.w	r2, ip, r2
 800099c:	40f7      	lsrs	r7, r6
 800099e:	e9c5 2700 	strd	r2, r7, [r5]
 80009a2:	2600      	movs	r6, #0
 80009a4:	4631      	mov	r1, r6
 80009a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009aa:	462e      	mov	r6, r5
 80009ac:	4628      	mov	r0, r5
 80009ae:	e70b      	b.n	80007c8 <__udivmoddi4+0xa0>
 80009b0:	4606      	mov	r6, r0
 80009b2:	e6e9      	b.n	8000788 <__udivmoddi4+0x60>
 80009b4:	4618      	mov	r0, r3
 80009b6:	e6fd      	b.n	80007b4 <__udivmoddi4+0x8c>
 80009b8:	4543      	cmp	r3, r8
 80009ba:	d2e5      	bcs.n	8000988 <__udivmoddi4+0x260>
 80009bc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009c0:	eb69 0104 	sbc.w	r1, r9, r4
 80009c4:	3801      	subs	r0, #1
 80009c6:	e7df      	b.n	8000988 <__udivmoddi4+0x260>
 80009c8:	4608      	mov	r0, r1
 80009ca:	e7d2      	b.n	8000972 <__udivmoddi4+0x24a>
 80009cc:	4660      	mov	r0, ip
 80009ce:	e78d      	b.n	80008ec <__udivmoddi4+0x1c4>
 80009d0:	4681      	mov	r9, r0
 80009d2:	e7b9      	b.n	8000948 <__udivmoddi4+0x220>
 80009d4:	4666      	mov	r6, ip
 80009d6:	e775      	b.n	80008c4 <__udivmoddi4+0x19c>
 80009d8:	4630      	mov	r0, r6
 80009da:	e74a      	b.n	8000872 <__udivmoddi4+0x14a>
 80009dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e0:	4439      	add	r1, r7
 80009e2:	e713      	b.n	800080c <__udivmoddi4+0xe4>
 80009e4:	3802      	subs	r0, #2
 80009e6:	443c      	add	r4, r7
 80009e8:	e724      	b.n	8000834 <__udivmoddi4+0x10c>
 80009ea:	bf00      	nop

080009ec <__aeabi_idiv0>:
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <MX_DMA_Init+0x48>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <MX_DMA_Init+0x48>)
 80009fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <MX_DMA_Init+0x48>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	200b      	movs	r0, #11
 8000a14:	f002 f97b 	bl	8002d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a18:	200b      	movs	r0, #11
 8000a1a:	f002 f994 	bl	8002d46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	2011      	movs	r0, #17
 8000a24:	f002 f973 	bl	8002d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a28:	2011      	movs	r0, #17
 8000a2a:	f002 f98c 	bl	8002d46 <HAL_NVIC_EnableIRQ>

}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <proc_ISR_PID>:
	memset(&motorL, 0, sizeof(motorL));
	memset(&motorR, 0, sizeof(motorR));
}

void proc_ISR_PID()
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
	float hw = calc_hw();
 8000a42:	f000 f9b9 	bl	8000db8 <calc_hw>
 8000a46:	ed87 0a01 	vstr	s0, [r7, #4]

	if(mode)
 8000a4a:	4b6d      	ldr	r3, [pc, #436]	; (8000c00 <proc_ISR_PID+0x1c4>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d01e      	beq.n	8000a90 <proc_ISR_PID+0x54>
	{
		motorL.yr = hw * motorL.spd_r + motorL.yr_last;
 8000a52:	4b6c      	ldr	r3, [pc, #432]	; (8000c04 <proc_ISR_PID+0x1c8>)
 8000a54:	ed93 7a03 	vldr	s14, [r3, #12]
 8000a58:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a60:	4b68      	ldr	r3, [pc, #416]	; (8000c04 <proc_ISR_PID+0x1c8>)
 8000a62:	edd3 7a06 	vldr	s15, [r3, #24]
 8000a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a6a:	4b66      	ldr	r3, [pc, #408]	; (8000c04 <proc_ISR_PID+0x1c8>)
 8000a6c:	edc3 7a05 	vstr	s15, [r3, #20]
		motorR.yr = hw * motorR.spd_r + motorR.yr_last;
 8000a70:	4b65      	ldr	r3, [pc, #404]	; (8000c08 <proc_ISR_PID+0x1cc>)
 8000a72:	ed93 7a03 	vldr	s14, [r3, #12]
 8000a76:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a7e:	4b62      	ldr	r3, [pc, #392]	; (8000c08 <proc_ISR_PID+0x1cc>)
 8000a80:	edd3 7a06 	vldr	s15, [r3, #24]
 8000a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a88:	4b5f      	ldr	r3, [pc, #380]	; (8000c08 <proc_ISR_PID+0x1cc>)
 8000a8a:	edc3 7a05 	vstr	s15, [r3, #20]
 8000a8e:	e007      	b.n	8000aa0 <proc_ISR_PID+0x64>
	}
	else
	{
		motorL.yr = motorL.pos_r;
 8000a90:	4b5c      	ldr	r3, [pc, #368]	; (8000c04 <proc_ISR_PID+0x1c8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a5b      	ldr	r2, [pc, #364]	; (8000c04 <proc_ISR_PID+0x1c8>)
 8000a96:	6153      	str	r3, [r2, #20]
		motorR.yr = motorR.pos_r;
 8000a98:	4b5b      	ldr	r3, [pc, #364]	; (8000c08 <proc_ISR_PID+0x1cc>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a5a      	ldr	r2, [pc, #360]	; (8000c08 <proc_ISR_PID+0x1cc>)
 8000a9e:	6153      	str	r3, [r2, #20]
	}

	float uL = calc_PID(&motorL);
 8000aa0:	4858      	ldr	r0, [pc, #352]	; (8000c04 <proc_ISR_PID+0x1c8>)
 8000aa2:	f000 f9dd 	bl	8000e60 <calc_PID>
 8000aa6:	ed87 0a03 	vstr	s0, [r7, #12]
	float uR = calc_PID(&motorR);
 8000aaa:	4857      	ldr	r0, [pc, #348]	; (8000c08 <proc_ISR_PID+0x1cc>)
 8000aac:	f000 f9d8 	bl	8000e60 <calc_PID>
 8000ab0:	ed87 0a02 	vstr	s0, [r7, #8]

	if(aut)
 8000ab4:	4b55      	ldr	r3, [pc, #340]	; (8000c0c <proc_ISR_PID+0x1d0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d077      	beq.n	8000bac <proc_ISR_PID+0x170>
	{
		if(uR > 0)
 8000abc:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ac0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac8:	dd0c      	ble.n	8000ae4 <proc_ISR_PID+0xa8>
		{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ad0:	484f      	ldr	r0, [pc, #316]	; (8000c10 <proc_ISR_PID+0x1d4>)
 8000ad2:	f002 fe93 	bl	80037fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000adc:	484d      	ldr	r0, [pc, #308]	; (8000c14 <proc_ISR_PID+0x1d8>)
 8000ade:	f002 fe8d 	bl	80037fc <HAL_GPIO_WritePin>
 8000ae2:	e018      	b.n	8000b16 <proc_ISR_PID+0xda>
		}
		else if(uR < 0)
 8000ae4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ae8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af0:	d511      	bpl.n	8000b16 <proc_ISR_PID+0xda>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af8:	4846      	ldr	r0, [pc, #280]	; (8000c14 <proc_ISR_PID+0x1d8>)
 8000afa:	f002 fe7f 	bl	80037fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b04:	4842      	ldr	r0, [pc, #264]	; (8000c10 <proc_ISR_PID+0x1d4>)
 8000b06:	f002 fe79 	bl	80037fc <HAL_GPIO_WritePin>

			 uR = -uR;
 8000b0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b0e:	eef1 7a67 	vneg.f32	s15, s15
 8000b12:	edc7 7a02 	vstr	s15, [r7, #8]
		}

		if(uL > 0)
 8000b16:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b22:	dd0a      	ble.n	8000b3a <proc_ISR_PID+0xfe>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2101      	movs	r1, #1
 8000b28:	483a      	ldr	r0, [pc, #232]	; (8000c14 <proc_ISR_PID+0x1d8>)
 8000b2a:	f002 fe67 	bl	80037fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 1);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	2101      	movs	r1, #1
 8000b32:	4837      	ldr	r0, [pc, #220]	; (8000c10 <proc_ISR_PID+0x1d4>)
 8000b34:	f002 fe62 	bl	80037fc <HAL_GPIO_WritePin>
 8000b38:	e016      	b.n	8000b68 <proc_ISR_PID+0x12c>
		}
		else if(uL < 0)
 8000b3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b46:	d50f      	bpl.n	8000b68 <proc_ISR_PID+0x12c>
		{
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	4830      	ldr	r0, [pc, #192]	; (8000c10 <proc_ISR_PID+0x1d4>)
 8000b4e:	f002 fe55 	bl	80037fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2101      	movs	r1, #1
 8000b56:	482f      	ldr	r0, [pc, #188]	; (8000c14 <proc_ISR_PID+0x1d8>)
 8000b58:	f002 fe50 	bl	80037fc <HAL_GPIO_WritePin>

			 uL = -uL;
 8000b5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b60:	eef1 7a67 	vneg.f32	s15, s15
 8000b64:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		TIM2->CCR4 = uR / 6 * 2000;
 8000b68:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b6c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8000b70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b74:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000c18 <proc_ISR_PID+0x1dc>
 8000b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b84:	ee17 2a90 	vmov	r2, s15
 8000b88:	641a      	str	r2, [r3, #64]	; 0x40
		TIM5->CCR1 = uL / 6 * 2000;
 8000b8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b8e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8000b92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b96:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000c18 <proc_ISR_PID+0x1dc>
 8000b9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <proc_ISR_PID+0x1e0>)
 8000ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ba4:	ee17 2a90 	vmov	r2, s15
 8000ba8:	635a      	str	r2, [r3, #52]	; 0x34
 8000baa:	e01d      	b.n	8000be8 <proc_ISR_PID+0x1ac>
	}
	else
	{
		motorL.e_last = motorL.yr - motorL.pos_m;
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <proc_ISR_PID+0x1c8>)
 8000bae:	ed93 7a05 	vldr	s14, [r3, #20]
 8000bb2:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <proc_ISR_PID+0x1c8>)
 8000bb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <proc_ISR_PID+0x1c8>)
 8000bbe:	edc3 7a08 	vstr	s15, [r3, #32]
		motorL.pos_m_last = motorL.pos_m;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <proc_ISR_PID+0x1c8>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <proc_ISR_PID+0x1c8>)
 8000bc8:	6093      	str	r3, [r2, #8]

		motorR.e_last = motorR.yr - motorR.pos_m;
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <proc_ISR_PID+0x1cc>)
 8000bcc:	ed93 7a05 	vldr	s14, [r3, #20]
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <proc_ISR_PID+0x1cc>)
 8000bd2:	edd3 7a01 	vldr	s15, [r3, #4]
 8000bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <proc_ISR_PID+0x1cc>)
 8000bdc:	edc3 7a08 	vstr	s15, [r3, #32]
		motorR.pos_m_last = motorR.pos_m;
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <proc_ISR_PID+0x1cc>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <proc_ISR_PID+0x1cc>)
 8000be6:	6093      	str	r3, [r2, #8]
	}

	motorL.yr_last = motorL.yr;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <proc_ISR_PID+0x1c8>)
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <proc_ISR_PID+0x1c8>)
 8000bee:	6193      	str	r3, [r2, #24]
	motorR.yr_last = motorR.yr;
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <proc_ISR_PID+0x1cc>)
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <proc_ISR_PID+0x1cc>)
 8000bf6:	6193      	str	r3, [r2, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000228 	.word	0x20000228
 8000c04:	2000022c 	.word	0x2000022c
 8000c08:	20000264 	.word	0x20000264
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40020400 	.word	0x40020400
 8000c18:	44fa0000 	.word	0x44fa0000
 8000c1c:	40000c00 	.word	0x40000c00

08000c20 <proc_ISR_speed>:


void proc_ISR_speed()
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b090      	sub	sp, #64	; 0x40
 8000c24:	af06      	add	r7, sp, #24
	float hw = calc_hw();
 8000c26:	f000 f8c7 	bl	8000db8 <calc_hw>
 8000c2a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	motorL.spd_m = (motorL.pos_m - motorL.pos_m_last) / hw;
 8000c2e:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <proc_ISR_speed+0xb4>)
 8000c30:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c34:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <proc_ISR_speed+0xb4>)
 8000c36:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c3a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000c3e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <proc_ISR_speed+0xb4>)
 8000c48:	edc3 7a04 	vstr	s15, [r3, #16]
	motorR.spd_m = (motorR.pos_m - motorR.pos_m_last) / hw;
 8000c4c:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <proc_ISR_speed+0xb8>)
 8000c4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c52:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <proc_ISR_speed+0xb8>)
 8000c54:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c58:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000c5c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c64:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <proc_ISR_speed+0xb8>)
 8000c66:	edc3 7a04 	vstr	s15, [r3, #16]

	if(++cnt == 5)
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <proc_ISR_speed+0xbc>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	4a1a      	ldr	r2, [pc, #104]	; (8000cdc <proc_ISR_speed+0xbc>)
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <proc_ISR_speed+0xbc>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b05      	cmp	r3, #5
 8000c7a:	d126      	bne.n	8000cca <proc_ISR_speed+0xaa>
	{
		cnt = 0;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <proc_ISR_speed+0xbc>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
		char message[32];
		sprintf(message, "%0.2f|%0.2f || %0.2f|%0.2f", motorL.pos_m, motorL.spd_m, motorR.pos_m, motorR.spd_m);
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <proc_ISR_speed+0xb4>)
 8000c84:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c88:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <proc_ISR_speed+0xb4>)
 8000c8e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <proc_ISR_speed+0xb8>)
 8000c98:	edd3 6a01 	vldr	s13, [r3, #4]
 8000c9c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <proc_ISR_speed+0xb8>)
 8000ca2:	edd3 5a04 	vldr	s11, [r3, #16]
 8000ca6:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000caa:	1d38      	adds	r0, r7, #4
 8000cac:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000cb0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000cb4:	ed8d 7b00 	vstr	d7, [sp]
 8000cb8:	ec53 2b14 	vmov	r2, r3, d4
 8000cbc:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <proc_ISR_speed+0xc0>)
 8000cbe:	f007 fe3b 	bl	8008938 <siprintf>
		send_UART(message);
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f001 fde3 	bl	8002890 <send_UART>
	}
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	2000022c 	.word	0x2000022c
 8000cd8:	20000264 	.word	0x20000264
 8000cdc:	20000224 	.word	0x20000224
 8000ce0:	0800cc00 	.word	0x0800cc00
 8000ce4:	00000000 	.word	0x00000000

08000ce8 <update_posL>:


void update_posL(int dir_m)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	if(dir_m)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d00e      	beq.n	8000d14 <update_posL+0x2c>
		motorL.pos_m += POS_UNIT;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <update_posL+0x60>)
 8000cf8:	edd3 7a01 	vldr	s15, [r3, #4]
 8000cfc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d00:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8000d40 <update_posL+0x58>
 8000d04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d08:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <update_posL+0x60>)
 8000d0e:	edc3 7a01 	vstr	s15, [r3, #4]
	else
		motorL.pos_m -= POS_UNIT;
}
 8000d12:	e00d      	b.n	8000d30 <update_posL+0x48>
		motorL.pos_m -= POS_UNIT;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <update_posL+0x60>)
 8000d16:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d1e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000d40 <update_posL+0x58>
 8000d22:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d26:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <update_posL+0x60>)
 8000d2c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	f3af 8000 	nop.w
 8000d40:	b0d8fb59 	.word	0xb0d8fb59
 8000d44:	3f7acee8 	.word	0x3f7acee8
 8000d48:	2000022c 	.word	0x2000022c
 8000d4c:	00000000 	.word	0x00000000

08000d50 <update_posR>:


void update_posR(int dir_m)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	if(dir_m)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d00e      	beq.n	8000d7c <update_posR+0x2c>
		motorR.pos_m += POS_UNIT;
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <update_posR+0x60>)
 8000d60:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d68:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8000da8 <update_posR+0x58>
 8000d6c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d70:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <update_posR+0x60>)
 8000d76:	edc3 7a01 	vstr	s15, [r3, #4]
	else
		motorR.pos_m -= POS_UNIT;
}
 8000d7a:	e00d      	b.n	8000d98 <update_posR+0x48>
		motorR.pos_m -= POS_UNIT;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <update_posR+0x60>)
 8000d7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d86:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000da8 <update_posR+0x58>
 8000d8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d8e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <update_posR+0x60>)
 8000d94:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	f3af 8000 	nop.w
 8000da8:	b0d8fb59 	.word	0xb0d8fb59
 8000dac:	3f7acee8 	.word	0x3f7acee8
 8000db0:	20000264 	.word	0x20000264
 8000db4:	00000000 	.word	0x00000000

08000db8 <calc_hw>:
	motorR.Ki_h = KiR * hw;
}


float calc_hw()
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	if(!strcmp(hw_cfg.timeunit, "us"))
 8000dbc:	4922      	ldr	r1, [pc, #136]	; (8000e48 <calc_hw+0x90>)
 8000dbe:	4823      	ldr	r0, [pc, #140]	; (8000e4c <calc_hw+0x94>)
 8000dc0:	f7ff fa3e 	bl	8000240 <strcmp>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10c      	bne.n	8000de4 <calc_hw+0x2c>
	{
		return 0.000001 * hw_cfg.value;
 8000dca:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <calc_hw+0x98>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	ee07 3a90 	vmov	s15, r3
 8000dd2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000dd6:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8000e38 <calc_hw+0x80>
 8000dda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000dde:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000de2:	e023      	b.n	8000e2c <calc_hw+0x74>
	}
	else if(!strcmp(hw_cfg.timeunit, "ms"))
 8000de4:	491b      	ldr	r1, [pc, #108]	; (8000e54 <calc_hw+0x9c>)
 8000de6:	4819      	ldr	r0, [pc, #100]	; (8000e4c <calc_hw+0x94>)
 8000de8:	f7ff fa2a 	bl	8000240 <strcmp>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d10c      	bne.n	8000e0c <calc_hw+0x54>
	{
		return 0.001 * hw_cfg.value;
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <calc_hw+0x98>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	ee07 3a90 	vmov	s15, r3
 8000dfa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000dfe:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000e40 <calc_hw+0x88>
 8000e02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e06:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e0a:	e00f      	b.n	8000e2c <calc_hw+0x74>
	}
	else if(!strcmp(hw_cfg.timeunit, "s"))
 8000e0c:	4912      	ldr	r1, [pc, #72]	; (8000e58 <calc_hw+0xa0>)
 8000e0e:	480f      	ldr	r0, [pc, #60]	; (8000e4c <calc_hw+0x94>)
 8000e10:	f7ff fa16 	bl	8000240 <strcmp>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d106      	bne.n	8000e28 <calc_hw+0x70>
	{
		return hw_cfg.value;
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <calc_hw+0x98>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	ee07 3a90 	vmov	s15, r3
 8000e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e26:	e001      	b.n	8000e2c <calc_hw+0x74>
	}

	return 0.0000001;
 8000e28:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000e5c <calc_hw+0xa4>
}
 8000e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	f3af 8000 	nop.w
 8000e38:	a0b5ed8d 	.word	0xa0b5ed8d
 8000e3c:	3eb0c6f7 	.word	0x3eb0c6f7
 8000e40:	d2f1a9fc 	.word	0xd2f1a9fc
 8000e44:	3f50624d 	.word	0x3f50624d
 8000e48:	0800cc1c 	.word	0x0800cc1c
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000004 	.word	0x20000004
 8000e54:	0800cc20 	.word	0x0800cc20
 8000e58:	0800cc24 	.word	0x0800cc24
 8000e5c:	33d6bf95 	.word	0x33d6bf95

08000e60 <calc_PID>:


float calc_PID(struct motor_t *motor)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	float e = motor->yr - motor->pos_m;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	ed93 7a05 	vldr	s14, [r3, #20]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e78:	edc7 7a04 	vstr	s15, [r7, #16]

	float sum_e_bkp = motor->sum_e;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	69db      	ldr	r3, [r3, #28]
 8000e80:	60fb      	str	r3, [r7, #12]
	motor->sum_e = motor->sum_e + motor->e_last;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	ed93 7a07 	vldr	s14, [r3, #28]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	edd3 7a08 	vldr	s15, [r3, #32]
 8000e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	edc3 7a07 	vstr	s15, [r3, #28]
	float u_d = motor->Kd_h * (motor->pos_m - motor->pos_m_last) + a * motor->u_d_last;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	edd3 6a01 	vldr	s13, [r3, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	edd3 7a02 	vldr	s15, [r3, #8]
 8000eaa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000ebc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ec0:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8000f68 <calc_PID+0x108>
 8000ec4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000ec8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ecc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ed0:	edc7 7a02 	vstr	s15, [r7, #8]
	float u = motor->Kp_h * e + motor->Ki_h * motor->sum_e - u_d;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000eda:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ede:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	edd3 7a07 	vldr	s15, [r3, #28]
 8000eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ef2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ef6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000efe:	edc7 7a05 	vstr	s15, [r7, #20]
	motor->e_last = e;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	621a      	str	r2, [r3, #32]
	motor->pos_m_last = motor->pos_m;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
	motor->u_d_last = u_d;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	629a      	str	r2, [r3, #40]	; 0x28

	if (u > U_SAT_MAX)
 8000f16:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f1a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000f1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f26:	dd05      	ble.n	8000f34 <calc_PID+0xd4>
	{
		u = U_SAT_MAX;
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <calc_PID+0x110>)
 8000f2a:	617b      	str	r3, [r7, #20]
		motor->sum_e = sum_e_bkp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	61da      	str	r2, [r3, #28]
 8000f32:	e00d      	b.n	8000f50 <calc_PID+0xf0>
	}
	else if(u < U_SAT_MIN)
 8000f34:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f38:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8000f3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f44:	d504      	bpl.n	8000f50 <calc_PID+0xf0>
	{
		u = U_SAT_MIN;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <calc_PID+0x114>)
 8000f48:	617b      	str	r3, [r7, #20]
		motor->sum_e = sum_e_bkp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	61da      	str	r2, [r3, #28]
	}

	return u;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	ee07 3a90 	vmov	s15, r3
}
 8000f56:	eeb0 0a67 	vmov.f32	s0, s15
 8000f5a:	371c      	adds	r7, #28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	f3af 8000 	nop.w
 8000f68:	9999999a 	.word	0x9999999a
 8000f6c:	3fd99999 	.word	0x3fd99999
 8000f70:	40c00000 	.word	0x40c00000
 8000f74:	c0c00000 	.word	0xc0c00000

08000f78 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08c      	sub	sp, #48	; 0x30
 8000f7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f8e:	4b6d      	ldr	r3, [pc, #436]	; (8001144 <MX_GPIO_Init+0x1cc>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a6c      	ldr	r2, [pc, #432]	; (8001144 <MX_GPIO_Init+0x1cc>)
 8000f94:	f043 0310 	orr.w	r3, r3, #16
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b6a      	ldr	r3, [pc, #424]	; (8001144 <MX_GPIO_Init+0x1cc>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	61bb      	str	r3, [r7, #24]
 8000fa4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fa6:	4b67      	ldr	r3, [pc, #412]	; (8001144 <MX_GPIO_Init+0x1cc>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a66      	ldr	r2, [pc, #408]	; (8001144 <MX_GPIO_Init+0x1cc>)
 8000fac:	f043 0320 	orr.w	r3, r3, #32
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b64      	ldr	r3, [pc, #400]	; (8001144 <MX_GPIO_Init+0x1cc>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0320 	and.w	r3, r3, #32
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b61      	ldr	r3, [pc, #388]	; (8001144 <MX_GPIO_Init+0x1cc>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a60      	ldr	r2, [pc, #384]	; (8001144 <MX_GPIO_Init+0x1cc>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b5e      	ldr	r3, [pc, #376]	; (8001144 <MX_GPIO_Init+0x1cc>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	4b5b      	ldr	r3, [pc, #364]	; (8001144 <MX_GPIO_Init+0x1cc>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a5a      	ldr	r2, [pc, #360]	; (8001144 <MX_GPIO_Init+0x1cc>)
 8000fdc:	f043 0302 	orr.w	r3, r3, #2
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b58      	ldr	r3, [pc, #352]	; (8001144 <MX_GPIO_Init+0x1cc>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fee:	4b55      	ldr	r3, [pc, #340]	; (8001144 <MX_GPIO_Init+0x1cc>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a54      	ldr	r2, [pc, #336]	; (8001144 <MX_GPIO_Init+0x1cc>)
 8000ff4:	f043 0308 	orr.w	r3, r3, #8
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b52      	ldr	r3, [pc, #328]	; (8001144 <MX_GPIO_Init+0x1cc>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0308 	and.w	r3, r3, #8
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	4b4f      	ldr	r3, [pc, #316]	; (8001144 <MX_GPIO_Init+0x1cc>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a4e      	ldr	r2, [pc, #312]	; (8001144 <MX_GPIO_Init+0x1cc>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b4c      	ldr	r3, [pc, #304]	; (8001144 <MX_GPIO_Init+0x1cc>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, HCSR_TRIG_SX_Pin|FIR_RV_MD_Pin|FIR_RV_ME_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f248 0109 	movw	r1, #32777	; 0x8009
 8001024:	4848      	ldr	r0, [pc, #288]	; (8001148 <MX_GPIO_Init+0x1d0>)
 8001026:	f002 fbe9 	bl	80037fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HCSR_TRIG_SY_GPIO_Port, HCSR_TRIG_SY_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	4847      	ldr	r0, [pc, #284]	; (800114c <MX_GPIO_Init+0x1d4>)
 8001030:	f002 fbe4 	bl	80037fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FIR_FW_ME_Pin|FIR_FW_MD_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f240 4101 	movw	r1, #1025	; 0x401
 800103a:	4845      	ldr	r0, [pc, #276]	; (8001150 <MX_GPIO_Init+0x1d8>)
 800103c:	f002 fbde 	bl	80037fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = FIR_SA_ME_Pin|FIR_SA_MD_Pin;
 8001040:	f244 0304 	movw	r3, #16388	; 0x4004
 8001044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001046:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800104a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4619      	mov	r1, r3
 8001056:	483c      	ldr	r0, [pc, #240]	; (8001148 <MX_GPIO_Init+0x1d0>)
 8001058:	f002 fa0c 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = HCSR_TRIG_SX_Pin|FIR_RV_MD_Pin|FIR_RV_ME_Pin;
 800105c:	f248 0309 	movw	r3, #32777	; 0x8009
 8001060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	4834      	ldr	r0, [pc, #208]	; (8001148 <MX_GPIO_Init+0x1d0>)
 8001076:	f002 f9fd 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HCSR_TRIG_SY_Pin;
 800107a:	2380      	movs	r3, #128	; 0x80
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(HCSR_TRIG_SY_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	482e      	ldr	r0, [pc, #184]	; (800114c <MX_GPIO_Init+0x1d4>)
 8001092:	f002 f9ef 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = FIR_FW_ME_Pin|FIR_FW_MD_Pin;
 8001096:	f240 4301 	movw	r3, #1025	; 0x401
 800109a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	4619      	mov	r1, r3
 80010ae:	4828      	ldr	r0, [pc, #160]	; (8001150 <MX_GPIO_Init+0x1d8>)
 80010b0:	f002 f9e0 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FIR_SB_MD_Pin;
 80010b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FIR_SB_MD_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	481f      	ldr	r0, [pc, #124]	; (8001148 <MX_GPIO_Init+0x1d0>)
 80010ca:	f002 f9d3 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = IV_SPL_Pin|IV_SFD_Pin|IV_STE_Pin|IV_SFE_Pin;
 80010ce:	f44f 4323 	mov.w	r3, #41728	; 0xa300
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	481b      	ldr	r0, [pc, #108]	; (8001150 <MX_GPIO_Init+0x1d8>)
 80010e4:	f002 f9c6 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FIR_SB_ME_Pin;
 80010e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(FIR_SB_ME_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	4815      	ldr	r0, [pc, #84]	; (8001154 <MX_GPIO_Init+0x1dc>)
 80010fe:	f002 f9b9 	bl	8003474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IV_STD_Pin;
 8001102:	2340      	movs	r3, #64	; 0x40
 8001104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IV_STD_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4619      	mov	r1, r3
 8001114:	4810      	ldr	r0, [pc, #64]	; (8001158 <MX_GPIO_Init+0x1e0>)
 8001116:	f002 f9ad 	bl	8003474 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	2008      	movs	r0, #8
 8001120:	f001 fdf5 	bl	8002d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001124:	2008      	movs	r0, #8
 8001126:	f001 fe0e 	bl	8002d46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	2028      	movs	r0, #40	; 0x28
 8001130:	f001 fded 	bl	8002d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001134:	2028      	movs	r0, #40	; 0x28
 8001136:	f001 fe06 	bl	8002d46 <HAL_NVIC_EnableIRQ>

}
 800113a:	bf00      	nop
 800113c:	3730      	adds	r7, #48	; 0x30
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40021000 	.word	0x40021000
 800114c:	40021400 	.word	0x40021400
 8001150:	40020400 	.word	0x40020400
 8001154:	40020c00 	.word	0x40020c00
 8001158:	40020800 	.word	0x40020800

0800115c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_14)	// MD
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800116c:	d10a      	bne.n	8001184 <HAL_GPIO_EXTI_Callback+0x28>
	{
		int dir_m = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12);
 800116e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001172:	480f      	ldr	r0, [pc, #60]	; (80011b0 <HAL_GPIO_EXTI_Callback+0x54>)
 8001174:	f002 fb2a 	bl	80037cc <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	60bb      	str	r3, [r7, #8]
		update_posR(dir_m);
 800117c:	68b8      	ldr	r0, [r7, #8]
 800117e:	f7ff fde7 	bl	8000d50 <update_posR>
	else if(GPIO_Pin == GPIO_PIN_2)	// ME
	{
		int dir_m = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
		update_posL(dir_m);
	}
}
 8001182:	e011      	b.n	80011a8 <HAL_GPIO_EXTI_Callback+0x4c>
	else if(GPIO_Pin == GPIO_PIN_2)	// ME
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	2b04      	cmp	r3, #4
 8001188:	d10e      	bne.n	80011a8 <HAL_GPIO_EXTI_Callback+0x4c>
		int dir_m = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 800118a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800118e:	4809      	ldr	r0, [pc, #36]	; (80011b4 <HAL_GPIO_EXTI_Callback+0x58>)
 8001190:	f002 fb1c 	bl	80037cc <HAL_GPIO_ReadPin>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	bf0c      	ite	eq
 800119a:	2301      	moveq	r3, #1
 800119c:	2300      	movne	r3, #0
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	60fb      	str	r3, [r7, #12]
		update_posL(dir_m);
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	f7ff fda0 	bl	8000ce8 <update_posL>
}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40020c00 	.word	0x40020c00

080011b8 <HCSR_proc_TRIG_FSM>:
struct coords distance = { 0.0, 0.0 };
struct coords safeLocation = { 0.0, 0.0 }; // home
static uint8_t state = 0, cnt = 0;

void HCSR_proc_TRIG_FSM()
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	if(state == 0)														// STATE 0: disable TRIGGER
 80011bc:	4b29      	ldr	r3, [pc, #164]	; (8001264 <HCSR_proc_TRIG_FSM+0xac>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d10d      	bne.n	80011e0 <HCSR_proc_TRIG_FSM+0x28>
	{
		state = 1;
 80011c4:	4b27      	ldr	r3, [pc, #156]	; (8001264 <HCSR_proc_TRIG_FSM+0xac>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2108      	movs	r1, #8
 80011ce:	4826      	ldr	r0, [pc, #152]	; (8001268 <HCSR_proc_TRIG_FSM+0xb0>)
 80011d0:	f002 fb14 	bl	80037fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2180      	movs	r1, #128	; 0x80
 80011d8:	4824      	ldr	r0, [pc, #144]	; (800126c <HCSR_proc_TRIG_FSM+0xb4>)
 80011da:	f002 fb0f 	bl	80037fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0);
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 0);
			HAL_TIM_Base_Stop_IT(&htim6);
		}
	}
}
 80011de:	e03f      	b.n	8001260 <HCSR_proc_TRIG_FSM+0xa8>
	else if(state == 1)													// STATE 1: wait 2uS and enable TRIGGER
 80011e0:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HCSR_proc_TRIG_FSM+0xac>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d11a      	bne.n	800121e <HCSR_proc_TRIG_FSM+0x66>
		if(++cnt == 2)
 80011e8:	4b21      	ldr	r3, [pc, #132]	; (8001270 <HCSR_proc_TRIG_FSM+0xb8>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <HCSR_proc_TRIG_FSM+0xb8>)
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <HCSR_proc_TRIG_FSM+0xb8>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d131      	bne.n	8001260 <HCSR_proc_TRIG_FSM+0xa8>
			cnt = 0;
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <HCSR_proc_TRIG_FSM+0xb8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
			state = 2;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HCSR_proc_TRIG_FSM+0xac>)
 8001204:	2202      	movs	r2, #2
 8001206:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 1);
 8001208:	2201      	movs	r2, #1
 800120a:	2108      	movs	r1, #8
 800120c:	4816      	ldr	r0, [pc, #88]	; (8001268 <HCSR_proc_TRIG_FSM+0xb0>)
 800120e:	f002 faf5 	bl	80037fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 1);
 8001212:	2201      	movs	r2, #1
 8001214:	2180      	movs	r1, #128	; 0x80
 8001216:	4815      	ldr	r0, [pc, #84]	; (800126c <HCSR_proc_TRIG_FSM+0xb4>)
 8001218:	f002 faf0 	bl	80037fc <HAL_GPIO_WritePin>
}
 800121c:	e020      	b.n	8001260 <HCSR_proc_TRIG_FSM+0xa8>
	else if(state == 2)													// STATE 2: wait 10uS and disable TRIGGER
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HCSR_proc_TRIG_FSM+0xac>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b02      	cmp	r3, #2
 8001224:	d11c      	bne.n	8001260 <HCSR_proc_TRIG_FSM+0xa8>
		if(++cnt == 10)
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HCSR_proc_TRIG_FSM+0xb8>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <HCSR_proc_TRIG_FSM+0xb8>)
 8001230:	701a      	strb	r2, [r3, #0]
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <HCSR_proc_TRIG_FSM+0xb8>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b0a      	cmp	r3, #10
 8001238:	d112      	bne.n	8001260 <HCSR_proc_TRIG_FSM+0xa8>
			cnt = 0;
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <HCSR_proc_TRIG_FSM+0xb8>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
			state = 0;
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <HCSR_proc_TRIG_FSM+0xac>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2108      	movs	r1, #8
 800124a:	4807      	ldr	r0, [pc, #28]	; (8001268 <HCSR_proc_TRIG_FSM+0xb0>)
 800124c:	f002 fad6 	bl	80037fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2180      	movs	r1, #128	; 0x80
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <HCSR_proc_TRIG_FSM+0xb4>)
 8001256:	f002 fad1 	bl	80037fc <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim6);
 800125a:	4806      	ldr	r0, [pc, #24]	; (8001274 <HCSR_proc_TRIG_FSM+0xbc>)
 800125c:	f003 fe0e 	bl	8004e7c <HAL_TIM_Base_Stop_IT>
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200002cc 	.word	0x200002cc
 8001268:	40021000 	.word	0x40021000
 800126c:	40021400 	.word	0x40021400
 8001270:	200002cd 	.word	0x200002cd
 8001274:	200004d4 	.word	0x200004d4

08001278 <HCSR_read_ECHO_pulse>:

void HCSR_read_ECHO_pulse(char coord)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
	struct distSensor_t* distSensor;
	TIM_HandleTypeDef* htim;
	uint32_t channel;

	if(coord == 'x')
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b78      	cmp	r3, #120	; 0x78
 8001286:	d106      	bne.n	8001296 <HCSR_read_ECHO_pulse+0x1e>
	{
		distSensor = &distSensorX;
 8001288:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <HCSR_read_ECHO_pulse+0x108>)
 800128a:	617b      	str	r3, [r7, #20]
		htim = &htim9;
 800128c:	4b3d      	ldr	r3, [pc, #244]	; (8001384 <HCSR_read_ECHO_pulse+0x10c>)
 800128e:	613b      	str	r3, [r7, #16]
		channel = TIM_CHANNEL_2;
 8001290:	2304      	movs	r3, #4
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	e005      	b.n	80012a2 <HCSR_read_ECHO_pulse+0x2a>
	}
	else
	{
		distSensor = &distSensorY;
 8001296:	4b3c      	ldr	r3, [pc, #240]	; (8001388 <HCSR_read_ECHO_pulse+0x110>)
 8001298:	617b      	str	r3, [r7, #20]
		htim = &htim13;
 800129a:	4b3c      	ldr	r3, [pc, #240]	; (800138c <HCSR_read_ECHO_pulse+0x114>)
 800129c:	613b      	str	r3, [r7, #16]
		channel = TIM_CHANNEL_1;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
	}

	if(!distSensor->isFirstCapture)														// if positive edge transition
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	7b1b      	ldrb	r3, [r3, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10a      	bne.n	80012c0 <HCSR_read_ECHO_pulse+0x48>
	{
		distSensor->ic1 = HAL_TIM_ReadCapturedValue(htim, channel);						// read first timer counter value
 80012aa:	68f9      	ldr	r1, [r7, #12]
 80012ac:	6938      	ldr	r0, [r7, #16]
 80012ae:	f004 fb2f 	bl	8005910 <HAL_TIM_ReadCapturedValue>
 80012b2:	4602      	mov	r2, r0
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	601a      	str	r2, [r3, #0]
		distSensor->isFirstCapture = 1;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	2201      	movs	r2, #1
 80012bc:	731a      	strb	r2, [r3, #12]

		distSensor->isFirstCapture = 0; 												// set it back to detect positive edge

		distSensor->ready = 1;															// set flag
	}
}
 80012be:	e050      	b.n	8001362 <HCSR_read_ECHO_pulse+0xea>
		distSensor->ic2 = HAL_TIM_ReadCapturedValue(htim, channel); 					// read second timer counter value
 80012c0:	68f9      	ldr	r1, [r7, #12]
 80012c2:	6938      	ldr	r0, [r7, #16]
 80012c4:	f004 fb24 	bl	8005910 <HAL_TIM_ReadCapturedValue>
 80012c8:	4602      	mov	r2, r0
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	605a      	str	r2, [r3, #4]
		HAL_TIM_IC_Stop_IT(htim, channel);												// stop timer
 80012ce:	68f9      	ldr	r1, [r7, #12]
 80012d0:	6938      	ldr	r0, [r7, #16]
 80012d2:	f003 fec5 	bl	8005060 <HAL_TIM_IC_Stop_IT>
		__HAL_TIM_SET_COUNTER(htim, 0);  												// reset the timer counter
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2200      	movs	r2, #0
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24
		if(distSensor->ic2 > distSensor->ic1)											// calculate timer tick difference
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d907      	bls.n	80012fa <HCSR_read_ECHO_pulse+0x82>
			distSensor->diff = distSensor->ic2 - distSensor->ic1;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	1ad2      	subs	r2, r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	e007      	b.n	800130a <HCSR_read_ECHO_pulse+0x92>
			distSensor->diff = (0xFFFFFFFF - distSensor->ic1) + distSensor->ic2;
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	1e5a      	subs	r2, r3, #1
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	609a      	str	r2, [r3, #8]
		distSensor->dist = ((float) distSensor->diff / 1000000.0) * 343.0 / 2.0;		// time convertion to distance
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001316:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800131a:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8001370 <HCSR_read_ECHO_pulse+0xf8>
 800131e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001322:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8001378 <HCSR_read_ECHO_pulse+0x100>
 8001326:	ee27 6b06 	vmul.f64	d6, d7, d6
 800132a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800132e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001332:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	edc3 7a04 	vstr	s15, [r3, #16]
		if (distSensor->diff < 100 || distSensor->diff > 18000)							// object too close or too far
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2b63      	cmp	r3, #99	; 0x63
 8001342:	d905      	bls.n	8001350 <HCSR_read_ECHO_pulse+0xd8>
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f244 6250 	movw	r2, #18000	; 0x4650
 800134c:	4293      	cmp	r3, r2
 800134e:	d902      	bls.n	8001356 <HCSR_read_ECHO_pulse+0xde>
			distSensor->dist = -1;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	4a0f      	ldr	r2, [pc, #60]	; (8001390 <HCSR_read_ECHO_pulse+0x118>)
 8001354:	611a      	str	r2, [r3, #16]
		distSensor->isFirstCapture = 0; 												// set it back to detect positive edge
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	2200      	movs	r2, #0
 800135a:	731a      	strb	r2, [r3, #12]
		distSensor->ready = 1;															// set flag
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	2201      	movs	r2, #1
 8001360:	735a      	strb	r2, [r3, #13]
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	f3af 8000 	nop.w
 8001370:	00000000 	.word	0x00000000
 8001374:	412e8480 	.word	0x412e8480
 8001378:	00000000 	.word	0x00000000
 800137c:	40757000 	.word	0x40757000
 8001380:	2000029c 	.word	0x2000029c
 8001384:	20000520 	.word	0x20000520
 8001388:	200002b0 	.word	0x200002b0
 800138c:	20000488 	.word	0x20000488
 8001390:	bf800000 	.word	0xbf800000

08001394 <HCSR_get_distance>:
	HAL_TIM_IC_Start_IT(&htim13, TIM_CHANNEL_1);
	HAL_TIM_Base_Start_IT(&htim6);
}

struct coords HCSR_get_distance()
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08e      	sub	sp, #56	; 0x38
 8001398:	af02      	add	r7, sp, #8
	if(distSensorX.ready && distSensorY.ready)
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <HCSR_get_distance+0x8c>)
 800139c:	7b5b      	ldrb	r3, [r3, #13]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d029      	beq.n	80013f6 <HCSR_get_distance+0x62>
 80013a2:	4b20      	ldr	r3, [pc, #128]	; (8001424 <HCSR_get_distance+0x90>)
 80013a4:	7b5b      	ldrb	r3, [r3, #13]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d025      	beq.n	80013f6 <HCSR_get_distance+0x62>
	{
		distSensorX.ready = 0;
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <HCSR_get_distance+0x8c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	735a      	strb	r2, [r3, #13]
		distSensorY.ready = 0;
 80013b0:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <HCSR_get_distance+0x90>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	735a      	strb	r2, [r3, #13]

		distance.x = distSensorX.dist;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <HCSR_get_distance+0x8c>)
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	4a1b      	ldr	r2, [pc, #108]	; (8001428 <HCSR_get_distance+0x94>)
 80013bc:	6013      	str	r3, [r2, #0]
		distance.y = distSensorY.dist;
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HCSR_get_distance+0x90>)
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	4a19      	ldr	r2, [pc, #100]	; (8001428 <HCSR_get_distance+0x94>)
 80013c4:	6053      	str	r3, [r2, #4]

		char message[32];
		sprintf(message, "coords = (%0.2f, %0.2f)", distance.x, distance.y);
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <HCSR_get_distance+0x94>)
 80013c8:	edd3 7a00 	vldr	s15, [r3]
 80013cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HCSR_get_distance+0x94>)
 80013d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80013d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013da:	f107 0008 	add.w	r0, r7, #8
 80013de:	ed8d 7b00 	vstr	d7, [sp]
 80013e2:	ec53 2b16 	vmov	r2, r3, d6
 80013e6:	4911      	ldr	r1, [pc, #68]	; (800142c <HCSR_get_distance+0x98>)
 80013e8:	f007 faa6 	bl	8008938 <siprintf>
		send_UART(message);
 80013ec:	f107 0308 	add.w	r3, r7, #8
 80013f0:	4618      	mov	r0, r3
 80013f2:	f001 fa4d 	bl	8002890 <send_UART>
	}

	return distance;
 80013f6:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <HCSR_get_distance+0x94>)
 80013f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001400:	e883 0003 	stmia.w	r3, {r0, r1}
 8001404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001408:	ee07 2a10 	vmov	s14, r2
 800140c:	ee07 3a90 	vmov	s15, r3
}
 8001410:	eeb0 0a47 	vmov.f32	s0, s14
 8001414:	eef0 0a67 	vmov.f32	s1, s15
 8001418:	3730      	adds	r7, #48	; 0x30
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000029c 	.word	0x2000029c
 8001424:	200002b0 	.word	0x200002b0
 8001428:	200002c4 	.word	0x200002c4
 800142c:	0800cc28 	.word	0x0800cc28

08001430 <check_command>:

float pos_r = 0.0, spd_r = 0.0;
char m = 'S';

unsigned char check_command(char* message)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    char cmd = INV;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]

    if((!strncmp((char*) message, "REF", 3)))
 800143c:	2203      	movs	r2, #3
 800143e:	491d      	ldr	r1, [pc, #116]	; (80014b4 <check_command+0x84>)
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f007 fb0a 	bl	8008a5a <strncmp>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <check_command+0x22>
		cmd = REF;
 800144c:	2302      	movs	r3, #2
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e02b      	b.n	80014aa <check_command+0x7a>
    else if((!strncmp((char*) message, "EN", 2)))
 8001452:	2202      	movs	r2, #2
 8001454:	4918      	ldr	r1, [pc, #96]	; (80014b8 <check_command+0x88>)
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f007 faff 	bl	8008a5a <strncmp>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <check_command+0x38>
        cmd = EN;
 8001462:	2301      	movs	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e020      	b.n	80014aa <check_command+0x7a>
	else if((!strncmp((char*) message, "/", 1)))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	781a      	ldrb	r2, [r3, #0]
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <check_command+0x8c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d102      	bne.n	800147c <check_command+0x4c>
		cmd = INC;
 8001476:	2303      	movs	r3, #3
 8001478:	73fb      	strb	r3, [r7, #15]
 800147a:	e016      	b.n	80014aa <check_command+0x7a>
	else if((!strncmp((char*) message, "\\", 1)))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	781a      	ldrb	r2, [r3, #0]
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <check_command+0x90>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d102      	bne.n	8001490 <check_command+0x60>
		cmd = DEC;
 800148a:	2304      	movs	r3, #4
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	e00c      	b.n	80014aa <check_command+0x7a>
	else if((!strncmp((char*) message, "DIST", 4)))
 8001490:	2204      	movs	r2, #4
 8001492:	490c      	ldr	r1, [pc, #48]	; (80014c4 <check_command+0x94>)
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f007 fae0 	bl	8008a5a <strncmp>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <check_command+0x76>
		cmd = DIST;
 80014a0:	2305      	movs	r3, #5
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	e001      	b.n	80014aa <check_command+0x7a>
    else
    	cmd = INV;
 80014a6:	2300      	movs	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]

    return cmd;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	0800cc40 	.word	0x0800cc40
 80014b8:	0800cc44 	.word	0x0800cc44
 80014bc:	0800cc48 	.word	0x0800cc48
 80014c0:	0800cc4c 	.word	0x0800cc4c
 80014c4:	0800cc50 	.word	0x0800cc50

080014c8 <proc_inv_cmd>:
		proc_dist_cmd
};


void proc_inv_cmd(char* message)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	send_UART("Invalid instruction. Type '?' for Help.");
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <proc_inv_cmd+0x18>)
 80014d2:	f001 f9dd 	bl	8002890 <send_UART>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	0800cc58 	.word	0x0800cc58

080014e4 <proc_en_cmd>:


void proc_en_cmd(char* message)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	int val;

	if(sscanf((char*) message, "EN %d", &val) == 1)
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	461a      	mov	r2, r3
 80014f2:	4912      	ldr	r1, [pc, #72]	; (800153c <proc_en_cmd+0x58>)
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f007 fa3f 	bl	8008978 <siscanf>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d114      	bne.n	800152a <proc_en_cmd+0x46>
	{
		if(val == 0 || val == 1)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d002      	beq.n	800150c <proc_en_cmd+0x28>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d10a      	bne.n	8001522 <proc_en_cmd+0x3e>
		{
			if(val)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <proc_en_cmd+0x36>
			{
				//start();
				send_UART("System enabled with success.");
 8001512:	480b      	ldr	r0, [pc, #44]	; (8001540 <proc_en_cmd+0x5c>)
 8001514:	f001 f9bc 	bl	8002890 <send_UART>
			if(val)
 8001518:	e00b      	b.n	8001532 <proc_en_cmd+0x4e>
			}
			else
			{
				//stop();
				send_UART("System disabled with success.");
 800151a:	480a      	ldr	r0, [pc, #40]	; (8001544 <proc_en_cmd+0x60>)
 800151c:	f001 f9b8 	bl	8002890 <send_UART>
			if(val)
 8001520:	e007      	b.n	8001532 <proc_en_cmd+0x4e>
			}
		}
		else
			send_UART("Invalid Enable instruction argument values.");
 8001522:	4809      	ldr	r0, [pc, #36]	; (8001548 <proc_en_cmd+0x64>)
 8001524:	f001 f9b4 	bl	8002890 <send_UART>
	}
	else
		send_UART("Invalid Enable instruction syntax.");
}
 8001528:	e003      	b.n	8001532 <proc_en_cmd+0x4e>
		send_UART("Invalid Enable instruction syntax.");
 800152a:	4808      	ldr	r0, [pc, #32]	; (800154c <proc_en_cmd+0x68>)
 800152c:	f001 f9b0 	bl	8002890 <send_UART>
}
 8001530:	e7ff      	b.n	8001532 <proc_en_cmd+0x4e>
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	0800cc80 	.word	0x0800cc80
 8001540:	0800cc88 	.word	0x0800cc88
 8001544:	0800cca8 	.word	0x0800cca8
 8001548:	0800ccc8 	.word	0x0800ccc8
 800154c:	0800ccf4 	.word	0x0800ccf4

08001550 <proc_ref_cmd>:


void proc_ref_cmd(char* message)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af02      	add	r7, sp, #8
 8001556:	6078      	str	r0, [r7, #4]
	//stop();

	char type, sign;
	int val;

	if(sscanf((char*) message, "REF %c %c%d", &type, &sign, &val) == 3)
 8001558:	f107 010e 	add.w	r1, r7, #14
 800155c:	f107 020f 	add.w	r2, r7, #15
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	460b      	mov	r3, r1
 8001568:	4939      	ldr	r1, [pc, #228]	; (8001650 <proc_ref_cmd+0x100>)
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f007 fa04 	bl	8008978 <siscanf>
 8001570:	4603      	mov	r3, r0
 8001572:	2b03      	cmp	r3, #3
 8001574:	d158      	bne.n	8001628 <proc_ref_cmd+0xd8>
	{
		if((sign == '+' || sign == '-') && (type == 'P' || type == 'S') && val >= 0)
 8001576:	7bbb      	ldrb	r3, [r7, #14]
 8001578:	2b2b      	cmp	r3, #43	; 0x2b
 800157a:	d002      	beq.n	8001582 <proc_ref_cmd+0x32>
 800157c:	7bbb      	ldrb	r3, [r7, #14]
 800157e:	2b2d      	cmp	r3, #45	; 0x2d
 8001580:	d14e      	bne.n	8001620 <proc_ref_cmd+0xd0>
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	2b50      	cmp	r3, #80	; 0x50
 8001586:	d002      	beq.n	800158e <proc_ref_cmd+0x3e>
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	2b53      	cmp	r3, #83	; 0x53
 800158c:	d148      	bne.n	8001620 <proc_ref_cmd+0xd0>
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db45      	blt.n	8001620 <proc_ref_cmd+0xd0>
		{
			m = type;
 8001594:	7bfa      	ldrb	r2, [r7, #15]
 8001596:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <proc_ref_cmd+0x104>)
 8001598:	701a      	strb	r2, [r3, #0]
			if(type == 'P')
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	2b50      	cmp	r3, #80	; 0x50
 800159e:	d11d      	bne.n	80015dc <proc_ref_cmd+0x8c>
			{
				pos_r = val * PI / 180;
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	ee07 3a90 	vmov	s15, r3
 80015a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80015aa:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001638 <proc_ref_cmd+0xe8>
 80015ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015b2:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8001640 <proc_ref_cmd+0xf0>
 80015b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015be:	4b26      	ldr	r3, [pc, #152]	; (8001658 <proc_ref_cmd+0x108>)
 80015c0:	edc3 7a00 	vstr	s15, [r3]

				if(sign == '-')
 80015c4:	7bbb      	ldrb	r3, [r7, #14]
 80015c6:	2b2d      	cmp	r3, #45	; 0x2d
 80015c8:	d126      	bne.n	8001618 <proc_ref_cmd+0xc8>
					pos_r = -pos_r;
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <proc_ref_cmd+0x108>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	eef1 7a67 	vneg.f32	s15, s15
 80015d4:	4b20      	ldr	r3, [pc, #128]	; (8001658 <proc_ref_cmd+0x108>)
 80015d6:	edc3 7a00 	vstr	s15, [r3]
 80015da:	e01d      	b.n	8001618 <proc_ref_cmd+0xc8>

				//set_ref(pos_r, type);
			}
			else
			{
				spd_r = val * 2 * PI / 60;
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80015e8:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8001638 <proc_ref_cmd+0xe8>
 80015ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015f0:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8001648 <proc_ref_cmd+0xf8>
 80015f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <proc_ref_cmd+0x10c>)
 80015fe:	edc3 7a00 	vstr	s15, [r3]

				if(sign == '-')
 8001602:	7bbb      	ldrb	r3, [r7, #14]
 8001604:	2b2d      	cmp	r3, #45	; 0x2d
 8001606:	d107      	bne.n	8001618 <proc_ref_cmd+0xc8>
					spd_r = -spd_r;
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <proc_ref_cmd+0x10c>)
 800160a:	edd3 7a00 	vldr	s15, [r3]
 800160e:	eef1 7a67 	vneg.f32	s15, s15
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <proc_ref_cmd+0x10c>)
 8001614:	edc3 7a00 	vstr	s15, [r3]

				//set_ref(spd_r, type);
			}

			send_UART("Desired reference changed with success.");
 8001618:	4811      	ldr	r0, [pc, #68]	; (8001660 <proc_ref_cmd+0x110>)
 800161a:	f001 f939 	bl	8002890 <send_UART>
		else
			send_UART("Invalid desired reference value.");
	}
	else
		send_UART("Invalid REF instruction syntax.");
}
 800161e:	e006      	b.n	800162e <proc_ref_cmd+0xde>
			send_UART("Invalid desired reference value.");
 8001620:	4810      	ldr	r0, [pc, #64]	; (8001664 <proc_ref_cmd+0x114>)
 8001622:	f001 f935 	bl	8002890 <send_UART>
}
 8001626:	e002      	b.n	800162e <proc_ref_cmd+0xde>
		send_UART("Invalid REF instruction syntax.");
 8001628:	480f      	ldr	r0, [pc, #60]	; (8001668 <proc_ref_cmd+0x118>)
 800162a:	f001 f931 	bl	8002890 <send_UART>
}
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	4d12d84a 	.word	0x4d12d84a
 800163c:	400921fb 	.word	0x400921fb
 8001640:	00000000 	.word	0x00000000
 8001644:	40668000 	.word	0x40668000
 8001648:	00000000 	.word	0x00000000
 800164c:	404e0000 	.word	0x404e0000
 8001650:	0800cd18 	.word	0x0800cd18
 8001654:	2000000c 	.word	0x2000000c
 8001658:	200002d0 	.word	0x200002d0
 800165c:	200002d4 	.word	0x200002d4
 8001660:	0800cd24 	.word	0x0800cd24
 8001664:	0800cd4c 	.word	0x0800cd4c
 8001668:	0800cd70 	.word	0x0800cd70

0800166c <proc_inc_cmd>:


void proc_inc_cmd(char* message)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	pos_r += 0.5;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <proc_inc_cmd+0x3c>)
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800167e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <proc_inc_cmd+0x3c>)
 8001684:	edc3 7a00 	vstr	s15, [r3]
	spd_r += 1.0;
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <proc_inc_cmd+0x40>)
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001692:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001696:	4b05      	ldr	r3, [pc, #20]	; (80016ac <proc_inc_cmd+0x40>)
 8001698:	edc3 7a00 	vstr	s15, [r3]

	//if(m == 'P')
		//set_ref(pos_r, m);
	//else
		//set_ref(spd_r, m);
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	200002d0 	.word	0x200002d0
 80016ac:	200002d4 	.word	0x200002d4

080016b0 <proc_dec_cmd>:

void proc_dec_cmd(char* message)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	pos_r -= 0.5;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <proc_dec_cmd+0x3c>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80016c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <proc_dec_cmd+0x3c>)
 80016c8:	edc3 7a00 	vstr	s15, [r3]
	spd_r -= 1.0;
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <proc_dec_cmd+0x40>)
 80016ce:	edd3 7a00 	vldr	s15, [r3]
 80016d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <proc_dec_cmd+0x40>)
 80016dc:	edc3 7a00 	vstr	s15, [r3]

	//if(m == 'P')
	//	set_ref(pos_r, m);
	//else
	//	set_ref(spd_r, m);
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	200002d0 	.word	0x200002d0
 80016f0:	200002d4 	.word	0x200002d4

080016f4 <proc_dist_cmd>:

void proc_dist_cmd(char* message)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	//proc_distance();
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <MX_I2C1_Init+0x74>)
 800170e:	4a1c      	ldr	r2, [pc, #112]	; (8001780 <MX_I2C1_Init+0x78>)
 8001710:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001712:	4b1a      	ldr	r3, [pc, #104]	; (800177c <MX_I2C1_Init+0x74>)
 8001714:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <MX_I2C1_Init+0x7c>)
 8001716:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <MX_I2C1_Init+0x74>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <MX_I2C1_Init+0x74>)
 8001720:	2201      	movs	r2, #1
 8001722:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <MX_I2C1_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <MX_I2C1_Init+0x74>)
 800172c:	2200      	movs	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <MX_I2C1_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_I2C1_Init+0x74>)
 8001738:	2200      	movs	r2, #0
 800173a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <MX_I2C1_Init+0x74>)
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001742:	480e      	ldr	r0, [pc, #56]	; (800177c <MX_I2C1_Init+0x74>)
 8001744:	f002 f88c 	bl	8003860 <HAL_I2C_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800174e:	f000 f9ad 	bl	8001aac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001752:	2100      	movs	r1, #0
 8001754:	4809      	ldr	r0, [pc, #36]	; (800177c <MX_I2C1_Init+0x74>)
 8001756:	f002 f92d 	bl	80039b4 <HAL_I2CEx_ConfigAnalogFilter>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001760:	f000 f9a4 	bl	8001aac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001764:	2100      	movs	r1, #0
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_I2C1_Init+0x74>)
 8001768:	f002 f96f 	bl	8003a4a <HAL_I2CEx_ConfigDigitalFilter>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001772:	f000 f99b 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000344 	.word	0x20000344
 8001780:	40005400 	.word	0x40005400
 8001784:	20303e5d 	.word	0x20303e5d

08001788 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b0ae      	sub	sp, #184	; 0xb8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2290      	movs	r2, #144	; 0x90
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f006 fa71 	bl	8007c90 <memset>
  if(i2cHandle->Instance==I2C1)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a54      	ldr	r2, [pc, #336]	; (8001904 <HAL_I2C_MspInit+0x17c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	f040 80a0 	bne.w	80018fa <HAL_I2C_MspInit+0x172>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017be:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4618      	mov	r0, r3
 80017ca:	f002 fe5f 	bl	800448c <HAL_RCCEx_PeriphCLKConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80017d4:	f000 f96a 	bl	8001aac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d8:	4b4b      	ldr	r3, [pc, #300]	; (8001908 <HAL_I2C_MspInit+0x180>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	4a4a      	ldr	r2, [pc, #296]	; (8001908 <HAL_I2C_MspInit+0x180>)
 80017de:	f043 0302 	orr.w	r3, r3, #2
 80017e2:	6313      	str	r3, [r2, #48]	; 0x30
 80017e4:	4b48      	ldr	r3, [pc, #288]	; (8001908 <HAL_I2C_MspInit+0x180>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017f0:	23c0      	movs	r3, #192	; 0xc0
 80017f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f6:	2312      	movs	r3, #18
 80017f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001808:	2304      	movs	r3, #4
 800180a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001812:	4619      	mov	r1, r3
 8001814:	483d      	ldr	r0, [pc, #244]	; (800190c <HAL_I2C_MspInit+0x184>)
 8001816:	f001 fe2d 	bl	8003474 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800181a:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <HAL_I2C_MspInit+0x180>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	4a3a      	ldr	r2, [pc, #232]	; (8001908 <HAL_I2C_MspInit+0x180>)
 8001820:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001824:	6413      	str	r3, [r2, #64]	; 0x40
 8001826:	4b38      	ldr	r3, [pc, #224]	; (8001908 <HAL_I2C_MspInit+0x180>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001832:	4b37      	ldr	r3, [pc, #220]	; (8001910 <HAL_I2C_MspInit+0x188>)
 8001834:	4a37      	ldr	r2, [pc, #220]	; (8001914 <HAL_I2C_MspInit+0x18c>)
 8001836:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001838:	4b35      	ldr	r3, [pc, #212]	; (8001910 <HAL_I2C_MspInit+0x188>)
 800183a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800183e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001840:	4b33      	ldr	r3, [pc, #204]	; (8001910 <HAL_I2C_MspInit+0x188>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001846:	4b32      	ldr	r3, [pc, #200]	; (8001910 <HAL_I2C_MspInit+0x188>)
 8001848:	2200      	movs	r2, #0
 800184a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800184c:	4b30      	ldr	r3, [pc, #192]	; (8001910 <HAL_I2C_MspInit+0x188>)
 800184e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001852:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001854:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <HAL_I2C_MspInit+0x188>)
 8001856:	2200      	movs	r2, #0
 8001858:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800185a:	4b2d      	ldr	r3, [pc, #180]	; (8001910 <HAL_I2C_MspInit+0x188>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001860:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_I2C_MspInit+0x188>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001866:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <HAL_I2C_MspInit+0x188>)
 8001868:	2200      	movs	r2, #0
 800186a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800186c:	4b28      	ldr	r3, [pc, #160]	; (8001910 <HAL_I2C_MspInit+0x188>)
 800186e:	2200      	movs	r2, #0
 8001870:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001872:	4827      	ldr	r0, [pc, #156]	; (8001910 <HAL_I2C_MspInit+0x188>)
 8001874:	f001 fa82 	bl	8002d7c <HAL_DMA_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 800187e:	f000 f915 	bl	8001aac <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a22      	ldr	r2, [pc, #136]	; (8001910 <HAL_I2C_MspInit+0x188>)
 8001886:	63da      	str	r2, [r3, #60]	; 0x3c
 8001888:	4a21      	ldr	r2, [pc, #132]	; (8001910 <HAL_I2C_MspInit+0x188>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800188e:	4b22      	ldr	r3, [pc, #136]	; (8001918 <HAL_I2C_MspInit+0x190>)
 8001890:	4a22      	ldr	r2, [pc, #136]	; (800191c <HAL_I2C_MspInit+0x194>)
 8001892:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001894:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_I2C_MspInit+0x190>)
 8001896:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800189a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800189c:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <HAL_I2C_MspInit+0x190>)
 800189e:	2240      	movs	r2, #64	; 0x40
 80018a0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a2:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_I2C_MspInit+0x190>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <HAL_I2C_MspInit+0x190>)
 80018aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ae:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_I2C_MspInit+0x190>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <HAL_I2C_MspInit+0x190>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80018bc:	4b16      	ldr	r3, [pc, #88]	; (8001918 <HAL_I2C_MspInit+0x190>)
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_I2C_MspInit+0x190>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <HAL_I2C_MspInit+0x190>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80018ce:	4812      	ldr	r0, [pc, #72]	; (8001918 <HAL_I2C_MspInit+0x190>)
 80018d0:	f001 fa54 	bl	8002d7c <HAL_DMA_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_I2C_MspInit+0x156>
    {
      Error_Handler();
 80018da:	f000 f8e7 	bl	8001aac <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <HAL_I2C_MspInit+0x190>)
 80018e2:	639a      	str	r2, [r3, #56]	; 0x38
 80018e4:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <HAL_I2C_MspInit+0x190>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	201f      	movs	r0, #31
 80018f0:	f001 fa0d 	bl	8002d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018f4:	201f      	movs	r0, #31
 80018f6:	f001 fa26 	bl	8002d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018fa:	bf00      	nop
 80018fc:	37b8      	adds	r7, #184	; 0xb8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40005400 	.word	0x40005400
 8001908:	40023800 	.word	0x40023800
 800190c:	40020400 	.word	0x40020400
 8001910:	20000390 	.word	0x20000390
 8001914:	40026010 	.word	0x40026010
 8001918:	200002e4 	.word	0x200002e4
 800191c:	400260a0 	.word	0x400260a0

08001920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b0c2      	sub	sp, #264	; 0x108
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001926:	f001 f8ba 	bl	8002a9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800192a:	f000 f851 	bl	80019d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM3_Init();
 800192e:	f000 fac9 	bl	8001ec4 <MX_TIM3_Init>
  MX_GPIO_Init();
 8001932:	f7ff fb21 	bl	8000f78 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001936:	f000 fec9 	bl	80026cc <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800193a:	f000 fa4d 	bl	8001dd8 <MX_TIM2_Init>
  MX_TIM5_Init();
 800193e:	f000 fb0f 	bl	8001f60 <MX_TIM5_Init>
  MX_TIM9_Init();
 8001942:	f000 fbf1 	bl	8002128 <MX_TIM9_Init>
  MX_TIM13_Init();
 8001946:	f000 fc4b 	bl	80021e0 <MX_TIM13_Init>
  MX_DMA_Init();
 800194a:	f7ff f851 	bl	80009f0 <MX_DMA_Init>
  MX_TIM7_Init();
 800194e:	f000 fbb5 	bl	80020bc <MX_TIM7_Init>
  MX_I2C1_Init();
 8001952:	f7ff fed9 	bl	8001708 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001956:	f000 fb7b 	bl	8002050 <MX_TIM6_Init>
  MX_TIM14_Init();
 800195a:	f000 fc89 	bl	8002270 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 800195e:	2201      	movs	r2, #1
 8001960:	4916      	ldr	r1, [pc, #88]	; (80019bc <main+0x9c>)
 8001962:	4817      	ldr	r0, [pc, #92]	; (80019c0 <main+0xa0>)
 8001964:	f004 fe86 	bl	8006674 <HAL_UART_Receive_IT>
  send_UART(PROMPT);
 8001968:	4816      	ldr	r0, [pc, #88]	; (80019c4 <main+0xa4>)
 800196a:	f000 ff91 	bl	8002890 <send_UART>

  HAL_TIM_Base_Start_IT(&htim7);
 800196e:	4816      	ldr	r0, [pc, #88]	; (80019c8 <main+0xa8>)
 8001970:	f003 fa0c 	bl	8004d8c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(has_message_from_UART())
 8001974:	f000 ff5c 	bl	8002830 <has_message_from_UART>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0fa      	beq.n	8001974 <main+0x54>
	  {
		  uint8_t message[BUFFER_SIZE];

		  read_UART((char*) message);
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	4618      	mov	r0, r3
 8001982:	f000 ffaf 	bl	80028e4 <read_UART>

		  unsigned char cmd = check_command((char*) message);
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fd51 	bl	8001430 <check_command>
 800198e:	4603      	mov	r3, r0
 8001990:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		  exec_command[cmd]((char*) message);
 8001994:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001998:	4a0c      	ldr	r2, [pc, #48]	; (80019cc <main+0xac>)
 800199a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199e:	1d3a      	adds	r2, r7, #4
 80019a0:	4610      	mov	r0, r2
 80019a2:	4798      	blx	r3

		  while(is_transmitting_to_UART());
 80019a4:	bf00      	nop
 80019a6:	f000 ff4f 	bl	8002848 <is_transmitting_to_UART>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1fa      	bne.n	80019a6 <main+0x86>

		  reset_UART();
 80019b0:	f000 ff56 	bl	8002860 <reset_UART>
		  send_UART(PROMPT);
 80019b4:	4803      	ldr	r0, [pc, #12]	; (80019c4 <main+0xa4>)
 80019b6:	f000 ff6b 	bl	8002890 <send_UART>
	  if(has_message_from_UART())
 80019ba:	e7db      	b.n	8001974 <main+0x54>
 80019bc:	20000650 	.word	0x20000650
 80019c0:	20000750 	.word	0x20000750
 80019c4:	0800cd90 	.word	0x0800cd90
 80019c8:	20000604 	.word	0x20000604
 80019cc:	20000010 	.word	0x20000010

080019d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b094      	sub	sp, #80	; 0x50
 80019d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	2234      	movs	r2, #52	; 0x34
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f006 f956 	bl	8007c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e4:	f107 0308 	add.w	r3, r7, #8
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f4:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <SystemClock_Config+0xd4>)
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	4a2a      	ldr	r2, [pc, #168]	; (8001aa4 <SystemClock_Config+0xd4>)
 80019fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001a00:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <SystemClock_Config+0xd4>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a0c:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <SystemClock_Config+0xd8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a25      	ldr	r2, [pc, #148]	; (8001aa8 <SystemClock_Config+0xd8>)
 8001a12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <SystemClock_Config+0xd8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a24:	2302      	movs	r3, #2
 8001a26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a2c:	2310      	movs	r3, #16
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a30:	2302      	movs	r3, #2
 8001a32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a34:	2300      	movs	r3, #0
 8001a36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a38:	2308      	movs	r3, #8
 8001a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001a3c:	23c0      	movs	r3, #192	; 0xc0
 8001a3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a40:	2302      	movs	r3, #2
 8001a42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a44:	2302      	movs	r3, #2
 8001a46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a4c:	f107 031c 	add.w	r3, r7, #28
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 f897 	bl	8003b84 <HAL_RCC_OscConfig>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001a5c:	f000 f826 	bl	8001aac <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a60:	f002 f840 	bl	8003ae4 <HAL_PWREx_EnableOverDrive>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a6a:	f000 f81f 	bl	8001aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a6e:	230f      	movs	r3, #15
 8001a70:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a72:	2302      	movs	r3, #2
 8001a74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001a80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a84:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001a86:	f107 0308 	add.w	r3, r7, #8
 8001a8a:	2106      	movs	r1, #6
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 fb27 	bl	80040e0 <HAL_RCC_ClockConfig>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001a98:	f000 f808 	bl	8001aac <Error_Handler>
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	3750      	adds	r7, #80	; 0x50
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40007000 	.word	0x40007000

08001aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab0:	b672      	cpsid	i
}
 8001ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <Error_Handler+0x8>
	...

08001ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <HAL_MspInit+0x44>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <HAL_MspInit+0x44>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <HAL_MspInit+0x44>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_MspInit+0x44>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	4a08      	ldr	r2, [pc, #32]	; (8001afc <HAL_MspInit+0x44>)
 8001adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_MspInit+0x44>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800

08001b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <NMI_Handler+0x4>

08001b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <HardFault_Handler+0x4>

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <MemManage_Handler+0x4>

08001b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4c:	f000 ffe4 	bl	8002b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FIR_SA_ME_Pin);
 8001b58:	2004      	movs	r0, #4
 8001b5a:	f001 fe69 	bl	8003830 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <DMA1_Stream0_IRQHandler+0x10>)
 8001b6a:	f001 fa47 	bl	8002ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000390 	.word	0x20000390

08001b78 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <DMA1_Stream6_IRQHandler+0x10>)
 8001b7e:	f001 fa3d 	bl	8002ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200002e4 	.word	0x200002e4

08001b8c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001b92:	f003 fb23 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000520 	.word	0x20000520

08001ba0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <TIM3_IRQHandler+0x10>)
 8001ba6:	f003 fb19 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	2000043c 	.word	0x2000043c

08001bb4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <I2C1_EV_IRQHandler+0x10>)
 8001bba:	f001 fee1 	bl	8003980 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000344 	.word	0x20000344

08001bc8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <USART3_IRQHandler+0x10>)
 8001bce:	f004 fd9f 	bl	8006710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000750 	.word	0x20000750

08001bdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FIR_SA_MD_Pin);
 8001be0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001be4:	f001 fe24 	bl	8003830 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}

08001bec <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001bf2:	f003 faf3 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000488 	.word	0x20000488

08001c00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <TIM6_DAC_IRQHandler+0x10>)
 8001c06:	f003 fae9 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200004d4 	.word	0x200004d4

08001c14 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <TIM7_IRQHandler+0x10>)
 8001c1a:	f003 fadf 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000604 	.word	0x20000604

08001c28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
	return 1;
 8001c2c:	2301      	movs	r3, #1
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <_kill>:

int _kill(int pid, int sig)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c42:	f005 fffb 	bl	8007c3c <__errno>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2216      	movs	r2, #22
 8001c4a:	601a      	str	r2, [r3, #0]
	return -1;
 8001c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_exit>:

void _exit (int status)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ffe7 	bl	8001c38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c6a:	e7fe      	b.n	8001c6a <_exit+0x12>

08001c6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	e00a      	b.n	8001c94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c7e:	f3af 8000 	nop.w
 8001c82:	4601      	mov	r1, r0
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	60ba      	str	r2, [r7, #8]
 8001c8a:	b2ca      	uxtb	r2, r1
 8001c8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3301      	adds	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	dbf0      	blt.n	8001c7e <_read+0x12>
	}

return len;
 8001c9c:	687b      	ldr	r3, [r7, #4]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	e009      	b.n	8001ccc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	60ba      	str	r2, [r7, #8]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	dbf1      	blt.n	8001cb8 <_write+0x12>
	}
	return len;
 8001cd4:	687b      	ldr	r3, [r7, #4]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <_close>:

int _close(int file)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d06:	605a      	str	r2, [r3, #4]
	return 0;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <_isatty>:

int _isatty(int file)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d1e:	2301      	movs	r3, #1
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
	return 0;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d50:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <_sbrk+0x5c>)
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <_sbrk+0x60>)
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <_sbrk+0x64>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <_sbrk+0x68>)
 8001d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d207      	bcs.n	8001d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d78:	f005 ff60 	bl	8007c3c <__errno>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	220c      	movs	r2, #12
 8001d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
 8001d86:	e009      	b.n	8001d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <_sbrk+0x64>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	4a05      	ldr	r2, [pc, #20]	; (8001dac <_sbrk+0x64>)
 8001d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20080000 	.word	0x20080000
 8001da8:	00000400 	.word	0x00000400
 8001dac:	200002d8 	.word	0x200002d8
 8001db0:	200008f8 	.word	0x200008f8

08001db4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <SystemInit+0x20>)
 8001dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dbe:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <SystemInit+0x20>)
 8001dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08e      	sub	sp, #56	; 0x38
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001df8:	463b      	mov	r3, r7
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	611a      	str	r2, [r3, #16]
 8001e06:	615a      	str	r2, [r3, #20]
 8001e08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001e0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8001e12:	4b2b      	ldr	r3, [pc, #172]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001e14:	225f      	movs	r2, #95	; 0x5f
 8001e16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e18:	4b29      	ldr	r3, [pc, #164]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8001e1e:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001e20:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001e24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e26:	4b26      	ldr	r3, [pc, #152]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2c:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e32:	4823      	ldr	r0, [pc, #140]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001e34:	f002 ff52 	bl	8004cdc <HAL_TIM_Base_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001e3e:	f7ff fe35 	bl	8001aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	481c      	ldr	r0, [pc, #112]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001e50:	f003 fc94 	bl	800577c <HAL_TIM_ConfigClockSource>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001e5a:	f7ff fe27 	bl	8001aac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e5e:	4818      	ldr	r0, [pc, #96]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001e60:	f003 f83b 	bl	8004eda <HAL_TIM_PWM_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001e6a:	f7ff fe1f 	bl	8001aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4810      	ldr	r0, [pc, #64]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001e7e:	f004 fa91 	bl	80063a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001e88:	f7ff fe10 	bl	8001aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e8c:	2360      	movs	r3, #96	; 0x60
 8001e8e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4807      	ldr	r0, [pc, #28]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001ea4:	f003 fb56 	bl	8005554 <HAL_TIM_PWM_ConfigChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001eae:	f7ff fdfd 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001eb2:	4803      	ldr	r0, [pc, #12]	; (8001ec0 <MX_TIM2_Init+0xe8>)
 8001eb4:	f000 fb3e 	bl	8002534 <HAL_TIM_MspPostInit>

}
 8001eb8:	bf00      	nop
 8001eba:	3738      	adds	r7, #56	; 0x38
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	2000056c 	.word	0x2000056c

08001ec4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eca:	f107 0310 	add.w	r3, r7, #16
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <MX_TIM3_Init+0x94>)
 8001ee4:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <MX_TIM3_Init+0x98>)
 8001ee6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <MX_TIM3_Init+0x94>)
 8001eea:	225f      	movs	r2, #95	; 0x5f
 8001eec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eee:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <MX_TIM3_Init+0x94>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001ef4:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <MX_TIM3_Init+0x94>)
 8001ef6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001efa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <MX_TIM3_Init+0x94>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <MX_TIM3_Init+0x94>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f08:	4813      	ldr	r0, [pc, #76]	; (8001f58 <MX_TIM3_Init+0x94>)
 8001f0a:	f002 fee7 	bl	8004cdc <HAL_TIM_Base_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001f14:	f7ff fdca 	bl	8001aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f1e:	f107 0310 	add.w	r3, r7, #16
 8001f22:	4619      	mov	r1, r3
 8001f24:	480c      	ldr	r0, [pc, #48]	; (8001f58 <MX_TIM3_Init+0x94>)
 8001f26:	f003 fc29 	bl	800577c <HAL_TIM_ConfigClockSource>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001f30:	f7ff fdbc 	bl	8001aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f34:	2300      	movs	r3, #0
 8001f36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_TIM3_Init+0x94>)
 8001f42:	f004 fa2f 	bl	80063a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001f4c:	f7ff fdae 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f50:	bf00      	nop
 8001f52:	3720      	adds	r7, #32
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	2000043c 	.word	0x2000043c
 8001f5c:	40000400 	.word	0x40000400

08001f60 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08e      	sub	sp, #56	; 0x38
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f74:	f107 031c 	add.w	r3, r7, #28
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f80:	463b      	mov	r3, r7
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	60da      	str	r2, [r3, #12]
 8001f8c:	611a      	str	r2, [r3, #16]
 8001f8e:	615a      	str	r2, [r3, #20]
 8001f90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f92:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <MX_TIM5_Init+0xe8>)
 8001f94:	4a2d      	ldr	r2, [pc, #180]	; (800204c <MX_TIM5_Init+0xec>)
 8001f96:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 96-1;
 8001f98:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <MX_TIM5_Init+0xe8>)
 8001f9a:	225f      	movs	r2, #95	; 0x5f
 8001f9c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9e:	4b2a      	ldr	r3, [pc, #168]	; (8002048 <MX_TIM5_Init+0xe8>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 8001fa4:	4b28      	ldr	r3, [pc, #160]	; (8002048 <MX_TIM5_Init+0xe8>)
 8001fa6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001faa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fac:	4b26      	ldr	r3, [pc, #152]	; (8002048 <MX_TIM5_Init+0xe8>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb2:	4b25      	ldr	r3, [pc, #148]	; (8002048 <MX_TIM5_Init+0xe8>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001fb8:	4823      	ldr	r0, [pc, #140]	; (8002048 <MX_TIM5_Init+0xe8>)
 8001fba:	f002 fe8f 	bl	8004cdc <HAL_TIM_Base_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001fc4:	f7ff fd72 	bl	8001aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001fce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	481c      	ldr	r0, [pc, #112]	; (8002048 <MX_TIM5_Init+0xe8>)
 8001fd6:	f003 fbd1 	bl	800577c <HAL_TIM_ConfigClockSource>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001fe0:	f7ff fd64 	bl	8001aac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001fe4:	4818      	ldr	r0, [pc, #96]	; (8002048 <MX_TIM5_Init+0xe8>)
 8001fe6:	f002 ff78 	bl	8004eda <HAL_TIM_PWM_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001ff0:	f7ff fd5c 	bl	8001aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ffc:	f107 031c 	add.w	r3, r7, #28
 8002000:	4619      	mov	r1, r3
 8002002:	4811      	ldr	r0, [pc, #68]	; (8002048 <MX_TIM5_Init+0xe8>)
 8002004:	f004 f9ce 	bl	80063a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800200e:	f7ff fd4d 	bl	8001aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002012:	2360      	movs	r3, #96	; 0x60
 8002014:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002022:	463b      	mov	r3, r7
 8002024:	2200      	movs	r2, #0
 8002026:	4619      	mov	r1, r3
 8002028:	4807      	ldr	r0, [pc, #28]	; (8002048 <MX_TIM5_Init+0xe8>)
 800202a:	f003 fa93 	bl	8005554 <HAL_TIM_PWM_ConfigChannel>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002034:	f7ff fd3a 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002038:	4803      	ldr	r0, [pc, #12]	; (8002048 <MX_TIM5_Init+0xe8>)
 800203a:	f000 fa7b 	bl	8002534 <HAL_TIM_MspPostInit>

}
 800203e:	bf00      	nop
 8002040:	3738      	adds	r7, #56	; 0x38
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200003f0 	.word	0x200003f0
 800204c:	40000c00 	.word	0x40000c00

08002050 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002060:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <MX_TIM6_Init+0x64>)
 8002062:	4a15      	ldr	r2, [pc, #84]	; (80020b8 <MX_TIM6_Init+0x68>)
 8002064:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002066:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <MX_TIM6_Init+0x64>)
 8002068:	2200      	movs	r2, #0
 800206a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <MX_TIM6_Init+0x64>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 96-1;
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <MX_TIM6_Init+0x64>)
 8002074:	225f      	movs	r2, #95	; 0x5f
 8002076:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <MX_TIM6_Init+0x64>)
 800207a:	2200      	movs	r2, #0
 800207c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800207e:	480d      	ldr	r0, [pc, #52]	; (80020b4 <MX_TIM6_Init+0x64>)
 8002080:	f002 fe2c 	bl	8004cdc <HAL_TIM_Base_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800208a:	f7ff fd0f 	bl	8001aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	4619      	mov	r1, r3
 800209a:	4806      	ldr	r0, [pc, #24]	; (80020b4 <MX_TIM6_Init+0x64>)
 800209c:	f004 f982 	bl	80063a4 <HAL_TIMEx_MasterConfigSynchronization>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80020a6:	f7ff fd01 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200004d4 	.word	0x200004d4
 80020b8:	40001000 	.word	0x40001000

080020bc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80020cc:	4b14      	ldr	r3, [pc, #80]	; (8002120 <MX_TIM7_Init+0x64>)
 80020ce:	4a15      	ldr	r2, [pc, #84]	; (8002124 <MX_TIM7_Init+0x68>)
 80020d0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 96-1;
 80020d2:	4b13      	ldr	r3, [pc, #76]	; (8002120 <MX_TIM7_Init+0x64>)
 80020d4:	225f      	movs	r2, #95	; 0x5f
 80020d6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <MX_TIM7_Init+0x64>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <MX_TIM7_Init+0x64>)
 80020e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020e4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <MX_TIM7_Init+0x64>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80020ec:	480c      	ldr	r0, [pc, #48]	; (8002120 <MX_TIM7_Init+0x64>)
 80020ee:	f002 fdf5 	bl	8004cdc <HAL_TIM_Base_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80020f8:	f7ff fcd8 	bl	8001aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020fc:	2300      	movs	r3, #0
 80020fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	4619      	mov	r1, r3
 8002108:	4805      	ldr	r0, [pc, #20]	; (8002120 <MX_TIM7_Init+0x64>)
 800210a:	f004 f94b 	bl	80063a4 <HAL_TIMEx_MasterConfigSynchronization>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002114:	f7ff fcca 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000604 	.word	0x20000604
 8002124:	40001400 	.word	0x40001400

08002128 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800212e:	f107 0310 	add.w	r3, r7, #16
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800213c:	463b      	mov	r3, r7
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	609a      	str	r2, [r3, #8]
 8002146:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002148:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <MX_TIM9_Init+0xb0>)
 800214a:	4a24      	ldr	r2, [pc, #144]	; (80021dc <MX_TIM9_Init+0xb4>)
 800214c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 96-1;
 800214e:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <MX_TIM9_Init+0xb0>)
 8002150:	225f      	movs	r2, #95	; 0x5f
 8002152:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002154:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <MX_TIM9_Init+0xb0>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 18000;
 800215a:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <MX_TIM9_Init+0xb0>)
 800215c:	f244 6250 	movw	r2, #18000	; 0x4650
 8002160:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002162:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <MX_TIM9_Init+0xb0>)
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <MX_TIM9_Init+0xb0>)
 800216a:	2200      	movs	r2, #0
 800216c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800216e:	481a      	ldr	r0, [pc, #104]	; (80021d8 <MX_TIM9_Init+0xb0>)
 8002170:	f002 fdb4 	bl	8004cdc <HAL_TIM_Base_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM9_Init+0x56>
  {
    Error_Handler();
 800217a:	f7ff fc97 	bl	8001aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800217e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002182:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002184:	f107 0310 	add.w	r3, r7, #16
 8002188:	4619      	mov	r1, r3
 800218a:	4813      	ldr	r0, [pc, #76]	; (80021d8 <MX_TIM9_Init+0xb0>)
 800218c:	f003 faf6 	bl	800577c <HAL_TIM_ConfigClockSource>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 8002196:	f7ff fc89 	bl	8001aac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 800219a:	480f      	ldr	r0, [pc, #60]	; (80021d8 <MX_TIM9_Init+0xb0>)
 800219c:	f002 fefe 	bl	8004f9c <HAL_TIM_IC_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM9_Init+0x82>
  {
    Error_Handler();
 80021a6:	f7ff fc81 	bl	8001aac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80021aa:	230a      	movs	r3, #10
 80021ac:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021ae:	2301      	movs	r3, #1
 80021b0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80021ba:	463b      	mov	r3, r7
 80021bc:	2204      	movs	r2, #4
 80021be:	4619      	mov	r1, r3
 80021c0:	4805      	ldr	r0, [pc, #20]	; (80021d8 <MX_TIM9_Init+0xb0>)
 80021c2:	f003 f92a 	bl	800541a <HAL_TIM_IC_ConfigChannel>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM9_Init+0xa8>
  {
    Error_Handler();
 80021cc:	f7ff fc6e 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80021d0:	bf00      	nop
 80021d2:	3720      	adds	r7, #32
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000520 	.word	0x20000520
 80021dc:	40014000 	.word	0x40014000

080021e0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80021e6:	463b      	mov	r3, r7
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80021f2:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <MX_TIM13_Init+0x88>)
 80021f4:	4a1d      	ldr	r2, [pc, #116]	; (800226c <MX_TIM13_Init+0x8c>)
 80021f6:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 96-1;
 80021f8:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <MX_TIM13_Init+0x88>)
 80021fa:	225f      	movs	r2, #95	; 0x5f
 80021fc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <MX_TIM13_Init+0x88>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 18000;
 8002204:	4b18      	ldr	r3, [pc, #96]	; (8002268 <MX_TIM13_Init+0x88>)
 8002206:	f244 6250 	movw	r2, #18000	; 0x4650
 800220a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220c:	4b16      	ldr	r3, [pc, #88]	; (8002268 <MX_TIM13_Init+0x88>)
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002212:	4b15      	ldr	r3, [pc, #84]	; (8002268 <MX_TIM13_Init+0x88>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002218:	4813      	ldr	r0, [pc, #76]	; (8002268 <MX_TIM13_Init+0x88>)
 800221a:	f002 fd5f 	bl	8004cdc <HAL_TIM_Base_Init>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM13_Init+0x48>
  {
    Error_Handler();
 8002224:	f7ff fc42 	bl	8001aac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8002228:	480f      	ldr	r0, [pc, #60]	; (8002268 <MX_TIM13_Init+0x88>)
 800222a:	f002 feb7 	bl	8004f9c <HAL_TIM_IC_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM13_Init+0x58>
  {
    Error_Handler();
 8002234:	f7ff fc3a 	bl	8001aac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002238:	230a      	movs	r3, #10
 800223a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800223c:	2301      	movs	r3, #1
 800223e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002248:	463b      	mov	r3, r7
 800224a:	2200      	movs	r2, #0
 800224c:	4619      	mov	r1, r3
 800224e:	4806      	ldr	r0, [pc, #24]	; (8002268 <MX_TIM13_Init+0x88>)
 8002250:	f003 f8e3 	bl	800541a <HAL_TIM_IC_ConfigChannel>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM13_Init+0x7e>
  {
    Error_Handler();
 800225a:	f7ff fc27 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000488 	.word	0x20000488
 800226c:	40001c00 	.word	0x40001c00

08002270 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
 8002284:	615a      	str	r2, [r3, #20]
 8002286:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002288:	4b1e      	ldr	r3, [pc, #120]	; (8002304 <MX_TIM14_Init+0x94>)
 800228a:	4a1f      	ldr	r2, [pc, #124]	; (8002308 <MX_TIM14_Init+0x98>)
 800228c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 96-1;
 800228e:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <MX_TIM14_Init+0x94>)
 8002290:	225f      	movs	r2, #95	; 0x5f
 8002292:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002294:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <MX_TIM14_Init+0x94>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 800229a:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <MX_TIM14_Init+0x94>)
 800229c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80022a0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a2:	4b18      	ldr	r3, [pc, #96]	; (8002304 <MX_TIM14_Init+0x94>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a8:	4b16      	ldr	r3, [pc, #88]	; (8002304 <MX_TIM14_Init+0x94>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80022ae:	4815      	ldr	r0, [pc, #84]	; (8002304 <MX_TIM14_Init+0x94>)
 80022b0:	f002 fd14 	bl	8004cdc <HAL_TIM_Base_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80022ba:	f7ff fbf7 	bl	8001aac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80022be:	4811      	ldr	r0, [pc, #68]	; (8002304 <MX_TIM14_Init+0x94>)
 80022c0:	f002 fe0b 	bl	8004eda <HAL_TIM_PWM_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80022ca:	f7ff fbef 	bl	8001aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ce:	2360      	movs	r3, #96	; 0x60
 80022d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	2200      	movs	r2, #0
 80022e2:	4619      	mov	r1, r3
 80022e4:	4807      	ldr	r0, [pc, #28]	; (8002304 <MX_TIM14_Init+0x94>)
 80022e6:	f003 f935 	bl	8005554 <HAL_TIM_PWM_ConfigChannel>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80022f0:	f7ff fbdc 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80022f4:	4803      	ldr	r0, [pc, #12]	; (8002304 <MX_TIM14_Init+0x94>)
 80022f6:	f000 f91d 	bl	8002534 <HAL_TIM_MspPostInit>

}
 80022fa:	bf00      	nop
 80022fc:	3720      	adds	r7, #32
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200005b8 	.word	0x200005b8
 8002308:	40002000 	.word	0x40002000

0800230c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b092      	sub	sp, #72	; 0x48
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232c:	d10c      	bne.n	8002348 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800232e:	4b77      	ldr	r3, [pc, #476]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a76      	ldr	r2, [pc, #472]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b74      	ldr	r3, [pc, #464]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
 8002344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002346:	e0dd      	b.n	8002504 <HAL_TIM_Base_MspInit+0x1f8>
  else if(tim_baseHandle->Instance==TIM3)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a70      	ldr	r2, [pc, #448]	; (8002510 <HAL_TIM_Base_MspInit+0x204>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d114      	bne.n	800237c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002352:	4b6e      	ldr	r3, [pc, #440]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	4a6d      	ldr	r2, [pc, #436]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 8002358:	f043 0302 	orr.w	r3, r3, #2
 800235c:	6413      	str	r3, [r2, #64]	; 0x40
 800235e:	4b6b      	ldr	r3, [pc, #428]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	201d      	movs	r0, #29
 8002370:	f000 fccd 	bl	8002d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002374:	201d      	movs	r0, #29
 8002376:	f000 fce6 	bl	8002d46 <HAL_NVIC_EnableIRQ>
}
 800237a:	e0c3      	b.n	8002504 <HAL_TIM_Base_MspInit+0x1f8>
  else if(tim_baseHandle->Instance==TIM5)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a64      	ldr	r2, [pc, #400]	; (8002514 <HAL_TIM_Base_MspInit+0x208>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d10c      	bne.n	80023a0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002386:	4b61      	ldr	r3, [pc, #388]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	4a60      	ldr	r2, [pc, #384]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 800238c:	f043 0308 	orr.w	r3, r3, #8
 8002390:	6413      	str	r3, [r2, #64]	; 0x40
 8002392:	4b5e      	ldr	r3, [pc, #376]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	62bb      	str	r3, [r7, #40]	; 0x28
 800239c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800239e:	e0b1      	b.n	8002504 <HAL_TIM_Base_MspInit+0x1f8>
  else if(tim_baseHandle->Instance==TIM6)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a5c      	ldr	r2, [pc, #368]	; (8002518 <HAL_TIM_Base_MspInit+0x20c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d114      	bne.n	80023d4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023aa:	4b58      	ldr	r3, [pc, #352]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	4a57      	ldr	r2, [pc, #348]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 80023b0:	f043 0310 	orr.w	r3, r3, #16
 80023b4:	6413      	str	r3, [r2, #64]	; 0x40
 80023b6:	4b55      	ldr	r3, [pc, #340]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f003 0310 	and.w	r3, r3, #16
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2100      	movs	r1, #0
 80023c6:	2036      	movs	r0, #54	; 0x36
 80023c8:	f000 fca1 	bl	8002d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023cc:	2036      	movs	r0, #54	; 0x36
 80023ce:	f000 fcba 	bl	8002d46 <HAL_NVIC_EnableIRQ>
}
 80023d2:	e097      	b.n	8002504 <HAL_TIM_Base_MspInit+0x1f8>
  else if(tim_baseHandle->Instance==TIM7)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a50      	ldr	r2, [pc, #320]	; (800251c <HAL_TIM_Base_MspInit+0x210>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d114      	bne.n	8002408 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80023de:	4b4b      	ldr	r3, [pc, #300]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	4a4a      	ldr	r2, [pc, #296]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 80023e4:	f043 0320 	orr.w	r3, r3, #32
 80023e8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ea:	4b48      	ldr	r3, [pc, #288]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f003 0320 	and.w	r3, r3, #32
 80023f2:	623b      	str	r3, [r7, #32]
 80023f4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2100      	movs	r1, #0
 80023fa:	2037      	movs	r0, #55	; 0x37
 80023fc:	f000 fc87 	bl	8002d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002400:	2037      	movs	r0, #55	; 0x37
 8002402:	f000 fca0 	bl	8002d46 <HAL_NVIC_EnableIRQ>
}
 8002406:	e07d      	b.n	8002504 <HAL_TIM_Base_MspInit+0x1f8>
  else if(tim_baseHandle->Instance==TIM9)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a44      	ldr	r2, [pc, #272]	; (8002520 <HAL_TIM_Base_MspInit+0x214>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d130      	bne.n	8002474 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002412:	4b3e      	ldr	r3, [pc, #248]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	4a3d      	ldr	r2, [pc, #244]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241c:	6453      	str	r3, [r2, #68]	; 0x44
 800241e:	4b3b      	ldr	r3, [pc, #236]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002426:	61fb      	str	r3, [r7, #28]
 8002428:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800242a:	4b38      	ldr	r3, [pc, #224]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a37      	ldr	r2, [pc, #220]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 8002430:	f043 0310 	orr.w	r3, r3, #16
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b35      	ldr	r3, [pc, #212]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	61bb      	str	r3, [r7, #24]
 8002440:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = HCSR_ECHO_SX_Pin;
 8002442:	2340      	movs	r3, #64	; 0x40
 8002444:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2300      	movs	r3, #0
 8002450:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002452:	2303      	movs	r3, #3
 8002454:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(HCSR_ECHO_SX_GPIO_Port, &GPIO_InitStruct);
 8002456:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800245a:	4619      	mov	r1, r3
 800245c:	4831      	ldr	r0, [pc, #196]	; (8002524 <HAL_TIM_Base_MspInit+0x218>)
 800245e:	f001 f809 	bl	8003474 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2100      	movs	r1, #0
 8002466:	2018      	movs	r0, #24
 8002468:	f000 fc51 	bl	8002d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800246c:	2018      	movs	r0, #24
 800246e:	f000 fc6a 	bl	8002d46 <HAL_NVIC_EnableIRQ>
}
 8002472:	e047      	b.n	8002504 <HAL_TIM_Base_MspInit+0x1f8>
  else if(tim_baseHandle->Instance==TIM13)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a2b      	ldr	r2, [pc, #172]	; (8002528 <HAL_TIM_Base_MspInit+0x21c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d131      	bne.n	80024e2 <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800247e:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a22      	ldr	r2, [pc, #136]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 8002484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002496:	4b1d      	ldr	r3, [pc, #116]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4a1c      	ldr	r2, [pc, #112]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 800249c:	f043 0320 	orr.w	r3, r3, #32
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f003 0320 	and.w	r3, r3, #32
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HCSR_ECHO_SY_Pin;
 80024ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	2300      	movs	r3, #0
 80024be:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80024c0:	2309      	movs	r3, #9
 80024c2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(HCSR_ECHO_SY_GPIO_Port, &GPIO_InitStruct);
 80024c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024c8:	4619      	mov	r1, r3
 80024ca:	4818      	ldr	r0, [pc, #96]	; (800252c <HAL_TIM_Base_MspInit+0x220>)
 80024cc:	f000 ffd2 	bl	8003474 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80024d0:	2200      	movs	r2, #0
 80024d2:	2100      	movs	r1, #0
 80024d4:	202c      	movs	r0, #44	; 0x2c
 80024d6:	f000 fc1a 	bl	8002d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80024da:	202c      	movs	r0, #44	; 0x2c
 80024dc:	f000 fc33 	bl	8002d46 <HAL_NVIC_EnableIRQ>
}
 80024e0:	e010      	b.n	8002504 <HAL_TIM_Base_MspInit+0x1f8>
  else if(tim_baseHandle->Instance==TIM14)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a12      	ldr	r2, [pc, #72]	; (8002530 <HAL_TIM_Base_MspInit+0x224>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d10b      	bne.n	8002504 <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80024ec:	4b07      	ldr	r3, [pc, #28]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	4a06      	ldr	r2, [pc, #24]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 80024f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f6:	6413      	str	r3, [r2, #64]	; 0x40
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <HAL_TIM_Base_MspInit+0x200>)
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]
}
 8002504:	bf00      	nop
 8002506:	3748      	adds	r7, #72	; 0x48
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40023800 	.word	0x40023800
 8002510:	40000400 	.word	0x40000400
 8002514:	40000c00 	.word	0x40000c00
 8002518:	40001000 	.word	0x40001000
 800251c:	40001400 	.word	0x40001400
 8002520:	40014000 	.word	0x40014000
 8002524:	40021000 	.word	0x40021000
 8002528:	40001c00 	.word	0x40001c00
 800252c:	40021400 	.word	0x40021400
 8002530:	40002000 	.word	0x40002000

08002534 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002554:	d11d      	bne.n	8002592 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002556:	4b33      	ldr	r3, [pc, #204]	; (8002624 <HAL_TIM_MspPostInit+0xf0>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a32      	ldr	r2, [pc, #200]	; (8002624 <HAL_TIM_MspPostInit+0xf0>)
 800255c:	f043 0302 	orr.w	r3, r3, #2
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b30      	ldr	r3, [pc, #192]	; (8002624 <HAL_TIM_MspPostInit+0xf0>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = FIR_PWM_MD_Pin;
 800256e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257c:	2300      	movs	r3, #0
 800257e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002580:	2301      	movs	r3, #1
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FIR_PWM_MD_GPIO_Port, &GPIO_InitStruct);
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	4619      	mov	r1, r3
 800258a:	4827      	ldr	r0, [pc, #156]	; (8002628 <HAL_TIM_MspPostInit+0xf4>)
 800258c:	f000 ff72 	bl	8003474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002590:	e043      	b.n	800261a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM5)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a25      	ldr	r2, [pc, #148]	; (800262c <HAL_TIM_MspPostInit+0xf8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d11c      	bne.n	80025d6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259c:	4b21      	ldr	r3, [pc, #132]	; (8002624 <HAL_TIM_MspPostInit+0xf0>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	4a20      	ldr	r2, [pc, #128]	; (8002624 <HAL_TIM_MspPostInit+0xf0>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6313      	str	r3, [r2, #48]	; 0x30
 80025a8:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <HAL_TIM_MspPostInit+0xf0>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FIR_PWM_ME_Pin;
 80025b4:	2301      	movs	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b8:	2302      	movs	r3, #2
 80025ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c0:	2300      	movs	r3, #0
 80025c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80025c4:	2302      	movs	r3, #2
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FIR_PWM_ME_GPIO_Port, &GPIO_InitStruct);
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	4619      	mov	r1, r3
 80025ce:	4818      	ldr	r0, [pc, #96]	; (8002630 <HAL_TIM_MspPostInit+0xfc>)
 80025d0:	f000 ff50 	bl	8003474 <HAL_GPIO_Init>
}
 80025d4:	e021      	b.n	800261a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM14)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a16      	ldr	r2, [pc, #88]	; (8002634 <HAL_TIM_MspPostInit+0x100>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d11c      	bne.n	800261a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025e0:	4b10      	ldr	r3, [pc, #64]	; (8002624 <HAL_TIM_MspPostInit+0xf0>)
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	4a0f      	ldr	r2, [pc, #60]	; (8002624 <HAL_TIM_MspPostInit+0xf0>)
 80025e6:	f043 0320 	orr.w	r3, r3, #32
 80025ea:	6313      	str	r3, [r2, #48]	; 0x30
 80025ec:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <HAL_TIM_MspPostInit+0xf0>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SG90_PWM_Pin;
 80025f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fe:	2302      	movs	r3, #2
 8002600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800260a:	2309      	movs	r3, #9
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SG90_PWM_GPIO_Port, &GPIO_InitStruct);
 800260e:	f107 0314 	add.w	r3, r7, #20
 8002612:	4619      	mov	r1, r3
 8002614:	4808      	ldr	r0, [pc, #32]	; (8002638 <HAL_TIM_MspPostInit+0x104>)
 8002616:	f000 ff2d 	bl	8003474 <HAL_GPIO_Init>
}
 800261a:	bf00      	nop
 800261c:	3728      	adds	r7, #40	; 0x28
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800
 8002628:	40020400 	.word	0x40020400
 800262c:	40000c00 	.word	0x40000c00
 8002630:	40020000 	.word	0x40020000
 8002634:	40002000 	.word	0x40002000
 8002638:	40021400 	.word	0x40021400

0800263c <HAL_TIM_PeriodElapsedCallback>:
	}
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)	//	FIR0450
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a0c      	ldr	r2, [pc, #48]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d104      	bne.n	8002656 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		proc_ISR_speed();
 800264c:	f7fe fae8 	bl	8000c20 <proc_ISR_speed>
		proc_ISR_PID();
 8002650:	f7fe f9f4 	bl	8000a3c <proc_ISR_PID>
	else if(htim == &htim7)
	{
		HCSR_get_distance();
		//read_obstacles();
	}
}
 8002654:	e00c      	b.n	8002670 <HAL_TIM_PeriodElapsedCallback+0x34>
	else if(htim == &htim6)	//	HC-SR04
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a08      	ldr	r2, [pc, #32]	; (800267c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d102      	bne.n	8002664 <HAL_TIM_PeriodElapsedCallback+0x28>
		HCSR_proc_TRIG_FSM();
 800265e:	f7fe fdab 	bl	80011b8 <HCSR_proc_TRIG_FSM>
}
 8002662:	e005      	b.n	8002670 <HAL_TIM_PeriodElapsedCallback+0x34>
	else if(htim == &htim7)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a06      	ldr	r2, [pc, #24]	; (8002680 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d101      	bne.n	8002670 <HAL_TIM_PeriodElapsedCallback+0x34>
		HCSR_get_distance();
 800266c:	f7fe fe92 	bl	8001394 <HCSR_get_distance>
}
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	2000043c 	.word	0x2000043c
 800267c:	200004d4 	.word	0x200004d4
 8002680:	20000604 	.word	0x20000604

08002684 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	if(htim == &htim9)														// SX
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a0d      	ldr	r2, [pc, #52]	; (80026c4 <HAL_TIM_IC_CaptureCallback+0x40>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d107      	bne.n	80026a4 <HAL_TIM_IC_CaptureCallback+0x20>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	7f1b      	ldrb	r3, [r3, #28]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d10e      	bne.n	80026ba <HAL_TIM_IC_CaptureCallback+0x36>
		{
			HCSR_read_ECHO_pulse('x');
 800269c:	2078      	movs	r0, #120	; 0x78
 800269e:	f7fe fdeb 	bl	8001278 <HCSR_read_ECHO_pulse>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
		{
			HCSR_read_ECHO_pulse('y');
		}
	}
}
 80026a2:	e00a      	b.n	80026ba <HAL_TIM_IC_CaptureCallback+0x36>
	else if(htim == &htim13)												// SY
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <HAL_TIM_IC_CaptureCallback+0x44>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d106      	bne.n	80026ba <HAL_TIM_IC_CaptureCallback+0x36>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	7f1b      	ldrb	r3, [r3, #28]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d102      	bne.n	80026ba <HAL_TIM_IC_CaptureCallback+0x36>
			HCSR_read_ECHO_pulse('y');
 80026b4:	2079      	movs	r0, #121	; 0x79
 80026b6:	f7fe fddf 	bl	8001278 <HCSR_read_ECHO_pulse>
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000520 	.word	0x20000520
 80026c8:	20000488 	.word	0x20000488

080026cc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 80026d0:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <MX_USART3_UART_Init+0x74>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 80026d6:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <MX_USART3_UART_Init+0x78>)
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 80026dc:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <MX_USART3_UART_Init+0x7c>)
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <MX_USART3_UART_Init+0x80>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 80026e8:	4b19      	ldr	r3, [pc, #100]	; (8002750 <MX_USART3_UART_Init+0x84>)
 80026ea:	220d      	movs	r2, #13
 80026ec:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026ee:	4b19      	ldr	r3, [pc, #100]	; (8002754 <MX_USART3_UART_Init+0x88>)
 80026f0:	4a19      	ldr	r2, [pc, #100]	; (8002758 <MX_USART3_UART_Init+0x8c>)
 80026f2:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1750000;
 80026f4:	4b17      	ldr	r3, [pc, #92]	; (8002754 <MX_USART3_UART_Init+0x88>)
 80026f6:	4a19      	ldr	r2, [pc, #100]	; (800275c <MX_USART3_UART_Init+0x90>)
 80026f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026fa:	4b16      	ldr	r3, [pc, #88]	; (8002754 <MX_USART3_UART_Init+0x88>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002700:	4b14      	ldr	r3, [pc, #80]	; (8002754 <MX_USART3_UART_Init+0x88>)
 8002702:	2200      	movs	r2, #0
 8002704:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <MX_USART3_UART_Init+0x88>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <MX_USART3_UART_Init+0x88>)
 800270e:	220c      	movs	r2, #12
 8002710:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <MX_USART3_UART_Init+0x88>)
 8002714:	2200      	movs	r2, #0
 8002716:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <MX_USART3_UART_Init+0x88>)
 800271a:	2200      	movs	r2, #0
 800271c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800271e:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <MX_USART3_UART_Init+0x88>)
 8002720:	2200      	movs	r2, #0
 8002722:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <MX_USART3_UART_Init+0x88>)
 8002726:	2200      	movs	r2, #0
 8002728:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800272a:	480a      	ldr	r0, [pc, #40]	; (8002754 <MX_USART3_UART_Init+0x88>)
 800272c:	f003 fee6 	bl	80064fc <HAL_UART_Init>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_USART3_UART_Init+0x6e>
  {
    Error_Handler();
 8002736:	f7ff f9b9 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	200007d8 	.word	0x200007d8
 8002744:	200008dc 	.word	0x200008dc
 8002748:	200007d4 	.word	0x200007d4
 800274c:	200008e0 	.word	0x200008e0
 8002750:	200007dc 	.word	0x200007dc
 8002754:	20000750 	.word	0x20000750
 8002758:	40004800 	.word	0x40004800
 800275c:	001ab3f0 	.word	0x001ab3f0

08002760 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b0ae      	sub	sp, #184	; 0xb8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	2290      	movs	r2, #144	; 0x90
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f005 fa85 	bl	8007c90 <memset>
  if(uartHandle->Instance==USART3)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a26      	ldr	r2, [pc, #152]	; (8002824 <HAL_UART_MspInit+0xc4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d144      	bne.n	800281a <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002790:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002794:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002796:	2300      	movs	r3, #0
 8002798:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	4618      	mov	r0, r3
 80027a0:	f001 fe74 	bl	800448c <HAL_RCCEx_PeriphCLKConfig>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80027aa:	f7ff f97f 	bl	8001aac <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80027ae:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <HAL_UART_MspInit+0xc8>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	4a1d      	ldr	r2, [pc, #116]	; (8002828 <HAL_UART_MspInit+0xc8>)
 80027b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ba:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <HAL_UART_MspInit+0xc8>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c6:	4b18      	ldr	r3, [pc, #96]	; (8002828 <HAL_UART_MspInit+0xc8>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a17      	ldr	r2, [pc, #92]	; (8002828 <HAL_UART_MspInit+0xc8>)
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <HAL_UART_MspInit+0xc8>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e6:	2302      	movs	r3, #2
 80027e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f2:	2303      	movs	r3, #3
 80027f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027f8:	2307      	movs	r3, #7
 80027fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002802:	4619      	mov	r1, r3
 8002804:	4809      	ldr	r0, [pc, #36]	; (800282c <HAL_UART_MspInit+0xcc>)
 8002806:	f000 fe35 	bl	8003474 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	2027      	movs	r0, #39	; 0x27
 8002810:	f000 fa7d 	bl	8002d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002814:	2027      	movs	r0, #39	; 0x27
 8002816:	f000 fa96 	bl	8002d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800281a:	bf00      	nop
 800281c:	37b8      	adds	r7, #184	; 0xb8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40004800 	.word	0x40004800
 8002828:	40023800 	.word	0x40023800
 800282c:	40020c00 	.word	0x40020c00

08002830 <has_message_from_UART>:
}

/* USER CODE BEGIN 1 */

bool has_message_from_UART()
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
	return flagCPP;
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <has_message_from_UART+0x14>)
 8002836:	781b      	ldrb	r3, [r3, #0]
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	200007d8 	.word	0x200007d8

08002848 <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
	return flagCPE;
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <is_transmitting_to_UART+0x14>)
 800284e:	781b      	ldrb	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	200008dc 	.word	0x200008dc

08002860 <reset_UART>:

void reset_UART()
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 8002864:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002868:	2100      	movs	r1, #0
 800286a:	4806      	ldr	r0, [pc, #24]	; (8002884 <reset_UART+0x24>)
 800286c:	f005 fa10 	bl	8007c90 <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8002870:	2201      	movs	r2, #1
 8002872:	4904      	ldr	r1, [pc, #16]	; (8002884 <reset_UART+0x24>)
 8002874:	4804      	ldr	r0, [pc, #16]	; (8002888 <reset_UART+0x28>)
 8002876:	f003 fefd 	bl	8006674 <HAL_UART_Receive_IT>
	flagCPP = false;
 800287a:	4b04      	ldr	r3, [pc, #16]	; (800288c <reset_UART+0x2c>)
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
}
 8002880:	bf00      	nop
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20000650 	.word	0x20000650
 8002888:	20000750 	.word	0x20000750
 800288c:	200007d8 	.word	0x200007d8

08002890 <send_UART>:

void send_UART(const char* msg_to_send)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, BUFFER_SIZE);
 8002898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	480d      	ldr	r0, [pc, #52]	; (80028d4 <send_UART+0x44>)
 80028a0:	f006 f8ed 	bl	8008a7e <strncpy>
	strcat((char*) UART_TX_buffer, "\r");
 80028a4:	480b      	ldr	r0, [pc, #44]	; (80028d4 <send_UART+0x44>)
 80028a6:	f7fd fcd5 	bl	8000254 <strlen>
 80028aa:	4603      	mov	r3, r0
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <send_UART+0x44>)
 80028b0:	4413      	add	r3, r2
 80028b2:	4909      	ldr	r1, [pc, #36]	; (80028d8 <send_UART+0x48>)
 80028b4:	461a      	mov	r2, r3
 80028b6:	460b      	mov	r3, r1
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 80028bc:	4b07      	ldr	r3, [pc, #28]	; (80028dc <send_UART+0x4c>)
 80028be:	2201      	movs	r2, #1
 80028c0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 80028c2:	2201      	movs	r2, #1
 80028c4:	4903      	ldr	r1, [pc, #12]	; (80028d4 <send_UART+0x44>)
 80028c6:	4806      	ldr	r0, [pc, #24]	; (80028e0 <send_UART+0x50>)
 80028c8:	f003 fe66 	bl	8006598 <HAL_UART_Transmit_IT>
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	200007dc 	.word	0x200007dc
 80028d8:	0800cd94 	.word	0x0800cd94
 80028dc:	200008dc 	.word	0x200008dc
 80028e0:	20000750 	.word	0x20000750

080028e4 <read_UART>:

void read_UART(char* msg_to_read)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, BUFFER_SIZE);
 80028ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028f0:	4903      	ldr	r1, [pc, #12]	; (8002900 <read_UART+0x1c>)
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f006 f8c3 	bl	8008a7e <strncpy>
}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000650 	.word	0x20000650

08002904 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 800290c:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <HAL_UART_RxCpltCallback+0xc4>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d154      	bne.n	80029be <HAL_UART_RxCpltCallback+0xba>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r' || UART_RX_buffer[UART_RX_index] == '\\' || UART_RX_buffer[UART_RX_index] == '/')
 8002914:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <HAL_UART_RxCpltCallback+0xc8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a2d      	ldr	r2, [pc, #180]	; (80029d0 <HAL_UART_RxCpltCallback+0xcc>)
 800291a:	5cd3      	ldrb	r3, [r2, r3]
 800291c:	2b0d      	cmp	r3, #13
 800291e:	d00b      	beq.n	8002938 <HAL_UART_RxCpltCallback+0x34>
 8002920:	4b2a      	ldr	r3, [pc, #168]	; (80029cc <HAL_UART_RxCpltCallback+0xc8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a2a      	ldr	r2, [pc, #168]	; (80029d0 <HAL_UART_RxCpltCallback+0xcc>)
 8002926:	5cd3      	ldrb	r3, [r2, r3]
 8002928:	2b5c      	cmp	r3, #92	; 0x5c
 800292a:	d005      	beq.n	8002938 <HAL_UART_RxCpltCallback+0x34>
 800292c:	4b27      	ldr	r3, [pc, #156]	; (80029cc <HAL_UART_RxCpltCallback+0xc8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a27      	ldr	r2, [pc, #156]	; (80029d0 <HAL_UART_RxCpltCallback+0xcc>)
 8002932:	5cd3      	ldrb	r3, [r2, r3]
 8002934:	2b2f      	cmp	r3, #47	; 0x2f
 8002936:	d106      	bne.n	8002946 <HAL_UART_RxCpltCallback+0x42>
	{
		UART_RX_index = 0;
 8002938:	4b24      	ldr	r3, [pc, #144]	; (80029cc <HAL_UART_RxCpltCallback+0xc8>)
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 800293e:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <HAL_UART_RxCpltCallback+0xc4>)
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]
 8002944:	e03c      	b.n	80029c0 <HAL_UART_RxCpltCallback+0xbc>
	}
	else
	{
		if(UART_RX_buffer[UART_RX_index] == 0x08) //	BACKSPACE
 8002946:	4b21      	ldr	r3, [pc, #132]	; (80029cc <HAL_UART_RxCpltCallback+0xc8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a21      	ldr	r2, [pc, #132]	; (80029d0 <HAL_UART_RxCpltCallback+0xcc>)
 800294c:	5cd3      	ldrb	r3, [r2, r3]
 800294e:	2b08      	cmp	r3, #8
 8002950:	d10f      	bne.n	8002972 <HAL_UART_RxCpltCallback+0x6e>
		{
			if(UART_RX_index == 0)
 8002952:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <HAL_UART_RxCpltCallback+0xc8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d105      	bne.n	8002966 <HAL_UART_RxCpltCallback+0x62>
				UART_RX_index--;
 800295a:	4b1c      	ldr	r3, [pc, #112]	; (80029cc <HAL_UART_RxCpltCallback+0xc8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3b01      	subs	r3, #1
 8002960:	4a1a      	ldr	r2, [pc, #104]	; (80029cc <HAL_UART_RxCpltCallback+0xc8>)
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	e01c      	b.n	80029a0 <HAL_UART_RxCpltCallback+0x9c>
			else
				UART_RX_index -= 2;
 8002966:	4b19      	ldr	r3, [pc, #100]	; (80029cc <HAL_UART_RxCpltCallback+0xc8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	3b02      	subs	r3, #2
 800296c:	4a17      	ldr	r2, [pc, #92]	; (80029cc <HAL_UART_RxCpltCallback+0xc8>)
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	e016      	b.n	80029a0 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == 0x1B) //	ESCAPE
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <HAL_UART_RxCpltCallback+0xc8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a16      	ldr	r2, [pc, #88]	; (80029d0 <HAL_UART_RxCpltCallback+0xcc>)
 8002978:	5cd3      	ldrb	r3, [r2, r3]
 800297a:	2b1b      	cmp	r3, #27
 800297c:	d104      	bne.n	8002988 <HAL_UART_RxCpltCallback+0x84>
		{
			UART_RX_index = -1;
 800297e:	4b13      	ldr	r3, [pc, #76]	; (80029cc <HAL_UART_RxCpltCallback+0xc8>)
 8002980:	f04f 32ff 	mov.w	r2, #4294967295
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e00b      	b.n	80029a0 <HAL_UART_RxCpltCallback+0x9c>
		}
		else if(UART_RX_buffer[UART_RX_index] == '$') //		$
 8002988:	4b10      	ldr	r3, [pc, #64]	; (80029cc <HAL_UART_RxCpltCallback+0xc8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <HAL_UART_RxCpltCallback+0xcc>)
 800298e:	5cd3      	ldrb	r3, [r2, r3]
 8002990:	2b24      	cmp	r3, #36	; 0x24
 8002992:	d105      	bne.n	80029a0 <HAL_UART_RxCpltCallback+0x9c>
		{
			UART_RX_index = 0;
 8002994:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <HAL_UART_RxCpltCallback+0xc8>)
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
			UART_RX_buffer[0] = '$';
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <HAL_UART_RxCpltCallback+0xcc>)
 800299c:	2224      	movs	r2, #36	; 0x24
 800299e:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 80029a0:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <HAL_UART_RxCpltCallback+0xc8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3301      	adds	r3, #1
 80029a6:	4a09      	ldr	r2, [pc, #36]	; (80029cc <HAL_UART_RxCpltCallback+0xc8>)
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	4b08      	ldr	r3, [pc, #32]	; (80029cc <HAL_UART_RxCpltCallback+0xc8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a08      	ldr	r2, [pc, #32]	; (80029d0 <HAL_UART_RxCpltCallback+0xcc>)
 80029b0:	4413      	add	r3, r2
 80029b2:	2201      	movs	r2, #1
 80029b4:	4619      	mov	r1, r3
 80029b6:	4807      	ldr	r0, [pc, #28]	; (80029d4 <HAL_UART_RxCpltCallback+0xd0>)
 80029b8:	f003 fe5c 	bl	8006674 <HAL_UART_Receive_IT>
 80029bc:	e000      	b.n	80029c0 <HAL_UART_RxCpltCallback+0xbc>
		return;
 80029be:	bf00      	nop
	}
}
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200007d8 	.word	0x200007d8
 80029cc:	200007d4 	.word	0x200007d4
 80029d0:	20000650 	.word	0x20000650
 80029d4:	20000750 	.word	0x20000750

080029d8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 80029e0:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <HAL_UART_TxCpltCallback+0x64>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	f083 0301 	eor.w	r3, r3, #1
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d122      	bne.n	8002a34 <HAL_UART_TxCpltCallback+0x5c>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r' && UART_TX_buffer[UART_TX_index-1] != '\n')
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <HAL_UART_TxCpltCallback+0x68>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a14      	ldr	r2, [pc, #80]	; (8002a44 <HAL_UART_TxCpltCallback+0x6c>)
 80029f4:	5cd3      	ldrb	r3, [r2, r3]
 80029f6:	2b0d      	cmp	r3, #13
 80029f8:	d10d      	bne.n	8002a16 <HAL_UART_TxCpltCallback+0x3e>
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <HAL_UART_TxCpltCallback+0x68>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	4a10      	ldr	r2, [pc, #64]	; (8002a44 <HAL_UART_TxCpltCallback+0x6c>)
 8002a02:	5cd3      	ldrb	r3, [r2, r3]
 8002a04:	2b0a      	cmp	r3, #10
 8002a06:	d006      	beq.n	8002a16 <HAL_UART_TxCpltCallback+0x3e>
	{
		UART_TX_index = 0;
 8002a08:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <HAL_UART_TxCpltCallback+0x68>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 8002a0e:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <HAL_UART_TxCpltCallback+0x64>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	e00f      	b.n	8002a36 <HAL_UART_TxCpltCallback+0x5e>
	}
	else
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 8002a16:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <HAL_UART_TxCpltCallback+0x68>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	4a08      	ldr	r2, [pc, #32]	; (8002a40 <HAL_UART_TxCpltCallback+0x68>)
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b07      	ldr	r3, [pc, #28]	; (8002a40 <HAL_UART_TxCpltCallback+0x68>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <HAL_UART_TxCpltCallback+0x6c>)
 8002a26:	4413      	add	r3, r2
 8002a28:	2201      	movs	r2, #1
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4806      	ldr	r0, [pc, #24]	; (8002a48 <HAL_UART_TxCpltCallback+0x70>)
 8002a2e:	f003 fdb3 	bl	8006598 <HAL_UART_Transmit_IT>
 8002a32:	e000      	b.n	8002a36 <HAL_UART_TxCpltCallback+0x5e>
		return;
 8002a34:	bf00      	nop
}
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	200008dc 	.word	0x200008dc
 8002a40:	200008e0 	.word	0x200008e0
 8002a44:	200007dc 	.word	0x200007dc
 8002a48:	20000750 	.word	0x20000750

08002a4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a50:	480d      	ldr	r0, [pc, #52]	; (8002a88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a52:	490e      	ldr	r1, [pc, #56]	; (8002a8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a54:	4a0e      	ldr	r2, [pc, #56]	; (8002a90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a58:	e002      	b.n	8002a60 <LoopCopyDataInit>

08002a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a5e:	3304      	adds	r3, #4

08002a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a64:	d3f9      	bcc.n	8002a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a66:	4a0b      	ldr	r2, [pc, #44]	; (8002a94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a68:	4c0b      	ldr	r4, [pc, #44]	; (8002a98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a6c:	e001      	b.n	8002a72 <LoopFillZerobss>

08002a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a70:	3204      	adds	r2, #4

08002a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a74:	d3fb      	bcc.n	8002a6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a76:	f7ff f99d 	bl	8001db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a7a:	f005 f8e5 	bl	8007c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a7e:	f7fe ff4f 	bl	8001920 <main>
  bx  lr    
 8002a82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a84:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a8c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8002a90:	0800d29c 	.word	0x0800d29c
  ldr r2, =_sbss
 8002a94:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002a98:	200008f8 	.word	0x200008f8

08002a9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a9c:	e7fe      	b.n	8002a9c <ADC_IRQHandler>

08002a9e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aa2:	2003      	movs	r0, #3
 8002aa4:	f000 f928 	bl	8002cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aa8:	200f      	movs	r0, #15
 8002aaa:	f000 f805 	bl	8002ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aae:	f7ff f803 	bl	8001ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ac0:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <HAL_InitTick+0x54>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <HAL_InitTick+0x58>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f943 	bl	8002d62 <HAL_SYSTICK_Config>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e00e      	b.n	8002b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b0f      	cmp	r3, #15
 8002aea:	d80a      	bhi.n	8002b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aec:	2200      	movs	r2, #0
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	f04f 30ff 	mov.w	r0, #4294967295
 8002af4:	f000 f90b 	bl	8002d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002af8:	4a06      	ldr	r2, [pc, #24]	; (8002b14 <HAL_InitTick+0x5c>)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e000      	b.n	8002b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000028 	.word	0x20000028
 8002b10:	20000030 	.word	0x20000030
 8002b14:	2000002c 	.word	0x2000002c

08002b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_IncTick+0x20>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <HAL_IncTick+0x24>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4413      	add	r3, r2
 8002b28:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <HAL_IncTick+0x24>)
 8002b2a:	6013      	str	r3, [r2, #0]
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20000030 	.word	0x20000030
 8002b3c:	200008e4 	.word	0x200008e4

08002b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return uwTick;
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <HAL_GetTick+0x14>)
 8002b46:	681b      	ldr	r3, [r3, #0]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	200008e4 	.word	0x200008e4

08002b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <__NVIC_SetPriorityGrouping+0x40>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b74:	4013      	ands	r3, r2
 8002b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <__NVIC_SetPriorityGrouping+0x44>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b86:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <__NVIC_SetPriorityGrouping+0x40>)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	60d3      	str	r3, [r2, #12]
}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000ed00 	.word	0xe000ed00
 8002b9c:	05fa0000 	.word	0x05fa0000

08002ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba4:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	f003 0307 	and.w	r3, r3, #7
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	db0b      	blt.n	8002be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	f003 021f 	and.w	r2, r3, #31
 8002bd4:	4907      	ldr	r1, [pc, #28]	; (8002bf4 <__NVIC_EnableIRQ+0x38>)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	2001      	movs	r0, #1
 8002bde:	fa00 f202 	lsl.w	r2, r0, r2
 8002be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	e000e100 	.word	0xe000e100

08002bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	6039      	str	r1, [r7, #0]
 8002c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	db0a      	blt.n	8002c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	490c      	ldr	r1, [pc, #48]	; (8002c44 <__NVIC_SetPriority+0x4c>)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	0112      	lsls	r2, r2, #4
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c20:	e00a      	b.n	8002c38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4908      	ldr	r1, [pc, #32]	; (8002c48 <__NVIC_SetPriority+0x50>)
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	3b04      	subs	r3, #4
 8002c30:	0112      	lsls	r2, r2, #4
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	440b      	add	r3, r1
 8002c36:	761a      	strb	r2, [r3, #24]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000e100 	.word	0xe000e100
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b089      	sub	sp, #36	; 0x24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f1c3 0307 	rsb	r3, r3, #7
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	bf28      	it	cs
 8002c6a:	2304      	movcs	r3, #4
 8002c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3304      	adds	r3, #4
 8002c72:	2b06      	cmp	r3, #6
 8002c74:	d902      	bls.n	8002c7c <NVIC_EncodePriority+0x30>
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3b03      	subs	r3, #3
 8002c7a:	e000      	b.n	8002c7e <NVIC_EncodePriority+0x32>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c80:	f04f 32ff 	mov.w	r2, #4294967295
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43da      	mvns	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	401a      	ands	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c94:	f04f 31ff 	mov.w	r1, #4294967295
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9e:	43d9      	mvns	r1, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	4313      	orrs	r3, r2
         );
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3724      	adds	r7, #36	; 0x24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cc4:	d301      	bcc.n	8002cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e00f      	b.n	8002cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cca:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <SysTick_Config+0x40>)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cd2:	210f      	movs	r1, #15
 8002cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd8:	f7ff ff8e 	bl	8002bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <SysTick_Config+0x40>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ce2:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <SysTick_Config+0x40>)
 8002ce4:	2207      	movs	r2, #7
 8002ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	e000e010 	.word	0xe000e010

08002cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff ff29 	bl	8002b58 <__NVIC_SetPriorityGrouping>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	4603      	mov	r3, r0
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d20:	f7ff ff3e 	bl	8002ba0 <__NVIC_GetPriorityGrouping>
 8002d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	6978      	ldr	r0, [r7, #20]
 8002d2c:	f7ff ff8e 	bl	8002c4c <NVIC_EncodePriority>
 8002d30:	4602      	mov	r2, r0
 8002d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff5d 	bl	8002bf8 <__NVIC_SetPriority>
}
 8002d3e:	bf00      	nop
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff31 	bl	8002bbc <__NVIC_EnableIRQ>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff ffa2 	bl	8002cb4 <SysTick_Config>
 8002d70:	4603      	mov	r3, r0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d88:	f7ff feda 	bl	8002b40 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e099      	b.n	8002ecc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002db8:	e00f      	b.n	8002dda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dba:	f7ff fec1 	bl	8002b40 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b05      	cmp	r3, #5
 8002dc6:	d908      	bls.n	8002dda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e078      	b.n	8002ecc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1e8      	bne.n	8002dba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4b38      	ldr	r3, [pc, #224]	; (8002ed4 <HAL_DMA_Init+0x158>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d107      	bne.n	8002e44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f023 0307 	bic.w	r3, r3, #7
 8002e5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d117      	bne.n	8002e9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00e      	beq.n	8002e9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 fa7b 	bl	800337c <DMA_CheckFifoParam>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2240      	movs	r2, #64	; 0x40
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e016      	b.n	8002ecc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fa32 	bl	8003310 <DMA_CalcBaseAndBitshift>
 8002eac:	4603      	mov	r3, r0
 8002eae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb4:	223f      	movs	r2, #63	; 0x3f
 8002eb6:	409a      	lsls	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	e010803f 	.word	0xe010803f

08002ed8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ee6:	f7ff fe2b 	bl	8002b40 <HAL_GetTick>
 8002eea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d008      	beq.n	8002f0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2280      	movs	r2, #128	; 0x80
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e052      	b.n	8002fb0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0216 	bic.w	r2, r2, #22
 8002f18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d103      	bne.n	8002f3a <HAL_DMA_Abort+0x62>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d007      	beq.n	8002f4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0208 	bic.w	r2, r2, #8
 8002f48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f5a:	e013      	b.n	8002f84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f5c:	f7ff fdf0 	bl	8002b40 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b05      	cmp	r3, #5
 8002f68:	d90c      	bls.n	8002f84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2203      	movs	r2, #3
 8002f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e015      	b.n	8002fb0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1e4      	bne.n	8002f5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f96:	223f      	movs	r2, #63	; 0x3f
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d004      	beq.n	8002fd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2280      	movs	r2, #128	; 0x80
 8002fd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e00c      	b.n	8002ff0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2205      	movs	r2, #5
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003008:	4b92      	ldr	r3, [pc, #584]	; (8003254 <HAL_DMA_IRQHandler+0x258>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a92      	ldr	r2, [pc, #584]	; (8003258 <HAL_DMA_IRQHandler+0x25c>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	0a9b      	lsrs	r3, r3, #10
 8003014:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003026:	2208      	movs	r2, #8
 8003028:	409a      	lsls	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01a      	beq.n	8003068 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d013      	beq.n	8003068 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0204 	bic.w	r2, r2, #4
 800304e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003054:	2208      	movs	r2, #8
 8003056:	409a      	lsls	r2, r3
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003060:	f043 0201 	orr.w	r2, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306c:	2201      	movs	r2, #1
 800306e:	409a      	lsls	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d012      	beq.n	800309e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00b      	beq.n	800309e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308a:	2201      	movs	r2, #1
 800308c:	409a      	lsls	r2, r3
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003096:	f043 0202 	orr.w	r2, r3, #2
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a2:	2204      	movs	r2, #4
 80030a4:	409a      	lsls	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d012      	beq.n	80030d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00b      	beq.n	80030d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c0:	2204      	movs	r2, #4
 80030c2:	409a      	lsls	r2, r3
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030cc:	f043 0204 	orr.w	r2, r3, #4
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d8:	2210      	movs	r2, #16
 80030da:	409a      	lsls	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d043      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d03c      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f6:	2210      	movs	r2, #16
 80030f8:	409a      	lsls	r2, r3
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d018      	beq.n	800313e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d108      	bne.n	800312c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d024      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
 800312a:	e01f      	b.n	800316c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003130:	2b00      	cmp	r3, #0
 8003132:	d01b      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4798      	blx	r3
 800313c:	e016      	b.n	800316c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d107      	bne.n	800315c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0208 	bic.w	r2, r2, #8
 800315a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003170:	2220      	movs	r2, #32
 8003172:	409a      	lsls	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 808e 	beq.w	800329a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8086 	beq.w	800329a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003192:	2220      	movs	r2, #32
 8003194:	409a      	lsls	r2, r3
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d136      	bne.n	8003214 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0216 	bic.w	r2, r2, #22
 80031b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695a      	ldr	r2, [r3, #20]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d103      	bne.n	80031d6 <HAL_DMA_IRQHandler+0x1da>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d007      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0208 	bic.w	r2, r2, #8
 80031e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ea:	223f      	movs	r2, #63	; 0x3f
 80031ec:	409a      	lsls	r2, r3
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003206:	2b00      	cmp	r3, #0
 8003208:	d07d      	beq.n	8003306 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	4798      	blx	r3
        }
        return;
 8003212:	e078      	b.n	8003306 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d01c      	beq.n	800325c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d108      	bne.n	8003242 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003234:	2b00      	cmp	r3, #0
 8003236:	d030      	beq.n	800329a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4798      	blx	r3
 8003240:	e02b      	b.n	800329a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003246:	2b00      	cmp	r3, #0
 8003248:	d027      	beq.n	800329a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	4798      	blx	r3
 8003252:	e022      	b.n	800329a <HAL_DMA_IRQHandler+0x29e>
 8003254:	20000028 	.word	0x20000028
 8003258:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10f      	bne.n	800328a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0210 	bic.w	r2, r2, #16
 8003278:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d032      	beq.n	8003308 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d022      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2205      	movs	r2, #5
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0201 	bic.w	r2, r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	3301      	adds	r3, #1
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d307      	bcc.n	80032e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f2      	bne.n	80032c6 <HAL_DMA_IRQHandler+0x2ca>
 80032e0:	e000      	b.n	80032e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80032e2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4798      	blx	r3
 8003304:	e000      	b.n	8003308 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003306:	bf00      	nop
    }
  }
}
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop

08003310 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	3b10      	subs	r3, #16
 8003320:	4a13      	ldr	r2, [pc, #76]	; (8003370 <DMA_CalcBaseAndBitshift+0x60>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800332a:	4a12      	ldr	r2, [pc, #72]	; (8003374 <DMA_CalcBaseAndBitshift+0x64>)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4413      	add	r3, r2
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b03      	cmp	r3, #3
 800333c:	d908      	bls.n	8003350 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <DMA_CalcBaseAndBitshift+0x68>)
 8003346:	4013      	ands	r3, r2
 8003348:	1d1a      	adds	r2, r3, #4
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	659a      	str	r2, [r3, #88]	; 0x58
 800334e:	e006      	b.n	800335e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	4b08      	ldr	r3, [pc, #32]	; (8003378 <DMA_CalcBaseAndBitshift+0x68>)
 8003358:	4013      	ands	r3, r2
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	aaaaaaab 	.word	0xaaaaaaab
 8003374:	0800cdbc 	.word	0x0800cdbc
 8003378:	fffffc00 	.word	0xfffffc00

0800337c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d11f      	bne.n	80033d6 <DMA_CheckFifoParam+0x5a>
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b03      	cmp	r3, #3
 800339a:	d856      	bhi.n	800344a <DMA_CheckFifoParam+0xce>
 800339c:	a201      	add	r2, pc, #4	; (adr r2, 80033a4 <DMA_CheckFifoParam+0x28>)
 800339e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a2:	bf00      	nop
 80033a4:	080033b5 	.word	0x080033b5
 80033a8:	080033c7 	.word	0x080033c7
 80033ac:	080033b5 	.word	0x080033b5
 80033b0:	0800344b 	.word	0x0800344b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d046      	beq.n	800344e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c4:	e043      	b.n	800344e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033ce:	d140      	bne.n	8003452 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033d4:	e03d      	b.n	8003452 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033de:	d121      	bne.n	8003424 <DMA_CheckFifoParam+0xa8>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d837      	bhi.n	8003456 <DMA_CheckFifoParam+0xda>
 80033e6:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <DMA_CheckFifoParam+0x70>)
 80033e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ec:	080033fd 	.word	0x080033fd
 80033f0:	08003403 	.word	0x08003403
 80033f4:	080033fd 	.word	0x080033fd
 80033f8:	08003415 	.word	0x08003415
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003400:	e030      	b.n	8003464 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003406:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d025      	beq.n	800345a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003412:	e022      	b.n	800345a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800341c:	d11f      	bne.n	800345e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003422:	e01c      	b.n	800345e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d903      	bls.n	8003432 <DMA_CheckFifoParam+0xb6>
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b03      	cmp	r3, #3
 800342e:	d003      	beq.n	8003438 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003430:	e018      	b.n	8003464 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	73fb      	strb	r3, [r7, #15]
      break;
 8003436:	e015      	b.n	8003464 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00e      	beq.n	8003462 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
      break;
 8003448:	e00b      	b.n	8003462 <DMA_CheckFifoParam+0xe6>
      break;
 800344a:	bf00      	nop
 800344c:	e00a      	b.n	8003464 <DMA_CheckFifoParam+0xe8>
      break;
 800344e:	bf00      	nop
 8003450:	e008      	b.n	8003464 <DMA_CheckFifoParam+0xe8>
      break;
 8003452:	bf00      	nop
 8003454:	e006      	b.n	8003464 <DMA_CheckFifoParam+0xe8>
      break;
 8003456:	bf00      	nop
 8003458:	e004      	b.n	8003464 <DMA_CheckFifoParam+0xe8>
      break;
 800345a:	bf00      	nop
 800345c:	e002      	b.n	8003464 <DMA_CheckFifoParam+0xe8>
      break;   
 800345e:	bf00      	nop
 8003460:	e000      	b.n	8003464 <DMA_CheckFifoParam+0xe8>
      break;
 8003462:	bf00      	nop
    }
  } 
  
  return status; 
 8003464:	7bfb      	ldrb	r3, [r7, #15]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop

08003474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003474:	b480      	push	{r7}
 8003476:	b089      	sub	sp, #36	; 0x24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003486:	2300      	movs	r3, #0
 8003488:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800348a:	2300      	movs	r3, #0
 800348c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800348e:	2300      	movs	r3, #0
 8003490:	61fb      	str	r3, [r7, #28]
 8003492:	e175      	b.n	8003780 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003494:	2201      	movs	r2, #1
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4013      	ands	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	f040 8164 	bne.w	800377a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d005      	beq.n	80034ca <HAL_GPIO_Init+0x56>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d130      	bne.n	800352c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	2203      	movs	r2, #3
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4013      	ands	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003500:	2201      	movs	r2, #1
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	f003 0201 	and.w	r2, r3, #1
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	2b03      	cmp	r3, #3
 8003536:	d017      	beq.n	8003568 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	2203      	movs	r2, #3
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4013      	ands	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d123      	bne.n	80035bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	08da      	lsrs	r2, r3, #3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3208      	adds	r2, #8
 800357c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	220f      	movs	r2, #15
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4013      	ands	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	08da      	lsrs	r2, r3, #3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3208      	adds	r2, #8
 80035b6:	69b9      	ldr	r1, [r7, #24]
 80035b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	2203      	movs	r2, #3
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 0203 	and.w	r2, r3, #3
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 80be 	beq.w	800377a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035fe:	4b66      	ldr	r3, [pc, #408]	; (8003798 <HAL_GPIO_Init+0x324>)
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	4a65      	ldr	r2, [pc, #404]	; (8003798 <HAL_GPIO_Init+0x324>)
 8003604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003608:	6453      	str	r3, [r2, #68]	; 0x44
 800360a:	4b63      	ldr	r3, [pc, #396]	; (8003798 <HAL_GPIO_Init+0x324>)
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003616:	4a61      	ldr	r2, [pc, #388]	; (800379c <HAL_GPIO_Init+0x328>)
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	089b      	lsrs	r3, r3, #2
 800361c:	3302      	adds	r3, #2
 800361e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003622:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	220f      	movs	r2, #15
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43db      	mvns	r3, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4013      	ands	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a58      	ldr	r2, [pc, #352]	; (80037a0 <HAL_GPIO_Init+0x32c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d037      	beq.n	80036b2 <HAL_GPIO_Init+0x23e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a57      	ldr	r2, [pc, #348]	; (80037a4 <HAL_GPIO_Init+0x330>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d031      	beq.n	80036ae <HAL_GPIO_Init+0x23a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a56      	ldr	r2, [pc, #344]	; (80037a8 <HAL_GPIO_Init+0x334>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d02b      	beq.n	80036aa <HAL_GPIO_Init+0x236>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a55      	ldr	r2, [pc, #340]	; (80037ac <HAL_GPIO_Init+0x338>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d025      	beq.n	80036a6 <HAL_GPIO_Init+0x232>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a54      	ldr	r2, [pc, #336]	; (80037b0 <HAL_GPIO_Init+0x33c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d01f      	beq.n	80036a2 <HAL_GPIO_Init+0x22e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a53      	ldr	r2, [pc, #332]	; (80037b4 <HAL_GPIO_Init+0x340>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d019      	beq.n	800369e <HAL_GPIO_Init+0x22a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a52      	ldr	r2, [pc, #328]	; (80037b8 <HAL_GPIO_Init+0x344>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d013      	beq.n	800369a <HAL_GPIO_Init+0x226>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a51      	ldr	r2, [pc, #324]	; (80037bc <HAL_GPIO_Init+0x348>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00d      	beq.n	8003696 <HAL_GPIO_Init+0x222>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a50      	ldr	r2, [pc, #320]	; (80037c0 <HAL_GPIO_Init+0x34c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d007      	beq.n	8003692 <HAL_GPIO_Init+0x21e>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a4f      	ldr	r2, [pc, #316]	; (80037c4 <HAL_GPIO_Init+0x350>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d101      	bne.n	800368e <HAL_GPIO_Init+0x21a>
 800368a:	2309      	movs	r3, #9
 800368c:	e012      	b.n	80036b4 <HAL_GPIO_Init+0x240>
 800368e:	230a      	movs	r3, #10
 8003690:	e010      	b.n	80036b4 <HAL_GPIO_Init+0x240>
 8003692:	2308      	movs	r3, #8
 8003694:	e00e      	b.n	80036b4 <HAL_GPIO_Init+0x240>
 8003696:	2307      	movs	r3, #7
 8003698:	e00c      	b.n	80036b4 <HAL_GPIO_Init+0x240>
 800369a:	2306      	movs	r3, #6
 800369c:	e00a      	b.n	80036b4 <HAL_GPIO_Init+0x240>
 800369e:	2305      	movs	r3, #5
 80036a0:	e008      	b.n	80036b4 <HAL_GPIO_Init+0x240>
 80036a2:	2304      	movs	r3, #4
 80036a4:	e006      	b.n	80036b4 <HAL_GPIO_Init+0x240>
 80036a6:	2303      	movs	r3, #3
 80036a8:	e004      	b.n	80036b4 <HAL_GPIO_Init+0x240>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e002      	b.n	80036b4 <HAL_GPIO_Init+0x240>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <HAL_GPIO_Init+0x240>
 80036b2:	2300      	movs	r3, #0
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	f002 0203 	and.w	r2, r2, #3
 80036ba:	0092      	lsls	r2, r2, #2
 80036bc:	4093      	lsls	r3, r2
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80036c4:	4935      	ldr	r1, [pc, #212]	; (800379c <HAL_GPIO_Init+0x328>)
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	089b      	lsrs	r3, r3, #2
 80036ca:	3302      	adds	r3, #2
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036d2:	4b3d      	ldr	r3, [pc, #244]	; (80037c8 <HAL_GPIO_Init+0x354>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	43db      	mvns	r3, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4013      	ands	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036f6:	4a34      	ldr	r2, [pc, #208]	; (80037c8 <HAL_GPIO_Init+0x354>)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036fc:	4b32      	ldr	r3, [pc, #200]	; (80037c8 <HAL_GPIO_Init+0x354>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003720:	4a29      	ldr	r2, [pc, #164]	; (80037c8 <HAL_GPIO_Init+0x354>)
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003726:	4b28      	ldr	r3, [pc, #160]	; (80037c8 <HAL_GPIO_Init+0x354>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	43db      	mvns	r3, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4013      	ands	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800374a:	4a1f      	ldr	r2, [pc, #124]	; (80037c8 <HAL_GPIO_Init+0x354>)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003750:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <HAL_GPIO_Init+0x354>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	43db      	mvns	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003774:	4a14      	ldr	r2, [pc, #80]	; (80037c8 <HAL_GPIO_Init+0x354>)
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	3301      	adds	r3, #1
 800377e:	61fb      	str	r3, [r7, #28]
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	2b0f      	cmp	r3, #15
 8003784:	f67f ae86 	bls.w	8003494 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003788:	bf00      	nop
 800378a:	bf00      	nop
 800378c:	3724      	adds	r7, #36	; 0x24
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800
 800379c:	40013800 	.word	0x40013800
 80037a0:	40020000 	.word	0x40020000
 80037a4:	40020400 	.word	0x40020400
 80037a8:	40020800 	.word	0x40020800
 80037ac:	40020c00 	.word	0x40020c00
 80037b0:	40021000 	.word	0x40021000
 80037b4:	40021400 	.word	0x40021400
 80037b8:	40021800 	.word	0x40021800
 80037bc:	40021c00 	.word	0x40021c00
 80037c0:	40022000 	.word	0x40022000
 80037c4:	40022400 	.word	0x40022400
 80037c8:	40013c00 	.word	0x40013c00

080037cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	887b      	ldrh	r3, [r7, #2]
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
 80037e8:	e001      	b.n	80037ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037ea:	2300      	movs	r3, #0
 80037ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	807b      	strh	r3, [r7, #2]
 8003808:	4613      	mov	r3, r2
 800380a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800380c:	787b      	ldrb	r3, [r7, #1]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003812:	887a      	ldrh	r2, [r7, #2]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003818:	e003      	b.n	8003822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800381a:	887b      	ldrh	r3, [r7, #2]
 800381c:	041a      	lsls	r2, r3, #16
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	619a      	str	r2, [r3, #24]
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
	...

08003830 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800383a:	4b08      	ldr	r3, [pc, #32]	; (800385c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800383c:	695a      	ldr	r2, [r3, #20]
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	4013      	ands	r3, r2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d006      	beq.n	8003854 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003846:	4a05      	ldr	r2, [pc, #20]	; (800385c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fd fc84 	bl	800115c <HAL_GPIO_EXTI_Callback>
  }
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40013c00 	.word	0x40013c00

08003860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e07f      	b.n	8003972 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fd ff7e 	bl	8001788 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2224      	movs	r2, #36	; 0x24
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0201 	bic.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d107      	bne.n	80038da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	e006      	b.n	80038e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80038e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d104      	bne.n	80038fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6859      	ldr	r1, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	4b1d      	ldr	r3, [pc, #116]	; (800397c <HAL_I2C_Init+0x11c>)
 8003906:	430b      	orrs	r3, r1
 8003908:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003918:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69d9      	ldr	r1, [r3, #28]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1a      	ldr	r2, [r3, #32]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	02008000 	.word	0x02008000

08003980 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	68f9      	ldr	r1, [r7, #12]
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
  }
}
 80039ac:	bf00      	nop
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d138      	bne.n	8003a3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e032      	b.n	8003a3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2224      	movs	r2, #36	; 0x24
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0201 	bic.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6819      	ldr	r1, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e000      	b.n	8003a3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a3c:	2302      	movs	r3, #2
  }
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b085      	sub	sp, #20
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d139      	bne.n	8003ad4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e033      	b.n	8003ad6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2224      	movs	r2, #36	; 0x24
 8003a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0201 	bic.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e000      	b.n	8003ad6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ad4:	2302      	movs	r3, #2
  }
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
	...

08003ae4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003aee:	4b23      	ldr	r3, [pc, #140]	; (8003b7c <HAL_PWREx_EnableOverDrive+0x98>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	4a22      	ldr	r2, [pc, #136]	; (8003b7c <HAL_PWREx_EnableOverDrive+0x98>)
 8003af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af8:	6413      	str	r3, [r2, #64]	; 0x40
 8003afa:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <HAL_PWREx_EnableOverDrive+0x98>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b06:	4b1e      	ldr	r3, [pc, #120]	; (8003b80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1d      	ldr	r2, [pc, #116]	; (8003b80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b10:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b12:	f7ff f815 	bl	8002b40 <HAL_GetTick>
 8003b16:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b18:	e009      	b.n	8003b2e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b1a:	f7ff f811 	bl	8002b40 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b28:	d901      	bls.n	8003b2e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e022      	b.n	8003b74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b2e:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3a:	d1ee      	bne.n	8003b1a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b3c:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a0f      	ldr	r2, [pc, #60]	; (8003b80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b48:	f7fe fffa 	bl	8002b40 <HAL_GetTick>
 8003b4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b4e:	e009      	b.n	8003b64 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b50:	f7fe fff6 	bl	8002b40 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b5e:	d901      	bls.n	8003b64 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e007      	b.n	8003b74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b70:	d1ee      	bne.n	8003b50 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	40007000 	.word	0x40007000

08003b84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e29b      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8087 	beq.w	8003cb6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ba8:	4b96      	ldr	r3, [pc, #600]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 030c 	and.w	r3, r3, #12
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d00c      	beq.n	8003bce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bb4:	4b93      	ldr	r3, [pc, #588]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 030c 	and.w	r3, r3, #12
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d112      	bne.n	8003be6 <HAL_RCC_OscConfig+0x62>
 8003bc0:	4b90      	ldr	r3, [pc, #576]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bcc:	d10b      	bne.n	8003be6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bce:	4b8d      	ldr	r3, [pc, #564]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d06c      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x130>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d168      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e275      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bee:	d106      	bne.n	8003bfe <HAL_RCC_OscConfig+0x7a>
 8003bf0:	4b84      	ldr	r3, [pc, #528]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a83      	ldr	r2, [pc, #524]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	e02e      	b.n	8003c5c <HAL_RCC_OscConfig+0xd8>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x9c>
 8003c06:	4b7f      	ldr	r3, [pc, #508]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a7e      	ldr	r2, [pc, #504]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	4b7c      	ldr	r3, [pc, #496]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a7b      	ldr	r2, [pc, #492]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e01d      	b.n	8003c5c <HAL_RCC_OscConfig+0xd8>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c28:	d10c      	bne.n	8003c44 <HAL_RCC_OscConfig+0xc0>
 8003c2a:	4b76      	ldr	r3, [pc, #472]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a75      	ldr	r2, [pc, #468]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	4b73      	ldr	r3, [pc, #460]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a72      	ldr	r2, [pc, #456]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e00b      	b.n	8003c5c <HAL_RCC_OscConfig+0xd8>
 8003c44:	4b6f      	ldr	r3, [pc, #444]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a6e      	ldr	r2, [pc, #440]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	4b6c      	ldr	r3, [pc, #432]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a6b      	ldr	r2, [pc, #428]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d013      	beq.n	8003c8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c64:	f7fe ff6c 	bl	8002b40 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c6c:	f7fe ff68 	bl	8002b40 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	; 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e229      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7e:	4b61      	ldr	r3, [pc, #388]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0xe8>
 8003c8a:	e014      	b.n	8003cb6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8c:	f7fe ff58 	bl	8002b40 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c94:	f7fe ff54 	bl	8002b40 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b64      	cmp	r3, #100	; 0x64
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e215      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca6:	4b57      	ldr	r3, [pc, #348]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x110>
 8003cb2:	e000      	b.n	8003cb6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d069      	beq.n	8003d96 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cc2:	4b50      	ldr	r3, [pc, #320]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00b      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cce:	4b4d      	ldr	r3, [pc, #308]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d11c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x190>
 8003cda:	4b4a      	ldr	r3, [pc, #296]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d116      	bne.n	8003d14 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ce6:	4b47      	ldr	r3, [pc, #284]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_RCC_OscConfig+0x17a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d001      	beq.n	8003cfe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e1e9      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cfe:	4b41      	ldr	r3, [pc, #260]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	493d      	ldr	r1, [pc, #244]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d12:	e040      	b.n	8003d96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d023      	beq.n	8003d64 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d1c:	4b39      	ldr	r3, [pc, #228]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a38      	ldr	r2, [pc, #224]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7fe ff0a 	bl	8002b40 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d30:	f7fe ff06 	bl	8002b40 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e1c7      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d42:	4b30      	ldr	r3, [pc, #192]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4e:	4b2d      	ldr	r3, [pc, #180]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4929      	ldr	r1, [pc, #164]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	600b      	str	r3, [r1, #0]
 8003d62:	e018      	b.n	8003d96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d64:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a26      	ldr	r2, [pc, #152]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003d6a:	f023 0301 	bic.w	r3, r3, #1
 8003d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fe fee6 	bl	8002b40 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d78:	f7fe fee2 	bl	8002b40 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1a3      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8a:	4b1e      	ldr	r3, [pc, #120]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d038      	beq.n	8003e14 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d019      	beq.n	8003dde <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003daa:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dae:	4a15      	ldr	r2, [pc, #84]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db6:	f7fe fec3 	bl	8002b40 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dbe:	f7fe febf 	bl	8002b40 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e180      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f0      	beq.n	8003dbe <HAL_RCC_OscConfig+0x23a>
 8003ddc:	e01a      	b.n	8003e14 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dde:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de2:	4a08      	ldr	r2, [pc, #32]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003de4:	f023 0301 	bic.w	r3, r3, #1
 8003de8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dea:	f7fe fea9 	bl	8002b40 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df0:	e00a      	b.n	8003e08 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df2:	f7fe fea5 	bl	8002b40 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d903      	bls.n	8003e08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e166      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
 8003e04:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e08:	4b92      	ldr	r3, [pc, #584]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1ee      	bne.n	8003df2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80a4 	beq.w	8003f6a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e22:	4b8c      	ldr	r3, [pc, #560]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10d      	bne.n	8003e4a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e2e:	4b89      	ldr	r3, [pc, #548]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	4a88      	ldr	r2, [pc, #544]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e38:	6413      	str	r3, [r2, #64]	; 0x40
 8003e3a:	4b86      	ldr	r3, [pc, #536]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e42:	60bb      	str	r3, [r7, #8]
 8003e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e46:	2301      	movs	r3, #1
 8003e48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e4a:	4b83      	ldr	r3, [pc, #524]	; (8004058 <HAL_RCC_OscConfig+0x4d4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d118      	bne.n	8003e88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e56:	4b80      	ldr	r3, [pc, #512]	; (8004058 <HAL_RCC_OscConfig+0x4d4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a7f      	ldr	r2, [pc, #508]	; (8004058 <HAL_RCC_OscConfig+0x4d4>)
 8003e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e62:	f7fe fe6d 	bl	8002b40 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6a:	f7fe fe69 	bl	8002b40 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b64      	cmp	r3, #100	; 0x64
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e12a      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e7c:	4b76      	ldr	r3, [pc, #472]	; (8004058 <HAL_RCC_OscConfig+0x4d4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0f0      	beq.n	8003e6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d106      	bne.n	8003e9e <HAL_RCC_OscConfig+0x31a>
 8003e90:	4b70      	ldr	r3, [pc, #448]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	4a6f      	ldr	r2, [pc, #444]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9c:	e02d      	b.n	8003efa <HAL_RCC_OscConfig+0x376>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x33c>
 8003ea6:	4b6b      	ldr	r3, [pc, #428]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4a6a      	ldr	r2, [pc, #424]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb2:	4b68      	ldr	r3, [pc, #416]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a67      	ldr	r2, [pc, #412]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003eb8:	f023 0304 	bic.w	r3, r3, #4
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ebe:	e01c      	b.n	8003efa <HAL_RCC_OscConfig+0x376>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2b05      	cmp	r3, #5
 8003ec6:	d10c      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x35e>
 8003ec8:	4b62      	ldr	r3, [pc, #392]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	4a61      	ldr	r2, [pc, #388]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003ece:	f043 0304 	orr.w	r3, r3, #4
 8003ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed4:	4b5f      	ldr	r3, [pc, #380]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	4a5e      	ldr	r2, [pc, #376]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee0:	e00b      	b.n	8003efa <HAL_RCC_OscConfig+0x376>
 8003ee2:	4b5c      	ldr	r3, [pc, #368]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	4a5b      	ldr	r2, [pc, #364]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	6713      	str	r3, [r2, #112]	; 0x70
 8003eee:	4b59      	ldr	r3, [pc, #356]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	4a58      	ldr	r2, [pc, #352]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003ef4:	f023 0304 	bic.w	r3, r3, #4
 8003ef8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d015      	beq.n	8003f2e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f02:	f7fe fe1d 	bl	8002b40 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f08:	e00a      	b.n	8003f20 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0a:	f7fe fe19 	bl	8002b40 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e0d8      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f20:	4b4c      	ldr	r3, [pc, #304]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0ee      	beq.n	8003f0a <HAL_RCC_OscConfig+0x386>
 8003f2c:	e014      	b.n	8003f58 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2e:	f7fe fe07 	bl	8002b40 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f34:	e00a      	b.n	8003f4c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f36:	f7fe fe03 	bl	8002b40 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e0c2      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f4c:	4b41      	ldr	r3, [pc, #260]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1ee      	bne.n	8003f36 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f58:	7dfb      	ldrb	r3, [r7, #23]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d105      	bne.n	8003f6a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5e:	4b3d      	ldr	r3, [pc, #244]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	4a3c      	ldr	r2, [pc, #240]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 80ae 	beq.w	80040d0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f74:	4b37      	ldr	r3, [pc, #220]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 030c 	and.w	r3, r3, #12
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d06d      	beq.n	800405c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d14b      	bne.n	8004020 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f88:	4b32      	ldr	r3, [pc, #200]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a31      	ldr	r2, [pc, #196]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003f8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fe fdd4 	bl	8002b40 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fe fdd0 	bl	8002b40 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e091      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fae:	4b29      	ldr	r3, [pc, #164]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69da      	ldr	r2, [r3, #28]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	019b      	lsls	r3, r3, #6
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	085b      	lsrs	r3, r3, #1
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	041b      	lsls	r3, r3, #16
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	061b      	lsls	r3, r3, #24
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	071b      	lsls	r3, r3, #28
 8003fe6:	491b      	ldr	r1, [pc, #108]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fec:	4b19      	ldr	r3, [pc, #100]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a18      	ldr	r2, [pc, #96]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fe fda2 	bl	8002b40 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004000:	f7fe fd9e 	bl	8002b40 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e05f      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004012:	4b10      	ldr	r3, [pc, #64]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x47c>
 800401e:	e057      	b.n	80040d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004020:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a0b      	ldr	r2, [pc, #44]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8004026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800402a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fe fd88 	bl	8002b40 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004034:	f7fe fd84 	bl	8002b40 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e045      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004046:	4b03      	ldr	r3, [pc, #12]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x4b0>
 8004052:	e03d      	b.n	80040d0 <HAL_RCC_OscConfig+0x54c>
 8004054:	40023800 	.word	0x40023800
 8004058:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800405c:	4b1f      	ldr	r3, [pc, #124]	; (80040dc <HAL_RCC_OscConfig+0x558>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d030      	beq.n	80040cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004074:	429a      	cmp	r2, r3
 8004076:	d129      	bne.n	80040cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004082:	429a      	cmp	r2, r3
 8004084:	d122      	bne.n	80040cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800408c:	4013      	ands	r3, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004092:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004094:	4293      	cmp	r3, r2
 8004096:	d119      	bne.n	80040cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	085b      	lsrs	r3, r3, #1
 80040a4:	3b01      	subs	r3, #1
 80040a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d10f      	bne.n	80040cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d107      	bne.n	80040cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d001      	beq.n	80040d0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40023800 	.word	0x40023800

080040e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0d0      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040f8:	4b6a      	ldr	r3, [pc, #424]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d910      	bls.n	8004128 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b67      	ldr	r3, [pc, #412]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 020f 	bic.w	r2, r3, #15
 800410e:	4965      	ldr	r1, [pc, #404]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004116:	4b63      	ldr	r3, [pc, #396]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d001      	beq.n	8004128 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e0b8      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d020      	beq.n	8004176 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004140:	4b59      	ldr	r3, [pc, #356]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	4a58      	ldr	r2, [pc, #352]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004146:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800414a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004158:	4b53      	ldr	r3, [pc, #332]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	4a52      	ldr	r2, [pc, #328]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800415e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004162:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004164:	4b50      	ldr	r3, [pc, #320]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	494d      	ldr	r1, [pc, #308]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004172:	4313      	orrs	r3, r2
 8004174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d040      	beq.n	8004204 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d107      	bne.n	800419a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418a:	4b47      	ldr	r3, [pc, #284]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d115      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e07f      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d107      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a2:	4b41      	ldr	r3, [pc, #260]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e073      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b2:	4b3d      	ldr	r3, [pc, #244]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e06b      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c2:	4b39      	ldr	r3, [pc, #228]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f023 0203 	bic.w	r2, r3, #3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	4936      	ldr	r1, [pc, #216]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d4:	f7fe fcb4 	bl	8002b40 <HAL_GetTick>
 80041d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	e00a      	b.n	80041f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041dc:	f7fe fcb0 	bl	8002b40 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e053      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f2:	4b2d      	ldr	r3, [pc, #180]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 020c 	and.w	r2, r3, #12
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	429a      	cmp	r2, r3
 8004202:	d1eb      	bne.n	80041dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004204:	4b27      	ldr	r3, [pc, #156]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d210      	bcs.n	8004234 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004212:	4b24      	ldr	r3, [pc, #144]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f023 020f 	bic.w	r2, r3, #15
 800421a:	4922      	ldr	r1, [pc, #136]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	4313      	orrs	r3, r2
 8004220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004222:	4b20      	ldr	r3, [pc, #128]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d001      	beq.n	8004234 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e032      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004240:	4b19      	ldr	r3, [pc, #100]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4916      	ldr	r1, [pc, #88]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800424e:	4313      	orrs	r3, r2
 8004250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d009      	beq.n	8004272 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800425e:	4b12      	ldr	r3, [pc, #72]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	490e      	ldr	r1, [pc, #56]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004272:	f000 f821 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 8004276:	4602      	mov	r2, r0
 8004278:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	490a      	ldr	r1, [pc, #40]	; (80042ac <HAL_RCC_ClockConfig+0x1cc>)
 8004284:	5ccb      	ldrb	r3, [r1, r3]
 8004286:	fa22 f303 	lsr.w	r3, r2, r3
 800428a:	4a09      	ldr	r2, [pc, #36]	; (80042b0 <HAL_RCC_ClockConfig+0x1d0>)
 800428c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800428e:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <HAL_RCC_ClockConfig+0x1d4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7fe fc10 	bl	8002ab8 <HAL_InitTick>

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40023c00 	.word	0x40023c00
 80042a8:	40023800 	.word	0x40023800
 80042ac:	0800cda4 	.word	0x0800cda4
 80042b0:	20000028 	.word	0x20000028
 80042b4:	2000002c 	.word	0x2000002c

080042b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b8:	b5b0      	push	{r4, r5, r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80042be:	2100      	movs	r1, #0
 80042c0:	6079      	str	r1, [r7, #4]
 80042c2:	2100      	movs	r1, #0
 80042c4:	60f9      	str	r1, [r7, #12]
 80042c6:	2100      	movs	r1, #0
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80042ca:	2100      	movs	r1, #0
 80042cc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042ce:	4952      	ldr	r1, [pc, #328]	; (8004418 <HAL_RCC_GetSysClockFreq+0x160>)
 80042d0:	6889      	ldr	r1, [r1, #8]
 80042d2:	f001 010c 	and.w	r1, r1, #12
 80042d6:	2908      	cmp	r1, #8
 80042d8:	d00d      	beq.n	80042f6 <HAL_RCC_GetSysClockFreq+0x3e>
 80042da:	2908      	cmp	r1, #8
 80042dc:	f200 8094 	bhi.w	8004408 <HAL_RCC_GetSysClockFreq+0x150>
 80042e0:	2900      	cmp	r1, #0
 80042e2:	d002      	beq.n	80042ea <HAL_RCC_GetSysClockFreq+0x32>
 80042e4:	2904      	cmp	r1, #4
 80042e6:	d003      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0x38>
 80042e8:	e08e      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042ea:	4b4c      	ldr	r3, [pc, #304]	; (800441c <HAL_RCC_GetSysClockFreq+0x164>)
 80042ec:	60bb      	str	r3, [r7, #8]
      break;
 80042ee:	e08e      	b.n	800440e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042f0:	4b4b      	ldr	r3, [pc, #300]	; (8004420 <HAL_RCC_GetSysClockFreq+0x168>)
 80042f2:	60bb      	str	r3, [r7, #8]
      break;
 80042f4:	e08b      	b.n	800440e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042f6:	4948      	ldr	r1, [pc, #288]	; (8004418 <HAL_RCC_GetSysClockFreq+0x160>)
 80042f8:	6849      	ldr	r1, [r1, #4]
 80042fa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80042fe:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004300:	4945      	ldr	r1, [pc, #276]	; (8004418 <HAL_RCC_GetSysClockFreq+0x160>)
 8004302:	6849      	ldr	r1, [r1, #4]
 8004304:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004308:	2900      	cmp	r1, #0
 800430a:	d024      	beq.n	8004356 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800430c:	4942      	ldr	r1, [pc, #264]	; (8004418 <HAL_RCC_GetSysClockFreq+0x160>)
 800430e:	6849      	ldr	r1, [r1, #4]
 8004310:	0989      	lsrs	r1, r1, #6
 8004312:	4608      	mov	r0, r1
 8004314:	f04f 0100 	mov.w	r1, #0
 8004318:	f240 14ff 	movw	r4, #511	; 0x1ff
 800431c:	f04f 0500 	mov.w	r5, #0
 8004320:	ea00 0204 	and.w	r2, r0, r4
 8004324:	ea01 0305 	and.w	r3, r1, r5
 8004328:	493d      	ldr	r1, [pc, #244]	; (8004420 <HAL_RCC_GetSysClockFreq+0x168>)
 800432a:	fb01 f003 	mul.w	r0, r1, r3
 800432e:	2100      	movs	r1, #0
 8004330:	fb01 f102 	mul.w	r1, r1, r2
 8004334:	1844      	adds	r4, r0, r1
 8004336:	493a      	ldr	r1, [pc, #232]	; (8004420 <HAL_RCC_GetSysClockFreq+0x168>)
 8004338:	fba2 0101 	umull	r0, r1, r2, r1
 800433c:	1863      	adds	r3, r4, r1
 800433e:	4619      	mov	r1, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	461a      	mov	r2, r3
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	f7fc f99e 	bl	8000688 <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4613      	mov	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	e04a      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004356:	4b30      	ldr	r3, [pc, #192]	; (8004418 <HAL_RCC_GetSysClockFreq+0x160>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	099b      	lsrs	r3, r3, #6
 800435c:	461a      	mov	r2, r3
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004366:	f04f 0100 	mov.w	r1, #0
 800436a:	ea02 0400 	and.w	r4, r2, r0
 800436e:	ea03 0501 	and.w	r5, r3, r1
 8004372:	4620      	mov	r0, r4
 8004374:	4629      	mov	r1, r5
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	014b      	lsls	r3, r1, #5
 8004380:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004384:	0142      	lsls	r2, r0, #5
 8004386:	4610      	mov	r0, r2
 8004388:	4619      	mov	r1, r3
 800438a:	1b00      	subs	r0, r0, r4
 800438c:	eb61 0105 	sbc.w	r1, r1, r5
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	018b      	lsls	r3, r1, #6
 800439a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800439e:	0182      	lsls	r2, r0, #6
 80043a0:	1a12      	subs	r2, r2, r0
 80043a2:	eb63 0301 	sbc.w	r3, r3, r1
 80043a6:	f04f 0000 	mov.w	r0, #0
 80043aa:	f04f 0100 	mov.w	r1, #0
 80043ae:	00d9      	lsls	r1, r3, #3
 80043b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043b4:	00d0      	lsls	r0, r2, #3
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	1912      	adds	r2, r2, r4
 80043bc:	eb45 0303 	adc.w	r3, r5, r3
 80043c0:	f04f 0000 	mov.w	r0, #0
 80043c4:	f04f 0100 	mov.w	r1, #0
 80043c8:	0299      	lsls	r1, r3, #10
 80043ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043ce:	0290      	lsls	r0, r2, #10
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4610      	mov	r0, r2
 80043d6:	4619      	mov	r1, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	461a      	mov	r2, r3
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	f7fc f952 	bl	8000688 <__aeabi_uldivmod>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4613      	mov	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80043ec:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <HAL_RCC_GetSysClockFreq+0x160>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	0c1b      	lsrs	r3, r3, #16
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	3301      	adds	r3, #1
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	fbb2 f3f3 	udiv	r3, r2, r3
 8004404:	60bb      	str	r3, [r7, #8]
      break;
 8004406:	e002      	b.n	800440e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004408:	4b04      	ldr	r3, [pc, #16]	; (800441c <HAL_RCC_GetSysClockFreq+0x164>)
 800440a:	60bb      	str	r3, [r7, #8]
      break;
 800440c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800440e:	68bb      	ldr	r3, [r7, #8]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bdb0      	pop	{r4, r5, r7, pc}
 8004418:	40023800 	.word	0x40023800
 800441c:	00f42400 	.word	0x00f42400
 8004420:	017d7840 	.word	0x017d7840

08004424 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004428:	4b03      	ldr	r3, [pc, #12]	; (8004438 <HAL_RCC_GetHCLKFreq+0x14>)
 800442a:	681b      	ldr	r3, [r3, #0]
}
 800442c:	4618      	mov	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20000028 	.word	0x20000028

0800443c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004440:	f7ff fff0 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 8004444:	4602      	mov	r2, r0
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	0a9b      	lsrs	r3, r3, #10
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	4903      	ldr	r1, [pc, #12]	; (8004460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004452:	5ccb      	ldrb	r3, [r1, r3]
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004458:	4618      	mov	r0, r3
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40023800 	.word	0x40023800
 8004460:	0800cdb4 	.word	0x0800cdb4

08004464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004468:	f7ff ffdc 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 800446c:	4602      	mov	r2, r0
 800446e:	4b05      	ldr	r3, [pc, #20]	; (8004484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	0b5b      	lsrs	r3, r3, #13
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	4903      	ldr	r1, [pc, #12]	; (8004488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800447a:	5ccb      	ldrb	r3, [r1, r3]
 800447c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004480:	4618      	mov	r0, r3
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40023800 	.word	0x40023800
 8004488:	0800cdb4 	.word	0x0800cdb4

0800448c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b088      	sub	sp, #32
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004498:	2300      	movs	r3, #0
 800449a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80044a4:	2300      	movs	r3, #0
 80044a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d012      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044b4:	4b69      	ldr	r3, [pc, #420]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	4a68      	ldr	r2, [pc, #416]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044be:	6093      	str	r3, [r2, #8]
 80044c0:	4b66      	ldr	r3, [pc, #408]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c8:	4964      	ldr	r1, [pc, #400]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80044d6:	2301      	movs	r3, #1
 80044d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d017      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044e6:	4b5d      	ldr	r3, [pc, #372]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f4:	4959      	ldr	r1, [pc, #356]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004504:	d101      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004506:	2301      	movs	r3, #1
 8004508:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004512:	2301      	movs	r3, #1
 8004514:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d017      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004522:	4b4e      	ldr	r3, [pc, #312]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004528:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	494a      	ldr	r1, [pc, #296]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004540:	d101      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004542:	2301      	movs	r3, #1
 8004544:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800454e:	2301      	movs	r3, #1
 8004550:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800455e:	2301      	movs	r3, #1
 8004560:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 808b 	beq.w	8004686 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004570:	4b3a      	ldr	r3, [pc, #232]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	4a39      	ldr	r2, [pc, #228]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800457a:	6413      	str	r3, [r2, #64]	; 0x40
 800457c:	4b37      	ldr	r3, [pc, #220]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004588:	4b35      	ldr	r3, [pc, #212]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a34      	ldr	r2, [pc, #208]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800458e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004592:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004594:	f7fe fad4 	bl	8002b40 <HAL_GetTick>
 8004598:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800459c:	f7fe fad0 	bl	8002b40 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b64      	cmp	r3, #100	; 0x64
 80045a8:	d901      	bls.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e38f      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045ae:	4b2c      	ldr	r3, [pc, #176]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045ba:	4b28      	ldr	r3, [pc, #160]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d035      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d02e      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045d8:	4b20      	ldr	r3, [pc, #128]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045e2:	4b1e      	ldr	r3, [pc, #120]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e6:	4a1d      	ldr	r2, [pc, #116]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045ee:	4b1b      	ldr	r3, [pc, #108]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f2:	4a1a      	ldr	r2, [pc, #104]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80045fa:	4a18      	ldr	r2, [pc, #96]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004600:	4b16      	ldr	r3, [pc, #88]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b01      	cmp	r3, #1
 800460a:	d114      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460c:	f7fe fa98 	bl	8002b40 <HAL_GetTick>
 8004610:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004612:	e00a      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004614:	f7fe fa94 	bl	8002b40 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e351      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462a:	4b0c      	ldr	r3, [pc, #48]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0ee      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004642:	d111      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004650:	4b04      	ldr	r3, [pc, #16]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004652:	400b      	ands	r3, r1
 8004654:	4901      	ldr	r1, [pc, #4]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004656:	4313      	orrs	r3, r2
 8004658:	608b      	str	r3, [r1, #8]
 800465a:	e00b      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800465c:	40023800 	.word	0x40023800
 8004660:	40007000 	.word	0x40007000
 8004664:	0ffffcff 	.word	0x0ffffcff
 8004668:	4bb3      	ldr	r3, [pc, #716]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	4ab2      	ldr	r2, [pc, #712]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800466e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004672:	6093      	str	r3, [r2, #8]
 8004674:	4bb0      	ldr	r3, [pc, #704]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004676:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004680:	49ad      	ldr	r1, [pc, #692]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004682:	4313      	orrs	r3, r2
 8004684:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	2b00      	cmp	r3, #0
 8004690:	d010      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004692:	4ba9      	ldr	r3, [pc, #676]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004698:	4aa7      	ldr	r2, [pc, #668]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800469a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800469e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80046a2:	4ba5      	ldr	r3, [pc, #660]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	49a2      	ldr	r1, [pc, #648]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046c0:	4b9d      	ldr	r3, [pc, #628]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ce:	499a      	ldr	r1, [pc, #616]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046e2:	4b95      	ldr	r3, [pc, #596]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046f0:	4991      	ldr	r1, [pc, #580]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004704:	4b8c      	ldr	r3, [pc, #560]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004712:	4989      	ldr	r1, [pc, #548]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004726:	4b84      	ldr	r3, [pc, #528]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004734:	4980      	ldr	r1, [pc, #512]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004748:	4b7b      	ldr	r3, [pc, #492]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474e:	f023 0203 	bic.w	r2, r3, #3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004756:	4978      	ldr	r1, [pc, #480]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800476a:	4b73      	ldr	r3, [pc, #460]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800476c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004770:	f023 020c 	bic.w	r2, r3, #12
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004778:	496f      	ldr	r1, [pc, #444]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800478c:	4b6a      	ldr	r3, [pc, #424]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479a:	4967      	ldr	r1, [pc, #412]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047ae:	4b62      	ldr	r3, [pc, #392]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047bc:	495e      	ldr	r1, [pc, #376]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047d0:	4b59      	ldr	r3, [pc, #356]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047de:	4956      	ldr	r1, [pc, #344]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80047f2:	4b51      	ldr	r3, [pc, #324]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004800:	494d      	ldr	r1, [pc, #308]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004814:	4b48      	ldr	r3, [pc, #288]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004822:	4945      	ldr	r1, [pc, #276]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004836:	4b40      	ldr	r3, [pc, #256]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004844:	493c      	ldr	r1, [pc, #240]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004858:	4b37      	ldr	r3, [pc, #220]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004866:	4934      	ldr	r1, [pc, #208]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d011      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800487a:	4b2f      	ldr	r3, [pc, #188]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800487c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004880:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004888:	492b      	ldr	r1, [pc, #172]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004894:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004898:	d101      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800489a:	2301      	movs	r3, #1
 800489c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80048aa:	2301      	movs	r3, #1
 80048ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ba:	4b1f      	ldr	r3, [pc, #124]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c8:	491b      	ldr	r1, [pc, #108]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00b      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048dc:	4b16      	ldr	r3, [pc, #88]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ec:	4912      	ldr	r1, [pc, #72]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00b      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004900:	4b0d      	ldr	r3, [pc, #52]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004906:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004910:	4909      	ldr	r1, [pc, #36]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00f      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004924:	4b04      	ldr	r3, [pc, #16]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800492a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004934:	e002      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004936:	bf00      	nop
 8004938:	40023800 	.word	0x40023800
 800493c:	4986      	ldr	r1, [pc, #536]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00b      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004950:	4b81      	ldr	r3, [pc, #516]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004956:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004960:	497d      	ldr	r1, [pc, #500]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d006      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 80d6 	beq.w	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800497c:	4b76      	ldr	r3, [pc, #472]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a75      	ldr	r2, [pc, #468]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004982:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004988:	f7fe f8da 	bl	8002b40 <HAL_GetTick>
 800498c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004990:	f7fe f8d6 	bl	8002b40 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b64      	cmp	r3, #100	; 0x64
 800499c:	d901      	bls.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e195      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049a2:	4b6d      	ldr	r3, [pc, #436]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f0      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d021      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x572>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d11d      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049c2:	4b65      	ldr	r3, [pc, #404]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049c8:	0c1b      	lsrs	r3, r3, #16
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049d0:	4b61      	ldr	r3, [pc, #388]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d6:	0e1b      	lsrs	r3, r3, #24
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	019a      	lsls	r2, r3, #6
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	041b      	lsls	r3, r3, #16
 80049e8:	431a      	orrs	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	061b      	lsls	r3, r3, #24
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	071b      	lsls	r3, r3, #28
 80049f6:	4958      	ldr	r1, [pc, #352]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d004      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a12:	d00a      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d02e      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a28:	d129      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a2a:	4b4b      	ldr	r3, [pc, #300]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a30:	0c1b      	lsrs	r3, r3, #16
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a38:	4b47      	ldr	r3, [pc, #284]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a3e:	0f1b      	lsrs	r3, r3, #28
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	019a      	lsls	r2, r3, #6
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	041b      	lsls	r3, r3, #16
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	061b      	lsls	r3, r3, #24
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	071b      	lsls	r3, r3, #28
 8004a5e:	493e      	ldr	r1, [pc, #248]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a66:	4b3c      	ldr	r3, [pc, #240]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a6c:	f023 021f 	bic.w	r2, r3, #31
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	3b01      	subs	r3, #1
 8004a76:	4938      	ldr	r1, [pc, #224]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d01d      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a8a:	4b33      	ldr	r3, [pc, #204]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a90:	0e1b      	lsrs	r3, r3, #24
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a98:	4b2f      	ldr	r3, [pc, #188]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a9e:	0f1b      	lsrs	r3, r3, #28
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	019a      	lsls	r2, r3, #6
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	041b      	lsls	r3, r3, #16
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	061b      	lsls	r3, r3, #24
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	071b      	lsls	r3, r3, #28
 8004abe:	4926      	ldr	r1, [pc, #152]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d011      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	019a      	lsls	r2, r3, #6
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	041b      	lsls	r3, r3, #16
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	061b      	lsls	r3, r3, #24
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	071b      	lsls	r3, r3, #28
 8004aee:	491a      	ldr	r1, [pc, #104]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004af6:	4b18      	ldr	r3, [pc, #96]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a17      	ldr	r2, [pc, #92]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004afc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b02:	f7fe f81d 	bl	8002b40 <HAL_GetTick>
 8004b06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b08:	e008      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b0a:	f7fe f819 	bl	8002b40 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b64      	cmp	r3, #100	; 0x64
 8004b16:	d901      	bls.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e0d8      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b1c:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f0      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	f040 80ce 	bne.w	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b30:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a08      	ldr	r2, [pc, #32]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b3c:	f7fe f800 	bl	8002b40 <HAL_GetTick>
 8004b40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b42:	e00b      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b44:	f7fd fffc 	bl	8002b40 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b64      	cmp	r3, #100	; 0x64
 8004b50:	d904      	bls.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e0bb      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b5c:	4b5e      	ldr	r3, [pc, #376]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b68:	d0ec      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d009      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d02e      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d12a      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b92:	4b51      	ldr	r3, [pc, #324]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b98:	0c1b      	lsrs	r3, r3, #16
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ba0:	4b4d      	ldr	r3, [pc, #308]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba6:	0f1b      	lsrs	r3, r3, #28
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	019a      	lsls	r2, r3, #6
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	041b      	lsls	r3, r3, #16
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	061b      	lsls	r3, r3, #24
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	071b      	lsls	r3, r3, #28
 8004bc6:	4944      	ldr	r1, [pc, #272]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004bce:	4b42      	ldr	r3, [pc, #264]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bd4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	021b      	lsls	r3, r3, #8
 8004be0:	493d      	ldr	r1, [pc, #244]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d022      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bfc:	d11d      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bfe:	4b36      	ldr	r3, [pc, #216]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c04:	0e1b      	lsrs	r3, r3, #24
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c0c:	4b32      	ldr	r3, [pc, #200]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c12:	0f1b      	lsrs	r3, r3, #28
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	019a      	lsls	r2, r3, #6
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	041b      	lsls	r3, r3, #16
 8004c26:	431a      	orrs	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	061b      	lsls	r3, r3, #24
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	071b      	lsls	r3, r3, #28
 8004c32:	4929      	ldr	r1, [pc, #164]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d028      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c46:	4b24      	ldr	r3, [pc, #144]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4c:	0e1b      	lsrs	r3, r3, #24
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c54:	4b20      	ldr	r3, [pc, #128]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	0c1b      	lsrs	r3, r3, #16
 8004c5c:	f003 0303 	and.w	r3, r3, #3
 8004c60:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	019a      	lsls	r2, r3, #6
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	041b      	lsls	r3, r3, #16
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	061b      	lsls	r3, r3, #24
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	071b      	lsls	r3, r3, #28
 8004c7a:	4917      	ldr	r1, [pc, #92]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c82:	4b15      	ldr	r3, [pc, #84]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	4911      	ldr	r1, [pc, #68]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c98:	4b0f      	ldr	r3, [pc, #60]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a0e      	ldr	r2, [pc, #56]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca4:	f7fd ff4c 	bl	8002b40 <HAL_GetTick>
 8004ca8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cac:	f7fd ff48 	bl	8002b40 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b64      	cmp	r3, #100	; 0x64
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e007      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cbe:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cca:	d1ef      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3720      	adds	r7, #32
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40023800 	.word	0x40023800

08004cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e049      	b.n	8004d82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fd fb02 	bl	800230c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3304      	adds	r3, #4
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	f000 fe5a 	bl	80059d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d001      	beq.n	8004da4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e054      	b.n	8004e4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a26      	ldr	r2, [pc, #152]	; (8004e5c <HAL_TIM_Base_Start_IT+0xd0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d022      	beq.n	8004e0c <HAL_TIM_Base_Start_IT+0x80>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dce:	d01d      	beq.n	8004e0c <HAL_TIM_Base_Start_IT+0x80>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a22      	ldr	r2, [pc, #136]	; (8004e60 <HAL_TIM_Base_Start_IT+0xd4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d018      	beq.n	8004e0c <HAL_TIM_Base_Start_IT+0x80>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a21      	ldr	r2, [pc, #132]	; (8004e64 <HAL_TIM_Base_Start_IT+0xd8>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d013      	beq.n	8004e0c <HAL_TIM_Base_Start_IT+0x80>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1f      	ldr	r2, [pc, #124]	; (8004e68 <HAL_TIM_Base_Start_IT+0xdc>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00e      	beq.n	8004e0c <HAL_TIM_Base_Start_IT+0x80>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a1e      	ldr	r2, [pc, #120]	; (8004e6c <HAL_TIM_Base_Start_IT+0xe0>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d009      	beq.n	8004e0c <HAL_TIM_Base_Start_IT+0x80>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a1c      	ldr	r2, [pc, #112]	; (8004e70 <HAL_TIM_Base_Start_IT+0xe4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d004      	beq.n	8004e0c <HAL_TIM_Base_Start_IT+0x80>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a1b      	ldr	r2, [pc, #108]	; (8004e74 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d115      	bne.n	8004e38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <HAL_TIM_Base_Start_IT+0xec>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b06      	cmp	r3, #6
 8004e1c:	d015      	beq.n	8004e4a <HAL_TIM_Base_Start_IT+0xbe>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e24:	d011      	beq.n	8004e4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0201 	orr.w	r2, r2, #1
 8004e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e36:	e008      	b.n	8004e4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	e000      	b.n	8004e4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40010000 	.word	0x40010000
 8004e60:	40000400 	.word	0x40000400
 8004e64:	40000800 	.word	0x40000800
 8004e68:	40000c00 	.word	0x40000c00
 8004e6c:	40010400 	.word	0x40010400
 8004e70:	40014000 	.word	0x40014000
 8004e74:	40001800 	.word	0x40001800
 8004e78:	00010007 	.word	0x00010007

08004e7c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0201 	bic.w	r2, r2, #1
 8004e92:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6a1a      	ldr	r2, [r3, #32]
 8004e9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10f      	bne.n	8004ec4 <HAL_TIM_Base_Stop_IT+0x48>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6a1a      	ldr	r2, [r3, #32]
 8004eaa:	f240 4344 	movw	r3, #1092	; 0x444
 8004eae:	4013      	ands	r3, r2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d107      	bne.n	8004ec4 <HAL_TIM_Base_Stop_IT+0x48>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0201 	bic.w	r2, r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b082      	sub	sp, #8
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e049      	b.n	8004f80 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d106      	bne.n	8004f06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f841 	bl	8004f88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2202      	movs	r2, #2
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3304      	adds	r3, #4
 8004f16:	4619      	mov	r1, r3
 8004f18:	4610      	mov	r0, r2
 8004f1a:	f000 fd5b 	bl	80059d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e049      	b.n	8005042 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f841 	bl	800504a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	f000 fcfa 	bl	80059d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
	...

08005060 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	73fb      	strb	r3, [r7, #15]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b0c      	cmp	r3, #12
 8005072:	d841      	bhi.n	80050f8 <HAL_TIM_IC_Stop_IT+0x98>
 8005074:	a201      	add	r2, pc, #4	; (adr r2, 800507c <HAL_TIM_IC_Stop_IT+0x1c>)
 8005076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507a:	bf00      	nop
 800507c:	080050b1 	.word	0x080050b1
 8005080:	080050f9 	.word	0x080050f9
 8005084:	080050f9 	.word	0x080050f9
 8005088:	080050f9 	.word	0x080050f9
 800508c:	080050c3 	.word	0x080050c3
 8005090:	080050f9 	.word	0x080050f9
 8005094:	080050f9 	.word	0x080050f9
 8005098:	080050f9 	.word	0x080050f9
 800509c:	080050d5 	.word	0x080050d5
 80050a0:	080050f9 	.word	0x080050f9
 80050a4:	080050f9 	.word	0x080050f9
 80050a8:	080050f9 	.word	0x080050f9
 80050ac:	080050e7 	.word	0x080050e7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0202 	bic.w	r2, r2, #2
 80050be:	60da      	str	r2, [r3, #12]
      break;
 80050c0:	e01d      	b.n	80050fe <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0204 	bic.w	r2, r2, #4
 80050d0:	60da      	str	r2, [r3, #12]
      break;
 80050d2:	e014      	b.n	80050fe <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0208 	bic.w	r2, r2, #8
 80050e2:	60da      	str	r2, [r3, #12]
      break;
 80050e4:	e00b      	b.n	80050fe <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0210 	bic.w	r2, r2, #16
 80050f4:	60da      	str	r2, [r3, #12]
      break;
 80050f6:	e002      	b.n	80050fe <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	73fb      	strb	r3, [r7, #15]
      break;
 80050fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d166      	bne.n	80051d2 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2200      	movs	r2, #0
 800510a:	6839      	ldr	r1, [r7, #0]
 800510c:	4618      	mov	r0, r3
 800510e:	f001 f923 	bl	8006358 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6a1a      	ldr	r2, [r3, #32]
 8005118:	f241 1311 	movw	r3, #4369	; 0x1111
 800511c:	4013      	ands	r3, r2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10f      	bne.n	8005142 <HAL_TIM_IC_Stop_IT+0xe2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6a1a      	ldr	r2, [r3, #32]
 8005128:	f240 4344 	movw	r3, #1092	; 0x444
 800512c:	4013      	ands	r3, r2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d107      	bne.n	8005142 <HAL_TIM_IC_Stop_IT+0xe2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0201 	bic.w	r2, r2, #1
 8005140:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d104      	bne.n	8005152 <HAL_TIM_IC_Stop_IT+0xf2>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005150:	e023      	b.n	800519a <HAL_TIM_IC_Stop_IT+0x13a>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b04      	cmp	r3, #4
 8005156:	d104      	bne.n	8005162 <HAL_TIM_IC_Stop_IT+0x102>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005160:	e01b      	b.n	800519a <HAL_TIM_IC_Stop_IT+0x13a>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b08      	cmp	r3, #8
 8005166:	d104      	bne.n	8005172 <HAL_TIM_IC_Stop_IT+0x112>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005170:	e013      	b.n	800519a <HAL_TIM_IC_Stop_IT+0x13a>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b0c      	cmp	r3, #12
 8005176:	d104      	bne.n	8005182 <HAL_TIM_IC_Stop_IT+0x122>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005180:	e00b      	b.n	800519a <HAL_TIM_IC_Stop_IT+0x13a>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b10      	cmp	r3, #16
 8005186:	d104      	bne.n	8005192 <HAL_TIM_IC_Stop_IT+0x132>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005190:	e003      	b.n	800519a <HAL_TIM_IC_Stop_IT+0x13a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d104      	bne.n	80051aa <HAL_TIM_IC_Stop_IT+0x14a>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a8:	e013      	b.n	80051d2 <HAL_TIM_IC_Stop_IT+0x172>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d104      	bne.n	80051ba <HAL_TIM_IC_Stop_IT+0x15a>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051b8:	e00b      	b.n	80051d2 <HAL_TIM_IC_Stop_IT+0x172>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d104      	bne.n	80051ca <HAL_TIM_IC_Stop_IT+0x16a>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051c8:	e003      	b.n	80051d2 <HAL_TIM_IC_Stop_IT+0x172>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d122      	bne.n	8005238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d11b      	bne.n	8005238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0202 	mvn.w	r2, #2
 8005208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fd fa30 	bl	8002684 <HAL_TIM_IC_CaptureCallback>
 8005224:	e005      	b.n	8005232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fbb6 	bl	8005998 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fbbd 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b04      	cmp	r3, #4
 8005244:	d122      	bne.n	800528c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b04      	cmp	r3, #4
 8005252:	d11b      	bne.n	800528c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0204 	mvn.w	r2, #4
 800525c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2202      	movs	r2, #2
 8005262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7fd fa06 	bl	8002684 <HAL_TIM_IC_CaptureCallback>
 8005278:	e005      	b.n	8005286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fb8c 	bl	8005998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fb93 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b08      	cmp	r3, #8
 8005298:	d122      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d11b      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f06f 0208 	mvn.w	r2, #8
 80052b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2204      	movs	r2, #4
 80052b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fd f9dc 	bl	8002684 <HAL_TIM_IC_CaptureCallback>
 80052cc:	e005      	b.n	80052da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fb62 	bl	8005998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fb69 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f003 0310 	and.w	r3, r3, #16
 80052ea:	2b10      	cmp	r3, #16
 80052ec:	d122      	bne.n	8005334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	2b10      	cmp	r3, #16
 80052fa:	d11b      	bne.n	8005334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f06f 0210 	mvn.w	r2, #16
 8005304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2208      	movs	r2, #8
 800530a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fd f9b2 	bl	8002684 <HAL_TIM_IC_CaptureCallback>
 8005320:	e005      	b.n	800532e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fb38 	bl	8005998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fb3f 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b01      	cmp	r3, #1
 8005340:	d10e      	bne.n	8005360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b01      	cmp	r3, #1
 800534e:	d107      	bne.n	8005360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0201 	mvn.w	r2, #1
 8005358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fd f96e 	bl	800263c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536a:	2b80      	cmp	r3, #128	; 0x80
 800536c:	d10e      	bne.n	800538c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005378:	2b80      	cmp	r3, #128	; 0x80
 800537a:	d107      	bne.n	800538c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f001 f8a4 	bl	80064d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800539a:	d10e      	bne.n	80053ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a6:	2b80      	cmp	r3, #128	; 0x80
 80053a8:	d107      	bne.n	80053ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f001 f897 	bl	80064e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c4:	2b40      	cmp	r3, #64	; 0x40
 80053c6:	d10e      	bne.n	80053e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d2:	2b40      	cmp	r3, #64	; 0x40
 80053d4:	d107      	bne.n	80053e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 faed 	bl	80059c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f003 0320 	and.w	r3, r3, #32
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	d10e      	bne.n	8005412 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b20      	cmp	r3, #32
 8005400:	d107      	bne.n	8005412 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f06f 0220 	mvn.w	r2, #32
 800540a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f001 f857 	bl	80064c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005412:	bf00      	nop
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b086      	sub	sp, #24
 800541e:	af00      	add	r7, sp, #0
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005430:	2b01      	cmp	r3, #1
 8005432:	d101      	bne.n	8005438 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005434:	2302      	movs	r3, #2
 8005436:	e088      	b.n	800554a <HAL_TIM_IC_ConfigChannel+0x130>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d11b      	bne.n	800547e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6819      	ldr	r1, [r3, #0]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f000 fdbb 	bl	8005fd0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699a      	ldr	r2, [r3, #24]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 020c 	bic.w	r2, r2, #12
 8005468:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6999      	ldr	r1, [r3, #24]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	619a      	str	r2, [r3, #24]
 800547c:	e060      	b.n	8005540 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b04      	cmp	r3, #4
 8005482:	d11c      	bne.n	80054be <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6818      	ldr	r0, [r3, #0]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	6819      	ldr	r1, [r3, #0]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f000 fe3f 	bl	8006116 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054a6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6999      	ldr	r1, [r3, #24]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	021a      	lsls	r2, r3, #8
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	619a      	str	r2, [r3, #24]
 80054bc:	e040      	b.n	8005540 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d11b      	bne.n	80054fc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6818      	ldr	r0, [r3, #0]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	6819      	ldr	r1, [r3, #0]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f000 fe8c 	bl	80061f0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	69da      	ldr	r2, [r3, #28]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 020c 	bic.w	r2, r2, #12
 80054e6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	69d9      	ldr	r1, [r3, #28]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	689a      	ldr	r2, [r3, #8]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	61da      	str	r2, [r3, #28]
 80054fa:	e021      	b.n	8005540 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b0c      	cmp	r3, #12
 8005500:	d11c      	bne.n	800553c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	6819      	ldr	r1, [r3, #0]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f000 fea9 	bl	8006268 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69da      	ldr	r2, [r3, #28]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005524:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69d9      	ldr	r1, [r3, #28]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	021a      	lsls	r2, r3, #8
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	61da      	str	r2, [r3, #28]
 800553a:	e001      	b.n	8005540 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005548:	7dfb      	ldrb	r3, [r7, #23]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005560:	2300      	movs	r3, #0
 8005562:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800556a:	2b01      	cmp	r3, #1
 800556c:	d101      	bne.n	8005572 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800556e:	2302      	movs	r3, #2
 8005570:	e0ff      	b.n	8005772 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b14      	cmp	r3, #20
 800557e:	f200 80f0 	bhi.w	8005762 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005582:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	080055dd 	.word	0x080055dd
 800558c:	08005763 	.word	0x08005763
 8005590:	08005763 	.word	0x08005763
 8005594:	08005763 	.word	0x08005763
 8005598:	0800561d 	.word	0x0800561d
 800559c:	08005763 	.word	0x08005763
 80055a0:	08005763 	.word	0x08005763
 80055a4:	08005763 	.word	0x08005763
 80055a8:	0800565f 	.word	0x0800565f
 80055ac:	08005763 	.word	0x08005763
 80055b0:	08005763 	.word	0x08005763
 80055b4:	08005763 	.word	0x08005763
 80055b8:	0800569f 	.word	0x0800569f
 80055bc:	08005763 	.word	0x08005763
 80055c0:	08005763 	.word	0x08005763
 80055c4:	08005763 	.word	0x08005763
 80055c8:	080056e1 	.word	0x080056e1
 80055cc:	08005763 	.word	0x08005763
 80055d0:	08005763 	.word	0x08005763
 80055d4:	08005763 	.word	0x08005763
 80055d8:	08005721 	.word	0x08005721
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68b9      	ldr	r1, [r7, #8]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 fa96 	bl	8005b14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0208 	orr.w	r2, r2, #8
 80055f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699a      	ldr	r2, [r3, #24]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0204 	bic.w	r2, r2, #4
 8005606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6999      	ldr	r1, [r3, #24]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	691a      	ldr	r2, [r3, #16]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	619a      	str	r2, [r3, #24]
      break;
 800561a:	e0a5      	b.n	8005768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68b9      	ldr	r1, [r7, #8]
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fae8 	bl	8005bf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699a      	ldr	r2, [r3, #24]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6999      	ldr	r1, [r3, #24]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	021a      	lsls	r2, r3, #8
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	619a      	str	r2, [r3, #24]
      break;
 800565c:	e084      	b.n	8005768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68b9      	ldr	r1, [r7, #8]
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fb3f 	bl	8005ce8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69da      	ldr	r2, [r3, #28]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f042 0208 	orr.w	r2, r2, #8
 8005678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69da      	ldr	r2, [r3, #28]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0204 	bic.w	r2, r2, #4
 8005688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69d9      	ldr	r1, [r3, #28]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	61da      	str	r2, [r3, #28]
      break;
 800569c:	e064      	b.n	8005768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68b9      	ldr	r1, [r7, #8]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 fb95 	bl	8005dd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69da      	ldr	r2, [r3, #28]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69da      	ldr	r2, [r3, #28]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69d9      	ldr	r1, [r3, #28]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	021a      	lsls	r2, r3, #8
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	61da      	str	r2, [r3, #28]
      break;
 80056de:	e043      	b.n	8005768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68b9      	ldr	r1, [r7, #8]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 fbcc 	bl	8005e84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0208 	orr.w	r2, r2, #8
 80056fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0204 	bic.w	r2, r2, #4
 800570a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800571e:	e023      	b.n	8005768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fbfe 	bl	8005f28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800573a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800574a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	021a      	lsls	r2, r3, #8
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005760:	e002      	b.n	8005768 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	75fb      	strb	r3, [r7, #23]
      break;
 8005766:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005770:	7dfb      	ldrb	r3, [r7, #23]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop

0800577c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005786:	2300      	movs	r3, #0
 8005788:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_TIM_ConfigClockSource+0x1c>
 8005794:	2302      	movs	r3, #2
 8005796:	e0b4      	b.n	8005902 <HAL_TIM_ConfigClockSource+0x186>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	4b56      	ldr	r3, [pc, #344]	; (800590c <HAL_TIM_ConfigClockSource+0x190>)
 80057b4:	4013      	ands	r3, r2
 80057b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d0:	d03e      	beq.n	8005850 <HAL_TIM_ConfigClockSource+0xd4>
 80057d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d6:	f200 8087 	bhi.w	80058e8 <HAL_TIM_ConfigClockSource+0x16c>
 80057da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057de:	f000 8086 	beq.w	80058ee <HAL_TIM_ConfigClockSource+0x172>
 80057e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e6:	d87f      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x16c>
 80057e8:	2b70      	cmp	r3, #112	; 0x70
 80057ea:	d01a      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0xa6>
 80057ec:	2b70      	cmp	r3, #112	; 0x70
 80057ee:	d87b      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x16c>
 80057f0:	2b60      	cmp	r3, #96	; 0x60
 80057f2:	d050      	beq.n	8005896 <HAL_TIM_ConfigClockSource+0x11a>
 80057f4:	2b60      	cmp	r3, #96	; 0x60
 80057f6:	d877      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x16c>
 80057f8:	2b50      	cmp	r3, #80	; 0x50
 80057fa:	d03c      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0xfa>
 80057fc:	2b50      	cmp	r3, #80	; 0x50
 80057fe:	d873      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005800:	2b40      	cmp	r3, #64	; 0x40
 8005802:	d058      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0x13a>
 8005804:	2b40      	cmp	r3, #64	; 0x40
 8005806:	d86f      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005808:	2b30      	cmp	r3, #48	; 0x30
 800580a:	d064      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x15a>
 800580c:	2b30      	cmp	r3, #48	; 0x30
 800580e:	d86b      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005810:	2b20      	cmp	r3, #32
 8005812:	d060      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x15a>
 8005814:	2b20      	cmp	r3, #32
 8005816:	d867      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005818:	2b00      	cmp	r3, #0
 800581a:	d05c      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x15a>
 800581c:	2b10      	cmp	r3, #16
 800581e:	d05a      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x15a>
 8005820:	e062      	b.n	80058e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6899      	ldr	r1, [r3, #8]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f000 fd71 	bl	8006318 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005844:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	609a      	str	r2, [r3, #8]
      break;
 800584e:	e04f      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6818      	ldr	r0, [r3, #0]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	6899      	ldr	r1, [r3, #8]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f000 fd5a 	bl	8006318 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005872:	609a      	str	r2, [r3, #8]
      break;
 8005874:	e03c      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	6859      	ldr	r1, [r3, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	461a      	mov	r2, r3
 8005884:	f000 fc18 	bl	80060b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2150      	movs	r1, #80	; 0x50
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fd27 	bl	80062e2 <TIM_ITRx_SetConfig>
      break;
 8005894:	e02c      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	6859      	ldr	r1, [r3, #4]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	461a      	mov	r2, r3
 80058a4:	f000 fc74 	bl	8006190 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2160      	movs	r1, #96	; 0x60
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fd17 	bl	80062e2 <TIM_ITRx_SetConfig>
      break;
 80058b4:	e01c      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	6859      	ldr	r1, [r3, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	461a      	mov	r2, r3
 80058c4:	f000 fbf8 	bl	80060b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2140      	movs	r1, #64	; 0x40
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fd07 	bl	80062e2 <TIM_ITRx_SetConfig>
      break;
 80058d4:	e00c      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4619      	mov	r1, r3
 80058e0:	4610      	mov	r0, r2
 80058e2:	f000 fcfe 	bl	80062e2 <TIM_ITRx_SetConfig>
      break;
 80058e6:	e003      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	73fb      	strb	r3, [r7, #15]
      break;
 80058ec:	e000      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005900:	7bfb      	ldrb	r3, [r7, #15]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	fffeff88 	.word	0xfffeff88

08005910 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b0c      	cmp	r3, #12
 8005922:	d831      	bhi.n	8005988 <HAL_TIM_ReadCapturedValue+0x78>
 8005924:	a201      	add	r2, pc, #4	; (adr r2, 800592c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592a:	bf00      	nop
 800592c:	08005961 	.word	0x08005961
 8005930:	08005989 	.word	0x08005989
 8005934:	08005989 	.word	0x08005989
 8005938:	08005989 	.word	0x08005989
 800593c:	0800596b 	.word	0x0800596b
 8005940:	08005989 	.word	0x08005989
 8005944:	08005989 	.word	0x08005989
 8005948:	08005989 	.word	0x08005989
 800594c:	08005975 	.word	0x08005975
 8005950:	08005989 	.word	0x08005989
 8005954:	08005989 	.word	0x08005989
 8005958:	08005989 	.word	0x08005989
 800595c:	0800597f 	.word	0x0800597f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005966:	60fb      	str	r3, [r7, #12]

      break;
 8005968:	e00f      	b.n	800598a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	60fb      	str	r3, [r7, #12]

      break;
 8005972:	e00a      	b.n	800598a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597a:	60fb      	str	r3, [r7, #12]

      break;
 800597c:	e005      	b.n	800598a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005984:	60fb      	str	r3, [r7, #12]

      break;
 8005986:	e000      	b.n	800598a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005988:	bf00      	nop
  }

  return tmpreg;
 800598a:	68fb      	ldr	r3, [r7, #12]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a40      	ldr	r2, [pc, #256]	; (8005ae8 <TIM_Base_SetConfig+0x114>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d013      	beq.n	8005a14 <TIM_Base_SetConfig+0x40>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f2:	d00f      	beq.n	8005a14 <TIM_Base_SetConfig+0x40>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a3d      	ldr	r2, [pc, #244]	; (8005aec <TIM_Base_SetConfig+0x118>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00b      	beq.n	8005a14 <TIM_Base_SetConfig+0x40>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a3c      	ldr	r2, [pc, #240]	; (8005af0 <TIM_Base_SetConfig+0x11c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d007      	beq.n	8005a14 <TIM_Base_SetConfig+0x40>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a3b      	ldr	r2, [pc, #236]	; (8005af4 <TIM_Base_SetConfig+0x120>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d003      	beq.n	8005a14 <TIM_Base_SetConfig+0x40>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a3a      	ldr	r2, [pc, #232]	; (8005af8 <TIM_Base_SetConfig+0x124>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d108      	bne.n	8005a26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a2f      	ldr	r2, [pc, #188]	; (8005ae8 <TIM_Base_SetConfig+0x114>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d02b      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a34:	d027      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a2c      	ldr	r2, [pc, #176]	; (8005aec <TIM_Base_SetConfig+0x118>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d023      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a2b      	ldr	r2, [pc, #172]	; (8005af0 <TIM_Base_SetConfig+0x11c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d01f      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a2a      	ldr	r2, [pc, #168]	; (8005af4 <TIM_Base_SetConfig+0x120>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d01b      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a29      	ldr	r2, [pc, #164]	; (8005af8 <TIM_Base_SetConfig+0x124>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d017      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a28      	ldr	r2, [pc, #160]	; (8005afc <TIM_Base_SetConfig+0x128>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d013      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a27      	ldr	r2, [pc, #156]	; (8005b00 <TIM_Base_SetConfig+0x12c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00f      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a26      	ldr	r2, [pc, #152]	; (8005b04 <TIM_Base_SetConfig+0x130>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00b      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a25      	ldr	r2, [pc, #148]	; (8005b08 <TIM_Base_SetConfig+0x134>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d007      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a24      	ldr	r2, [pc, #144]	; (8005b0c <TIM_Base_SetConfig+0x138>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d003      	beq.n	8005a86 <TIM_Base_SetConfig+0xb2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a23      	ldr	r2, [pc, #140]	; (8005b10 <TIM_Base_SetConfig+0x13c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d108      	bne.n	8005a98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a0a      	ldr	r2, [pc, #40]	; (8005ae8 <TIM_Base_SetConfig+0x114>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d003      	beq.n	8005acc <TIM_Base_SetConfig+0xf8>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a0c      	ldr	r2, [pc, #48]	; (8005af8 <TIM_Base_SetConfig+0x124>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d103      	bne.n	8005ad4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	691a      	ldr	r2, [r3, #16]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	615a      	str	r2, [r3, #20]
}
 8005ada:	bf00      	nop
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	40010000 	.word	0x40010000
 8005aec:	40000400 	.word	0x40000400
 8005af0:	40000800 	.word	0x40000800
 8005af4:	40000c00 	.word	0x40000c00
 8005af8:	40010400 	.word	0x40010400
 8005afc:	40014000 	.word	0x40014000
 8005b00:	40014400 	.word	0x40014400
 8005b04:	40014800 	.word	0x40014800
 8005b08:	40001800 	.word	0x40001800
 8005b0c:	40001c00 	.word	0x40001c00
 8005b10:	40002000 	.word	0x40002000

08005b14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	f023 0201 	bic.w	r2, r3, #1
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4b2b      	ldr	r3, [pc, #172]	; (8005bec <TIM_OC1_SetConfig+0xd8>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0303 	bic.w	r3, r3, #3
 8005b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f023 0302 	bic.w	r3, r3, #2
 8005b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a21      	ldr	r2, [pc, #132]	; (8005bf0 <TIM_OC1_SetConfig+0xdc>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_OC1_SetConfig+0x64>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a20      	ldr	r2, [pc, #128]	; (8005bf4 <TIM_OC1_SetConfig+0xe0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d10c      	bne.n	8005b92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f023 0308 	bic.w	r3, r3, #8
 8005b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f023 0304 	bic.w	r3, r3, #4
 8005b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a16      	ldr	r2, [pc, #88]	; (8005bf0 <TIM_OC1_SetConfig+0xdc>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d003      	beq.n	8005ba2 <TIM_OC1_SetConfig+0x8e>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a15      	ldr	r2, [pc, #84]	; (8005bf4 <TIM_OC1_SetConfig+0xe0>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d111      	bne.n	8005bc6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	621a      	str	r2, [r3, #32]
}
 8005be0:	bf00      	nop
 8005be2:	371c      	adds	r7, #28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	fffeff8f 	.word	0xfffeff8f
 8005bf0:	40010000 	.word	0x40010000
 8005bf4:	40010400 	.word	0x40010400

08005bf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	f023 0210 	bic.w	r2, r3, #16
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4b2e      	ldr	r3, [pc, #184]	; (8005cdc <TIM_OC2_SetConfig+0xe4>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	021b      	lsls	r3, r3, #8
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f023 0320 	bic.w	r3, r3, #32
 8005c42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a23      	ldr	r2, [pc, #140]	; (8005ce0 <TIM_OC2_SetConfig+0xe8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d003      	beq.n	8005c60 <TIM_OC2_SetConfig+0x68>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a22      	ldr	r2, [pc, #136]	; (8005ce4 <TIM_OC2_SetConfig+0xec>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d10d      	bne.n	8005c7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	011b      	lsls	r3, r3, #4
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a18      	ldr	r2, [pc, #96]	; (8005ce0 <TIM_OC2_SetConfig+0xe8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d003      	beq.n	8005c8c <TIM_OC2_SetConfig+0x94>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a17      	ldr	r2, [pc, #92]	; (8005ce4 <TIM_OC2_SetConfig+0xec>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d113      	bne.n	8005cb4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	621a      	str	r2, [r3, #32]
}
 8005cce:	bf00      	nop
 8005cd0:	371c      	adds	r7, #28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	feff8fff 	.word	0xfeff8fff
 8005ce0:	40010000 	.word	0x40010000
 8005ce4:	40010400 	.word	0x40010400

08005ce8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4b2d      	ldr	r3, [pc, #180]	; (8005dc8 <TIM_OC3_SetConfig+0xe0>)
 8005d14:	4013      	ands	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0303 	bic.w	r3, r3, #3
 8005d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	021b      	lsls	r3, r3, #8
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a22      	ldr	r2, [pc, #136]	; (8005dcc <TIM_OC3_SetConfig+0xe4>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d003      	beq.n	8005d4e <TIM_OC3_SetConfig+0x66>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a21      	ldr	r2, [pc, #132]	; (8005dd0 <TIM_OC3_SetConfig+0xe8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d10d      	bne.n	8005d6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	021b      	lsls	r3, r3, #8
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a17      	ldr	r2, [pc, #92]	; (8005dcc <TIM_OC3_SetConfig+0xe4>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d003      	beq.n	8005d7a <TIM_OC3_SetConfig+0x92>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a16      	ldr	r2, [pc, #88]	; (8005dd0 <TIM_OC3_SetConfig+0xe8>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d113      	bne.n	8005da2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	621a      	str	r2, [r3, #32]
}
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	fffeff8f 	.word	0xfffeff8f
 8005dcc:	40010000 	.word	0x40010000
 8005dd0:	40010400 	.word	0x40010400

08005dd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	4b1e      	ldr	r3, [pc, #120]	; (8005e78 <TIM_OC4_SetConfig+0xa4>)
 8005e00:	4013      	ands	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	021b      	lsls	r3, r3, #8
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	031b      	lsls	r3, r3, #12
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a13      	ldr	r2, [pc, #76]	; (8005e7c <TIM_OC4_SetConfig+0xa8>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d003      	beq.n	8005e3c <TIM_OC4_SetConfig+0x68>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a12      	ldr	r2, [pc, #72]	; (8005e80 <TIM_OC4_SetConfig+0xac>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d109      	bne.n	8005e50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	019b      	lsls	r3, r3, #6
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	621a      	str	r2, [r3, #32]
}
 8005e6a:	bf00      	nop
 8005e6c:	371c      	adds	r7, #28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	feff8fff 	.word	0xfeff8fff
 8005e7c:	40010000 	.word	0x40010000
 8005e80:	40010400 	.word	0x40010400

08005e84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4b1b      	ldr	r3, [pc, #108]	; (8005f1c <TIM_OC5_SetConfig+0x98>)
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ec4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	041b      	lsls	r3, r3, #16
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a12      	ldr	r2, [pc, #72]	; (8005f20 <TIM_OC5_SetConfig+0x9c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d003      	beq.n	8005ee2 <TIM_OC5_SetConfig+0x5e>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a11      	ldr	r2, [pc, #68]	; (8005f24 <TIM_OC5_SetConfig+0xa0>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d109      	bne.n	8005ef6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	021b      	lsls	r3, r3, #8
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	621a      	str	r2, [r3, #32]
}
 8005f10:	bf00      	nop
 8005f12:	371c      	adds	r7, #28
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	fffeff8f 	.word	0xfffeff8f
 8005f20:	40010000 	.word	0x40010000
 8005f24:	40010400 	.word	0x40010400

08005f28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	4b1c      	ldr	r3, [pc, #112]	; (8005fc4 <TIM_OC6_SetConfig+0x9c>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	021b      	lsls	r3, r3, #8
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	051b      	lsls	r3, r3, #20
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a13      	ldr	r2, [pc, #76]	; (8005fc8 <TIM_OC6_SetConfig+0xa0>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d003      	beq.n	8005f88 <TIM_OC6_SetConfig+0x60>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a12      	ldr	r2, [pc, #72]	; (8005fcc <TIM_OC6_SetConfig+0xa4>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d109      	bne.n	8005f9c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	029b      	lsls	r3, r3, #10
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	feff8fff 	.word	0xfeff8fff
 8005fc8:	40010000 	.word	0x40010000
 8005fcc:	40010400 	.word	0x40010400

08005fd0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
 8005fdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	f023 0201 	bic.w	r2, r3, #1
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
 8005ff4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4a28      	ldr	r2, [pc, #160]	; (800609c <TIM_TI1_SetConfig+0xcc>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d01b      	beq.n	8006036 <TIM_TI1_SetConfig+0x66>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006004:	d017      	beq.n	8006036 <TIM_TI1_SetConfig+0x66>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	4a25      	ldr	r2, [pc, #148]	; (80060a0 <TIM_TI1_SetConfig+0xd0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d013      	beq.n	8006036 <TIM_TI1_SetConfig+0x66>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4a24      	ldr	r2, [pc, #144]	; (80060a4 <TIM_TI1_SetConfig+0xd4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00f      	beq.n	8006036 <TIM_TI1_SetConfig+0x66>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4a23      	ldr	r2, [pc, #140]	; (80060a8 <TIM_TI1_SetConfig+0xd8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d00b      	beq.n	8006036 <TIM_TI1_SetConfig+0x66>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4a22      	ldr	r2, [pc, #136]	; (80060ac <TIM_TI1_SetConfig+0xdc>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d007      	beq.n	8006036 <TIM_TI1_SetConfig+0x66>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4a21      	ldr	r2, [pc, #132]	; (80060b0 <TIM_TI1_SetConfig+0xe0>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d003      	beq.n	8006036 <TIM_TI1_SetConfig+0x66>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4a20      	ldr	r2, [pc, #128]	; (80060b4 <TIM_TI1_SetConfig+0xe4>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d101      	bne.n	800603a <TIM_TI1_SetConfig+0x6a>
 8006036:	2301      	movs	r3, #1
 8006038:	e000      	b.n	800603c <TIM_TI1_SetConfig+0x6c>
 800603a:	2300      	movs	r3, #0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d008      	beq.n	8006052 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f023 0303 	bic.w	r3, r3, #3
 8006046:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4313      	orrs	r3, r2
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e003      	b.n	800605a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f043 0301 	orr.w	r3, r3, #1
 8006058:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006060:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	011b      	lsls	r3, r3, #4
 8006066:	b2db      	uxtb	r3, r3
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f023 030a 	bic.w	r3, r3, #10
 8006074:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f003 030a 	and.w	r3, r3, #10
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	4313      	orrs	r3, r2
 8006080:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	621a      	str	r2, [r3, #32]
}
 800608e:	bf00      	nop
 8006090:	371c      	adds	r7, #28
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	40010000 	.word	0x40010000
 80060a0:	40000400 	.word	0x40000400
 80060a4:	40000800 	.word	0x40000800
 80060a8:	40000c00 	.word	0x40000c00
 80060ac:	40010400 	.word	0x40010400
 80060b0:	40014000 	.word	0x40014000
 80060b4:	40001800 	.word	0x40001800

080060b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	f023 0201 	bic.w	r2, r3, #1
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	011b      	lsls	r3, r3, #4
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f023 030a 	bic.w	r3, r3, #10
 80060f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	621a      	str	r2, [r3, #32]
}
 800610a:	bf00      	nop
 800610c:	371c      	adds	r7, #28
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006116:	b480      	push	{r7}
 8006118:	b087      	sub	sp, #28
 800611a:	af00      	add	r7, sp, #0
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	60b9      	str	r1, [r7, #8]
 8006120:	607a      	str	r2, [r7, #4]
 8006122:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	f023 0210 	bic.w	r2, r3, #16
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006142:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	021b      	lsls	r3, r3, #8
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	4313      	orrs	r3, r2
 800614c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006154:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	031b      	lsls	r3, r3, #12
 800615a:	b29b      	uxth	r3, r3
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	4313      	orrs	r3, r2
 8006160:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006168:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	621a      	str	r2, [r3, #32]
}
 8006184:	bf00      	nop
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	f023 0210 	bic.w	r2, r3, #16
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	031b      	lsls	r3, r3, #12
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	011b      	lsls	r3, r3, #4
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	621a      	str	r2, [r3, #32]
}
 80061e4:	bf00      	nop
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f023 0303 	bic.w	r3, r3, #3
 800621c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4313      	orrs	r3, r2
 8006224:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800622c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	b2db      	uxtb	r3, r3
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006240:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	021b      	lsls	r3, r3, #8
 8006246:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	621a      	str	r2, [r3, #32]
}
 800625c:	bf00      	nop
 800625e:	371c      	adds	r7, #28
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006294:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	021b      	lsls	r3, r3, #8
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	4313      	orrs	r3, r2
 800629e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	031b      	lsls	r3, r3, #12
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80062ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	031b      	lsls	r3, r3, #12
 80062c0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	621a      	str	r2, [r3, #32]
}
 80062d6:	bf00      	nop
 80062d8:	371c      	adds	r7, #28
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b085      	sub	sp, #20
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4313      	orrs	r3, r2
 8006300:	f043 0307 	orr.w	r3, r3, #7
 8006304:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	609a      	str	r2, [r3, #8]
}
 800630c:	bf00      	nop
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
 8006324:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006332:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	021a      	lsls	r2, r3, #8
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	431a      	orrs	r2, r3
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	4313      	orrs	r3, r2
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	609a      	str	r2, [r3, #8]
}
 800634c:	bf00      	nop
 800634e:	371c      	adds	r7, #28
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f003 031f 	and.w	r3, r3, #31
 800636a:	2201      	movs	r2, #1
 800636c:	fa02 f303 	lsl.w	r3, r2, r3
 8006370:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6a1a      	ldr	r2, [r3, #32]
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	43db      	mvns	r3, r3
 800637a:	401a      	ands	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a1a      	ldr	r2, [r3, #32]
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f003 031f 	and.w	r3, r3, #31
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	fa01 f303 	lsl.w	r3, r1, r3
 8006390:	431a      	orrs	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	621a      	str	r2, [r3, #32]
}
 8006396:	bf00      	nop
 8006398:	371c      	adds	r7, #28
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
	...

080063a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063b8:	2302      	movs	r3, #2
 80063ba:	e06d      	b.n	8006498 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a30      	ldr	r2, [pc, #192]	; (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d004      	beq.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a2f      	ldr	r2, [pc, #188]	; (80064a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d108      	bne.n	8006402 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80063f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006408:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a20      	ldr	r2, [pc, #128]	; (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d022      	beq.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800642e:	d01d      	beq.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a1d      	ldr	r2, [pc, #116]	; (80064ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d018      	beq.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a1c      	ldr	r2, [pc, #112]	; (80064b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d013      	beq.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a1a      	ldr	r2, [pc, #104]	; (80064b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d00e      	beq.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a15      	ldr	r2, [pc, #84]	; (80064a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d009      	beq.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a16      	ldr	r2, [pc, #88]	; (80064b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d004      	beq.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a15      	ldr	r2, [pc, #84]	; (80064bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d10c      	bne.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006472:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	4313      	orrs	r3, r2
 800647c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	40010000 	.word	0x40010000
 80064a8:	40010400 	.word	0x40010400
 80064ac:	40000400 	.word	0x40000400
 80064b0:	40000800 	.word	0x40000800
 80064b4:	40000c00 	.word	0x40000c00
 80064b8:	40014000 	.word	0x40014000
 80064bc:	40001800 	.word	0x40001800

080064c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e040      	b.n	8006590 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006512:	2b00      	cmp	r3, #0
 8006514:	d106      	bne.n	8006524 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7fc f91e 	bl	8002760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2224      	movs	r2, #36	; 0x24
 8006528:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0201 	bic.w	r2, r2, #1
 8006538:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fbe8 	bl	8006d10 <UART_SetConfig>
 8006540:	4603      	mov	r3, r0
 8006542:	2b01      	cmp	r3, #1
 8006544:	d101      	bne.n	800654a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e022      	b.n	8006590 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fe3e 	bl	80071d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006566:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689a      	ldr	r2, [r3, #8]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006576:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fec5 	bl	8007318 <UART_CheckIdleState>
 800658e:	4603      	mov	r3, r0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006598:	b480      	push	{r7}
 800659a:	b08b      	sub	sp, #44	; 0x2c
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	4613      	mov	r3, r2
 80065a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065aa:	2b20      	cmp	r3, #32
 80065ac:	d156      	bne.n	800665c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <HAL_UART_Transmit_IT+0x22>
 80065b4:	88fb      	ldrh	r3, [r7, #6]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e04f      	b.n	800665e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d101      	bne.n	80065cc <HAL_UART_Transmit_IT+0x34>
 80065c8:	2302      	movs	r3, #2
 80065ca:	e048      	b.n	800665e <HAL_UART_Transmit_IT+0xc6>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	88fa      	ldrh	r2, [r7, #6]
 80065de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	88fa      	ldrh	r2, [r7, #6]
 80065e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2221      	movs	r2, #33	; 0x21
 80065fc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006606:	d107      	bne.n	8006618 <HAL_UART_Transmit_IT+0x80>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d103      	bne.n	8006618 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4a16      	ldr	r2, [pc, #88]	; (800666c <HAL_UART_Transmit_IT+0xd4>)
 8006614:	669a      	str	r2, [r3, #104]	; 0x68
 8006616:	e002      	b.n	800661e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4a15      	ldr	r2, [pc, #84]	; (8006670 <HAL_UART_Transmit_IT+0xd8>)
 800661c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	e853 3f00 	ldrex	r3, [r3]
 8006632:	613b      	str	r3, [r7, #16]
   return(result);
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663a:	627b      	str	r3, [r7, #36]	; 0x24
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	461a      	mov	r2, r3
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	623b      	str	r3, [r7, #32]
 8006646:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	69f9      	ldr	r1, [r7, #28]
 800664a:	6a3a      	ldr	r2, [r7, #32]
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	61bb      	str	r3, [r7, #24]
   return(result);
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e6      	bne.n	8006626 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	e000      	b.n	800665e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800665c:	2302      	movs	r3, #2
  }
}
 800665e:	4618      	mov	r0, r3
 8006660:	372c      	adds	r7, #44	; 0x2c
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	08007871 	.word	0x08007871
 8006670:	080077bb 	.word	0x080077bb

08006674 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b08a      	sub	sp, #40	; 0x28
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	4613      	mov	r3, r2
 8006680:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006686:	2b20      	cmp	r3, #32
 8006688:	d13d      	bne.n	8006706 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <HAL_UART_Receive_IT+0x22>
 8006690:	88fb      	ldrh	r3, [r7, #6]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e036      	b.n	8006708 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d101      	bne.n	80066a8 <HAL_UART_Receive_IT+0x34>
 80066a4:	2302      	movs	r3, #2
 80066a6:	e02f      	b.n	8006708 <HAL_UART_Receive_IT+0x94>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d018      	beq.n	80066f6 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	e853 3f00 	ldrex	r3, [r3]
 80066d0:	613b      	str	r3, [r7, #16]
   return(result);
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	623b      	str	r3, [r7, #32]
 80066e4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e6:	69f9      	ldr	r1, [r7, #28]
 80066e8:	6a3a      	ldr	r2, [r7, #32]
 80066ea:	e841 2300 	strex	r3, r2, [r1]
 80066ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1e6      	bne.n	80066c4 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066f6:	88fb      	ldrh	r3, [r7, #6]
 80066f8:	461a      	mov	r2, r3
 80066fa:	68b9      	ldr	r1, [r7, #8]
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 ff19 	bl	8007534 <UART_Start_Receive_IT>
 8006702:	4603      	mov	r3, r0
 8006704:	e000      	b.n	8006708 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006706:	2302      	movs	r3, #2
  }
}
 8006708:	4618      	mov	r0, r3
 800670a:	3728      	adds	r7, #40	; 0x28
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b0ba      	sub	sp, #232	; 0xe8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006736:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800673a:	f640 030f 	movw	r3, #2063	; 0x80f
 800673e:	4013      	ands	r3, r2
 8006740:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006744:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006748:	2b00      	cmp	r3, #0
 800674a:	d115      	bne.n	8006778 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800674c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006750:	f003 0320 	and.w	r3, r3, #32
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00f      	beq.n	8006778 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800675c:	f003 0320 	and.w	r3, r3, #32
 8006760:	2b00      	cmp	r3, #0
 8006762:	d009      	beq.n	8006778 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 82a4 	beq.w	8006cb6 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	4798      	blx	r3
      }
      return;
 8006776:	e29e      	b.n	8006cb6 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006778:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 8117 	beq.w	80069b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d106      	bne.n	800679c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800678e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006792:	4b85      	ldr	r3, [pc, #532]	; (80069a8 <HAL_UART_IRQHandler+0x298>)
 8006794:	4013      	ands	r3, r2
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 810a 	beq.w	80069b0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800679c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d011      	beq.n	80067cc <HAL_UART_IRQHandler+0xbc>
 80067a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00b      	beq.n	80067cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2201      	movs	r2, #1
 80067ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067c2:	f043 0201 	orr.w	r2, r3, #1
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d011      	beq.n	80067fc <HAL_UART_IRQHandler+0xec>
 80067d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00b      	beq.n	80067fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2202      	movs	r2, #2
 80067ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067f2:	f043 0204 	orr.w	r2, r3, #4
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	d011      	beq.n	800682c <HAL_UART_IRQHandler+0x11c>
 8006808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00b      	beq.n	800682c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2204      	movs	r2, #4
 800681a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006822:	f043 0202 	orr.w	r2, r3, #2
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800682c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006830:	f003 0308 	and.w	r3, r3, #8
 8006834:	2b00      	cmp	r3, #0
 8006836:	d017      	beq.n	8006868 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b00      	cmp	r3, #0
 8006842:	d105      	bne.n	8006850 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006848:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00b      	beq.n	8006868 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2208      	movs	r2, #8
 8006856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800685e:	f043 0208 	orr.w	r2, r3, #8
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800686c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006870:	2b00      	cmp	r3, #0
 8006872:	d012      	beq.n	800689a <HAL_UART_IRQHandler+0x18a>
 8006874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006878:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00c      	beq.n	800689a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006888:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006890:	f043 0220 	orr.w	r2, r3, #32
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 820a 	beq.w	8006cba <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80068a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068aa:	f003 0320 	and.w	r3, r3, #32
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00d      	beq.n	80068ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80068b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d007      	beq.n	80068ce <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e2:	2b40      	cmp	r3, #64	; 0x40
 80068e4:	d005      	beq.n	80068f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80068e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d04f      	beq.n	8006992 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fee8 	bl	80076c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006902:	2b40      	cmp	r3, #64	; 0x40
 8006904:	d141      	bne.n	800698a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3308      	adds	r3, #8
 800690c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006910:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006914:	e853 3f00 	ldrex	r3, [r3]
 8006918:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800691c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006924:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3308      	adds	r3, #8
 800692e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006932:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006936:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800693e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006942:	e841 2300 	strex	r3, r2, [r1]
 8006946:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800694a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1d9      	bne.n	8006906 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006956:	2b00      	cmp	r3, #0
 8006958:	d013      	beq.n	8006982 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695e:	4a13      	ldr	r2, [pc, #76]	; (80069ac <HAL_UART_IRQHandler+0x29c>)
 8006960:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006966:	4618      	mov	r0, r3
 8006968:	f7fc fb26 	bl	8002fb8 <HAL_DMA_Abort_IT>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d017      	beq.n	80069a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800697c:	4610      	mov	r0, r2
 800697e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006980:	e00f      	b.n	80069a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f9a4 	bl	8006cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006988:	e00b      	b.n	80069a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f9a0 	bl	8006cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006990:	e007      	b.n	80069a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f99c 	bl	8006cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80069a0:	e18b      	b.n	8006cba <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a2:	bf00      	nop
    return;
 80069a4:	e189      	b.n	8006cba <HAL_UART_IRQHandler+0x5aa>
 80069a6:	bf00      	nop
 80069a8:	04000120 	.word	0x04000120
 80069ac:	0800778f 	.word	0x0800778f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	f040 8144 	bne.w	8006c42 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80069ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069be:	f003 0310 	and.w	r3, r3, #16
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 813d 	beq.w	8006c42 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80069c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069cc:	f003 0310 	and.w	r3, r3, #16
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 8136 	beq.w	8006c42 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2210      	movs	r2, #16
 80069dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e8:	2b40      	cmp	r3, #64	; 0x40
 80069ea:	f040 80b2 	bne.w	8006b52 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 815d 	beq.w	8006cbe <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	f080 8155 	bcs.w	8006cbe <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a28:	f000 8085 	beq.w	8006b36 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	461a      	mov	r2, r3
 8006a52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a5a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a66:	e841 2300 	strex	r3, r2, [r1]
 8006a6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1da      	bne.n	8006a2c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a88:	f023 0301 	bic.w	r3, r3, #1
 8006a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3308      	adds	r3, #8
 8006a96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006aa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006aa6:	e841 2300 	strex	r3, r2, [r1]
 8006aaa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006aac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1e1      	bne.n	8006a76 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006abc:	e853 3f00 	ldrex	r3, [r3]
 8006ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3308      	adds	r3, #8
 8006ad2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ad6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ad8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006adc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e3      	bne.n	8006ab2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2220      	movs	r2, #32
 8006aee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006afe:	e853 3f00 	ldrex	r3, [r3]
 8006b02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b06:	f023 0310 	bic.w	r3, r3, #16
 8006b0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	461a      	mov	r2, r3
 8006b14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b18:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b1a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e4      	bne.n	8006af6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7fc f9d1 	bl	8002ed8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f8ca 	bl	8006ce4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b50:	e0b5      	b.n	8006cbe <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 80a7 	beq.w	8006cc2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006b74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 80a2 	beq.w	8006cc2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	e853 3f00 	ldrex	r3, [r3]
 8006b8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ba0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ba2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ba6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e4      	bne.n	8006b7e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3308      	adds	r3, #8
 8006bba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	e853 3f00 	ldrex	r3, [r3]
 8006bc2:	623b      	str	r3, [r7, #32]
   return(result);
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	f023 0301 	bic.w	r3, r3, #1
 8006bca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3308      	adds	r3, #8
 8006bd4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006bd8:	633a      	str	r2, [r7, #48]	; 0x30
 8006bda:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006be0:	e841 2300 	strex	r3, r2, [r1]
 8006be4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e3      	bne.n	8006bb4 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	e853 3f00 	ldrex	r3, [r3]
 8006c0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f023 0310 	bic.w	r3, r3, #16
 8006c12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c20:	61fb      	str	r3, [r7, #28]
 8006c22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c24:	69b9      	ldr	r1, [r7, #24]
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	e841 2300 	strex	r3, r2, [r1]
 8006c2c:	617b      	str	r3, [r7, #20]
   return(result);
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1e4      	bne.n	8006bfe <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c38:	4619      	mov	r1, r3
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f852 	bl	8006ce4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c40:	e03f      	b.n	8006cc2 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00e      	beq.n	8006c6c <HAL_UART_IRQHandler+0x55c>
 8006c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d008      	beq.n	8006c6c <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006c62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f849 	bl	8006cfc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c6a:	e02d      	b.n	8006cc8 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00e      	beq.n	8006c96 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d008      	beq.n	8006c96 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d01c      	beq.n	8006cc6 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	4798      	blx	r3
    }
    return;
 8006c94:	e017      	b.n	8006cc6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d012      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x5b8>
 8006ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00c      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fe3e 	bl	8007930 <UART_EndTransmit_IT>
    return;
 8006cb4:	e008      	b.n	8006cc8 <HAL_UART_IRQHandler+0x5b8>
      return;
 8006cb6:	bf00      	nop
 8006cb8:	e006      	b.n	8006cc8 <HAL_UART_IRQHandler+0x5b8>
    return;
 8006cba:	bf00      	nop
 8006cbc:	e004      	b.n	8006cc8 <HAL_UART_IRQHandler+0x5b8>
      return;
 8006cbe:	bf00      	nop
 8006cc0:	e002      	b.n	8006cc8 <HAL_UART_IRQHandler+0x5b8>
      return;
 8006cc2:	bf00      	nop
 8006cc4:	e000      	b.n	8006cc8 <HAL_UART_IRQHandler+0x5b8>
    return;
 8006cc6:	bf00      	nop
  }

}
 8006cc8:	37e8      	adds	r7, #232	; 0xe8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop

08006cd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	460b      	mov	r3, r1
 8006cee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	431a      	orrs	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	4ba7      	ldr	r3, [pc, #668]	; (8006fd8 <UART_SetConfig+0x2c8>)
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	6812      	ldr	r2, [r2, #0]
 8006d42:	6979      	ldr	r1, [r7, #20]
 8006d44:	430b      	orrs	r3, r1
 8006d46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68da      	ldr	r2, [r3, #12]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a95      	ldr	r2, [pc, #596]	; (8006fdc <UART_SetConfig+0x2cc>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d120      	bne.n	8006dce <UART_SetConfig+0xbe>
 8006d8c:	4b94      	ldr	r3, [pc, #592]	; (8006fe0 <UART_SetConfig+0x2d0>)
 8006d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d816      	bhi.n	8006dc8 <UART_SetConfig+0xb8>
 8006d9a:	a201      	add	r2, pc, #4	; (adr r2, 8006da0 <UART_SetConfig+0x90>)
 8006d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da0:	08006db1 	.word	0x08006db1
 8006da4:	08006dbd 	.word	0x08006dbd
 8006da8:	08006db7 	.word	0x08006db7
 8006dac:	08006dc3 	.word	0x08006dc3
 8006db0:	2301      	movs	r3, #1
 8006db2:	77fb      	strb	r3, [r7, #31]
 8006db4:	e14f      	b.n	8007056 <UART_SetConfig+0x346>
 8006db6:	2302      	movs	r3, #2
 8006db8:	77fb      	strb	r3, [r7, #31]
 8006dba:	e14c      	b.n	8007056 <UART_SetConfig+0x346>
 8006dbc:	2304      	movs	r3, #4
 8006dbe:	77fb      	strb	r3, [r7, #31]
 8006dc0:	e149      	b.n	8007056 <UART_SetConfig+0x346>
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	77fb      	strb	r3, [r7, #31]
 8006dc6:	e146      	b.n	8007056 <UART_SetConfig+0x346>
 8006dc8:	2310      	movs	r3, #16
 8006dca:	77fb      	strb	r3, [r7, #31]
 8006dcc:	e143      	b.n	8007056 <UART_SetConfig+0x346>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a84      	ldr	r2, [pc, #528]	; (8006fe4 <UART_SetConfig+0x2d4>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d132      	bne.n	8006e3e <UART_SetConfig+0x12e>
 8006dd8:	4b81      	ldr	r3, [pc, #516]	; (8006fe0 <UART_SetConfig+0x2d0>)
 8006dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dde:	f003 030c 	and.w	r3, r3, #12
 8006de2:	2b0c      	cmp	r3, #12
 8006de4:	d828      	bhi.n	8006e38 <UART_SetConfig+0x128>
 8006de6:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <UART_SetConfig+0xdc>)
 8006de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dec:	08006e21 	.word	0x08006e21
 8006df0:	08006e39 	.word	0x08006e39
 8006df4:	08006e39 	.word	0x08006e39
 8006df8:	08006e39 	.word	0x08006e39
 8006dfc:	08006e2d 	.word	0x08006e2d
 8006e00:	08006e39 	.word	0x08006e39
 8006e04:	08006e39 	.word	0x08006e39
 8006e08:	08006e39 	.word	0x08006e39
 8006e0c:	08006e27 	.word	0x08006e27
 8006e10:	08006e39 	.word	0x08006e39
 8006e14:	08006e39 	.word	0x08006e39
 8006e18:	08006e39 	.word	0x08006e39
 8006e1c:	08006e33 	.word	0x08006e33
 8006e20:	2300      	movs	r3, #0
 8006e22:	77fb      	strb	r3, [r7, #31]
 8006e24:	e117      	b.n	8007056 <UART_SetConfig+0x346>
 8006e26:	2302      	movs	r3, #2
 8006e28:	77fb      	strb	r3, [r7, #31]
 8006e2a:	e114      	b.n	8007056 <UART_SetConfig+0x346>
 8006e2c:	2304      	movs	r3, #4
 8006e2e:	77fb      	strb	r3, [r7, #31]
 8006e30:	e111      	b.n	8007056 <UART_SetConfig+0x346>
 8006e32:	2308      	movs	r3, #8
 8006e34:	77fb      	strb	r3, [r7, #31]
 8006e36:	e10e      	b.n	8007056 <UART_SetConfig+0x346>
 8006e38:	2310      	movs	r3, #16
 8006e3a:	77fb      	strb	r3, [r7, #31]
 8006e3c:	e10b      	b.n	8007056 <UART_SetConfig+0x346>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a69      	ldr	r2, [pc, #420]	; (8006fe8 <UART_SetConfig+0x2d8>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d120      	bne.n	8006e8a <UART_SetConfig+0x17a>
 8006e48:	4b65      	ldr	r3, [pc, #404]	; (8006fe0 <UART_SetConfig+0x2d0>)
 8006e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e52:	2b30      	cmp	r3, #48	; 0x30
 8006e54:	d013      	beq.n	8006e7e <UART_SetConfig+0x16e>
 8006e56:	2b30      	cmp	r3, #48	; 0x30
 8006e58:	d814      	bhi.n	8006e84 <UART_SetConfig+0x174>
 8006e5a:	2b20      	cmp	r3, #32
 8006e5c:	d009      	beq.n	8006e72 <UART_SetConfig+0x162>
 8006e5e:	2b20      	cmp	r3, #32
 8006e60:	d810      	bhi.n	8006e84 <UART_SetConfig+0x174>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d002      	beq.n	8006e6c <UART_SetConfig+0x15c>
 8006e66:	2b10      	cmp	r3, #16
 8006e68:	d006      	beq.n	8006e78 <UART_SetConfig+0x168>
 8006e6a:	e00b      	b.n	8006e84 <UART_SetConfig+0x174>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	77fb      	strb	r3, [r7, #31]
 8006e70:	e0f1      	b.n	8007056 <UART_SetConfig+0x346>
 8006e72:	2302      	movs	r3, #2
 8006e74:	77fb      	strb	r3, [r7, #31]
 8006e76:	e0ee      	b.n	8007056 <UART_SetConfig+0x346>
 8006e78:	2304      	movs	r3, #4
 8006e7a:	77fb      	strb	r3, [r7, #31]
 8006e7c:	e0eb      	b.n	8007056 <UART_SetConfig+0x346>
 8006e7e:	2308      	movs	r3, #8
 8006e80:	77fb      	strb	r3, [r7, #31]
 8006e82:	e0e8      	b.n	8007056 <UART_SetConfig+0x346>
 8006e84:	2310      	movs	r3, #16
 8006e86:	77fb      	strb	r3, [r7, #31]
 8006e88:	e0e5      	b.n	8007056 <UART_SetConfig+0x346>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a57      	ldr	r2, [pc, #348]	; (8006fec <UART_SetConfig+0x2dc>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d120      	bne.n	8006ed6 <UART_SetConfig+0x1c6>
 8006e94:	4b52      	ldr	r3, [pc, #328]	; (8006fe0 <UART_SetConfig+0x2d0>)
 8006e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e9e:	2bc0      	cmp	r3, #192	; 0xc0
 8006ea0:	d013      	beq.n	8006eca <UART_SetConfig+0x1ba>
 8006ea2:	2bc0      	cmp	r3, #192	; 0xc0
 8006ea4:	d814      	bhi.n	8006ed0 <UART_SetConfig+0x1c0>
 8006ea6:	2b80      	cmp	r3, #128	; 0x80
 8006ea8:	d009      	beq.n	8006ebe <UART_SetConfig+0x1ae>
 8006eaa:	2b80      	cmp	r3, #128	; 0x80
 8006eac:	d810      	bhi.n	8006ed0 <UART_SetConfig+0x1c0>
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d002      	beq.n	8006eb8 <UART_SetConfig+0x1a8>
 8006eb2:	2b40      	cmp	r3, #64	; 0x40
 8006eb4:	d006      	beq.n	8006ec4 <UART_SetConfig+0x1b4>
 8006eb6:	e00b      	b.n	8006ed0 <UART_SetConfig+0x1c0>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	77fb      	strb	r3, [r7, #31]
 8006ebc:	e0cb      	b.n	8007056 <UART_SetConfig+0x346>
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	77fb      	strb	r3, [r7, #31]
 8006ec2:	e0c8      	b.n	8007056 <UART_SetConfig+0x346>
 8006ec4:	2304      	movs	r3, #4
 8006ec6:	77fb      	strb	r3, [r7, #31]
 8006ec8:	e0c5      	b.n	8007056 <UART_SetConfig+0x346>
 8006eca:	2308      	movs	r3, #8
 8006ecc:	77fb      	strb	r3, [r7, #31]
 8006ece:	e0c2      	b.n	8007056 <UART_SetConfig+0x346>
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	77fb      	strb	r3, [r7, #31]
 8006ed4:	e0bf      	b.n	8007056 <UART_SetConfig+0x346>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a45      	ldr	r2, [pc, #276]	; (8006ff0 <UART_SetConfig+0x2e0>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d125      	bne.n	8006f2c <UART_SetConfig+0x21c>
 8006ee0:	4b3f      	ldr	r3, [pc, #252]	; (8006fe0 <UART_SetConfig+0x2d0>)
 8006ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eee:	d017      	beq.n	8006f20 <UART_SetConfig+0x210>
 8006ef0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ef4:	d817      	bhi.n	8006f26 <UART_SetConfig+0x216>
 8006ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006efa:	d00b      	beq.n	8006f14 <UART_SetConfig+0x204>
 8006efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f00:	d811      	bhi.n	8006f26 <UART_SetConfig+0x216>
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <UART_SetConfig+0x1fe>
 8006f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f0a:	d006      	beq.n	8006f1a <UART_SetConfig+0x20a>
 8006f0c:	e00b      	b.n	8006f26 <UART_SetConfig+0x216>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	77fb      	strb	r3, [r7, #31]
 8006f12:	e0a0      	b.n	8007056 <UART_SetConfig+0x346>
 8006f14:	2302      	movs	r3, #2
 8006f16:	77fb      	strb	r3, [r7, #31]
 8006f18:	e09d      	b.n	8007056 <UART_SetConfig+0x346>
 8006f1a:	2304      	movs	r3, #4
 8006f1c:	77fb      	strb	r3, [r7, #31]
 8006f1e:	e09a      	b.n	8007056 <UART_SetConfig+0x346>
 8006f20:	2308      	movs	r3, #8
 8006f22:	77fb      	strb	r3, [r7, #31]
 8006f24:	e097      	b.n	8007056 <UART_SetConfig+0x346>
 8006f26:	2310      	movs	r3, #16
 8006f28:	77fb      	strb	r3, [r7, #31]
 8006f2a:	e094      	b.n	8007056 <UART_SetConfig+0x346>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a30      	ldr	r2, [pc, #192]	; (8006ff4 <UART_SetConfig+0x2e4>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d125      	bne.n	8006f82 <UART_SetConfig+0x272>
 8006f36:	4b2a      	ldr	r3, [pc, #168]	; (8006fe0 <UART_SetConfig+0x2d0>)
 8006f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f44:	d017      	beq.n	8006f76 <UART_SetConfig+0x266>
 8006f46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f4a:	d817      	bhi.n	8006f7c <UART_SetConfig+0x26c>
 8006f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f50:	d00b      	beq.n	8006f6a <UART_SetConfig+0x25a>
 8006f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f56:	d811      	bhi.n	8006f7c <UART_SetConfig+0x26c>
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d003      	beq.n	8006f64 <UART_SetConfig+0x254>
 8006f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f60:	d006      	beq.n	8006f70 <UART_SetConfig+0x260>
 8006f62:	e00b      	b.n	8006f7c <UART_SetConfig+0x26c>
 8006f64:	2301      	movs	r3, #1
 8006f66:	77fb      	strb	r3, [r7, #31]
 8006f68:	e075      	b.n	8007056 <UART_SetConfig+0x346>
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	77fb      	strb	r3, [r7, #31]
 8006f6e:	e072      	b.n	8007056 <UART_SetConfig+0x346>
 8006f70:	2304      	movs	r3, #4
 8006f72:	77fb      	strb	r3, [r7, #31]
 8006f74:	e06f      	b.n	8007056 <UART_SetConfig+0x346>
 8006f76:	2308      	movs	r3, #8
 8006f78:	77fb      	strb	r3, [r7, #31]
 8006f7a:	e06c      	b.n	8007056 <UART_SetConfig+0x346>
 8006f7c:	2310      	movs	r3, #16
 8006f7e:	77fb      	strb	r3, [r7, #31]
 8006f80:	e069      	b.n	8007056 <UART_SetConfig+0x346>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a1c      	ldr	r2, [pc, #112]	; (8006ff8 <UART_SetConfig+0x2e8>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d137      	bne.n	8006ffc <UART_SetConfig+0x2ec>
 8006f8c:	4b14      	ldr	r3, [pc, #80]	; (8006fe0 <UART_SetConfig+0x2d0>)
 8006f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f92:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f9a:	d017      	beq.n	8006fcc <UART_SetConfig+0x2bc>
 8006f9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fa0:	d817      	bhi.n	8006fd2 <UART_SetConfig+0x2c2>
 8006fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fa6:	d00b      	beq.n	8006fc0 <UART_SetConfig+0x2b0>
 8006fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fac:	d811      	bhi.n	8006fd2 <UART_SetConfig+0x2c2>
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <UART_SetConfig+0x2aa>
 8006fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb6:	d006      	beq.n	8006fc6 <UART_SetConfig+0x2b6>
 8006fb8:	e00b      	b.n	8006fd2 <UART_SetConfig+0x2c2>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	77fb      	strb	r3, [r7, #31]
 8006fbe:	e04a      	b.n	8007056 <UART_SetConfig+0x346>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	77fb      	strb	r3, [r7, #31]
 8006fc4:	e047      	b.n	8007056 <UART_SetConfig+0x346>
 8006fc6:	2304      	movs	r3, #4
 8006fc8:	77fb      	strb	r3, [r7, #31]
 8006fca:	e044      	b.n	8007056 <UART_SetConfig+0x346>
 8006fcc:	2308      	movs	r3, #8
 8006fce:	77fb      	strb	r3, [r7, #31]
 8006fd0:	e041      	b.n	8007056 <UART_SetConfig+0x346>
 8006fd2:	2310      	movs	r3, #16
 8006fd4:	77fb      	strb	r3, [r7, #31]
 8006fd6:	e03e      	b.n	8007056 <UART_SetConfig+0x346>
 8006fd8:	efff69f3 	.word	0xefff69f3
 8006fdc:	40011000 	.word	0x40011000
 8006fe0:	40023800 	.word	0x40023800
 8006fe4:	40004400 	.word	0x40004400
 8006fe8:	40004800 	.word	0x40004800
 8006fec:	40004c00 	.word	0x40004c00
 8006ff0:	40005000 	.word	0x40005000
 8006ff4:	40011400 	.word	0x40011400
 8006ff8:	40007800 	.word	0x40007800
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a71      	ldr	r2, [pc, #452]	; (80071c8 <UART_SetConfig+0x4b8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d125      	bne.n	8007052 <UART_SetConfig+0x342>
 8007006:	4b71      	ldr	r3, [pc, #452]	; (80071cc <UART_SetConfig+0x4bc>)
 8007008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800700c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007010:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007014:	d017      	beq.n	8007046 <UART_SetConfig+0x336>
 8007016:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800701a:	d817      	bhi.n	800704c <UART_SetConfig+0x33c>
 800701c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007020:	d00b      	beq.n	800703a <UART_SetConfig+0x32a>
 8007022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007026:	d811      	bhi.n	800704c <UART_SetConfig+0x33c>
 8007028:	2b00      	cmp	r3, #0
 800702a:	d003      	beq.n	8007034 <UART_SetConfig+0x324>
 800702c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007030:	d006      	beq.n	8007040 <UART_SetConfig+0x330>
 8007032:	e00b      	b.n	800704c <UART_SetConfig+0x33c>
 8007034:	2300      	movs	r3, #0
 8007036:	77fb      	strb	r3, [r7, #31]
 8007038:	e00d      	b.n	8007056 <UART_SetConfig+0x346>
 800703a:	2302      	movs	r3, #2
 800703c:	77fb      	strb	r3, [r7, #31]
 800703e:	e00a      	b.n	8007056 <UART_SetConfig+0x346>
 8007040:	2304      	movs	r3, #4
 8007042:	77fb      	strb	r3, [r7, #31]
 8007044:	e007      	b.n	8007056 <UART_SetConfig+0x346>
 8007046:	2308      	movs	r3, #8
 8007048:	77fb      	strb	r3, [r7, #31]
 800704a:	e004      	b.n	8007056 <UART_SetConfig+0x346>
 800704c:	2310      	movs	r3, #16
 800704e:	77fb      	strb	r3, [r7, #31]
 8007050:	e001      	b.n	8007056 <UART_SetConfig+0x346>
 8007052:	2310      	movs	r3, #16
 8007054:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	69db      	ldr	r3, [r3, #28]
 800705a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800705e:	d15a      	bne.n	8007116 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007060:	7ffb      	ldrb	r3, [r7, #31]
 8007062:	2b08      	cmp	r3, #8
 8007064:	d827      	bhi.n	80070b6 <UART_SetConfig+0x3a6>
 8007066:	a201      	add	r2, pc, #4	; (adr r2, 800706c <UART_SetConfig+0x35c>)
 8007068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706c:	08007091 	.word	0x08007091
 8007070:	08007099 	.word	0x08007099
 8007074:	080070a1 	.word	0x080070a1
 8007078:	080070b7 	.word	0x080070b7
 800707c:	080070a7 	.word	0x080070a7
 8007080:	080070b7 	.word	0x080070b7
 8007084:	080070b7 	.word	0x080070b7
 8007088:	080070b7 	.word	0x080070b7
 800708c:	080070af 	.word	0x080070af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007090:	f7fd f9d4 	bl	800443c <HAL_RCC_GetPCLK1Freq>
 8007094:	61b8      	str	r0, [r7, #24]
        break;
 8007096:	e013      	b.n	80070c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007098:	f7fd f9e4 	bl	8004464 <HAL_RCC_GetPCLK2Freq>
 800709c:	61b8      	str	r0, [r7, #24]
        break;
 800709e:	e00f      	b.n	80070c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070a0:	4b4b      	ldr	r3, [pc, #300]	; (80071d0 <UART_SetConfig+0x4c0>)
 80070a2:	61bb      	str	r3, [r7, #24]
        break;
 80070a4:	e00c      	b.n	80070c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070a6:	f7fd f907 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 80070aa:	61b8      	str	r0, [r7, #24]
        break;
 80070ac:	e008      	b.n	80070c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070b2:	61bb      	str	r3, [r7, #24]
        break;
 80070b4:	e004      	b.n	80070c0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	77bb      	strb	r3, [r7, #30]
        break;
 80070be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d074      	beq.n	80071b0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	005a      	lsls	r2, r3, #1
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	085b      	lsrs	r3, r3, #1
 80070d0:	441a      	add	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	2b0f      	cmp	r3, #15
 80070e0:	d916      	bls.n	8007110 <UART_SetConfig+0x400>
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070e8:	d212      	bcs.n	8007110 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	f023 030f 	bic.w	r3, r3, #15
 80070f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	085b      	lsrs	r3, r3, #1
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	b29a      	uxth	r2, r3
 8007100:	89fb      	ldrh	r3, [r7, #14]
 8007102:	4313      	orrs	r3, r2
 8007104:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	89fa      	ldrh	r2, [r7, #14]
 800710c:	60da      	str	r2, [r3, #12]
 800710e:	e04f      	b.n	80071b0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	77bb      	strb	r3, [r7, #30]
 8007114:	e04c      	b.n	80071b0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007116:	7ffb      	ldrb	r3, [r7, #31]
 8007118:	2b08      	cmp	r3, #8
 800711a:	d828      	bhi.n	800716e <UART_SetConfig+0x45e>
 800711c:	a201      	add	r2, pc, #4	; (adr r2, 8007124 <UART_SetConfig+0x414>)
 800711e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007122:	bf00      	nop
 8007124:	08007149 	.word	0x08007149
 8007128:	08007151 	.word	0x08007151
 800712c:	08007159 	.word	0x08007159
 8007130:	0800716f 	.word	0x0800716f
 8007134:	0800715f 	.word	0x0800715f
 8007138:	0800716f 	.word	0x0800716f
 800713c:	0800716f 	.word	0x0800716f
 8007140:	0800716f 	.word	0x0800716f
 8007144:	08007167 	.word	0x08007167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007148:	f7fd f978 	bl	800443c <HAL_RCC_GetPCLK1Freq>
 800714c:	61b8      	str	r0, [r7, #24]
        break;
 800714e:	e013      	b.n	8007178 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007150:	f7fd f988 	bl	8004464 <HAL_RCC_GetPCLK2Freq>
 8007154:	61b8      	str	r0, [r7, #24]
        break;
 8007156:	e00f      	b.n	8007178 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007158:	4b1d      	ldr	r3, [pc, #116]	; (80071d0 <UART_SetConfig+0x4c0>)
 800715a:	61bb      	str	r3, [r7, #24]
        break;
 800715c:	e00c      	b.n	8007178 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800715e:	f7fd f8ab 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 8007162:	61b8      	str	r0, [r7, #24]
        break;
 8007164:	e008      	b.n	8007178 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800716a:	61bb      	str	r3, [r7, #24]
        break;
 800716c:	e004      	b.n	8007178 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	77bb      	strb	r3, [r7, #30]
        break;
 8007176:	bf00      	nop
    }

    if (pclk != 0U)
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d018      	beq.n	80071b0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	085a      	lsrs	r2, r3, #1
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	441a      	add	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007190:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	2b0f      	cmp	r3, #15
 8007196:	d909      	bls.n	80071ac <UART_SetConfig+0x49c>
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800719e:	d205      	bcs.n	80071ac <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	60da      	str	r2, [r3, #12]
 80071aa:	e001      	b.n	80071b0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80071bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3720      	adds	r7, #32
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	40007c00 	.word	0x40007c00
 80071cc:	40023800 	.word	0x40023800
 80071d0:	00f42400 	.word	0x00f42400

080071d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00a      	beq.n	80071fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00a      	beq.n	8007220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007224:	f003 0304 	and.w	r3, r3, #4
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007246:	f003 0308 	and.w	r3, r3, #8
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	f003 0310 	and.w	r3, r3, #16
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d01a      	beq.n	80072ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072d2:	d10a      	bne.n	80072ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	605a      	str	r2, [r3, #4]
  }
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af02      	add	r7, sp, #8
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007328:	f7fb fc0a 	bl	8002b40 <HAL_GetTick>
 800732c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0308 	and.w	r3, r3, #8
 8007338:	2b08      	cmp	r3, #8
 800733a:	d10e      	bne.n	800735a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800733c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f82d 	bl	80073aa <UART_WaitOnFlagUntilTimeout>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d001      	beq.n	800735a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e023      	b.n	80073a2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0304 	and.w	r3, r3, #4
 8007364:	2b04      	cmp	r3, #4
 8007366:	d10e      	bne.n	8007386 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f817 	bl	80073aa <UART_WaitOnFlagUntilTimeout>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e00d      	b.n	80073a2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2220      	movs	r2, #32
 800738a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2220      	movs	r2, #32
 8007390:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b09c      	sub	sp, #112	; 0x70
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	60f8      	str	r0, [r7, #12]
 80073b2:	60b9      	str	r1, [r7, #8]
 80073b4:	603b      	str	r3, [r7, #0]
 80073b6:	4613      	mov	r3, r2
 80073b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ba:	e0a5      	b.n	8007508 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c2:	f000 80a1 	beq.w	8007508 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073c6:	f7fb fbbb 	bl	8002b40 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d302      	bcc.n	80073dc <UART_WaitOnFlagUntilTimeout+0x32>
 80073d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d13e      	bne.n	800745a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80073ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073f0:	667b      	str	r3, [r7, #100]	; 0x64
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073fc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007400:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e6      	bne.n	80073dc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3308      	adds	r3, #8
 8007414:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800741e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007420:	f023 0301 	bic.w	r3, r3, #1
 8007424:	663b      	str	r3, [r7, #96]	; 0x60
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3308      	adds	r3, #8
 800742c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800742e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007430:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007432:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007436:	e841 2300 	strex	r3, r2, [r1]
 800743a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800743c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1e5      	bne.n	800740e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2220      	movs	r2, #32
 8007446:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2220      	movs	r2, #32
 800744c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e067      	b.n	800752a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	2b00      	cmp	r3, #0
 8007466:	d04f      	beq.n	8007508 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007476:	d147      	bne.n	8007508 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007480:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007496:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	461a      	mov	r2, r3
 800749e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074a0:	637b      	str	r3, [r7, #52]	; 0x34
 80074a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074a8:	e841 2300 	strex	r3, r2, [r1]
 80074ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1e6      	bne.n	8007482 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3308      	adds	r3, #8
 80074ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	e853 3f00 	ldrex	r3, [r3]
 80074c2:	613b      	str	r3, [r7, #16]
   return(result);
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	f023 0301 	bic.w	r3, r3, #1
 80074ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3308      	adds	r3, #8
 80074d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80074d4:	623a      	str	r2, [r7, #32]
 80074d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d8:	69f9      	ldr	r1, [r7, #28]
 80074da:	6a3a      	ldr	r2, [r7, #32]
 80074dc:	e841 2300 	strex	r3, r2, [r1]
 80074e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1e5      	bne.n	80074b4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2220      	movs	r2, #32
 80074ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2220      	movs	r2, #32
 80074f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2220      	movs	r2, #32
 80074f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e010      	b.n	800752a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	69da      	ldr	r2, [r3, #28]
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	4013      	ands	r3, r2
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	429a      	cmp	r2, r3
 8007516:	bf0c      	ite	eq
 8007518:	2301      	moveq	r3, #1
 800751a:	2300      	movne	r3, #0
 800751c:	b2db      	uxtb	r3, r3
 800751e:	461a      	mov	r2, r3
 8007520:	79fb      	ldrb	r3, [r7, #7]
 8007522:	429a      	cmp	r2, r3
 8007524:	f43f af4a 	beq.w	80073bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3770      	adds	r7, #112	; 0x70
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007534:	b480      	push	{r7}
 8007536:	b097      	sub	sp, #92	; 0x5c
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	4613      	mov	r3, r2
 8007540:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	88fa      	ldrh	r2, [r7, #6]
 800754c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	88fa      	ldrh	r2, [r7, #6]
 8007554:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007566:	d10e      	bne.n	8007586 <UART_Start_Receive_IT+0x52>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d105      	bne.n	800757c <UART_Start_Receive_IT+0x48>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007576:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800757a:	e02d      	b.n	80075d8 <UART_Start_Receive_IT+0xa4>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	22ff      	movs	r2, #255	; 0xff
 8007580:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007584:	e028      	b.n	80075d8 <UART_Start_Receive_IT+0xa4>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10d      	bne.n	80075aa <UART_Start_Receive_IT+0x76>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d104      	bne.n	80075a0 <UART_Start_Receive_IT+0x6c>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	22ff      	movs	r2, #255	; 0xff
 800759a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800759e:	e01b      	b.n	80075d8 <UART_Start_Receive_IT+0xa4>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	227f      	movs	r2, #127	; 0x7f
 80075a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075a8:	e016      	b.n	80075d8 <UART_Start_Receive_IT+0xa4>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075b2:	d10d      	bne.n	80075d0 <UART_Start_Receive_IT+0x9c>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d104      	bne.n	80075c6 <UART_Start_Receive_IT+0x92>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	227f      	movs	r2, #127	; 0x7f
 80075c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075c4:	e008      	b.n	80075d8 <UART_Start_Receive_IT+0xa4>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	223f      	movs	r2, #63	; 0x3f
 80075ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075ce:	e003      	b.n	80075d8 <UART_Start_Receive_IT+0xa4>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2222      	movs	r2, #34	; 0x22
 80075e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3308      	adds	r3, #8
 80075ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f8:	f043 0301 	orr.w	r3, r3, #1
 80075fc:	657b      	str	r3, [r7, #84]	; 0x54
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3308      	adds	r3, #8
 8007604:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007606:	64ba      	str	r2, [r7, #72]	; 0x48
 8007608:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800760c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e5      	bne.n	80075e6 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007622:	d107      	bne.n	8007634 <UART_Start_Receive_IT+0x100>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d103      	bne.n	8007634 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4a24      	ldr	r2, [pc, #144]	; (80076c0 <UART_Start_Receive_IT+0x18c>)
 8007630:	665a      	str	r2, [r3, #100]	; 0x64
 8007632:	e002      	b.n	800763a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4a23      	ldr	r2, [pc, #140]	; (80076c4 <UART_Start_Receive_IT+0x190>)
 8007638:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d019      	beq.n	800767e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007652:	e853 3f00 	ldrex	r3, [r3]
 8007656:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800765e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	461a      	mov	r2, r3
 8007666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007668:	637b      	str	r3, [r7, #52]	; 0x34
 800766a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800766e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007670:	e841 2300 	strex	r3, r2, [r1]
 8007674:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1e6      	bne.n	800764a <UART_Start_Receive_IT+0x116>
 800767c:	e018      	b.n	80076b0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	e853 3f00 	ldrex	r3, [r3]
 800768a:	613b      	str	r3, [r7, #16]
   return(result);
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	f043 0320 	orr.w	r3, r3, #32
 8007692:	653b      	str	r3, [r7, #80]	; 0x50
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	461a      	mov	r2, r3
 800769a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800769c:	623b      	str	r3, [r7, #32]
 800769e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	69f9      	ldr	r1, [r7, #28]
 80076a2:	6a3a      	ldr	r2, [r7, #32]
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e6      	bne.n	800767e <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	375c      	adds	r7, #92	; 0x5c
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	08007ae1 	.word	0x08007ae1
 80076c4:	08007985 	.word	0x08007985

080076c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b095      	sub	sp, #84	; 0x54
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	461a      	mov	r2, r3
 80076ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ee:	643b      	str	r3, [r7, #64]	; 0x40
 80076f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076f6:	e841 2300 	strex	r3, r2, [r1]
 80076fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1e6      	bne.n	80076d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	3308      	adds	r3, #8
 8007708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	e853 3f00 	ldrex	r3, [r3]
 8007710:	61fb      	str	r3, [r7, #28]
   return(result);
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	f023 0301 	bic.w	r3, r3, #1
 8007718:	64bb      	str	r3, [r7, #72]	; 0x48
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3308      	adds	r3, #8
 8007720:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007722:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007724:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007726:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800772a:	e841 2300 	strex	r3, r2, [r1]
 800772e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1e5      	bne.n	8007702 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800773a:	2b01      	cmp	r3, #1
 800773c:	d118      	bne.n	8007770 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	e853 3f00 	ldrex	r3, [r3]
 800774a:	60bb      	str	r3, [r7, #8]
   return(result);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	f023 0310 	bic.w	r3, r3, #16
 8007752:	647b      	str	r3, [r7, #68]	; 0x44
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	461a      	mov	r2, r3
 800775a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800775c:	61bb      	str	r3, [r7, #24]
 800775e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007760:	6979      	ldr	r1, [r7, #20]
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	e841 2300 	strex	r3, r2, [r1]
 8007768:	613b      	str	r3, [r7, #16]
   return(result);
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1e6      	bne.n	800773e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2220      	movs	r2, #32
 8007774:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007782:	bf00      	nop
 8007784:	3754      	adds	r7, #84	; 0x54
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b084      	sub	sp, #16
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f7ff fa8f 	bl	8006cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077b2:	bf00      	nop
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b08f      	sub	sp, #60	; 0x3c
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077c6:	2b21      	cmp	r3, #33	; 0x21
 80077c8:	d14c      	bne.n	8007864 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d132      	bne.n	800783c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	e853 3f00 	ldrex	r3, [r3]
 80077e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077ea:	637b      	str	r3, [r7, #52]	; 0x34
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	461a      	mov	r2, r3
 80077f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077f6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077fc:	e841 2300 	strex	r3, r2, [r1]
 8007800:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1e6      	bne.n	80077d6 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	e853 3f00 	ldrex	r3, [r3]
 8007814:	60bb      	str	r3, [r7, #8]
   return(result);
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800781c:	633b      	str	r3, [r7, #48]	; 0x30
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	461a      	mov	r2, r3
 8007824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007826:	61bb      	str	r3, [r7, #24]
 8007828:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782a:	6979      	ldr	r1, [r7, #20]
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	e841 2300 	strex	r3, r2, [r1]
 8007832:	613b      	str	r3, [r7, #16]
   return(result);
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1e6      	bne.n	8007808 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800783a:	e013      	b.n	8007864 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007840:	781a      	ldrb	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800784c:	1c5a      	adds	r2, r3, #1
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007858:	b29b      	uxth	r3, r3
 800785a:	3b01      	subs	r3, #1
 800785c:	b29a      	uxth	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007864:	bf00      	nop
 8007866:	373c      	adds	r7, #60	; 0x3c
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007870:	b480      	push	{r7}
 8007872:	b091      	sub	sp, #68	; 0x44
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800787c:	2b21      	cmp	r3, #33	; 0x21
 800787e:	d151      	bne.n	8007924 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007886:	b29b      	uxth	r3, r3
 8007888:	2b00      	cmp	r3, #0
 800788a:	d132      	bne.n	80078f2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007894:	e853 3f00 	ldrex	r3, [r3]
 8007898:	623b      	str	r3, [r7, #32]
   return(result);
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	461a      	mov	r2, r3
 80078a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078aa:	633b      	str	r3, [r7, #48]	; 0x30
 80078ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078b2:	e841 2300 	strex	r3, r2, [r1]
 80078b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1e6      	bne.n	800788c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	e853 3f00 	ldrex	r3, [r3]
 80078ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078d2:	637b      	str	r3, [r7, #52]	; 0x34
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	461a      	mov	r2, r3
 80078da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078dc:	61fb      	str	r3, [r7, #28]
 80078de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e0:	69b9      	ldr	r1, [r7, #24]
 80078e2:	69fa      	ldr	r2, [r7, #28]
 80078e4:	e841 2300 	strex	r3, r2, [r1]
 80078e8:	617b      	str	r3, [r7, #20]
   return(result);
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1e6      	bne.n	80078be <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80078f0:	e018      	b.n	8007924 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80078f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	461a      	mov	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007906:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800790c:	1c9a      	adds	r2, r3, #2
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007918:	b29b      	uxth	r3, r3
 800791a:	3b01      	subs	r3, #1
 800791c:	b29a      	uxth	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007924:	bf00      	nop
 8007926:	3744      	adds	r7, #68	; 0x44
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	60bb      	str	r3, [r7, #8]
   return(result);
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800794c:	61fb      	str	r3, [r7, #28]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	61bb      	str	r3, [r7, #24]
 8007958:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6979      	ldr	r1, [r7, #20]
 800795c:	69ba      	ldr	r2, [r7, #24]
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	613b      	str	r3, [r7, #16]
   return(result);
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e6      	bne.n	8007938 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2220      	movs	r2, #32
 800796e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7fb f82e 	bl	80029d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800797c:	bf00      	nop
 800797e:	3720      	adds	r7, #32
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b096      	sub	sp, #88	; 0x58
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007992:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800799a:	2b22      	cmp	r3, #34	; 0x22
 800799c:	f040 8094 	bne.w	8007ac8 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80079aa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80079ae:	b2d9      	uxtb	r1, r3
 80079b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ba:	400a      	ands	r2, r1
 80079bc:	b2d2      	uxtb	r2, r2
 80079be:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	3b01      	subs	r3, #1
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d177      	bne.n	8007ad8 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f0:	e853 3f00 	ldrex	r3, [r3]
 80079f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079fc:	653b      	str	r3, [r7, #80]	; 0x50
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	461a      	mov	r2, r3
 8007a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a06:	647b      	str	r3, [r7, #68]	; 0x44
 8007a08:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1e6      	bne.n	80079e8 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3308      	adds	r3, #8
 8007a20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a24:	e853 3f00 	ldrex	r3, [r3]
 8007a28:	623b      	str	r3, [r7, #32]
   return(result);
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	f023 0301 	bic.w	r3, r3, #1
 8007a30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3308      	adds	r3, #8
 8007a38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a3a:	633a      	str	r2, [r7, #48]	; 0x30
 8007a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e5      	bne.n	8007a1a <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2220      	movs	r2, #32
 8007a52:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d12e      	bne.n	8007ac0 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	e853 3f00 	ldrex	r3, [r3]
 8007a74:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f023 0310 	bic.w	r3, r3, #16
 8007a7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	461a      	mov	r2, r3
 8007a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a86:	61fb      	str	r3, [r7, #28]
 8007a88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8a:	69b9      	ldr	r1, [r7, #24]
 8007a8c:	69fa      	ldr	r2, [r7, #28]
 8007a8e:	e841 2300 	strex	r3, r2, [r1]
 8007a92:	617b      	str	r3, [r7, #20]
   return(result);
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1e6      	bne.n	8007a68 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	f003 0310 	and.w	r3, r3, #16
 8007aa4:	2b10      	cmp	r3, #16
 8007aa6:	d103      	bne.n	8007ab0 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2210      	movs	r2, #16
 8007aae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7ff f913 	bl	8006ce4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007abe:	e00b      	b.n	8007ad8 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7fa ff1f 	bl	8002904 <HAL_UART_RxCpltCallback>
}
 8007ac6:	e007      	b.n	8007ad8 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	699a      	ldr	r2, [r3, #24]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f042 0208 	orr.w	r2, r2, #8
 8007ad6:	619a      	str	r2, [r3, #24]
}
 8007ad8:	bf00      	nop
 8007ada:	3758      	adds	r7, #88	; 0x58
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b096      	sub	sp, #88	; 0x58
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007aee:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007af6:	2b22      	cmp	r3, #34	; 0x22
 8007af8:	f040 8094 	bne.w	8007c24 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007b0c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007b10:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007b14:	4013      	ands	r3, r2
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b1a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b20:	1c9a      	adds	r2, r3, #2
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d177      	bne.n	8007c34 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4c:	e853 3f00 	ldrex	r3, [r3]
 8007b50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b62:	643b      	str	r3, [r7, #64]	; 0x40
 8007b64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1e6      	bne.n	8007b44 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3308      	adds	r3, #8
 8007b7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	e853 3f00 	ldrex	r3, [r3]
 8007b84:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	f023 0301 	bic.w	r3, r3, #1
 8007b8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3308      	adds	r3, #8
 8007b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b9e:	e841 2300 	strex	r3, r2, [r1]
 8007ba2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1e5      	bne.n	8007b76 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2220      	movs	r2, #32
 8007bae:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d12e      	bne.n	8007c1c <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	f023 0310 	bic.w	r3, r3, #16
 8007bd8:	647b      	str	r3, [r7, #68]	; 0x44
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007be2:	61bb      	str	r3, [r7, #24]
 8007be4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	6979      	ldr	r1, [r7, #20]
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	e841 2300 	strex	r3, r2, [r1]
 8007bee:	613b      	str	r3, [r7, #16]
   return(result);
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1e6      	bne.n	8007bc4 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	69db      	ldr	r3, [r3, #28]
 8007bfc:	f003 0310 	and.w	r3, r3, #16
 8007c00:	2b10      	cmp	r3, #16
 8007c02:	d103      	bne.n	8007c0c <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2210      	movs	r2, #16
 8007c0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c12:	4619      	mov	r1, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f7ff f865 	bl	8006ce4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c1a:	e00b      	b.n	8007c34 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7fa fe71 	bl	8002904 <HAL_UART_RxCpltCallback>
}
 8007c22:	e007      	b.n	8007c34 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	699a      	ldr	r2, [r3, #24]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f042 0208 	orr.w	r2, r2, #8
 8007c32:	619a      	str	r2, [r3, #24]
}
 8007c34:	bf00      	nop
 8007c36:	3758      	adds	r7, #88	; 0x58
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <__errno>:
 8007c3c:	4b01      	ldr	r3, [pc, #4]	; (8007c44 <__errno+0x8>)
 8007c3e:	6818      	ldr	r0, [r3, #0]
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	20000034 	.word	0x20000034

08007c48 <__libc_init_array>:
 8007c48:	b570      	push	{r4, r5, r6, lr}
 8007c4a:	4d0d      	ldr	r5, [pc, #52]	; (8007c80 <__libc_init_array+0x38>)
 8007c4c:	4c0d      	ldr	r4, [pc, #52]	; (8007c84 <__libc_init_array+0x3c>)
 8007c4e:	1b64      	subs	r4, r4, r5
 8007c50:	10a4      	asrs	r4, r4, #2
 8007c52:	2600      	movs	r6, #0
 8007c54:	42a6      	cmp	r6, r4
 8007c56:	d109      	bne.n	8007c6c <__libc_init_array+0x24>
 8007c58:	4d0b      	ldr	r5, [pc, #44]	; (8007c88 <__libc_init_array+0x40>)
 8007c5a:	4c0c      	ldr	r4, [pc, #48]	; (8007c8c <__libc_init_array+0x44>)
 8007c5c:	f004 ffc2 	bl	800cbe4 <_init>
 8007c60:	1b64      	subs	r4, r4, r5
 8007c62:	10a4      	asrs	r4, r4, #2
 8007c64:	2600      	movs	r6, #0
 8007c66:	42a6      	cmp	r6, r4
 8007c68:	d105      	bne.n	8007c76 <__libc_init_array+0x2e>
 8007c6a:	bd70      	pop	{r4, r5, r6, pc}
 8007c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c70:	4798      	blx	r3
 8007c72:	3601      	adds	r6, #1
 8007c74:	e7ee      	b.n	8007c54 <__libc_init_array+0xc>
 8007c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c7a:	4798      	blx	r3
 8007c7c:	3601      	adds	r6, #1
 8007c7e:	e7f2      	b.n	8007c66 <__libc_init_array+0x1e>
 8007c80:	0800d294 	.word	0x0800d294
 8007c84:	0800d294 	.word	0x0800d294
 8007c88:	0800d294 	.word	0x0800d294
 8007c8c:	0800d298 	.word	0x0800d298

08007c90 <memset>:
 8007c90:	4402      	add	r2, r0
 8007c92:	4603      	mov	r3, r0
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d100      	bne.n	8007c9a <memset+0xa>
 8007c98:	4770      	bx	lr
 8007c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c9e:	e7f9      	b.n	8007c94 <memset+0x4>

08007ca0 <__cvt>:
 8007ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ca2:	ed2d 8b02 	vpush	{d8}
 8007ca6:	eeb0 8b40 	vmov.f64	d8, d0
 8007caa:	b085      	sub	sp, #20
 8007cac:	4617      	mov	r7, r2
 8007cae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007cb0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007cb2:	ee18 2a90 	vmov	r2, s17
 8007cb6:	f025 0520 	bic.w	r5, r5, #32
 8007cba:	2a00      	cmp	r2, #0
 8007cbc:	bfb6      	itet	lt
 8007cbe:	222d      	movlt	r2, #45	; 0x2d
 8007cc0:	2200      	movge	r2, #0
 8007cc2:	eeb1 8b40 	vneglt.f64	d8, d0
 8007cc6:	2d46      	cmp	r5, #70	; 0x46
 8007cc8:	460c      	mov	r4, r1
 8007cca:	701a      	strb	r2, [r3, #0]
 8007ccc:	d004      	beq.n	8007cd8 <__cvt+0x38>
 8007cce:	2d45      	cmp	r5, #69	; 0x45
 8007cd0:	d100      	bne.n	8007cd4 <__cvt+0x34>
 8007cd2:	3401      	adds	r4, #1
 8007cd4:	2102      	movs	r1, #2
 8007cd6:	e000      	b.n	8007cda <__cvt+0x3a>
 8007cd8:	2103      	movs	r1, #3
 8007cda:	ab03      	add	r3, sp, #12
 8007cdc:	9301      	str	r3, [sp, #4]
 8007cde:	ab02      	add	r3, sp, #8
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	4622      	mov	r2, r4
 8007ce4:	4633      	mov	r3, r6
 8007ce6:	eeb0 0b48 	vmov.f64	d0, d8
 8007cea:	f001 fe05 	bl	80098f8 <_dtoa_r>
 8007cee:	2d47      	cmp	r5, #71	; 0x47
 8007cf0:	d109      	bne.n	8007d06 <__cvt+0x66>
 8007cf2:	07fb      	lsls	r3, r7, #31
 8007cf4:	d407      	bmi.n	8007d06 <__cvt+0x66>
 8007cf6:	9b03      	ldr	r3, [sp, #12]
 8007cf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cfa:	1a1b      	subs	r3, r3, r0
 8007cfc:	6013      	str	r3, [r2, #0]
 8007cfe:	b005      	add	sp, #20
 8007d00:	ecbd 8b02 	vpop	{d8}
 8007d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d06:	2d46      	cmp	r5, #70	; 0x46
 8007d08:	eb00 0204 	add.w	r2, r0, r4
 8007d0c:	d10c      	bne.n	8007d28 <__cvt+0x88>
 8007d0e:	7803      	ldrb	r3, [r0, #0]
 8007d10:	2b30      	cmp	r3, #48	; 0x30
 8007d12:	d107      	bne.n	8007d24 <__cvt+0x84>
 8007d14:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d1c:	bf1c      	itt	ne
 8007d1e:	f1c4 0401 	rsbne	r4, r4, #1
 8007d22:	6034      	strne	r4, [r6, #0]
 8007d24:	6833      	ldr	r3, [r6, #0]
 8007d26:	441a      	add	r2, r3
 8007d28:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d30:	bf08      	it	eq
 8007d32:	9203      	streq	r2, [sp, #12]
 8007d34:	2130      	movs	r1, #48	; 0x30
 8007d36:	9b03      	ldr	r3, [sp, #12]
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d2dc      	bcs.n	8007cf6 <__cvt+0x56>
 8007d3c:	1c5c      	adds	r4, r3, #1
 8007d3e:	9403      	str	r4, [sp, #12]
 8007d40:	7019      	strb	r1, [r3, #0]
 8007d42:	e7f8      	b.n	8007d36 <__cvt+0x96>

08007d44 <__exponent>:
 8007d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d46:	4603      	mov	r3, r0
 8007d48:	2900      	cmp	r1, #0
 8007d4a:	bfb8      	it	lt
 8007d4c:	4249      	neglt	r1, r1
 8007d4e:	f803 2b02 	strb.w	r2, [r3], #2
 8007d52:	bfb4      	ite	lt
 8007d54:	222d      	movlt	r2, #45	; 0x2d
 8007d56:	222b      	movge	r2, #43	; 0x2b
 8007d58:	2909      	cmp	r1, #9
 8007d5a:	7042      	strb	r2, [r0, #1]
 8007d5c:	dd2a      	ble.n	8007db4 <__exponent+0x70>
 8007d5e:	f10d 0407 	add.w	r4, sp, #7
 8007d62:	46a4      	mov	ip, r4
 8007d64:	270a      	movs	r7, #10
 8007d66:	46a6      	mov	lr, r4
 8007d68:	460a      	mov	r2, r1
 8007d6a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007d6e:	fb07 1516 	mls	r5, r7, r6, r1
 8007d72:	3530      	adds	r5, #48	; 0x30
 8007d74:	2a63      	cmp	r2, #99	; 0x63
 8007d76:	f104 34ff 	add.w	r4, r4, #4294967295
 8007d7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007d7e:	4631      	mov	r1, r6
 8007d80:	dcf1      	bgt.n	8007d66 <__exponent+0x22>
 8007d82:	3130      	adds	r1, #48	; 0x30
 8007d84:	f1ae 0502 	sub.w	r5, lr, #2
 8007d88:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007d8c:	1c44      	adds	r4, r0, #1
 8007d8e:	4629      	mov	r1, r5
 8007d90:	4561      	cmp	r1, ip
 8007d92:	d30a      	bcc.n	8007daa <__exponent+0x66>
 8007d94:	f10d 0209 	add.w	r2, sp, #9
 8007d98:	eba2 020e 	sub.w	r2, r2, lr
 8007d9c:	4565      	cmp	r5, ip
 8007d9e:	bf88      	it	hi
 8007da0:	2200      	movhi	r2, #0
 8007da2:	4413      	add	r3, r2
 8007da4:	1a18      	subs	r0, r3, r0
 8007da6:	b003      	add	sp, #12
 8007da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007daa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dae:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007db2:	e7ed      	b.n	8007d90 <__exponent+0x4c>
 8007db4:	2330      	movs	r3, #48	; 0x30
 8007db6:	3130      	adds	r1, #48	; 0x30
 8007db8:	7083      	strb	r3, [r0, #2]
 8007dba:	70c1      	strb	r1, [r0, #3]
 8007dbc:	1d03      	adds	r3, r0, #4
 8007dbe:	e7f1      	b.n	8007da4 <__exponent+0x60>

08007dc0 <_printf_float>:
 8007dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc4:	b08b      	sub	sp, #44	; 0x2c
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007dcc:	4616      	mov	r6, r2
 8007dce:	461f      	mov	r7, r3
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	f002 fe83 	bl	800aadc <_localeconv_r>
 8007dd6:	f8d0 b000 	ldr.w	fp, [r0]
 8007dda:	4658      	mov	r0, fp
 8007ddc:	f7f8 fa3a 	bl	8000254 <strlen>
 8007de0:	2300      	movs	r3, #0
 8007de2:	9308      	str	r3, [sp, #32]
 8007de4:	f8d8 3000 	ldr.w	r3, [r8]
 8007de8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007dec:	6822      	ldr	r2, [r4, #0]
 8007dee:	3307      	adds	r3, #7
 8007df0:	f023 0307 	bic.w	r3, r3, #7
 8007df4:	f103 0108 	add.w	r1, r3, #8
 8007df8:	f8c8 1000 	str.w	r1, [r8]
 8007dfc:	4682      	mov	sl, r0
 8007dfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e02:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007e06:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008068 <_printf_float+0x2a8>
 8007e0a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007e0e:	eeb0 6bc0 	vabs.f64	d6, d0
 8007e12:	eeb4 6b47 	vcmp.f64	d6, d7
 8007e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e1a:	dd24      	ble.n	8007e66 <_printf_float+0xa6>
 8007e1c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e24:	d502      	bpl.n	8007e2c <_printf_float+0x6c>
 8007e26:	232d      	movs	r3, #45	; 0x2d
 8007e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e2c:	4b90      	ldr	r3, [pc, #576]	; (8008070 <_printf_float+0x2b0>)
 8007e2e:	4891      	ldr	r0, [pc, #580]	; (8008074 <_printf_float+0x2b4>)
 8007e30:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007e34:	bf94      	ite	ls
 8007e36:	4698      	movls	r8, r3
 8007e38:	4680      	movhi	r8, r0
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	6123      	str	r3, [r4, #16]
 8007e3e:	f022 0204 	bic.w	r2, r2, #4
 8007e42:	2300      	movs	r3, #0
 8007e44:	6022      	str	r2, [r4, #0]
 8007e46:	9304      	str	r3, [sp, #16]
 8007e48:	9700      	str	r7, [sp, #0]
 8007e4a:	4633      	mov	r3, r6
 8007e4c:	aa09      	add	r2, sp, #36	; 0x24
 8007e4e:	4621      	mov	r1, r4
 8007e50:	4628      	mov	r0, r5
 8007e52:	f000 f9d3 	bl	80081fc <_printf_common>
 8007e56:	3001      	adds	r0, #1
 8007e58:	f040 808a 	bne.w	8007f70 <_printf_float+0x1b0>
 8007e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e60:	b00b      	add	sp, #44	; 0x2c
 8007e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e66:	eeb4 0b40 	vcmp.f64	d0, d0
 8007e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e6e:	d709      	bvc.n	8007e84 <_printf_float+0xc4>
 8007e70:	ee10 3a90 	vmov	r3, s1
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	bfbc      	itt	lt
 8007e78:	232d      	movlt	r3, #45	; 0x2d
 8007e7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e7e:	487e      	ldr	r0, [pc, #504]	; (8008078 <_printf_float+0x2b8>)
 8007e80:	4b7e      	ldr	r3, [pc, #504]	; (800807c <_printf_float+0x2bc>)
 8007e82:	e7d5      	b.n	8007e30 <_printf_float+0x70>
 8007e84:	6863      	ldr	r3, [r4, #4]
 8007e86:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007e8a:	9104      	str	r1, [sp, #16]
 8007e8c:	1c59      	adds	r1, r3, #1
 8007e8e:	d13c      	bne.n	8007f0a <_printf_float+0x14a>
 8007e90:	2306      	movs	r3, #6
 8007e92:	6063      	str	r3, [r4, #4]
 8007e94:	2300      	movs	r3, #0
 8007e96:	9303      	str	r3, [sp, #12]
 8007e98:	ab08      	add	r3, sp, #32
 8007e9a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007e9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ea2:	ab07      	add	r3, sp, #28
 8007ea4:	6861      	ldr	r1, [r4, #4]
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	6022      	str	r2, [r4, #0]
 8007eaa:	f10d 031b 	add.w	r3, sp, #27
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f7ff fef6 	bl	8007ca0 <__cvt>
 8007eb4:	9b04      	ldr	r3, [sp, #16]
 8007eb6:	9907      	ldr	r1, [sp, #28]
 8007eb8:	2b47      	cmp	r3, #71	; 0x47
 8007eba:	4680      	mov	r8, r0
 8007ebc:	d108      	bne.n	8007ed0 <_printf_float+0x110>
 8007ebe:	1cc8      	adds	r0, r1, #3
 8007ec0:	db02      	blt.n	8007ec8 <_printf_float+0x108>
 8007ec2:	6863      	ldr	r3, [r4, #4]
 8007ec4:	4299      	cmp	r1, r3
 8007ec6:	dd41      	ble.n	8007f4c <_printf_float+0x18c>
 8007ec8:	f1a9 0902 	sub.w	r9, r9, #2
 8007ecc:	fa5f f989 	uxtb.w	r9, r9
 8007ed0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007ed4:	d820      	bhi.n	8007f18 <_printf_float+0x158>
 8007ed6:	3901      	subs	r1, #1
 8007ed8:	464a      	mov	r2, r9
 8007eda:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ede:	9107      	str	r1, [sp, #28]
 8007ee0:	f7ff ff30 	bl	8007d44 <__exponent>
 8007ee4:	9a08      	ldr	r2, [sp, #32]
 8007ee6:	9004      	str	r0, [sp, #16]
 8007ee8:	1813      	adds	r3, r2, r0
 8007eea:	2a01      	cmp	r2, #1
 8007eec:	6123      	str	r3, [r4, #16]
 8007eee:	dc02      	bgt.n	8007ef6 <_printf_float+0x136>
 8007ef0:	6822      	ldr	r2, [r4, #0]
 8007ef2:	07d2      	lsls	r2, r2, #31
 8007ef4:	d501      	bpl.n	8007efa <_printf_float+0x13a>
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	6123      	str	r3, [r4, #16]
 8007efa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d0a2      	beq.n	8007e48 <_printf_float+0x88>
 8007f02:	232d      	movs	r3, #45	; 0x2d
 8007f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f08:	e79e      	b.n	8007e48 <_printf_float+0x88>
 8007f0a:	9904      	ldr	r1, [sp, #16]
 8007f0c:	2947      	cmp	r1, #71	; 0x47
 8007f0e:	d1c1      	bne.n	8007e94 <_printf_float+0xd4>
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1bf      	bne.n	8007e94 <_printf_float+0xd4>
 8007f14:	2301      	movs	r3, #1
 8007f16:	e7bc      	b.n	8007e92 <_printf_float+0xd2>
 8007f18:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007f1c:	d118      	bne.n	8007f50 <_printf_float+0x190>
 8007f1e:	2900      	cmp	r1, #0
 8007f20:	6863      	ldr	r3, [r4, #4]
 8007f22:	dd0b      	ble.n	8007f3c <_printf_float+0x17c>
 8007f24:	6121      	str	r1, [r4, #16]
 8007f26:	b913      	cbnz	r3, 8007f2e <_printf_float+0x16e>
 8007f28:	6822      	ldr	r2, [r4, #0]
 8007f2a:	07d0      	lsls	r0, r2, #31
 8007f2c:	d502      	bpl.n	8007f34 <_printf_float+0x174>
 8007f2e:	3301      	adds	r3, #1
 8007f30:	440b      	add	r3, r1
 8007f32:	6123      	str	r3, [r4, #16]
 8007f34:	2300      	movs	r3, #0
 8007f36:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f38:	9304      	str	r3, [sp, #16]
 8007f3a:	e7de      	b.n	8007efa <_printf_float+0x13a>
 8007f3c:	b913      	cbnz	r3, 8007f44 <_printf_float+0x184>
 8007f3e:	6822      	ldr	r2, [r4, #0]
 8007f40:	07d2      	lsls	r2, r2, #31
 8007f42:	d501      	bpl.n	8007f48 <_printf_float+0x188>
 8007f44:	3302      	adds	r3, #2
 8007f46:	e7f4      	b.n	8007f32 <_printf_float+0x172>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e7f2      	b.n	8007f32 <_printf_float+0x172>
 8007f4c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007f50:	9b08      	ldr	r3, [sp, #32]
 8007f52:	4299      	cmp	r1, r3
 8007f54:	db05      	blt.n	8007f62 <_printf_float+0x1a2>
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	6121      	str	r1, [r4, #16]
 8007f5a:	07d8      	lsls	r0, r3, #31
 8007f5c:	d5ea      	bpl.n	8007f34 <_printf_float+0x174>
 8007f5e:	1c4b      	adds	r3, r1, #1
 8007f60:	e7e7      	b.n	8007f32 <_printf_float+0x172>
 8007f62:	2900      	cmp	r1, #0
 8007f64:	bfd4      	ite	le
 8007f66:	f1c1 0202 	rsble	r2, r1, #2
 8007f6a:	2201      	movgt	r2, #1
 8007f6c:	4413      	add	r3, r2
 8007f6e:	e7e0      	b.n	8007f32 <_printf_float+0x172>
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	055a      	lsls	r2, r3, #21
 8007f74:	d407      	bmi.n	8007f86 <_printf_float+0x1c6>
 8007f76:	6923      	ldr	r3, [r4, #16]
 8007f78:	4642      	mov	r2, r8
 8007f7a:	4631      	mov	r1, r6
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	47b8      	blx	r7
 8007f80:	3001      	adds	r0, #1
 8007f82:	d12a      	bne.n	8007fda <_printf_float+0x21a>
 8007f84:	e76a      	b.n	8007e5c <_printf_float+0x9c>
 8007f86:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007f8a:	f240 80e2 	bls.w	8008152 <_printf_float+0x392>
 8007f8e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007f92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f9a:	d133      	bne.n	8008004 <_printf_float+0x244>
 8007f9c:	4a38      	ldr	r2, [pc, #224]	; (8008080 <_printf_float+0x2c0>)
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	4631      	mov	r1, r6
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	47b8      	blx	r7
 8007fa6:	3001      	adds	r0, #1
 8007fa8:	f43f af58 	beq.w	8007e5c <_printf_float+0x9c>
 8007fac:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	db02      	blt.n	8007fba <_printf_float+0x1fa>
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	07d8      	lsls	r0, r3, #31
 8007fb8:	d50f      	bpl.n	8007fda <_printf_float+0x21a>
 8007fba:	4653      	mov	r3, sl
 8007fbc:	465a      	mov	r2, fp
 8007fbe:	4631      	mov	r1, r6
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	47b8      	blx	r7
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	f43f af49 	beq.w	8007e5c <_printf_float+0x9c>
 8007fca:	f04f 0800 	mov.w	r8, #0
 8007fce:	f104 091a 	add.w	r9, r4, #26
 8007fd2:	9b08      	ldr	r3, [sp, #32]
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	4543      	cmp	r3, r8
 8007fd8:	dc09      	bgt.n	8007fee <_printf_float+0x22e>
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	079b      	lsls	r3, r3, #30
 8007fde:	f100 8108 	bmi.w	80081f2 <_printf_float+0x432>
 8007fe2:	68e0      	ldr	r0, [r4, #12]
 8007fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe6:	4298      	cmp	r0, r3
 8007fe8:	bfb8      	it	lt
 8007fea:	4618      	movlt	r0, r3
 8007fec:	e738      	b.n	8007e60 <_printf_float+0xa0>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	464a      	mov	r2, r9
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	47b8      	blx	r7
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	f43f af2f 	beq.w	8007e5c <_printf_float+0x9c>
 8007ffe:	f108 0801 	add.w	r8, r8, #1
 8008002:	e7e6      	b.n	8007fd2 <_printf_float+0x212>
 8008004:	9b07      	ldr	r3, [sp, #28]
 8008006:	2b00      	cmp	r3, #0
 8008008:	dc3c      	bgt.n	8008084 <_printf_float+0x2c4>
 800800a:	4a1d      	ldr	r2, [pc, #116]	; (8008080 <_printf_float+0x2c0>)
 800800c:	2301      	movs	r3, #1
 800800e:	4631      	mov	r1, r6
 8008010:	4628      	mov	r0, r5
 8008012:	47b8      	blx	r7
 8008014:	3001      	adds	r0, #1
 8008016:	f43f af21 	beq.w	8007e5c <_printf_float+0x9c>
 800801a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800801e:	4313      	orrs	r3, r2
 8008020:	d102      	bne.n	8008028 <_printf_float+0x268>
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	07d9      	lsls	r1, r3, #31
 8008026:	d5d8      	bpl.n	8007fda <_printf_float+0x21a>
 8008028:	4653      	mov	r3, sl
 800802a:	465a      	mov	r2, fp
 800802c:	4631      	mov	r1, r6
 800802e:	4628      	mov	r0, r5
 8008030:	47b8      	blx	r7
 8008032:	3001      	adds	r0, #1
 8008034:	f43f af12 	beq.w	8007e5c <_printf_float+0x9c>
 8008038:	f04f 0900 	mov.w	r9, #0
 800803c:	f104 0a1a 	add.w	sl, r4, #26
 8008040:	9b07      	ldr	r3, [sp, #28]
 8008042:	425b      	negs	r3, r3
 8008044:	454b      	cmp	r3, r9
 8008046:	dc01      	bgt.n	800804c <_printf_float+0x28c>
 8008048:	9b08      	ldr	r3, [sp, #32]
 800804a:	e795      	b.n	8007f78 <_printf_float+0x1b8>
 800804c:	2301      	movs	r3, #1
 800804e:	4652      	mov	r2, sl
 8008050:	4631      	mov	r1, r6
 8008052:	4628      	mov	r0, r5
 8008054:	47b8      	blx	r7
 8008056:	3001      	adds	r0, #1
 8008058:	f43f af00 	beq.w	8007e5c <_printf_float+0x9c>
 800805c:	f109 0901 	add.w	r9, r9, #1
 8008060:	e7ee      	b.n	8008040 <_printf_float+0x280>
 8008062:	bf00      	nop
 8008064:	f3af 8000 	nop.w
 8008068:	ffffffff 	.word	0xffffffff
 800806c:	7fefffff 	.word	0x7fefffff
 8008070:	0800cdc8 	.word	0x0800cdc8
 8008074:	0800cdcc 	.word	0x0800cdcc
 8008078:	0800cdd4 	.word	0x0800cdd4
 800807c:	0800cdd0 	.word	0x0800cdd0
 8008080:	0800d1d9 	.word	0x0800d1d9
 8008084:	9a08      	ldr	r2, [sp, #32]
 8008086:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008088:	429a      	cmp	r2, r3
 800808a:	bfa8      	it	ge
 800808c:	461a      	movge	r2, r3
 800808e:	2a00      	cmp	r2, #0
 8008090:	4691      	mov	r9, r2
 8008092:	dc38      	bgt.n	8008106 <_printf_float+0x346>
 8008094:	2300      	movs	r3, #0
 8008096:	9305      	str	r3, [sp, #20]
 8008098:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800809c:	f104 021a 	add.w	r2, r4, #26
 80080a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080a2:	9905      	ldr	r1, [sp, #20]
 80080a4:	9304      	str	r3, [sp, #16]
 80080a6:	eba3 0309 	sub.w	r3, r3, r9
 80080aa:	428b      	cmp	r3, r1
 80080ac:	dc33      	bgt.n	8008116 <_printf_float+0x356>
 80080ae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	db3c      	blt.n	8008130 <_printf_float+0x370>
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	07da      	lsls	r2, r3, #31
 80080ba:	d439      	bmi.n	8008130 <_printf_float+0x370>
 80080bc:	9a08      	ldr	r2, [sp, #32]
 80080be:	9b04      	ldr	r3, [sp, #16]
 80080c0:	9907      	ldr	r1, [sp, #28]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	eba2 0901 	sub.w	r9, r2, r1
 80080c8:	4599      	cmp	r9, r3
 80080ca:	bfa8      	it	ge
 80080cc:	4699      	movge	r9, r3
 80080ce:	f1b9 0f00 	cmp.w	r9, #0
 80080d2:	dc35      	bgt.n	8008140 <_printf_float+0x380>
 80080d4:	f04f 0800 	mov.w	r8, #0
 80080d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080dc:	f104 0a1a 	add.w	sl, r4, #26
 80080e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80080e4:	1a9b      	subs	r3, r3, r2
 80080e6:	eba3 0309 	sub.w	r3, r3, r9
 80080ea:	4543      	cmp	r3, r8
 80080ec:	f77f af75 	ble.w	8007fda <_printf_float+0x21a>
 80080f0:	2301      	movs	r3, #1
 80080f2:	4652      	mov	r2, sl
 80080f4:	4631      	mov	r1, r6
 80080f6:	4628      	mov	r0, r5
 80080f8:	47b8      	blx	r7
 80080fa:	3001      	adds	r0, #1
 80080fc:	f43f aeae 	beq.w	8007e5c <_printf_float+0x9c>
 8008100:	f108 0801 	add.w	r8, r8, #1
 8008104:	e7ec      	b.n	80080e0 <_printf_float+0x320>
 8008106:	4613      	mov	r3, r2
 8008108:	4631      	mov	r1, r6
 800810a:	4642      	mov	r2, r8
 800810c:	4628      	mov	r0, r5
 800810e:	47b8      	blx	r7
 8008110:	3001      	adds	r0, #1
 8008112:	d1bf      	bne.n	8008094 <_printf_float+0x2d4>
 8008114:	e6a2      	b.n	8007e5c <_printf_float+0x9c>
 8008116:	2301      	movs	r3, #1
 8008118:	4631      	mov	r1, r6
 800811a:	4628      	mov	r0, r5
 800811c:	9204      	str	r2, [sp, #16]
 800811e:	47b8      	blx	r7
 8008120:	3001      	adds	r0, #1
 8008122:	f43f ae9b 	beq.w	8007e5c <_printf_float+0x9c>
 8008126:	9b05      	ldr	r3, [sp, #20]
 8008128:	9a04      	ldr	r2, [sp, #16]
 800812a:	3301      	adds	r3, #1
 800812c:	9305      	str	r3, [sp, #20]
 800812e:	e7b7      	b.n	80080a0 <_printf_float+0x2e0>
 8008130:	4653      	mov	r3, sl
 8008132:	465a      	mov	r2, fp
 8008134:	4631      	mov	r1, r6
 8008136:	4628      	mov	r0, r5
 8008138:	47b8      	blx	r7
 800813a:	3001      	adds	r0, #1
 800813c:	d1be      	bne.n	80080bc <_printf_float+0x2fc>
 800813e:	e68d      	b.n	8007e5c <_printf_float+0x9c>
 8008140:	9a04      	ldr	r2, [sp, #16]
 8008142:	464b      	mov	r3, r9
 8008144:	4442      	add	r2, r8
 8008146:	4631      	mov	r1, r6
 8008148:	4628      	mov	r0, r5
 800814a:	47b8      	blx	r7
 800814c:	3001      	adds	r0, #1
 800814e:	d1c1      	bne.n	80080d4 <_printf_float+0x314>
 8008150:	e684      	b.n	8007e5c <_printf_float+0x9c>
 8008152:	9a08      	ldr	r2, [sp, #32]
 8008154:	2a01      	cmp	r2, #1
 8008156:	dc01      	bgt.n	800815c <_printf_float+0x39c>
 8008158:	07db      	lsls	r3, r3, #31
 800815a:	d537      	bpl.n	80081cc <_printf_float+0x40c>
 800815c:	2301      	movs	r3, #1
 800815e:	4642      	mov	r2, r8
 8008160:	4631      	mov	r1, r6
 8008162:	4628      	mov	r0, r5
 8008164:	47b8      	blx	r7
 8008166:	3001      	adds	r0, #1
 8008168:	f43f ae78 	beq.w	8007e5c <_printf_float+0x9c>
 800816c:	4653      	mov	r3, sl
 800816e:	465a      	mov	r2, fp
 8008170:	4631      	mov	r1, r6
 8008172:	4628      	mov	r0, r5
 8008174:	47b8      	blx	r7
 8008176:	3001      	adds	r0, #1
 8008178:	f43f ae70 	beq.w	8007e5c <_printf_float+0x9c>
 800817c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008180:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008188:	d01b      	beq.n	80081c2 <_printf_float+0x402>
 800818a:	9b08      	ldr	r3, [sp, #32]
 800818c:	f108 0201 	add.w	r2, r8, #1
 8008190:	3b01      	subs	r3, #1
 8008192:	4631      	mov	r1, r6
 8008194:	4628      	mov	r0, r5
 8008196:	47b8      	blx	r7
 8008198:	3001      	adds	r0, #1
 800819a:	d10e      	bne.n	80081ba <_printf_float+0x3fa>
 800819c:	e65e      	b.n	8007e5c <_printf_float+0x9c>
 800819e:	2301      	movs	r3, #1
 80081a0:	464a      	mov	r2, r9
 80081a2:	4631      	mov	r1, r6
 80081a4:	4628      	mov	r0, r5
 80081a6:	47b8      	blx	r7
 80081a8:	3001      	adds	r0, #1
 80081aa:	f43f ae57 	beq.w	8007e5c <_printf_float+0x9c>
 80081ae:	f108 0801 	add.w	r8, r8, #1
 80081b2:	9b08      	ldr	r3, [sp, #32]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	4543      	cmp	r3, r8
 80081b8:	dcf1      	bgt.n	800819e <_printf_float+0x3de>
 80081ba:	9b04      	ldr	r3, [sp, #16]
 80081bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80081c0:	e6db      	b.n	8007f7a <_printf_float+0x1ba>
 80081c2:	f04f 0800 	mov.w	r8, #0
 80081c6:	f104 091a 	add.w	r9, r4, #26
 80081ca:	e7f2      	b.n	80081b2 <_printf_float+0x3f2>
 80081cc:	2301      	movs	r3, #1
 80081ce:	4642      	mov	r2, r8
 80081d0:	e7df      	b.n	8008192 <_printf_float+0x3d2>
 80081d2:	2301      	movs	r3, #1
 80081d4:	464a      	mov	r2, r9
 80081d6:	4631      	mov	r1, r6
 80081d8:	4628      	mov	r0, r5
 80081da:	47b8      	blx	r7
 80081dc:	3001      	adds	r0, #1
 80081de:	f43f ae3d 	beq.w	8007e5c <_printf_float+0x9c>
 80081e2:	f108 0801 	add.w	r8, r8, #1
 80081e6:	68e3      	ldr	r3, [r4, #12]
 80081e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081ea:	1a5b      	subs	r3, r3, r1
 80081ec:	4543      	cmp	r3, r8
 80081ee:	dcf0      	bgt.n	80081d2 <_printf_float+0x412>
 80081f0:	e6f7      	b.n	8007fe2 <_printf_float+0x222>
 80081f2:	f04f 0800 	mov.w	r8, #0
 80081f6:	f104 0919 	add.w	r9, r4, #25
 80081fa:	e7f4      	b.n	80081e6 <_printf_float+0x426>

080081fc <_printf_common>:
 80081fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008200:	4616      	mov	r6, r2
 8008202:	4699      	mov	r9, r3
 8008204:	688a      	ldr	r2, [r1, #8]
 8008206:	690b      	ldr	r3, [r1, #16]
 8008208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800820c:	4293      	cmp	r3, r2
 800820e:	bfb8      	it	lt
 8008210:	4613      	movlt	r3, r2
 8008212:	6033      	str	r3, [r6, #0]
 8008214:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008218:	4607      	mov	r7, r0
 800821a:	460c      	mov	r4, r1
 800821c:	b10a      	cbz	r2, 8008222 <_printf_common+0x26>
 800821e:	3301      	adds	r3, #1
 8008220:	6033      	str	r3, [r6, #0]
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	0699      	lsls	r1, r3, #26
 8008226:	bf42      	ittt	mi
 8008228:	6833      	ldrmi	r3, [r6, #0]
 800822a:	3302      	addmi	r3, #2
 800822c:	6033      	strmi	r3, [r6, #0]
 800822e:	6825      	ldr	r5, [r4, #0]
 8008230:	f015 0506 	ands.w	r5, r5, #6
 8008234:	d106      	bne.n	8008244 <_printf_common+0x48>
 8008236:	f104 0a19 	add.w	sl, r4, #25
 800823a:	68e3      	ldr	r3, [r4, #12]
 800823c:	6832      	ldr	r2, [r6, #0]
 800823e:	1a9b      	subs	r3, r3, r2
 8008240:	42ab      	cmp	r3, r5
 8008242:	dc26      	bgt.n	8008292 <_printf_common+0x96>
 8008244:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008248:	1e13      	subs	r3, r2, #0
 800824a:	6822      	ldr	r2, [r4, #0]
 800824c:	bf18      	it	ne
 800824e:	2301      	movne	r3, #1
 8008250:	0692      	lsls	r2, r2, #26
 8008252:	d42b      	bmi.n	80082ac <_printf_common+0xb0>
 8008254:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008258:	4649      	mov	r1, r9
 800825a:	4638      	mov	r0, r7
 800825c:	47c0      	blx	r8
 800825e:	3001      	adds	r0, #1
 8008260:	d01e      	beq.n	80082a0 <_printf_common+0xa4>
 8008262:	6823      	ldr	r3, [r4, #0]
 8008264:	68e5      	ldr	r5, [r4, #12]
 8008266:	6832      	ldr	r2, [r6, #0]
 8008268:	f003 0306 	and.w	r3, r3, #6
 800826c:	2b04      	cmp	r3, #4
 800826e:	bf08      	it	eq
 8008270:	1aad      	subeq	r5, r5, r2
 8008272:	68a3      	ldr	r3, [r4, #8]
 8008274:	6922      	ldr	r2, [r4, #16]
 8008276:	bf0c      	ite	eq
 8008278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800827c:	2500      	movne	r5, #0
 800827e:	4293      	cmp	r3, r2
 8008280:	bfc4      	itt	gt
 8008282:	1a9b      	subgt	r3, r3, r2
 8008284:	18ed      	addgt	r5, r5, r3
 8008286:	2600      	movs	r6, #0
 8008288:	341a      	adds	r4, #26
 800828a:	42b5      	cmp	r5, r6
 800828c:	d11a      	bne.n	80082c4 <_printf_common+0xc8>
 800828e:	2000      	movs	r0, #0
 8008290:	e008      	b.n	80082a4 <_printf_common+0xa8>
 8008292:	2301      	movs	r3, #1
 8008294:	4652      	mov	r2, sl
 8008296:	4649      	mov	r1, r9
 8008298:	4638      	mov	r0, r7
 800829a:	47c0      	blx	r8
 800829c:	3001      	adds	r0, #1
 800829e:	d103      	bne.n	80082a8 <_printf_common+0xac>
 80082a0:	f04f 30ff 	mov.w	r0, #4294967295
 80082a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a8:	3501      	adds	r5, #1
 80082aa:	e7c6      	b.n	800823a <_printf_common+0x3e>
 80082ac:	18e1      	adds	r1, r4, r3
 80082ae:	1c5a      	adds	r2, r3, #1
 80082b0:	2030      	movs	r0, #48	; 0x30
 80082b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082b6:	4422      	add	r2, r4
 80082b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082c0:	3302      	adds	r3, #2
 80082c2:	e7c7      	b.n	8008254 <_printf_common+0x58>
 80082c4:	2301      	movs	r3, #1
 80082c6:	4622      	mov	r2, r4
 80082c8:	4649      	mov	r1, r9
 80082ca:	4638      	mov	r0, r7
 80082cc:	47c0      	blx	r8
 80082ce:	3001      	adds	r0, #1
 80082d0:	d0e6      	beq.n	80082a0 <_printf_common+0xa4>
 80082d2:	3601      	adds	r6, #1
 80082d4:	e7d9      	b.n	800828a <_printf_common+0x8e>
	...

080082d8 <_printf_i>:
 80082d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082dc:	460c      	mov	r4, r1
 80082de:	4691      	mov	r9, r2
 80082e0:	7e27      	ldrb	r7, [r4, #24]
 80082e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80082e4:	2f78      	cmp	r7, #120	; 0x78
 80082e6:	4680      	mov	r8, r0
 80082e8:	469a      	mov	sl, r3
 80082ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082ee:	d807      	bhi.n	8008300 <_printf_i+0x28>
 80082f0:	2f62      	cmp	r7, #98	; 0x62
 80082f2:	d80a      	bhi.n	800830a <_printf_i+0x32>
 80082f4:	2f00      	cmp	r7, #0
 80082f6:	f000 80d8 	beq.w	80084aa <_printf_i+0x1d2>
 80082fa:	2f58      	cmp	r7, #88	; 0x58
 80082fc:	f000 80a3 	beq.w	8008446 <_printf_i+0x16e>
 8008300:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008304:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008308:	e03a      	b.n	8008380 <_printf_i+0xa8>
 800830a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800830e:	2b15      	cmp	r3, #21
 8008310:	d8f6      	bhi.n	8008300 <_printf_i+0x28>
 8008312:	a001      	add	r0, pc, #4	; (adr r0, 8008318 <_printf_i+0x40>)
 8008314:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008318:	08008371 	.word	0x08008371
 800831c:	08008385 	.word	0x08008385
 8008320:	08008301 	.word	0x08008301
 8008324:	08008301 	.word	0x08008301
 8008328:	08008301 	.word	0x08008301
 800832c:	08008301 	.word	0x08008301
 8008330:	08008385 	.word	0x08008385
 8008334:	08008301 	.word	0x08008301
 8008338:	08008301 	.word	0x08008301
 800833c:	08008301 	.word	0x08008301
 8008340:	08008301 	.word	0x08008301
 8008344:	08008491 	.word	0x08008491
 8008348:	080083b5 	.word	0x080083b5
 800834c:	08008473 	.word	0x08008473
 8008350:	08008301 	.word	0x08008301
 8008354:	08008301 	.word	0x08008301
 8008358:	080084b3 	.word	0x080084b3
 800835c:	08008301 	.word	0x08008301
 8008360:	080083b5 	.word	0x080083b5
 8008364:	08008301 	.word	0x08008301
 8008368:	08008301 	.word	0x08008301
 800836c:	0800847b 	.word	0x0800847b
 8008370:	680b      	ldr	r3, [r1, #0]
 8008372:	1d1a      	adds	r2, r3, #4
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	600a      	str	r2, [r1, #0]
 8008378:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800837c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008380:	2301      	movs	r3, #1
 8008382:	e0a3      	b.n	80084cc <_printf_i+0x1f4>
 8008384:	6825      	ldr	r5, [r4, #0]
 8008386:	6808      	ldr	r0, [r1, #0]
 8008388:	062e      	lsls	r6, r5, #24
 800838a:	f100 0304 	add.w	r3, r0, #4
 800838e:	d50a      	bpl.n	80083a6 <_printf_i+0xce>
 8008390:	6805      	ldr	r5, [r0, #0]
 8008392:	600b      	str	r3, [r1, #0]
 8008394:	2d00      	cmp	r5, #0
 8008396:	da03      	bge.n	80083a0 <_printf_i+0xc8>
 8008398:	232d      	movs	r3, #45	; 0x2d
 800839a:	426d      	negs	r5, r5
 800839c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083a0:	485e      	ldr	r0, [pc, #376]	; (800851c <_printf_i+0x244>)
 80083a2:	230a      	movs	r3, #10
 80083a4:	e019      	b.n	80083da <_printf_i+0x102>
 80083a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80083aa:	6805      	ldr	r5, [r0, #0]
 80083ac:	600b      	str	r3, [r1, #0]
 80083ae:	bf18      	it	ne
 80083b0:	b22d      	sxthne	r5, r5
 80083b2:	e7ef      	b.n	8008394 <_printf_i+0xbc>
 80083b4:	680b      	ldr	r3, [r1, #0]
 80083b6:	6825      	ldr	r5, [r4, #0]
 80083b8:	1d18      	adds	r0, r3, #4
 80083ba:	6008      	str	r0, [r1, #0]
 80083bc:	0628      	lsls	r0, r5, #24
 80083be:	d501      	bpl.n	80083c4 <_printf_i+0xec>
 80083c0:	681d      	ldr	r5, [r3, #0]
 80083c2:	e002      	b.n	80083ca <_printf_i+0xf2>
 80083c4:	0669      	lsls	r1, r5, #25
 80083c6:	d5fb      	bpl.n	80083c0 <_printf_i+0xe8>
 80083c8:	881d      	ldrh	r5, [r3, #0]
 80083ca:	4854      	ldr	r0, [pc, #336]	; (800851c <_printf_i+0x244>)
 80083cc:	2f6f      	cmp	r7, #111	; 0x6f
 80083ce:	bf0c      	ite	eq
 80083d0:	2308      	moveq	r3, #8
 80083d2:	230a      	movne	r3, #10
 80083d4:	2100      	movs	r1, #0
 80083d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083da:	6866      	ldr	r6, [r4, #4]
 80083dc:	60a6      	str	r6, [r4, #8]
 80083de:	2e00      	cmp	r6, #0
 80083e0:	bfa2      	ittt	ge
 80083e2:	6821      	ldrge	r1, [r4, #0]
 80083e4:	f021 0104 	bicge.w	r1, r1, #4
 80083e8:	6021      	strge	r1, [r4, #0]
 80083ea:	b90d      	cbnz	r5, 80083f0 <_printf_i+0x118>
 80083ec:	2e00      	cmp	r6, #0
 80083ee:	d04d      	beq.n	800848c <_printf_i+0x1b4>
 80083f0:	4616      	mov	r6, r2
 80083f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80083f6:	fb03 5711 	mls	r7, r3, r1, r5
 80083fa:	5dc7      	ldrb	r7, [r0, r7]
 80083fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008400:	462f      	mov	r7, r5
 8008402:	42bb      	cmp	r3, r7
 8008404:	460d      	mov	r5, r1
 8008406:	d9f4      	bls.n	80083f2 <_printf_i+0x11a>
 8008408:	2b08      	cmp	r3, #8
 800840a:	d10b      	bne.n	8008424 <_printf_i+0x14c>
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	07df      	lsls	r7, r3, #31
 8008410:	d508      	bpl.n	8008424 <_printf_i+0x14c>
 8008412:	6923      	ldr	r3, [r4, #16]
 8008414:	6861      	ldr	r1, [r4, #4]
 8008416:	4299      	cmp	r1, r3
 8008418:	bfde      	ittt	le
 800841a:	2330      	movle	r3, #48	; 0x30
 800841c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008420:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008424:	1b92      	subs	r2, r2, r6
 8008426:	6122      	str	r2, [r4, #16]
 8008428:	f8cd a000 	str.w	sl, [sp]
 800842c:	464b      	mov	r3, r9
 800842e:	aa03      	add	r2, sp, #12
 8008430:	4621      	mov	r1, r4
 8008432:	4640      	mov	r0, r8
 8008434:	f7ff fee2 	bl	80081fc <_printf_common>
 8008438:	3001      	adds	r0, #1
 800843a:	d14c      	bne.n	80084d6 <_printf_i+0x1fe>
 800843c:	f04f 30ff 	mov.w	r0, #4294967295
 8008440:	b004      	add	sp, #16
 8008442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008446:	4835      	ldr	r0, [pc, #212]	; (800851c <_printf_i+0x244>)
 8008448:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	680e      	ldr	r6, [r1, #0]
 8008450:	061f      	lsls	r7, r3, #24
 8008452:	f856 5b04 	ldr.w	r5, [r6], #4
 8008456:	600e      	str	r6, [r1, #0]
 8008458:	d514      	bpl.n	8008484 <_printf_i+0x1ac>
 800845a:	07d9      	lsls	r1, r3, #31
 800845c:	bf44      	itt	mi
 800845e:	f043 0320 	orrmi.w	r3, r3, #32
 8008462:	6023      	strmi	r3, [r4, #0]
 8008464:	b91d      	cbnz	r5, 800846e <_printf_i+0x196>
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	f023 0320 	bic.w	r3, r3, #32
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	2310      	movs	r3, #16
 8008470:	e7b0      	b.n	80083d4 <_printf_i+0xfc>
 8008472:	6823      	ldr	r3, [r4, #0]
 8008474:	f043 0320 	orr.w	r3, r3, #32
 8008478:	6023      	str	r3, [r4, #0]
 800847a:	2378      	movs	r3, #120	; 0x78
 800847c:	4828      	ldr	r0, [pc, #160]	; (8008520 <_printf_i+0x248>)
 800847e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008482:	e7e3      	b.n	800844c <_printf_i+0x174>
 8008484:	065e      	lsls	r6, r3, #25
 8008486:	bf48      	it	mi
 8008488:	b2ad      	uxthmi	r5, r5
 800848a:	e7e6      	b.n	800845a <_printf_i+0x182>
 800848c:	4616      	mov	r6, r2
 800848e:	e7bb      	b.n	8008408 <_printf_i+0x130>
 8008490:	680b      	ldr	r3, [r1, #0]
 8008492:	6826      	ldr	r6, [r4, #0]
 8008494:	6960      	ldr	r0, [r4, #20]
 8008496:	1d1d      	adds	r5, r3, #4
 8008498:	600d      	str	r5, [r1, #0]
 800849a:	0635      	lsls	r5, r6, #24
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	d501      	bpl.n	80084a4 <_printf_i+0x1cc>
 80084a0:	6018      	str	r0, [r3, #0]
 80084a2:	e002      	b.n	80084aa <_printf_i+0x1d2>
 80084a4:	0671      	lsls	r1, r6, #25
 80084a6:	d5fb      	bpl.n	80084a0 <_printf_i+0x1c8>
 80084a8:	8018      	strh	r0, [r3, #0]
 80084aa:	2300      	movs	r3, #0
 80084ac:	6123      	str	r3, [r4, #16]
 80084ae:	4616      	mov	r6, r2
 80084b0:	e7ba      	b.n	8008428 <_printf_i+0x150>
 80084b2:	680b      	ldr	r3, [r1, #0]
 80084b4:	1d1a      	adds	r2, r3, #4
 80084b6:	600a      	str	r2, [r1, #0]
 80084b8:	681e      	ldr	r6, [r3, #0]
 80084ba:	6862      	ldr	r2, [r4, #4]
 80084bc:	2100      	movs	r1, #0
 80084be:	4630      	mov	r0, r6
 80084c0:	f7f7 fed6 	bl	8000270 <memchr>
 80084c4:	b108      	cbz	r0, 80084ca <_printf_i+0x1f2>
 80084c6:	1b80      	subs	r0, r0, r6
 80084c8:	6060      	str	r0, [r4, #4]
 80084ca:	6863      	ldr	r3, [r4, #4]
 80084cc:	6123      	str	r3, [r4, #16]
 80084ce:	2300      	movs	r3, #0
 80084d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084d4:	e7a8      	b.n	8008428 <_printf_i+0x150>
 80084d6:	6923      	ldr	r3, [r4, #16]
 80084d8:	4632      	mov	r2, r6
 80084da:	4649      	mov	r1, r9
 80084dc:	4640      	mov	r0, r8
 80084de:	47d0      	blx	sl
 80084e0:	3001      	adds	r0, #1
 80084e2:	d0ab      	beq.n	800843c <_printf_i+0x164>
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	079b      	lsls	r3, r3, #30
 80084e8:	d413      	bmi.n	8008512 <_printf_i+0x23a>
 80084ea:	68e0      	ldr	r0, [r4, #12]
 80084ec:	9b03      	ldr	r3, [sp, #12]
 80084ee:	4298      	cmp	r0, r3
 80084f0:	bfb8      	it	lt
 80084f2:	4618      	movlt	r0, r3
 80084f4:	e7a4      	b.n	8008440 <_printf_i+0x168>
 80084f6:	2301      	movs	r3, #1
 80084f8:	4632      	mov	r2, r6
 80084fa:	4649      	mov	r1, r9
 80084fc:	4640      	mov	r0, r8
 80084fe:	47d0      	blx	sl
 8008500:	3001      	adds	r0, #1
 8008502:	d09b      	beq.n	800843c <_printf_i+0x164>
 8008504:	3501      	adds	r5, #1
 8008506:	68e3      	ldr	r3, [r4, #12]
 8008508:	9903      	ldr	r1, [sp, #12]
 800850a:	1a5b      	subs	r3, r3, r1
 800850c:	42ab      	cmp	r3, r5
 800850e:	dcf2      	bgt.n	80084f6 <_printf_i+0x21e>
 8008510:	e7eb      	b.n	80084ea <_printf_i+0x212>
 8008512:	2500      	movs	r5, #0
 8008514:	f104 0619 	add.w	r6, r4, #25
 8008518:	e7f5      	b.n	8008506 <_printf_i+0x22e>
 800851a:	bf00      	nop
 800851c:	0800cdd8 	.word	0x0800cdd8
 8008520:	0800cde9 	.word	0x0800cde9

08008524 <_scanf_float>:
 8008524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008528:	b087      	sub	sp, #28
 800852a:	4617      	mov	r7, r2
 800852c:	9303      	str	r3, [sp, #12]
 800852e:	688b      	ldr	r3, [r1, #8]
 8008530:	1e5a      	subs	r2, r3, #1
 8008532:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008536:	bf83      	ittte	hi
 8008538:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800853c:	195b      	addhi	r3, r3, r5
 800853e:	9302      	strhi	r3, [sp, #8]
 8008540:	2300      	movls	r3, #0
 8008542:	bf86      	itte	hi
 8008544:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008548:	608b      	strhi	r3, [r1, #8]
 800854a:	9302      	strls	r3, [sp, #8]
 800854c:	680b      	ldr	r3, [r1, #0]
 800854e:	468b      	mov	fp, r1
 8008550:	2500      	movs	r5, #0
 8008552:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008556:	f84b 3b1c 	str.w	r3, [fp], #28
 800855a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800855e:	4680      	mov	r8, r0
 8008560:	460c      	mov	r4, r1
 8008562:	465e      	mov	r6, fp
 8008564:	46aa      	mov	sl, r5
 8008566:	46a9      	mov	r9, r5
 8008568:	9501      	str	r5, [sp, #4]
 800856a:	68a2      	ldr	r2, [r4, #8]
 800856c:	b152      	cbz	r2, 8008584 <_scanf_float+0x60>
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	2b4e      	cmp	r3, #78	; 0x4e
 8008574:	d864      	bhi.n	8008640 <_scanf_float+0x11c>
 8008576:	2b40      	cmp	r3, #64	; 0x40
 8008578:	d83c      	bhi.n	80085f4 <_scanf_float+0xd0>
 800857a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800857e:	b2c8      	uxtb	r0, r1
 8008580:	280e      	cmp	r0, #14
 8008582:	d93a      	bls.n	80085fa <_scanf_float+0xd6>
 8008584:	f1b9 0f00 	cmp.w	r9, #0
 8008588:	d003      	beq.n	8008592 <_scanf_float+0x6e>
 800858a:	6823      	ldr	r3, [r4, #0]
 800858c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008590:	6023      	str	r3, [r4, #0]
 8008592:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008596:	f1ba 0f01 	cmp.w	sl, #1
 800859a:	f200 8113 	bhi.w	80087c4 <_scanf_float+0x2a0>
 800859e:	455e      	cmp	r6, fp
 80085a0:	f200 8105 	bhi.w	80087ae <_scanf_float+0x28a>
 80085a4:	2501      	movs	r5, #1
 80085a6:	4628      	mov	r0, r5
 80085a8:	b007      	add	sp, #28
 80085aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80085b2:	2a0d      	cmp	r2, #13
 80085b4:	d8e6      	bhi.n	8008584 <_scanf_float+0x60>
 80085b6:	a101      	add	r1, pc, #4	; (adr r1, 80085bc <_scanf_float+0x98>)
 80085b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80085bc:	080086fb 	.word	0x080086fb
 80085c0:	08008585 	.word	0x08008585
 80085c4:	08008585 	.word	0x08008585
 80085c8:	08008585 	.word	0x08008585
 80085cc:	0800875b 	.word	0x0800875b
 80085d0:	08008733 	.word	0x08008733
 80085d4:	08008585 	.word	0x08008585
 80085d8:	08008585 	.word	0x08008585
 80085dc:	08008709 	.word	0x08008709
 80085e0:	08008585 	.word	0x08008585
 80085e4:	08008585 	.word	0x08008585
 80085e8:	08008585 	.word	0x08008585
 80085ec:	08008585 	.word	0x08008585
 80085f0:	080086c1 	.word	0x080086c1
 80085f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80085f8:	e7db      	b.n	80085b2 <_scanf_float+0x8e>
 80085fa:	290e      	cmp	r1, #14
 80085fc:	d8c2      	bhi.n	8008584 <_scanf_float+0x60>
 80085fe:	a001      	add	r0, pc, #4	; (adr r0, 8008604 <_scanf_float+0xe0>)
 8008600:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008604:	080086b3 	.word	0x080086b3
 8008608:	08008585 	.word	0x08008585
 800860c:	080086b3 	.word	0x080086b3
 8008610:	08008747 	.word	0x08008747
 8008614:	08008585 	.word	0x08008585
 8008618:	08008661 	.word	0x08008661
 800861c:	0800869d 	.word	0x0800869d
 8008620:	0800869d 	.word	0x0800869d
 8008624:	0800869d 	.word	0x0800869d
 8008628:	0800869d 	.word	0x0800869d
 800862c:	0800869d 	.word	0x0800869d
 8008630:	0800869d 	.word	0x0800869d
 8008634:	0800869d 	.word	0x0800869d
 8008638:	0800869d 	.word	0x0800869d
 800863c:	0800869d 	.word	0x0800869d
 8008640:	2b6e      	cmp	r3, #110	; 0x6e
 8008642:	d809      	bhi.n	8008658 <_scanf_float+0x134>
 8008644:	2b60      	cmp	r3, #96	; 0x60
 8008646:	d8b2      	bhi.n	80085ae <_scanf_float+0x8a>
 8008648:	2b54      	cmp	r3, #84	; 0x54
 800864a:	d077      	beq.n	800873c <_scanf_float+0x218>
 800864c:	2b59      	cmp	r3, #89	; 0x59
 800864e:	d199      	bne.n	8008584 <_scanf_float+0x60>
 8008650:	2d07      	cmp	r5, #7
 8008652:	d197      	bne.n	8008584 <_scanf_float+0x60>
 8008654:	2508      	movs	r5, #8
 8008656:	e029      	b.n	80086ac <_scanf_float+0x188>
 8008658:	2b74      	cmp	r3, #116	; 0x74
 800865a:	d06f      	beq.n	800873c <_scanf_float+0x218>
 800865c:	2b79      	cmp	r3, #121	; 0x79
 800865e:	e7f6      	b.n	800864e <_scanf_float+0x12a>
 8008660:	6821      	ldr	r1, [r4, #0]
 8008662:	05c8      	lsls	r0, r1, #23
 8008664:	d51a      	bpl.n	800869c <_scanf_float+0x178>
 8008666:	9b02      	ldr	r3, [sp, #8]
 8008668:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800866c:	6021      	str	r1, [r4, #0]
 800866e:	f109 0901 	add.w	r9, r9, #1
 8008672:	b11b      	cbz	r3, 800867c <_scanf_float+0x158>
 8008674:	3b01      	subs	r3, #1
 8008676:	3201      	adds	r2, #1
 8008678:	9302      	str	r3, [sp, #8]
 800867a:	60a2      	str	r2, [r4, #8]
 800867c:	68a3      	ldr	r3, [r4, #8]
 800867e:	3b01      	subs	r3, #1
 8008680:	60a3      	str	r3, [r4, #8]
 8008682:	6923      	ldr	r3, [r4, #16]
 8008684:	3301      	adds	r3, #1
 8008686:	6123      	str	r3, [r4, #16]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	3b01      	subs	r3, #1
 800868c:	2b00      	cmp	r3, #0
 800868e:	607b      	str	r3, [r7, #4]
 8008690:	f340 8084 	ble.w	800879c <_scanf_float+0x278>
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	3301      	adds	r3, #1
 8008698:	603b      	str	r3, [r7, #0]
 800869a:	e766      	b.n	800856a <_scanf_float+0x46>
 800869c:	eb1a 0f05 	cmn.w	sl, r5
 80086a0:	f47f af70 	bne.w	8008584 <_scanf_float+0x60>
 80086a4:	6822      	ldr	r2, [r4, #0]
 80086a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80086aa:	6022      	str	r2, [r4, #0]
 80086ac:	f806 3b01 	strb.w	r3, [r6], #1
 80086b0:	e7e4      	b.n	800867c <_scanf_float+0x158>
 80086b2:	6822      	ldr	r2, [r4, #0]
 80086b4:	0610      	lsls	r0, r2, #24
 80086b6:	f57f af65 	bpl.w	8008584 <_scanf_float+0x60>
 80086ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086be:	e7f4      	b.n	80086aa <_scanf_float+0x186>
 80086c0:	f1ba 0f00 	cmp.w	sl, #0
 80086c4:	d10e      	bne.n	80086e4 <_scanf_float+0x1c0>
 80086c6:	f1b9 0f00 	cmp.w	r9, #0
 80086ca:	d10e      	bne.n	80086ea <_scanf_float+0x1c6>
 80086cc:	6822      	ldr	r2, [r4, #0]
 80086ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80086d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80086d6:	d108      	bne.n	80086ea <_scanf_float+0x1c6>
 80086d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086dc:	6022      	str	r2, [r4, #0]
 80086de:	f04f 0a01 	mov.w	sl, #1
 80086e2:	e7e3      	b.n	80086ac <_scanf_float+0x188>
 80086e4:	f1ba 0f02 	cmp.w	sl, #2
 80086e8:	d055      	beq.n	8008796 <_scanf_float+0x272>
 80086ea:	2d01      	cmp	r5, #1
 80086ec:	d002      	beq.n	80086f4 <_scanf_float+0x1d0>
 80086ee:	2d04      	cmp	r5, #4
 80086f0:	f47f af48 	bne.w	8008584 <_scanf_float+0x60>
 80086f4:	3501      	adds	r5, #1
 80086f6:	b2ed      	uxtb	r5, r5
 80086f8:	e7d8      	b.n	80086ac <_scanf_float+0x188>
 80086fa:	f1ba 0f01 	cmp.w	sl, #1
 80086fe:	f47f af41 	bne.w	8008584 <_scanf_float+0x60>
 8008702:	f04f 0a02 	mov.w	sl, #2
 8008706:	e7d1      	b.n	80086ac <_scanf_float+0x188>
 8008708:	b97d      	cbnz	r5, 800872a <_scanf_float+0x206>
 800870a:	f1b9 0f00 	cmp.w	r9, #0
 800870e:	f47f af3c 	bne.w	800858a <_scanf_float+0x66>
 8008712:	6822      	ldr	r2, [r4, #0]
 8008714:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008718:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800871c:	f47f af39 	bne.w	8008592 <_scanf_float+0x6e>
 8008720:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008724:	6022      	str	r2, [r4, #0]
 8008726:	2501      	movs	r5, #1
 8008728:	e7c0      	b.n	80086ac <_scanf_float+0x188>
 800872a:	2d03      	cmp	r5, #3
 800872c:	d0e2      	beq.n	80086f4 <_scanf_float+0x1d0>
 800872e:	2d05      	cmp	r5, #5
 8008730:	e7de      	b.n	80086f0 <_scanf_float+0x1cc>
 8008732:	2d02      	cmp	r5, #2
 8008734:	f47f af26 	bne.w	8008584 <_scanf_float+0x60>
 8008738:	2503      	movs	r5, #3
 800873a:	e7b7      	b.n	80086ac <_scanf_float+0x188>
 800873c:	2d06      	cmp	r5, #6
 800873e:	f47f af21 	bne.w	8008584 <_scanf_float+0x60>
 8008742:	2507      	movs	r5, #7
 8008744:	e7b2      	b.n	80086ac <_scanf_float+0x188>
 8008746:	6822      	ldr	r2, [r4, #0]
 8008748:	0591      	lsls	r1, r2, #22
 800874a:	f57f af1b 	bpl.w	8008584 <_scanf_float+0x60>
 800874e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008752:	6022      	str	r2, [r4, #0]
 8008754:	f8cd 9004 	str.w	r9, [sp, #4]
 8008758:	e7a8      	b.n	80086ac <_scanf_float+0x188>
 800875a:	6822      	ldr	r2, [r4, #0]
 800875c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008760:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008764:	d006      	beq.n	8008774 <_scanf_float+0x250>
 8008766:	0550      	lsls	r0, r2, #21
 8008768:	f57f af0c 	bpl.w	8008584 <_scanf_float+0x60>
 800876c:	f1b9 0f00 	cmp.w	r9, #0
 8008770:	f43f af0f 	beq.w	8008592 <_scanf_float+0x6e>
 8008774:	0591      	lsls	r1, r2, #22
 8008776:	bf58      	it	pl
 8008778:	9901      	ldrpl	r1, [sp, #4]
 800877a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800877e:	bf58      	it	pl
 8008780:	eba9 0101 	subpl.w	r1, r9, r1
 8008784:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008788:	bf58      	it	pl
 800878a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800878e:	6022      	str	r2, [r4, #0]
 8008790:	f04f 0900 	mov.w	r9, #0
 8008794:	e78a      	b.n	80086ac <_scanf_float+0x188>
 8008796:	f04f 0a03 	mov.w	sl, #3
 800879a:	e787      	b.n	80086ac <_scanf_float+0x188>
 800879c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80087a0:	4639      	mov	r1, r7
 80087a2:	4640      	mov	r0, r8
 80087a4:	4798      	blx	r3
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f43f aedf 	beq.w	800856a <_scanf_float+0x46>
 80087ac:	e6ea      	b.n	8008584 <_scanf_float+0x60>
 80087ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087b6:	463a      	mov	r2, r7
 80087b8:	4640      	mov	r0, r8
 80087ba:	4798      	blx	r3
 80087bc:	6923      	ldr	r3, [r4, #16]
 80087be:	3b01      	subs	r3, #1
 80087c0:	6123      	str	r3, [r4, #16]
 80087c2:	e6ec      	b.n	800859e <_scanf_float+0x7a>
 80087c4:	1e6b      	subs	r3, r5, #1
 80087c6:	2b06      	cmp	r3, #6
 80087c8:	d825      	bhi.n	8008816 <_scanf_float+0x2f2>
 80087ca:	2d02      	cmp	r5, #2
 80087cc:	d836      	bhi.n	800883c <_scanf_float+0x318>
 80087ce:	455e      	cmp	r6, fp
 80087d0:	f67f aee8 	bls.w	80085a4 <_scanf_float+0x80>
 80087d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087dc:	463a      	mov	r2, r7
 80087de:	4640      	mov	r0, r8
 80087e0:	4798      	blx	r3
 80087e2:	6923      	ldr	r3, [r4, #16]
 80087e4:	3b01      	subs	r3, #1
 80087e6:	6123      	str	r3, [r4, #16]
 80087e8:	e7f1      	b.n	80087ce <_scanf_float+0x2aa>
 80087ea:	9802      	ldr	r0, [sp, #8]
 80087ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80087f4:	9002      	str	r0, [sp, #8]
 80087f6:	463a      	mov	r2, r7
 80087f8:	4640      	mov	r0, r8
 80087fa:	4798      	blx	r3
 80087fc:	6923      	ldr	r3, [r4, #16]
 80087fe:	3b01      	subs	r3, #1
 8008800:	6123      	str	r3, [r4, #16]
 8008802:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008806:	fa5f fa8a 	uxtb.w	sl, sl
 800880a:	f1ba 0f02 	cmp.w	sl, #2
 800880e:	d1ec      	bne.n	80087ea <_scanf_float+0x2c6>
 8008810:	3d03      	subs	r5, #3
 8008812:	b2ed      	uxtb	r5, r5
 8008814:	1b76      	subs	r6, r6, r5
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	05da      	lsls	r2, r3, #23
 800881a:	d52f      	bpl.n	800887c <_scanf_float+0x358>
 800881c:	055b      	lsls	r3, r3, #21
 800881e:	d510      	bpl.n	8008842 <_scanf_float+0x31e>
 8008820:	455e      	cmp	r6, fp
 8008822:	f67f aebf 	bls.w	80085a4 <_scanf_float+0x80>
 8008826:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800882a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800882e:	463a      	mov	r2, r7
 8008830:	4640      	mov	r0, r8
 8008832:	4798      	blx	r3
 8008834:	6923      	ldr	r3, [r4, #16]
 8008836:	3b01      	subs	r3, #1
 8008838:	6123      	str	r3, [r4, #16]
 800883a:	e7f1      	b.n	8008820 <_scanf_float+0x2fc>
 800883c:	46aa      	mov	sl, r5
 800883e:	9602      	str	r6, [sp, #8]
 8008840:	e7df      	b.n	8008802 <_scanf_float+0x2de>
 8008842:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008846:	6923      	ldr	r3, [r4, #16]
 8008848:	2965      	cmp	r1, #101	; 0x65
 800884a:	f103 33ff 	add.w	r3, r3, #4294967295
 800884e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008852:	6123      	str	r3, [r4, #16]
 8008854:	d00c      	beq.n	8008870 <_scanf_float+0x34c>
 8008856:	2945      	cmp	r1, #69	; 0x45
 8008858:	d00a      	beq.n	8008870 <_scanf_float+0x34c>
 800885a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800885e:	463a      	mov	r2, r7
 8008860:	4640      	mov	r0, r8
 8008862:	4798      	blx	r3
 8008864:	6923      	ldr	r3, [r4, #16]
 8008866:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800886a:	3b01      	subs	r3, #1
 800886c:	1eb5      	subs	r5, r6, #2
 800886e:	6123      	str	r3, [r4, #16]
 8008870:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008874:	463a      	mov	r2, r7
 8008876:	4640      	mov	r0, r8
 8008878:	4798      	blx	r3
 800887a:	462e      	mov	r6, r5
 800887c:	6825      	ldr	r5, [r4, #0]
 800887e:	f015 0510 	ands.w	r5, r5, #16
 8008882:	d14d      	bne.n	8008920 <_scanf_float+0x3fc>
 8008884:	7035      	strb	r5, [r6, #0]
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800888c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008890:	d11a      	bne.n	80088c8 <_scanf_float+0x3a4>
 8008892:	9b01      	ldr	r3, [sp, #4]
 8008894:	454b      	cmp	r3, r9
 8008896:	eba3 0209 	sub.w	r2, r3, r9
 800889a:	d122      	bne.n	80088e2 <_scanf_float+0x3be>
 800889c:	2200      	movs	r2, #0
 800889e:	4659      	mov	r1, fp
 80088a0:	4640      	mov	r0, r8
 80088a2:	f000 feef 	bl	8009684 <_strtod_r>
 80088a6:	9b03      	ldr	r3, [sp, #12]
 80088a8:	6821      	ldr	r1, [r4, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f011 0f02 	tst.w	r1, #2
 80088b0:	f103 0204 	add.w	r2, r3, #4
 80088b4:	d020      	beq.n	80088f8 <_scanf_float+0x3d4>
 80088b6:	9903      	ldr	r1, [sp, #12]
 80088b8:	600a      	str	r2, [r1, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	ed83 0b00 	vstr	d0, [r3]
 80088c0:	68e3      	ldr	r3, [r4, #12]
 80088c2:	3301      	adds	r3, #1
 80088c4:	60e3      	str	r3, [r4, #12]
 80088c6:	e66e      	b.n	80085a6 <_scanf_float+0x82>
 80088c8:	9b04      	ldr	r3, [sp, #16]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d0e6      	beq.n	800889c <_scanf_float+0x378>
 80088ce:	9905      	ldr	r1, [sp, #20]
 80088d0:	230a      	movs	r3, #10
 80088d2:	462a      	mov	r2, r5
 80088d4:	3101      	adds	r1, #1
 80088d6:	4640      	mov	r0, r8
 80088d8:	f000 ff5e 	bl	8009798 <_strtol_r>
 80088dc:	9b04      	ldr	r3, [sp, #16]
 80088de:	9e05      	ldr	r6, [sp, #20]
 80088e0:	1ac2      	subs	r2, r0, r3
 80088e2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80088e6:	429e      	cmp	r6, r3
 80088e8:	bf28      	it	cs
 80088ea:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80088ee:	490d      	ldr	r1, [pc, #52]	; (8008924 <_scanf_float+0x400>)
 80088f0:	4630      	mov	r0, r6
 80088f2:	f000 f821 	bl	8008938 <siprintf>
 80088f6:	e7d1      	b.n	800889c <_scanf_float+0x378>
 80088f8:	f011 0f04 	tst.w	r1, #4
 80088fc:	9903      	ldr	r1, [sp, #12]
 80088fe:	600a      	str	r2, [r1, #0]
 8008900:	d1db      	bne.n	80088ba <_scanf_float+0x396>
 8008902:	eeb4 0b40 	vcmp.f64	d0, d0
 8008906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800890a:	681e      	ldr	r6, [r3, #0]
 800890c:	d705      	bvc.n	800891a <_scanf_float+0x3f6>
 800890e:	4806      	ldr	r0, [pc, #24]	; (8008928 <_scanf_float+0x404>)
 8008910:	f000 f80c 	bl	800892c <nanf>
 8008914:	ed86 0a00 	vstr	s0, [r6]
 8008918:	e7d2      	b.n	80088c0 <_scanf_float+0x39c>
 800891a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800891e:	e7f9      	b.n	8008914 <_scanf_float+0x3f0>
 8008920:	2500      	movs	r5, #0
 8008922:	e640      	b.n	80085a6 <_scanf_float+0x82>
 8008924:	0800cdfa 	.word	0x0800cdfa
 8008928:	0800d22b 	.word	0x0800d22b

0800892c <nanf>:
 800892c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008934 <nanf+0x8>
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	7fc00000 	.word	0x7fc00000

08008938 <siprintf>:
 8008938:	b40e      	push	{r1, r2, r3}
 800893a:	b500      	push	{lr}
 800893c:	b09c      	sub	sp, #112	; 0x70
 800893e:	ab1d      	add	r3, sp, #116	; 0x74
 8008940:	9002      	str	r0, [sp, #8]
 8008942:	9006      	str	r0, [sp, #24]
 8008944:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008948:	4809      	ldr	r0, [pc, #36]	; (8008970 <siprintf+0x38>)
 800894a:	9107      	str	r1, [sp, #28]
 800894c:	9104      	str	r1, [sp, #16]
 800894e:	4909      	ldr	r1, [pc, #36]	; (8008974 <siprintf+0x3c>)
 8008950:	f853 2b04 	ldr.w	r2, [r3], #4
 8008954:	9105      	str	r1, [sp, #20]
 8008956:	6800      	ldr	r0, [r0, #0]
 8008958:	9301      	str	r3, [sp, #4]
 800895a:	a902      	add	r1, sp, #8
 800895c:	f002 fece 	bl	800b6fc <_svfiprintf_r>
 8008960:	9b02      	ldr	r3, [sp, #8]
 8008962:	2200      	movs	r2, #0
 8008964:	701a      	strb	r2, [r3, #0]
 8008966:	b01c      	add	sp, #112	; 0x70
 8008968:	f85d eb04 	ldr.w	lr, [sp], #4
 800896c:	b003      	add	sp, #12
 800896e:	4770      	bx	lr
 8008970:	20000034 	.word	0x20000034
 8008974:	ffff0208 	.word	0xffff0208

08008978 <siscanf>:
 8008978:	b40e      	push	{r1, r2, r3}
 800897a:	b510      	push	{r4, lr}
 800897c:	b09f      	sub	sp, #124	; 0x7c
 800897e:	ac21      	add	r4, sp, #132	; 0x84
 8008980:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008984:	f854 2b04 	ldr.w	r2, [r4], #4
 8008988:	9201      	str	r2, [sp, #4]
 800898a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800898e:	9004      	str	r0, [sp, #16]
 8008990:	9008      	str	r0, [sp, #32]
 8008992:	f7f7 fc5f 	bl	8000254 <strlen>
 8008996:	4b0c      	ldr	r3, [pc, #48]	; (80089c8 <siscanf+0x50>)
 8008998:	9005      	str	r0, [sp, #20]
 800899a:	9009      	str	r0, [sp, #36]	; 0x24
 800899c:	930d      	str	r3, [sp, #52]	; 0x34
 800899e:	480b      	ldr	r0, [pc, #44]	; (80089cc <siscanf+0x54>)
 80089a0:	9a01      	ldr	r2, [sp, #4]
 80089a2:	6800      	ldr	r0, [r0, #0]
 80089a4:	9403      	str	r4, [sp, #12]
 80089a6:	2300      	movs	r3, #0
 80089a8:	9311      	str	r3, [sp, #68]	; 0x44
 80089aa:	9316      	str	r3, [sp, #88]	; 0x58
 80089ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80089b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80089b4:	a904      	add	r1, sp, #16
 80089b6:	4623      	mov	r3, r4
 80089b8:	f002 fffa 	bl	800b9b0 <__ssvfiscanf_r>
 80089bc:	b01f      	add	sp, #124	; 0x7c
 80089be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089c2:	b003      	add	sp, #12
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	080089f3 	.word	0x080089f3
 80089cc:	20000034 	.word	0x20000034

080089d0 <__sread>:
 80089d0:	b510      	push	{r4, lr}
 80089d2:	460c      	mov	r4, r1
 80089d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d8:	f003 faae 	bl	800bf38 <_read_r>
 80089dc:	2800      	cmp	r0, #0
 80089de:	bfab      	itete	ge
 80089e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089e2:	89a3      	ldrhlt	r3, [r4, #12]
 80089e4:	181b      	addge	r3, r3, r0
 80089e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089ea:	bfac      	ite	ge
 80089ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80089ee:	81a3      	strhlt	r3, [r4, #12]
 80089f0:	bd10      	pop	{r4, pc}

080089f2 <__seofread>:
 80089f2:	2000      	movs	r0, #0
 80089f4:	4770      	bx	lr

080089f6 <__swrite>:
 80089f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089fa:	461f      	mov	r7, r3
 80089fc:	898b      	ldrh	r3, [r1, #12]
 80089fe:	05db      	lsls	r3, r3, #23
 8008a00:	4605      	mov	r5, r0
 8008a02:	460c      	mov	r4, r1
 8008a04:	4616      	mov	r6, r2
 8008a06:	d505      	bpl.n	8008a14 <__swrite+0x1e>
 8008a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f002 f868 	bl	800aae4 <_lseek_r>
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a1e:	81a3      	strh	r3, [r4, #12]
 8008a20:	4632      	mov	r2, r6
 8008a22:	463b      	mov	r3, r7
 8008a24:	4628      	mov	r0, r5
 8008a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a2a:	f000 beb7 	b.w	800979c <_write_r>

08008a2e <__sseek>:
 8008a2e:	b510      	push	{r4, lr}
 8008a30:	460c      	mov	r4, r1
 8008a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a36:	f002 f855 	bl	800aae4 <_lseek_r>
 8008a3a:	1c43      	adds	r3, r0, #1
 8008a3c:	89a3      	ldrh	r3, [r4, #12]
 8008a3e:	bf15      	itete	ne
 8008a40:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a4a:	81a3      	strheq	r3, [r4, #12]
 8008a4c:	bf18      	it	ne
 8008a4e:	81a3      	strhne	r3, [r4, #12]
 8008a50:	bd10      	pop	{r4, pc}

08008a52 <__sclose>:
 8008a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a56:	f000 beb3 	b.w	80097c0 <_close_r>

08008a5a <strncmp>:
 8008a5a:	b510      	push	{r4, lr}
 8008a5c:	b16a      	cbz	r2, 8008a7a <strncmp+0x20>
 8008a5e:	3901      	subs	r1, #1
 8008a60:	1884      	adds	r4, r0, r2
 8008a62:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008a66:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d103      	bne.n	8008a76 <strncmp+0x1c>
 8008a6e:	42a0      	cmp	r0, r4
 8008a70:	d001      	beq.n	8008a76 <strncmp+0x1c>
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1f5      	bne.n	8008a62 <strncmp+0x8>
 8008a76:	1a98      	subs	r0, r3, r2
 8008a78:	bd10      	pop	{r4, pc}
 8008a7a:	4610      	mov	r0, r2
 8008a7c:	e7fc      	b.n	8008a78 <strncmp+0x1e>

08008a7e <strncpy>:
 8008a7e:	b510      	push	{r4, lr}
 8008a80:	3901      	subs	r1, #1
 8008a82:	4603      	mov	r3, r0
 8008a84:	b132      	cbz	r2, 8008a94 <strncpy+0x16>
 8008a86:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008a8a:	f803 4b01 	strb.w	r4, [r3], #1
 8008a8e:	3a01      	subs	r2, #1
 8008a90:	2c00      	cmp	r4, #0
 8008a92:	d1f7      	bne.n	8008a84 <strncpy+0x6>
 8008a94:	441a      	add	r2, r3
 8008a96:	2100      	movs	r1, #0
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d100      	bne.n	8008a9e <strncpy+0x20>
 8008a9c:	bd10      	pop	{r4, pc}
 8008a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8008aa2:	e7f9      	b.n	8008a98 <strncpy+0x1a>

08008aa4 <sulp>:
 8008aa4:	b570      	push	{r4, r5, r6, lr}
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	460d      	mov	r5, r1
 8008aaa:	4616      	mov	r6, r2
 8008aac:	ec45 4b10 	vmov	d0, r4, r5
 8008ab0:	f002 fbbe 	bl	800b230 <__ulp>
 8008ab4:	b17e      	cbz	r6, 8008ad6 <sulp+0x32>
 8008ab6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008aba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	dd09      	ble.n	8008ad6 <sulp+0x32>
 8008ac2:	051b      	lsls	r3, r3, #20
 8008ac4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008ac8:	2000      	movs	r0, #0
 8008aca:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8008ace:	ec41 0b17 	vmov	d7, r0, r1
 8008ad2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008ad6:	bd70      	pop	{r4, r5, r6, pc}

08008ad8 <_strtod_l>:
 8008ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008adc:	ed2d 8b0c 	vpush	{d8-d13}
 8008ae0:	b09d      	sub	sp, #116	; 0x74
 8008ae2:	461f      	mov	r7, r3
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	9318      	str	r3, [sp, #96]	; 0x60
 8008ae8:	4ba6      	ldr	r3, [pc, #664]	; (8008d84 <_strtod_l+0x2ac>)
 8008aea:	9213      	str	r2, [sp, #76]	; 0x4c
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	9308      	str	r3, [sp, #32]
 8008af0:	4604      	mov	r4, r0
 8008af2:	4618      	mov	r0, r3
 8008af4:	468a      	mov	sl, r1
 8008af6:	f7f7 fbad 	bl	8000254 <strlen>
 8008afa:	f04f 0800 	mov.w	r8, #0
 8008afe:	4605      	mov	r5, r0
 8008b00:	f04f 0900 	mov.w	r9, #0
 8008b04:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8008b08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b0a:	781a      	ldrb	r2, [r3, #0]
 8008b0c:	2a2b      	cmp	r2, #43	; 0x2b
 8008b0e:	d04d      	beq.n	8008bac <_strtod_l+0xd4>
 8008b10:	d83a      	bhi.n	8008b88 <_strtod_l+0xb0>
 8008b12:	2a0d      	cmp	r2, #13
 8008b14:	d833      	bhi.n	8008b7e <_strtod_l+0xa6>
 8008b16:	2a08      	cmp	r2, #8
 8008b18:	d833      	bhi.n	8008b82 <_strtod_l+0xaa>
 8008b1a:	2a00      	cmp	r2, #0
 8008b1c:	d03d      	beq.n	8008b9a <_strtod_l+0xc2>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b22:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008b24:	7833      	ldrb	r3, [r6, #0]
 8008b26:	2b30      	cmp	r3, #48	; 0x30
 8008b28:	f040 80b6 	bne.w	8008c98 <_strtod_l+0x1c0>
 8008b2c:	7873      	ldrb	r3, [r6, #1]
 8008b2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b32:	2b58      	cmp	r3, #88	; 0x58
 8008b34:	d16d      	bne.n	8008c12 <_strtod_l+0x13a>
 8008b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b38:	9301      	str	r3, [sp, #4]
 8008b3a:	ab18      	add	r3, sp, #96	; 0x60
 8008b3c:	9702      	str	r7, [sp, #8]
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	4a91      	ldr	r2, [pc, #580]	; (8008d88 <_strtod_l+0x2b0>)
 8008b42:	ab19      	add	r3, sp, #100	; 0x64
 8008b44:	a917      	add	r1, sp, #92	; 0x5c
 8008b46:	4620      	mov	r0, r4
 8008b48:	f001 fcc0 	bl	800a4cc <__gethex>
 8008b4c:	f010 0507 	ands.w	r5, r0, #7
 8008b50:	4607      	mov	r7, r0
 8008b52:	d005      	beq.n	8008b60 <_strtod_l+0x88>
 8008b54:	2d06      	cmp	r5, #6
 8008b56:	d12b      	bne.n	8008bb0 <_strtod_l+0xd8>
 8008b58:	3601      	adds	r6, #1
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	9617      	str	r6, [sp, #92]	; 0x5c
 8008b5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f040 856e 	bne.w	8009644 <_strtod_l+0xb6c>
 8008b68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b6a:	b1e3      	cbz	r3, 8008ba6 <_strtod_l+0xce>
 8008b6c:	ec49 8b17 	vmov	d7, r8, r9
 8008b70:	eeb1 0b47 	vneg.f64	d0, d7
 8008b74:	b01d      	add	sp, #116	; 0x74
 8008b76:	ecbd 8b0c 	vpop	{d8-d13}
 8008b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7e:	2a20      	cmp	r2, #32
 8008b80:	d1cd      	bne.n	8008b1e <_strtod_l+0x46>
 8008b82:	3301      	adds	r3, #1
 8008b84:	9317      	str	r3, [sp, #92]	; 0x5c
 8008b86:	e7bf      	b.n	8008b08 <_strtod_l+0x30>
 8008b88:	2a2d      	cmp	r2, #45	; 0x2d
 8008b8a:	d1c8      	bne.n	8008b1e <_strtod_l+0x46>
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008b90:	1c5a      	adds	r2, r3, #1
 8008b92:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b94:	785b      	ldrb	r3, [r3, #1]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1c3      	bne.n	8008b22 <_strtod_l+0x4a>
 8008b9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b9c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f040 854d 	bne.w	8009640 <_strtod_l+0xb68>
 8008ba6:	ec49 8b10 	vmov	d0, r8, r9
 8008baa:	e7e3      	b.n	8008b74 <_strtod_l+0x9c>
 8008bac:	2200      	movs	r2, #0
 8008bae:	e7ee      	b.n	8008b8e <_strtod_l+0xb6>
 8008bb0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008bb2:	b13a      	cbz	r2, 8008bc4 <_strtod_l+0xec>
 8008bb4:	2135      	movs	r1, #53	; 0x35
 8008bb6:	a81a      	add	r0, sp, #104	; 0x68
 8008bb8:	f002 fc46 	bl	800b448 <__copybits>
 8008bbc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f002 f80a 	bl	800abd8 <_Bfree>
 8008bc4:	3d01      	subs	r5, #1
 8008bc6:	2d05      	cmp	r5, #5
 8008bc8:	d807      	bhi.n	8008bda <_strtod_l+0x102>
 8008bca:	e8df f005 	tbb	[pc, r5]
 8008bce:	0b0e      	.short	0x0b0e
 8008bd0:	030e1d18 	.word	0x030e1d18
 8008bd4:	f04f 0900 	mov.w	r9, #0
 8008bd8:	46c8      	mov	r8, r9
 8008bda:	073b      	lsls	r3, r7, #28
 8008bdc:	d5c0      	bpl.n	8008b60 <_strtod_l+0x88>
 8008bde:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008be2:	e7bd      	b.n	8008b60 <_strtod_l+0x88>
 8008be4:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8008be8:	e7f7      	b.n	8008bda <_strtod_l+0x102>
 8008bea:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8008bee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008bf0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008bf4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008bf8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008bfc:	e7ed      	b.n	8008bda <_strtod_l+0x102>
 8008bfe:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8008d8c <_strtod_l+0x2b4>
 8008c02:	f04f 0800 	mov.w	r8, #0
 8008c06:	e7e8      	b.n	8008bda <_strtod_l+0x102>
 8008c08:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008c0c:	f04f 38ff 	mov.w	r8, #4294967295
 8008c10:	e7e3      	b.n	8008bda <_strtod_l+0x102>
 8008c12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c14:	1c5a      	adds	r2, r3, #1
 8008c16:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c18:	785b      	ldrb	r3, [r3, #1]
 8008c1a:	2b30      	cmp	r3, #48	; 0x30
 8008c1c:	d0f9      	beq.n	8008c12 <_strtod_l+0x13a>
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d09e      	beq.n	8008b60 <_strtod_l+0x88>
 8008c22:	2301      	movs	r3, #1
 8008c24:	9306      	str	r3, [sp, #24]
 8008c26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c28:	930c      	str	r3, [sp, #48]	; 0x30
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	9304      	str	r3, [sp, #16]
 8008c2e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c30:	461e      	mov	r6, r3
 8008c32:	220a      	movs	r2, #10
 8008c34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008c36:	f890 b000 	ldrb.w	fp, [r0]
 8008c3a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8008c3e:	b2d9      	uxtb	r1, r3
 8008c40:	2909      	cmp	r1, #9
 8008c42:	d92b      	bls.n	8008c9c <_strtod_l+0x1c4>
 8008c44:	9908      	ldr	r1, [sp, #32]
 8008c46:	462a      	mov	r2, r5
 8008c48:	f7ff ff07 	bl	8008a5a <strncmp>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	d035      	beq.n	8008cbc <_strtod_l+0x1e4>
 8008c50:	2000      	movs	r0, #0
 8008c52:	465a      	mov	r2, fp
 8008c54:	4633      	mov	r3, r6
 8008c56:	4683      	mov	fp, r0
 8008c58:	4601      	mov	r1, r0
 8008c5a:	2a65      	cmp	r2, #101	; 0x65
 8008c5c:	d001      	beq.n	8008c62 <_strtod_l+0x18a>
 8008c5e:	2a45      	cmp	r2, #69	; 0x45
 8008c60:	d118      	bne.n	8008c94 <_strtod_l+0x1bc>
 8008c62:	b91b      	cbnz	r3, 8008c6c <_strtod_l+0x194>
 8008c64:	9b06      	ldr	r3, [sp, #24]
 8008c66:	4303      	orrs	r3, r0
 8008c68:	d097      	beq.n	8008b9a <_strtod_l+0xc2>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8008c70:	f10a 0201 	add.w	r2, sl, #1
 8008c74:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c76:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8008c7a:	2a2b      	cmp	r2, #43	; 0x2b
 8008c7c:	d077      	beq.n	8008d6e <_strtod_l+0x296>
 8008c7e:	2a2d      	cmp	r2, #45	; 0x2d
 8008c80:	d07d      	beq.n	8008d7e <_strtod_l+0x2a6>
 8008c82:	f04f 0e00 	mov.w	lr, #0
 8008c86:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008c8a:	2d09      	cmp	r5, #9
 8008c8c:	f240 8084 	bls.w	8008d98 <_strtod_l+0x2c0>
 8008c90:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8008c94:	2500      	movs	r5, #0
 8008c96:	e09f      	b.n	8008dd8 <_strtod_l+0x300>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	e7c3      	b.n	8008c24 <_strtod_l+0x14c>
 8008c9c:	2e08      	cmp	r6, #8
 8008c9e:	bfd5      	itete	le
 8008ca0:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8008ca2:	9904      	ldrgt	r1, [sp, #16]
 8008ca4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ca8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008cac:	f100 0001 	add.w	r0, r0, #1
 8008cb0:	bfd4      	ite	le
 8008cb2:	930a      	strle	r3, [sp, #40]	; 0x28
 8008cb4:	9304      	strgt	r3, [sp, #16]
 8008cb6:	3601      	adds	r6, #1
 8008cb8:	9017      	str	r0, [sp, #92]	; 0x5c
 8008cba:	e7bb      	b.n	8008c34 <_strtod_l+0x15c>
 8008cbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cbe:	195a      	adds	r2, r3, r5
 8008cc0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008cc2:	5d5a      	ldrb	r2, [r3, r5]
 8008cc4:	b3ae      	cbz	r6, 8008d32 <_strtod_l+0x25a>
 8008cc6:	4683      	mov	fp, r0
 8008cc8:	4633      	mov	r3, r6
 8008cca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008cce:	2909      	cmp	r1, #9
 8008cd0:	d912      	bls.n	8008cf8 <_strtod_l+0x220>
 8008cd2:	2101      	movs	r1, #1
 8008cd4:	e7c1      	b.n	8008c5a <_strtod_l+0x182>
 8008cd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cd8:	1c5a      	adds	r2, r3, #1
 8008cda:	9217      	str	r2, [sp, #92]	; 0x5c
 8008cdc:	785a      	ldrb	r2, [r3, #1]
 8008cde:	3001      	adds	r0, #1
 8008ce0:	2a30      	cmp	r2, #48	; 0x30
 8008ce2:	d0f8      	beq.n	8008cd6 <_strtod_l+0x1fe>
 8008ce4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008ce8:	2b08      	cmp	r3, #8
 8008cea:	f200 84b0 	bhi.w	800964e <_strtod_l+0xb76>
 8008cee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cf0:	930c      	str	r3, [sp, #48]	; 0x30
 8008cf2:	4683      	mov	fp, r0
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	3a30      	subs	r2, #48	; 0x30
 8008cfa:	f100 0101 	add.w	r1, r0, #1
 8008cfe:	d012      	beq.n	8008d26 <_strtod_l+0x24e>
 8008d00:	448b      	add	fp, r1
 8008d02:	eb00 0c03 	add.w	ip, r0, r3
 8008d06:	4619      	mov	r1, r3
 8008d08:	250a      	movs	r5, #10
 8008d0a:	4561      	cmp	r1, ip
 8008d0c:	d113      	bne.n	8008d36 <_strtod_l+0x25e>
 8008d0e:	1819      	adds	r1, r3, r0
 8008d10:	2908      	cmp	r1, #8
 8008d12:	f103 0301 	add.w	r3, r3, #1
 8008d16:	4403      	add	r3, r0
 8008d18:	dc1d      	bgt.n	8008d56 <_strtod_l+0x27e>
 8008d1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008d1c:	210a      	movs	r1, #10
 8008d1e:	fb01 2200 	mla	r2, r1, r0, r2
 8008d22:	920a      	str	r2, [sp, #40]	; 0x28
 8008d24:	2100      	movs	r1, #0
 8008d26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d28:	1c50      	adds	r0, r2, #1
 8008d2a:	9017      	str	r0, [sp, #92]	; 0x5c
 8008d2c:	7852      	ldrb	r2, [r2, #1]
 8008d2e:	4608      	mov	r0, r1
 8008d30:	e7cb      	b.n	8008cca <_strtod_l+0x1f2>
 8008d32:	4630      	mov	r0, r6
 8008d34:	e7d4      	b.n	8008ce0 <_strtod_l+0x208>
 8008d36:	2908      	cmp	r1, #8
 8008d38:	dc04      	bgt.n	8008d44 <_strtod_l+0x26c>
 8008d3a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008d3c:	436f      	muls	r7, r5
 8008d3e:	970a      	str	r7, [sp, #40]	; 0x28
 8008d40:	3101      	adds	r1, #1
 8008d42:	e7e2      	b.n	8008d0a <_strtod_l+0x232>
 8008d44:	f101 0e01 	add.w	lr, r1, #1
 8008d48:	f1be 0f10 	cmp.w	lr, #16
 8008d4c:	bfde      	ittt	le
 8008d4e:	9f04      	ldrle	r7, [sp, #16]
 8008d50:	436f      	mulle	r7, r5
 8008d52:	9704      	strle	r7, [sp, #16]
 8008d54:	e7f4      	b.n	8008d40 <_strtod_l+0x268>
 8008d56:	2b10      	cmp	r3, #16
 8008d58:	bfdf      	itttt	le
 8008d5a:	9804      	ldrle	r0, [sp, #16]
 8008d5c:	210a      	movle	r1, #10
 8008d5e:	fb01 2200 	mlale	r2, r1, r0, r2
 8008d62:	9204      	strle	r2, [sp, #16]
 8008d64:	e7de      	b.n	8008d24 <_strtod_l+0x24c>
 8008d66:	f04f 0b00 	mov.w	fp, #0
 8008d6a:	2101      	movs	r1, #1
 8008d6c:	e77a      	b.n	8008c64 <_strtod_l+0x18c>
 8008d6e:	f04f 0e00 	mov.w	lr, #0
 8008d72:	f10a 0202 	add.w	r2, sl, #2
 8008d76:	9217      	str	r2, [sp, #92]	; 0x5c
 8008d78:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8008d7c:	e783      	b.n	8008c86 <_strtod_l+0x1ae>
 8008d7e:	f04f 0e01 	mov.w	lr, #1
 8008d82:	e7f6      	b.n	8008d72 <_strtod_l+0x29a>
 8008d84:	0800d050 	.word	0x0800d050
 8008d88:	0800ce00 	.word	0x0800ce00
 8008d8c:	7ff00000 	.word	0x7ff00000
 8008d90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d92:	1c55      	adds	r5, r2, #1
 8008d94:	9517      	str	r5, [sp, #92]	; 0x5c
 8008d96:	7852      	ldrb	r2, [r2, #1]
 8008d98:	2a30      	cmp	r2, #48	; 0x30
 8008d9a:	d0f9      	beq.n	8008d90 <_strtod_l+0x2b8>
 8008d9c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8008da0:	2d08      	cmp	r5, #8
 8008da2:	f63f af77 	bhi.w	8008c94 <_strtod_l+0x1bc>
 8008da6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008daa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008dac:	9208      	str	r2, [sp, #32]
 8008dae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008db0:	1c55      	adds	r5, r2, #1
 8008db2:	9517      	str	r5, [sp, #92]	; 0x5c
 8008db4:	7852      	ldrb	r2, [r2, #1]
 8008db6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8008dba:	2f09      	cmp	r7, #9
 8008dbc:	d937      	bls.n	8008e2e <_strtod_l+0x356>
 8008dbe:	9f08      	ldr	r7, [sp, #32]
 8008dc0:	1bed      	subs	r5, r5, r7
 8008dc2:	2d08      	cmp	r5, #8
 8008dc4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008dc8:	dc02      	bgt.n	8008dd0 <_strtod_l+0x2f8>
 8008dca:	4565      	cmp	r5, ip
 8008dcc:	bfa8      	it	ge
 8008dce:	4665      	movge	r5, ip
 8008dd0:	f1be 0f00 	cmp.w	lr, #0
 8008dd4:	d000      	beq.n	8008dd8 <_strtod_l+0x300>
 8008dd6:	426d      	negs	r5, r5
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d14f      	bne.n	8008e7c <_strtod_l+0x3a4>
 8008ddc:	9b06      	ldr	r3, [sp, #24]
 8008dde:	4303      	orrs	r3, r0
 8008de0:	f47f aebe 	bne.w	8008b60 <_strtod_l+0x88>
 8008de4:	2900      	cmp	r1, #0
 8008de6:	f47f aed8 	bne.w	8008b9a <_strtod_l+0xc2>
 8008dea:	2a69      	cmp	r2, #105	; 0x69
 8008dec:	d027      	beq.n	8008e3e <_strtod_l+0x366>
 8008dee:	dc24      	bgt.n	8008e3a <_strtod_l+0x362>
 8008df0:	2a49      	cmp	r2, #73	; 0x49
 8008df2:	d024      	beq.n	8008e3e <_strtod_l+0x366>
 8008df4:	2a4e      	cmp	r2, #78	; 0x4e
 8008df6:	f47f aed0 	bne.w	8008b9a <_strtod_l+0xc2>
 8008dfa:	499b      	ldr	r1, [pc, #620]	; (8009068 <_strtod_l+0x590>)
 8008dfc:	a817      	add	r0, sp, #92	; 0x5c
 8008dfe:	f001 fdbd 	bl	800a97c <__match>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	f43f aec9 	beq.w	8008b9a <_strtod_l+0xc2>
 8008e08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	2b28      	cmp	r3, #40	; 0x28
 8008e0e:	d12d      	bne.n	8008e6c <_strtod_l+0x394>
 8008e10:	4996      	ldr	r1, [pc, #600]	; (800906c <_strtod_l+0x594>)
 8008e12:	aa1a      	add	r2, sp, #104	; 0x68
 8008e14:	a817      	add	r0, sp, #92	; 0x5c
 8008e16:	f001 fdc5 	bl	800a9a4 <__hexnan>
 8008e1a:	2805      	cmp	r0, #5
 8008e1c:	d126      	bne.n	8008e6c <_strtod_l+0x394>
 8008e1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e20:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008e24:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008e28:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008e2c:	e698      	b.n	8008b60 <_strtod_l+0x88>
 8008e2e:	250a      	movs	r5, #10
 8008e30:	fb05 250c 	mla	r5, r5, ip, r2
 8008e34:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8008e38:	e7b9      	b.n	8008dae <_strtod_l+0x2d6>
 8008e3a:	2a6e      	cmp	r2, #110	; 0x6e
 8008e3c:	e7db      	b.n	8008df6 <_strtod_l+0x31e>
 8008e3e:	498c      	ldr	r1, [pc, #560]	; (8009070 <_strtod_l+0x598>)
 8008e40:	a817      	add	r0, sp, #92	; 0x5c
 8008e42:	f001 fd9b 	bl	800a97c <__match>
 8008e46:	2800      	cmp	r0, #0
 8008e48:	f43f aea7 	beq.w	8008b9a <_strtod_l+0xc2>
 8008e4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e4e:	4989      	ldr	r1, [pc, #548]	; (8009074 <_strtod_l+0x59c>)
 8008e50:	3b01      	subs	r3, #1
 8008e52:	a817      	add	r0, sp, #92	; 0x5c
 8008e54:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e56:	f001 fd91 	bl	800a97c <__match>
 8008e5a:	b910      	cbnz	r0, 8008e62 <_strtod_l+0x38a>
 8008e5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e5e:	3301      	adds	r3, #1
 8008e60:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e62:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8009088 <_strtod_l+0x5b0>
 8008e66:	f04f 0800 	mov.w	r8, #0
 8008e6a:	e679      	b.n	8008b60 <_strtod_l+0x88>
 8008e6c:	4882      	ldr	r0, [pc, #520]	; (8009078 <_strtod_l+0x5a0>)
 8008e6e:	f003 f877 	bl	800bf60 <nan>
 8008e72:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008e76:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008e7a:	e671      	b.n	8008b60 <_strtod_l+0x88>
 8008e7c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8008e80:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008e84:	eba5 020b 	sub.w	r2, r5, fp
 8008e88:	2e00      	cmp	r6, #0
 8008e8a:	bf08      	it	eq
 8008e8c:	461e      	moveq	r6, r3
 8008e8e:	2b10      	cmp	r3, #16
 8008e90:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008e94:	9206      	str	r2, [sp, #24]
 8008e96:	461a      	mov	r2, r3
 8008e98:	bfa8      	it	ge
 8008e9a:	2210      	movge	r2, #16
 8008e9c:	2b09      	cmp	r3, #9
 8008e9e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8008ea2:	dd0e      	ble.n	8008ec2 <_strtod_l+0x3ea>
 8008ea4:	4975      	ldr	r1, [pc, #468]	; (800907c <_strtod_l+0x5a4>)
 8008ea6:	eddd 7a04 	vldr	s15, [sp, #16]
 8008eaa:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008eae:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8008eb2:	ed9d 5b08 	vldr	d5, [sp, #32]
 8008eb6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008eba:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008ebe:	ec59 8b17 	vmov	r8, r9, d7
 8008ec2:	2b0f      	cmp	r3, #15
 8008ec4:	dc37      	bgt.n	8008f36 <_strtod_l+0x45e>
 8008ec6:	9906      	ldr	r1, [sp, #24]
 8008ec8:	2900      	cmp	r1, #0
 8008eca:	f43f ae49 	beq.w	8008b60 <_strtod_l+0x88>
 8008ece:	dd23      	ble.n	8008f18 <_strtod_l+0x440>
 8008ed0:	2916      	cmp	r1, #22
 8008ed2:	dc0b      	bgt.n	8008eec <_strtod_l+0x414>
 8008ed4:	4b69      	ldr	r3, [pc, #420]	; (800907c <_strtod_l+0x5a4>)
 8008ed6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008eda:	ed93 7b00 	vldr	d7, [r3]
 8008ede:	ec49 8b16 	vmov	d6, r8, r9
 8008ee2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ee6:	ec59 8b17 	vmov	r8, r9, d7
 8008eea:	e639      	b.n	8008b60 <_strtod_l+0x88>
 8008eec:	9806      	ldr	r0, [sp, #24]
 8008eee:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8008ef2:	4281      	cmp	r1, r0
 8008ef4:	db1f      	blt.n	8008f36 <_strtod_l+0x45e>
 8008ef6:	4a61      	ldr	r2, [pc, #388]	; (800907c <_strtod_l+0x5a4>)
 8008ef8:	f1c3 030f 	rsb	r3, r3, #15
 8008efc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008f00:	ed91 7b00 	vldr	d7, [r1]
 8008f04:	ec49 8b16 	vmov	d6, r8, r9
 8008f08:	1ac3      	subs	r3, r0, r3
 8008f0a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008f0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f12:	ed92 6b00 	vldr	d6, [r2]
 8008f16:	e7e4      	b.n	8008ee2 <_strtod_l+0x40a>
 8008f18:	9906      	ldr	r1, [sp, #24]
 8008f1a:	3116      	adds	r1, #22
 8008f1c:	db0b      	blt.n	8008f36 <_strtod_l+0x45e>
 8008f1e:	4b57      	ldr	r3, [pc, #348]	; (800907c <_strtod_l+0x5a4>)
 8008f20:	ebab 0505 	sub.w	r5, fp, r5
 8008f24:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008f28:	ed95 7b00 	vldr	d7, [r5]
 8008f2c:	ec49 8b16 	vmov	d6, r8, r9
 8008f30:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008f34:	e7d7      	b.n	8008ee6 <_strtod_l+0x40e>
 8008f36:	9906      	ldr	r1, [sp, #24]
 8008f38:	1a9a      	subs	r2, r3, r2
 8008f3a:	440a      	add	r2, r1
 8008f3c:	2a00      	cmp	r2, #0
 8008f3e:	dd74      	ble.n	800902a <_strtod_l+0x552>
 8008f40:	f012 000f 	ands.w	r0, r2, #15
 8008f44:	d00a      	beq.n	8008f5c <_strtod_l+0x484>
 8008f46:	494d      	ldr	r1, [pc, #308]	; (800907c <_strtod_l+0x5a4>)
 8008f48:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008f4c:	ed91 7b00 	vldr	d7, [r1]
 8008f50:	ec49 8b16 	vmov	d6, r8, r9
 8008f54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f58:	ec59 8b17 	vmov	r8, r9, d7
 8008f5c:	f032 020f 	bics.w	r2, r2, #15
 8008f60:	d04f      	beq.n	8009002 <_strtod_l+0x52a>
 8008f62:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8008f66:	dd22      	ble.n	8008fae <_strtod_l+0x4d6>
 8008f68:	2500      	movs	r5, #0
 8008f6a:	462e      	mov	r6, r5
 8008f6c:	950a      	str	r5, [sp, #40]	; 0x28
 8008f6e:	462f      	mov	r7, r5
 8008f70:	2322      	movs	r3, #34	; 0x22
 8008f72:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8009088 <_strtod_l+0x5b0>
 8008f76:	6023      	str	r3, [r4, #0]
 8008f78:	f04f 0800 	mov.w	r8, #0
 8008f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f43f adee 	beq.w	8008b60 <_strtod_l+0x88>
 8008f84:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f86:	4620      	mov	r0, r4
 8008f88:	f001 fe26 	bl	800abd8 <_Bfree>
 8008f8c:	4639      	mov	r1, r7
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f001 fe22 	bl	800abd8 <_Bfree>
 8008f94:	4631      	mov	r1, r6
 8008f96:	4620      	mov	r0, r4
 8008f98:	f001 fe1e 	bl	800abd8 <_Bfree>
 8008f9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	f001 fe1a 	bl	800abd8 <_Bfree>
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f001 fe16 	bl	800abd8 <_Bfree>
 8008fac:	e5d8      	b.n	8008b60 <_strtod_l+0x88>
 8008fae:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	4f32      	ldr	r7, [pc, #200]	; (8009080 <_strtod_l+0x5a8>)
 8008fb6:	1112      	asrs	r2, r2, #4
 8008fb8:	4601      	mov	r1, r0
 8008fba:	2a01      	cmp	r2, #1
 8008fbc:	dc24      	bgt.n	8009008 <_strtod_l+0x530>
 8008fbe:	b108      	cbz	r0, 8008fc4 <_strtod_l+0x4ec>
 8008fc0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008fc4:	4a2e      	ldr	r2, [pc, #184]	; (8009080 <_strtod_l+0x5a8>)
 8008fc6:	482f      	ldr	r0, [pc, #188]	; (8009084 <_strtod_l+0x5ac>)
 8008fc8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8008fcc:	ed91 7b00 	vldr	d7, [r1]
 8008fd0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008fd4:	ec49 8b16 	vmov	d6, r8, r9
 8008fd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008fdc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008fe0:	9905      	ldr	r1, [sp, #20]
 8008fe2:	4a29      	ldr	r2, [pc, #164]	; (8009088 <_strtod_l+0x5b0>)
 8008fe4:	400a      	ands	r2, r1
 8008fe6:	4282      	cmp	r2, r0
 8008fe8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008fec:	d8bc      	bhi.n	8008f68 <_strtod_l+0x490>
 8008fee:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008ff2:	4282      	cmp	r2, r0
 8008ff4:	bf86      	itte	hi
 8008ff6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800908c <_strtod_l+0x5b4>
 8008ffa:	f04f 38ff 	movhi.w	r8, #4294967295
 8008ffe:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8009002:	2200      	movs	r2, #0
 8009004:	9204      	str	r2, [sp, #16]
 8009006:	e07f      	b.n	8009108 <_strtod_l+0x630>
 8009008:	f012 0f01 	tst.w	r2, #1
 800900c:	d00a      	beq.n	8009024 <_strtod_l+0x54c>
 800900e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8009012:	ed90 7b00 	vldr	d7, [r0]
 8009016:	ed9d 6b04 	vldr	d6, [sp, #16]
 800901a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800901e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009022:	2001      	movs	r0, #1
 8009024:	3101      	adds	r1, #1
 8009026:	1052      	asrs	r2, r2, #1
 8009028:	e7c7      	b.n	8008fba <_strtod_l+0x4e2>
 800902a:	d0ea      	beq.n	8009002 <_strtod_l+0x52a>
 800902c:	4252      	negs	r2, r2
 800902e:	f012 000f 	ands.w	r0, r2, #15
 8009032:	d00a      	beq.n	800904a <_strtod_l+0x572>
 8009034:	4911      	ldr	r1, [pc, #68]	; (800907c <_strtod_l+0x5a4>)
 8009036:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800903a:	ed91 7b00 	vldr	d7, [r1]
 800903e:	ec49 8b16 	vmov	d6, r8, r9
 8009042:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009046:	ec59 8b17 	vmov	r8, r9, d7
 800904a:	1112      	asrs	r2, r2, #4
 800904c:	d0d9      	beq.n	8009002 <_strtod_l+0x52a>
 800904e:	2a1f      	cmp	r2, #31
 8009050:	dd1e      	ble.n	8009090 <_strtod_l+0x5b8>
 8009052:	2500      	movs	r5, #0
 8009054:	462e      	mov	r6, r5
 8009056:	950a      	str	r5, [sp, #40]	; 0x28
 8009058:	462f      	mov	r7, r5
 800905a:	2322      	movs	r3, #34	; 0x22
 800905c:	f04f 0800 	mov.w	r8, #0
 8009060:	f04f 0900 	mov.w	r9, #0
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	e789      	b.n	8008f7c <_strtod_l+0x4a4>
 8009068:	0800cdd5 	.word	0x0800cdd5
 800906c:	0800ce14 	.word	0x0800ce14
 8009070:	0800cdcd 	.word	0x0800cdcd
 8009074:	0800cf54 	.word	0x0800cf54
 8009078:	0800d22b 	.word	0x0800d22b
 800907c:	0800d0f0 	.word	0x0800d0f0
 8009080:	0800d0c8 	.word	0x0800d0c8
 8009084:	7ca00000 	.word	0x7ca00000
 8009088:	7ff00000 	.word	0x7ff00000
 800908c:	7fefffff 	.word	0x7fefffff
 8009090:	f012 0110 	ands.w	r1, r2, #16
 8009094:	bf18      	it	ne
 8009096:	216a      	movne	r1, #106	; 0x6a
 8009098:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800909c:	9104      	str	r1, [sp, #16]
 800909e:	49c0      	ldr	r1, [pc, #768]	; (80093a0 <_strtod_l+0x8c8>)
 80090a0:	2000      	movs	r0, #0
 80090a2:	07d7      	lsls	r7, r2, #31
 80090a4:	d508      	bpl.n	80090b8 <_strtod_l+0x5e0>
 80090a6:	ed9d 6b08 	vldr	d6, [sp, #32]
 80090aa:	ed91 7b00 	vldr	d7, [r1]
 80090ae:	ee26 7b07 	vmul.f64	d7, d6, d7
 80090b2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80090b6:	2001      	movs	r0, #1
 80090b8:	1052      	asrs	r2, r2, #1
 80090ba:	f101 0108 	add.w	r1, r1, #8
 80090be:	d1f0      	bne.n	80090a2 <_strtod_l+0x5ca>
 80090c0:	b108      	cbz	r0, 80090c6 <_strtod_l+0x5ee>
 80090c2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80090c6:	9a04      	ldr	r2, [sp, #16]
 80090c8:	b1ba      	cbz	r2, 80090fa <_strtod_l+0x622>
 80090ca:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80090ce:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80090d2:	2a00      	cmp	r2, #0
 80090d4:	4649      	mov	r1, r9
 80090d6:	dd10      	ble.n	80090fa <_strtod_l+0x622>
 80090d8:	2a1f      	cmp	r2, #31
 80090da:	f340 8132 	ble.w	8009342 <_strtod_l+0x86a>
 80090de:	2a34      	cmp	r2, #52	; 0x34
 80090e0:	bfde      	ittt	le
 80090e2:	3a20      	suble	r2, #32
 80090e4:	f04f 30ff 	movle.w	r0, #4294967295
 80090e8:	fa00 f202 	lslle.w	r2, r0, r2
 80090ec:	f04f 0800 	mov.w	r8, #0
 80090f0:	bfcc      	ite	gt
 80090f2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80090f6:	ea02 0901 	andle.w	r9, r2, r1
 80090fa:	ec49 8b17 	vmov	d7, r8, r9
 80090fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009106:	d0a4      	beq.n	8009052 <_strtod_l+0x57a>
 8009108:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800910a:	9200      	str	r2, [sp, #0]
 800910c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800910e:	4632      	mov	r2, r6
 8009110:	4620      	mov	r0, r4
 8009112:	f001 fdcd 	bl	800acb0 <__s2b>
 8009116:	900a      	str	r0, [sp, #40]	; 0x28
 8009118:	2800      	cmp	r0, #0
 800911a:	f43f af25 	beq.w	8008f68 <_strtod_l+0x490>
 800911e:	9b06      	ldr	r3, [sp, #24]
 8009120:	ebab 0505 	sub.w	r5, fp, r5
 8009124:	2b00      	cmp	r3, #0
 8009126:	bfb4      	ite	lt
 8009128:	462b      	movlt	r3, r5
 800912a:	2300      	movge	r3, #0
 800912c:	930c      	str	r3, [sp, #48]	; 0x30
 800912e:	9b06      	ldr	r3, [sp, #24]
 8009130:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8009388 <_strtod_l+0x8b0>
 8009134:	ed9f ab96 	vldr	d10, [pc, #600]	; 8009390 <_strtod_l+0x8b8>
 8009138:	ed9f bb97 	vldr	d11, [pc, #604]	; 8009398 <_strtod_l+0x8c0>
 800913c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009140:	2500      	movs	r5, #0
 8009142:	9312      	str	r3, [sp, #72]	; 0x48
 8009144:	462e      	mov	r6, r5
 8009146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009148:	4620      	mov	r0, r4
 800914a:	6859      	ldr	r1, [r3, #4]
 800914c:	f001 fd04 	bl	800ab58 <_Balloc>
 8009150:	4607      	mov	r7, r0
 8009152:	2800      	cmp	r0, #0
 8009154:	f43f af0c 	beq.w	8008f70 <_strtod_l+0x498>
 8009158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800915a:	691a      	ldr	r2, [r3, #16]
 800915c:	3202      	adds	r2, #2
 800915e:	f103 010c 	add.w	r1, r3, #12
 8009162:	0092      	lsls	r2, r2, #2
 8009164:	300c      	adds	r0, #12
 8009166:	f001 fce9 	bl	800ab3c <memcpy>
 800916a:	ec49 8b10 	vmov	d0, r8, r9
 800916e:	aa1a      	add	r2, sp, #104	; 0x68
 8009170:	a919      	add	r1, sp, #100	; 0x64
 8009172:	4620      	mov	r0, r4
 8009174:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8009178:	f002 f8d6 	bl	800b328 <__d2b>
 800917c:	9018      	str	r0, [sp, #96]	; 0x60
 800917e:	2800      	cmp	r0, #0
 8009180:	f43f aef6 	beq.w	8008f70 <_strtod_l+0x498>
 8009184:	2101      	movs	r1, #1
 8009186:	4620      	mov	r0, r4
 8009188:	f001 fe2c 	bl	800ade4 <__i2b>
 800918c:	4606      	mov	r6, r0
 800918e:	2800      	cmp	r0, #0
 8009190:	f43f aeee 	beq.w	8008f70 <_strtod_l+0x498>
 8009194:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009196:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009198:	2b00      	cmp	r3, #0
 800919a:	bfab      	itete	ge
 800919c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800919e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80091a0:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 80091a4:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 80091a8:	bfac      	ite	ge
 80091aa:	eb03 0b02 	addge.w	fp, r3, r2
 80091ae:	eba2 0a03 	sublt.w	sl, r2, r3
 80091b2:	9a04      	ldr	r2, [sp, #16]
 80091b4:	1a9b      	subs	r3, r3, r2
 80091b6:	440b      	add	r3, r1
 80091b8:	4a7a      	ldr	r2, [pc, #488]	; (80093a4 <_strtod_l+0x8cc>)
 80091ba:	3b01      	subs	r3, #1
 80091bc:	4293      	cmp	r3, r2
 80091be:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80091c2:	f280 80d1 	bge.w	8009368 <_strtod_l+0x890>
 80091c6:	1ad2      	subs	r2, r2, r3
 80091c8:	2a1f      	cmp	r2, #31
 80091ca:	eba1 0102 	sub.w	r1, r1, r2
 80091ce:	f04f 0001 	mov.w	r0, #1
 80091d2:	f300 80bd 	bgt.w	8009350 <_strtod_l+0x878>
 80091d6:	fa00 f302 	lsl.w	r3, r0, r2
 80091da:	930e      	str	r3, [sp, #56]	; 0x38
 80091dc:	2300      	movs	r3, #0
 80091de:	930d      	str	r3, [sp, #52]	; 0x34
 80091e0:	eb0b 0301 	add.w	r3, fp, r1
 80091e4:	9a04      	ldr	r2, [sp, #16]
 80091e6:	459b      	cmp	fp, r3
 80091e8:	448a      	add	sl, r1
 80091ea:	4492      	add	sl, r2
 80091ec:	465a      	mov	r2, fp
 80091ee:	bfa8      	it	ge
 80091f0:	461a      	movge	r2, r3
 80091f2:	4552      	cmp	r2, sl
 80091f4:	bfa8      	it	ge
 80091f6:	4652      	movge	r2, sl
 80091f8:	2a00      	cmp	r2, #0
 80091fa:	bfc2      	ittt	gt
 80091fc:	1a9b      	subgt	r3, r3, r2
 80091fe:	ebaa 0a02 	subgt.w	sl, sl, r2
 8009202:	ebab 0b02 	subgt.w	fp, fp, r2
 8009206:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009208:	2a00      	cmp	r2, #0
 800920a:	dd18      	ble.n	800923e <_strtod_l+0x766>
 800920c:	4631      	mov	r1, r6
 800920e:	4620      	mov	r0, r4
 8009210:	9315      	str	r3, [sp, #84]	; 0x54
 8009212:	f001 fea3 	bl	800af5c <__pow5mult>
 8009216:	4606      	mov	r6, r0
 8009218:	2800      	cmp	r0, #0
 800921a:	f43f aea9 	beq.w	8008f70 <_strtod_l+0x498>
 800921e:	4601      	mov	r1, r0
 8009220:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009222:	4620      	mov	r0, r4
 8009224:	f001 fdf4 	bl	800ae10 <__multiply>
 8009228:	9014      	str	r0, [sp, #80]	; 0x50
 800922a:	2800      	cmp	r0, #0
 800922c:	f43f aea0 	beq.w	8008f70 <_strtod_l+0x498>
 8009230:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009232:	4620      	mov	r0, r4
 8009234:	f001 fcd0 	bl	800abd8 <_Bfree>
 8009238:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800923a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800923c:	9218      	str	r2, [sp, #96]	; 0x60
 800923e:	2b00      	cmp	r3, #0
 8009240:	f300 8097 	bgt.w	8009372 <_strtod_l+0x89a>
 8009244:	9b06      	ldr	r3, [sp, #24]
 8009246:	2b00      	cmp	r3, #0
 8009248:	dd08      	ble.n	800925c <_strtod_l+0x784>
 800924a:	4639      	mov	r1, r7
 800924c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800924e:	4620      	mov	r0, r4
 8009250:	f001 fe84 	bl	800af5c <__pow5mult>
 8009254:	4607      	mov	r7, r0
 8009256:	2800      	cmp	r0, #0
 8009258:	f43f ae8a 	beq.w	8008f70 <_strtod_l+0x498>
 800925c:	f1ba 0f00 	cmp.w	sl, #0
 8009260:	dd08      	ble.n	8009274 <_strtod_l+0x79c>
 8009262:	4639      	mov	r1, r7
 8009264:	4652      	mov	r2, sl
 8009266:	4620      	mov	r0, r4
 8009268:	f001 fed2 	bl	800b010 <__lshift>
 800926c:	4607      	mov	r7, r0
 800926e:	2800      	cmp	r0, #0
 8009270:	f43f ae7e 	beq.w	8008f70 <_strtod_l+0x498>
 8009274:	f1bb 0f00 	cmp.w	fp, #0
 8009278:	dd08      	ble.n	800928c <_strtod_l+0x7b4>
 800927a:	4631      	mov	r1, r6
 800927c:	465a      	mov	r2, fp
 800927e:	4620      	mov	r0, r4
 8009280:	f001 fec6 	bl	800b010 <__lshift>
 8009284:	4606      	mov	r6, r0
 8009286:	2800      	cmp	r0, #0
 8009288:	f43f ae72 	beq.w	8008f70 <_strtod_l+0x498>
 800928c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800928e:	463a      	mov	r2, r7
 8009290:	4620      	mov	r0, r4
 8009292:	f001 ff45 	bl	800b120 <__mdiff>
 8009296:	4605      	mov	r5, r0
 8009298:	2800      	cmp	r0, #0
 800929a:	f43f ae69 	beq.w	8008f70 <_strtod_l+0x498>
 800929e:	2300      	movs	r3, #0
 80092a0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80092a4:	60c3      	str	r3, [r0, #12]
 80092a6:	4631      	mov	r1, r6
 80092a8:	f001 ff1e 	bl	800b0e8 <__mcmp>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	da7f      	bge.n	80093b0 <_strtod_l+0x8d8>
 80092b0:	ea5a 0308 	orrs.w	r3, sl, r8
 80092b4:	f040 80a5 	bne.w	8009402 <_strtod_l+0x92a>
 80092b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f040 80a0 	bne.w	8009402 <_strtod_l+0x92a>
 80092c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80092c6:	0d1b      	lsrs	r3, r3, #20
 80092c8:	051b      	lsls	r3, r3, #20
 80092ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80092ce:	f240 8098 	bls.w	8009402 <_strtod_l+0x92a>
 80092d2:	696b      	ldr	r3, [r5, #20]
 80092d4:	b91b      	cbnz	r3, 80092de <_strtod_l+0x806>
 80092d6:	692b      	ldr	r3, [r5, #16]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	f340 8092 	ble.w	8009402 <_strtod_l+0x92a>
 80092de:	4629      	mov	r1, r5
 80092e0:	2201      	movs	r2, #1
 80092e2:	4620      	mov	r0, r4
 80092e4:	f001 fe94 	bl	800b010 <__lshift>
 80092e8:	4631      	mov	r1, r6
 80092ea:	4605      	mov	r5, r0
 80092ec:	f001 fefc 	bl	800b0e8 <__mcmp>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	f340 8086 	ble.w	8009402 <_strtod_l+0x92a>
 80092f6:	9904      	ldr	r1, [sp, #16]
 80092f8:	4a2b      	ldr	r2, [pc, #172]	; (80093a8 <_strtod_l+0x8d0>)
 80092fa:	464b      	mov	r3, r9
 80092fc:	2900      	cmp	r1, #0
 80092fe:	f000 80a1 	beq.w	8009444 <_strtod_l+0x96c>
 8009302:	ea02 0109 	and.w	r1, r2, r9
 8009306:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800930a:	f300 809b 	bgt.w	8009444 <_strtod_l+0x96c>
 800930e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009312:	f77f aea2 	ble.w	800905a <_strtod_l+0x582>
 8009316:	4a25      	ldr	r2, [pc, #148]	; (80093ac <_strtod_l+0x8d4>)
 8009318:	2300      	movs	r3, #0
 800931a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800931e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8009322:	ec49 8b17 	vmov	d7, r8, r9
 8009326:	ee27 7b06 	vmul.f64	d7, d7, d6
 800932a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800932e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009332:	4313      	orrs	r3, r2
 8009334:	bf08      	it	eq
 8009336:	2322      	moveq	r3, #34	; 0x22
 8009338:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800933c:	bf08      	it	eq
 800933e:	6023      	streq	r3, [r4, #0]
 8009340:	e620      	b.n	8008f84 <_strtod_l+0x4ac>
 8009342:	f04f 31ff 	mov.w	r1, #4294967295
 8009346:	fa01 f202 	lsl.w	r2, r1, r2
 800934a:	ea02 0808 	and.w	r8, r2, r8
 800934e:	e6d4      	b.n	80090fa <_strtod_l+0x622>
 8009350:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009354:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009358:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800935c:	33e2      	adds	r3, #226	; 0xe2
 800935e:	fa00 f303 	lsl.w	r3, r0, r3
 8009362:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8009366:	e73b      	b.n	80091e0 <_strtod_l+0x708>
 8009368:	2000      	movs	r0, #0
 800936a:	2301      	movs	r3, #1
 800936c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8009370:	e736      	b.n	80091e0 <_strtod_l+0x708>
 8009372:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009374:	461a      	mov	r2, r3
 8009376:	4620      	mov	r0, r4
 8009378:	f001 fe4a 	bl	800b010 <__lshift>
 800937c:	9018      	str	r0, [sp, #96]	; 0x60
 800937e:	2800      	cmp	r0, #0
 8009380:	f47f af60 	bne.w	8009244 <_strtod_l+0x76c>
 8009384:	e5f4      	b.n	8008f70 <_strtod_l+0x498>
 8009386:	bf00      	nop
 8009388:	94a03595 	.word	0x94a03595
 800938c:	3fcfffff 	.word	0x3fcfffff
 8009390:	94a03595 	.word	0x94a03595
 8009394:	3fdfffff 	.word	0x3fdfffff
 8009398:	35afe535 	.word	0x35afe535
 800939c:	3fe00000 	.word	0x3fe00000
 80093a0:	0800ce28 	.word	0x0800ce28
 80093a4:	fffffc02 	.word	0xfffffc02
 80093a8:	7ff00000 	.word	0x7ff00000
 80093ac:	39500000 	.word	0x39500000
 80093b0:	46cb      	mov	fp, r9
 80093b2:	d165      	bne.n	8009480 <_strtod_l+0x9a8>
 80093b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093b8:	f1ba 0f00 	cmp.w	sl, #0
 80093bc:	d02a      	beq.n	8009414 <_strtod_l+0x93c>
 80093be:	4aaa      	ldr	r2, [pc, #680]	; (8009668 <_strtod_l+0xb90>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d12b      	bne.n	800941c <_strtod_l+0x944>
 80093c4:	9b04      	ldr	r3, [sp, #16]
 80093c6:	4641      	mov	r1, r8
 80093c8:	b1fb      	cbz	r3, 800940a <_strtod_l+0x932>
 80093ca:	4aa8      	ldr	r2, [pc, #672]	; (800966c <_strtod_l+0xb94>)
 80093cc:	ea09 0202 	and.w	r2, r9, r2
 80093d0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80093d4:	f04f 30ff 	mov.w	r0, #4294967295
 80093d8:	d81a      	bhi.n	8009410 <_strtod_l+0x938>
 80093da:	0d12      	lsrs	r2, r2, #20
 80093dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80093e0:	fa00 f303 	lsl.w	r3, r0, r3
 80093e4:	4299      	cmp	r1, r3
 80093e6:	d119      	bne.n	800941c <_strtod_l+0x944>
 80093e8:	4ba1      	ldr	r3, [pc, #644]	; (8009670 <_strtod_l+0xb98>)
 80093ea:	459b      	cmp	fp, r3
 80093ec:	d102      	bne.n	80093f4 <_strtod_l+0x91c>
 80093ee:	3101      	adds	r1, #1
 80093f0:	f43f adbe 	beq.w	8008f70 <_strtod_l+0x498>
 80093f4:	4b9d      	ldr	r3, [pc, #628]	; (800966c <_strtod_l+0xb94>)
 80093f6:	ea0b 0303 	and.w	r3, fp, r3
 80093fa:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80093fe:	f04f 0800 	mov.w	r8, #0
 8009402:	9b04      	ldr	r3, [sp, #16]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d186      	bne.n	8009316 <_strtod_l+0x83e>
 8009408:	e5bc      	b.n	8008f84 <_strtod_l+0x4ac>
 800940a:	f04f 33ff 	mov.w	r3, #4294967295
 800940e:	e7e9      	b.n	80093e4 <_strtod_l+0x90c>
 8009410:	4603      	mov	r3, r0
 8009412:	e7e7      	b.n	80093e4 <_strtod_l+0x90c>
 8009414:	ea53 0308 	orrs.w	r3, r3, r8
 8009418:	f43f af6d 	beq.w	80092f6 <_strtod_l+0x81e>
 800941c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800941e:	b1db      	cbz	r3, 8009458 <_strtod_l+0x980>
 8009420:	ea13 0f0b 	tst.w	r3, fp
 8009424:	d0ed      	beq.n	8009402 <_strtod_l+0x92a>
 8009426:	9a04      	ldr	r2, [sp, #16]
 8009428:	4640      	mov	r0, r8
 800942a:	4649      	mov	r1, r9
 800942c:	f1ba 0f00 	cmp.w	sl, #0
 8009430:	d016      	beq.n	8009460 <_strtod_l+0x988>
 8009432:	f7ff fb37 	bl	8008aa4 <sulp>
 8009436:	ed9d 7b08 	vldr	d7, [sp, #32]
 800943a:	ee37 7b00 	vadd.f64	d7, d7, d0
 800943e:	ec59 8b17 	vmov	r8, r9, d7
 8009442:	e7de      	b.n	8009402 <_strtod_l+0x92a>
 8009444:	4013      	ands	r3, r2
 8009446:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800944a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800944e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009452:	f04f 38ff 	mov.w	r8, #4294967295
 8009456:	e7d4      	b.n	8009402 <_strtod_l+0x92a>
 8009458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800945a:	ea13 0f08 	tst.w	r3, r8
 800945e:	e7e1      	b.n	8009424 <_strtod_l+0x94c>
 8009460:	f7ff fb20 	bl	8008aa4 <sulp>
 8009464:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009468:	ee37 7b40 	vsub.f64	d7, d7, d0
 800946c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009470:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009478:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800947c:	d1c1      	bne.n	8009402 <_strtod_l+0x92a>
 800947e:	e5ec      	b.n	800905a <_strtod_l+0x582>
 8009480:	4631      	mov	r1, r6
 8009482:	4628      	mov	r0, r5
 8009484:	f001 ffac 	bl	800b3e0 <__ratio>
 8009488:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800948c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009494:	d867      	bhi.n	8009566 <_strtod_l+0xa8e>
 8009496:	f1ba 0f00 	cmp.w	sl, #0
 800949a:	d044      	beq.n	8009526 <_strtod_l+0xa4e>
 800949c:	4b75      	ldr	r3, [pc, #468]	; (8009674 <_strtod_l+0xb9c>)
 800949e:	2200      	movs	r2, #0
 80094a0:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80094a4:	4971      	ldr	r1, [pc, #452]	; (800966c <_strtod_l+0xb94>)
 80094a6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8009680 <_strtod_l+0xba8>
 80094aa:	ea0b 0001 	and.w	r0, fp, r1
 80094ae:	4560      	cmp	r0, ip
 80094b0:	900d      	str	r0, [sp, #52]	; 0x34
 80094b2:	f040 808b 	bne.w	80095cc <_strtod_l+0xaf4>
 80094b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094ba:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80094be:	ec49 8b10 	vmov	d0, r8, r9
 80094c2:	ec43 2b1c 	vmov	d12, r2, r3
 80094c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80094ca:	f001 feb1 	bl	800b230 <__ulp>
 80094ce:	ec49 8b1d 	vmov	d13, r8, r9
 80094d2:	eeac db00 	vfma.f64	d13, d12, d0
 80094d6:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 80094da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094dc:	4963      	ldr	r1, [pc, #396]	; (800966c <_strtod_l+0xb94>)
 80094de:	4a66      	ldr	r2, [pc, #408]	; (8009678 <_strtod_l+0xba0>)
 80094e0:	4019      	ands	r1, r3
 80094e2:	4291      	cmp	r1, r2
 80094e4:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80094e8:	d947      	bls.n	800957a <_strtod_l+0xaa2>
 80094ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d103      	bne.n	80094fc <_strtod_l+0xa24>
 80094f4:	9b08      	ldr	r3, [sp, #32]
 80094f6:	3301      	adds	r3, #1
 80094f8:	f43f ad3a 	beq.w	8008f70 <_strtod_l+0x498>
 80094fc:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8009670 <_strtod_l+0xb98>
 8009500:	f04f 38ff 	mov.w	r8, #4294967295
 8009504:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009506:	4620      	mov	r0, r4
 8009508:	f001 fb66 	bl	800abd8 <_Bfree>
 800950c:	4639      	mov	r1, r7
 800950e:	4620      	mov	r0, r4
 8009510:	f001 fb62 	bl	800abd8 <_Bfree>
 8009514:	4631      	mov	r1, r6
 8009516:	4620      	mov	r0, r4
 8009518:	f001 fb5e 	bl	800abd8 <_Bfree>
 800951c:	4629      	mov	r1, r5
 800951e:	4620      	mov	r0, r4
 8009520:	f001 fb5a 	bl	800abd8 <_Bfree>
 8009524:	e60f      	b.n	8009146 <_strtod_l+0x66e>
 8009526:	f1b8 0f00 	cmp.w	r8, #0
 800952a:	d112      	bne.n	8009552 <_strtod_l+0xa7a>
 800952c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009530:	b9b3      	cbnz	r3, 8009560 <_strtod_l+0xa88>
 8009532:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009536:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800953a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800953e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8009542:	d401      	bmi.n	8009548 <_strtod_l+0xa70>
 8009544:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009548:	eeb1 7b48 	vneg.f64	d7, d8
 800954c:	ec53 2b17 	vmov	r2, r3, d7
 8009550:	e7a8      	b.n	80094a4 <_strtod_l+0x9cc>
 8009552:	f1b8 0f01 	cmp.w	r8, #1
 8009556:	d103      	bne.n	8009560 <_strtod_l+0xa88>
 8009558:	f1b9 0f00 	cmp.w	r9, #0
 800955c:	f43f ad7d 	beq.w	800905a <_strtod_l+0x582>
 8009560:	4b46      	ldr	r3, [pc, #280]	; (800967c <_strtod_l+0xba4>)
 8009562:	2200      	movs	r2, #0
 8009564:	e79c      	b.n	80094a0 <_strtod_l+0x9c8>
 8009566:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800956a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800956e:	f1ba 0f00 	cmp.w	sl, #0
 8009572:	d0e9      	beq.n	8009548 <_strtod_l+0xa70>
 8009574:	ec53 2b18 	vmov	r2, r3, d8
 8009578:	e794      	b.n	80094a4 <_strtod_l+0x9cc>
 800957a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800957e:	9b04      	ldr	r3, [sp, #16]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1bf      	bne.n	8009504 <_strtod_l+0xa2c>
 8009584:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009588:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800958a:	0d1b      	lsrs	r3, r3, #20
 800958c:	051b      	lsls	r3, r3, #20
 800958e:	429a      	cmp	r2, r3
 8009590:	d1b8      	bne.n	8009504 <_strtod_l+0xa2c>
 8009592:	ec51 0b18 	vmov	r0, r1, d8
 8009596:	f7f7 f88f 	bl	80006b8 <__aeabi_d2lz>
 800959a:	f7f7 f847 	bl	800062c <__aeabi_l2d>
 800959e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095a2:	ec41 0b17 	vmov	d7, r0, r1
 80095a6:	ea43 0308 	orr.w	r3, r3, r8
 80095aa:	ea53 030a 	orrs.w	r3, r3, sl
 80095ae:	ee38 8b47 	vsub.f64	d8, d8, d7
 80095b2:	d03e      	beq.n	8009632 <_strtod_l+0xb5a>
 80095b4:	eeb4 8bca 	vcmpe.f64	d8, d10
 80095b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095bc:	f53f ace2 	bmi.w	8008f84 <_strtod_l+0x4ac>
 80095c0:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80095c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c8:	dd9c      	ble.n	8009504 <_strtod_l+0xa2c>
 80095ca:	e4db      	b.n	8008f84 <_strtod_l+0x4ac>
 80095cc:	9904      	ldr	r1, [sp, #16]
 80095ce:	b301      	cbz	r1, 8009612 <_strtod_l+0xb3a>
 80095d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80095d2:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80095d6:	d81c      	bhi.n	8009612 <_strtod_l+0xb3a>
 80095d8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8009660 <_strtod_l+0xb88>
 80095dc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80095e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095e4:	d811      	bhi.n	800960a <_strtod_l+0xb32>
 80095e6:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80095ea:	ee18 3a10 	vmov	r3, s16
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	bf38      	it	cc
 80095f2:	2301      	movcc	r3, #1
 80095f4:	ee08 3a10 	vmov	s16, r3
 80095f8:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80095fc:	f1ba 0f00 	cmp.w	sl, #0
 8009600:	d114      	bne.n	800962c <_strtod_l+0xb54>
 8009602:	eeb1 7b48 	vneg.f64	d7, d8
 8009606:	ec53 2b17 	vmov	r2, r3, d7
 800960a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800960c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8009610:	1a0b      	subs	r3, r1, r0
 8009612:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009616:	ec43 2b1c 	vmov	d12, r2, r3
 800961a:	f001 fe09 	bl	800b230 <__ulp>
 800961e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009622:	eeac 7b00 	vfma.f64	d7, d12, d0
 8009626:	ec59 8b17 	vmov	r8, r9, d7
 800962a:	e7a8      	b.n	800957e <_strtod_l+0xaa6>
 800962c:	ec53 2b18 	vmov	r2, r3, d8
 8009630:	e7eb      	b.n	800960a <_strtod_l+0xb32>
 8009632:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8009636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800963a:	f57f af63 	bpl.w	8009504 <_strtod_l+0xa2c>
 800963e:	e4a1      	b.n	8008f84 <_strtod_l+0x4ac>
 8009640:	2300      	movs	r3, #0
 8009642:	930b      	str	r3, [sp, #44]	; 0x2c
 8009644:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009646:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009648:	6013      	str	r3, [r2, #0]
 800964a:	f7ff ba8d 	b.w	8008b68 <_strtod_l+0x90>
 800964e:	2a65      	cmp	r2, #101	; 0x65
 8009650:	f43f ab89 	beq.w	8008d66 <_strtod_l+0x28e>
 8009654:	2a45      	cmp	r2, #69	; 0x45
 8009656:	f43f ab86 	beq.w	8008d66 <_strtod_l+0x28e>
 800965a:	2101      	movs	r1, #1
 800965c:	f7ff bbbe 	b.w	8008ddc <_strtod_l+0x304>
 8009660:	ffc00000 	.word	0xffc00000
 8009664:	41dfffff 	.word	0x41dfffff
 8009668:	000fffff 	.word	0x000fffff
 800966c:	7ff00000 	.word	0x7ff00000
 8009670:	7fefffff 	.word	0x7fefffff
 8009674:	3ff00000 	.word	0x3ff00000
 8009678:	7c9fffff 	.word	0x7c9fffff
 800967c:	bff00000 	.word	0xbff00000
 8009680:	7fe00000 	.word	0x7fe00000

08009684 <_strtod_r>:
 8009684:	4b01      	ldr	r3, [pc, #4]	; (800968c <_strtod_r+0x8>)
 8009686:	f7ff ba27 	b.w	8008ad8 <_strtod_l>
 800968a:	bf00      	nop
 800968c:	2000009c 	.word	0x2000009c

08009690 <_strtol_l.isra.0>:
 8009690:	2b01      	cmp	r3, #1
 8009692:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009696:	d001      	beq.n	800969c <_strtol_l.isra.0+0xc>
 8009698:	2b24      	cmp	r3, #36	; 0x24
 800969a:	d906      	bls.n	80096aa <_strtol_l.isra.0+0x1a>
 800969c:	f7fe face 	bl	8007c3c <__errno>
 80096a0:	2316      	movs	r3, #22
 80096a2:	6003      	str	r3, [r0, #0]
 80096a4:	2000      	movs	r0, #0
 80096a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096aa:	4f3a      	ldr	r7, [pc, #232]	; (8009794 <_strtol_l.isra.0+0x104>)
 80096ac:	468e      	mov	lr, r1
 80096ae:	4676      	mov	r6, lr
 80096b0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80096b4:	5de5      	ldrb	r5, [r4, r7]
 80096b6:	f015 0508 	ands.w	r5, r5, #8
 80096ba:	d1f8      	bne.n	80096ae <_strtol_l.isra.0+0x1e>
 80096bc:	2c2d      	cmp	r4, #45	; 0x2d
 80096be:	d134      	bne.n	800972a <_strtol_l.isra.0+0x9a>
 80096c0:	f89e 4000 	ldrb.w	r4, [lr]
 80096c4:	f04f 0801 	mov.w	r8, #1
 80096c8:	f106 0e02 	add.w	lr, r6, #2
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d05c      	beq.n	800978a <_strtol_l.isra.0+0xfa>
 80096d0:	2b10      	cmp	r3, #16
 80096d2:	d10c      	bne.n	80096ee <_strtol_l.isra.0+0x5e>
 80096d4:	2c30      	cmp	r4, #48	; 0x30
 80096d6:	d10a      	bne.n	80096ee <_strtol_l.isra.0+0x5e>
 80096d8:	f89e 4000 	ldrb.w	r4, [lr]
 80096dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80096e0:	2c58      	cmp	r4, #88	; 0x58
 80096e2:	d14d      	bne.n	8009780 <_strtol_l.isra.0+0xf0>
 80096e4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80096e8:	2310      	movs	r3, #16
 80096ea:	f10e 0e02 	add.w	lr, lr, #2
 80096ee:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80096f2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80096f6:	2600      	movs	r6, #0
 80096f8:	fbbc f9f3 	udiv	r9, ip, r3
 80096fc:	4635      	mov	r5, r6
 80096fe:	fb03 ca19 	mls	sl, r3, r9, ip
 8009702:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009706:	2f09      	cmp	r7, #9
 8009708:	d818      	bhi.n	800973c <_strtol_l.isra.0+0xac>
 800970a:	463c      	mov	r4, r7
 800970c:	42a3      	cmp	r3, r4
 800970e:	dd24      	ble.n	800975a <_strtol_l.isra.0+0xca>
 8009710:	2e00      	cmp	r6, #0
 8009712:	db1f      	blt.n	8009754 <_strtol_l.isra.0+0xc4>
 8009714:	45a9      	cmp	r9, r5
 8009716:	d31d      	bcc.n	8009754 <_strtol_l.isra.0+0xc4>
 8009718:	d101      	bne.n	800971e <_strtol_l.isra.0+0x8e>
 800971a:	45a2      	cmp	sl, r4
 800971c:	db1a      	blt.n	8009754 <_strtol_l.isra.0+0xc4>
 800971e:	fb05 4503 	mla	r5, r5, r3, r4
 8009722:	2601      	movs	r6, #1
 8009724:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009728:	e7eb      	b.n	8009702 <_strtol_l.isra.0+0x72>
 800972a:	2c2b      	cmp	r4, #43	; 0x2b
 800972c:	bf08      	it	eq
 800972e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009732:	46a8      	mov	r8, r5
 8009734:	bf08      	it	eq
 8009736:	f106 0e02 	addeq.w	lr, r6, #2
 800973a:	e7c7      	b.n	80096cc <_strtol_l.isra.0+0x3c>
 800973c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009740:	2f19      	cmp	r7, #25
 8009742:	d801      	bhi.n	8009748 <_strtol_l.isra.0+0xb8>
 8009744:	3c37      	subs	r4, #55	; 0x37
 8009746:	e7e1      	b.n	800970c <_strtol_l.isra.0+0x7c>
 8009748:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800974c:	2f19      	cmp	r7, #25
 800974e:	d804      	bhi.n	800975a <_strtol_l.isra.0+0xca>
 8009750:	3c57      	subs	r4, #87	; 0x57
 8009752:	e7db      	b.n	800970c <_strtol_l.isra.0+0x7c>
 8009754:	f04f 36ff 	mov.w	r6, #4294967295
 8009758:	e7e4      	b.n	8009724 <_strtol_l.isra.0+0x94>
 800975a:	2e00      	cmp	r6, #0
 800975c:	da05      	bge.n	800976a <_strtol_l.isra.0+0xda>
 800975e:	2322      	movs	r3, #34	; 0x22
 8009760:	6003      	str	r3, [r0, #0]
 8009762:	4665      	mov	r5, ip
 8009764:	b942      	cbnz	r2, 8009778 <_strtol_l.isra.0+0xe8>
 8009766:	4628      	mov	r0, r5
 8009768:	e79d      	b.n	80096a6 <_strtol_l.isra.0+0x16>
 800976a:	f1b8 0f00 	cmp.w	r8, #0
 800976e:	d000      	beq.n	8009772 <_strtol_l.isra.0+0xe2>
 8009770:	426d      	negs	r5, r5
 8009772:	2a00      	cmp	r2, #0
 8009774:	d0f7      	beq.n	8009766 <_strtol_l.isra.0+0xd6>
 8009776:	b10e      	cbz	r6, 800977c <_strtol_l.isra.0+0xec>
 8009778:	f10e 31ff 	add.w	r1, lr, #4294967295
 800977c:	6011      	str	r1, [r2, #0]
 800977e:	e7f2      	b.n	8009766 <_strtol_l.isra.0+0xd6>
 8009780:	2430      	movs	r4, #48	; 0x30
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1b3      	bne.n	80096ee <_strtol_l.isra.0+0x5e>
 8009786:	2308      	movs	r3, #8
 8009788:	e7b1      	b.n	80096ee <_strtol_l.isra.0+0x5e>
 800978a:	2c30      	cmp	r4, #48	; 0x30
 800978c:	d0a4      	beq.n	80096d8 <_strtol_l.isra.0+0x48>
 800978e:	230a      	movs	r3, #10
 8009790:	e7ad      	b.n	80096ee <_strtol_l.isra.0+0x5e>
 8009792:	bf00      	nop
 8009794:	0800ce51 	.word	0x0800ce51

08009798 <_strtol_r>:
 8009798:	f7ff bf7a 	b.w	8009690 <_strtol_l.isra.0>

0800979c <_write_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	4d07      	ldr	r5, [pc, #28]	; (80097bc <_write_r+0x20>)
 80097a0:	4604      	mov	r4, r0
 80097a2:	4608      	mov	r0, r1
 80097a4:	4611      	mov	r1, r2
 80097a6:	2200      	movs	r2, #0
 80097a8:	602a      	str	r2, [r5, #0]
 80097aa:	461a      	mov	r2, r3
 80097ac:	f7f8 fa7b 	bl	8001ca6 <_write>
 80097b0:	1c43      	adds	r3, r0, #1
 80097b2:	d102      	bne.n	80097ba <_write_r+0x1e>
 80097b4:	682b      	ldr	r3, [r5, #0]
 80097b6:	b103      	cbz	r3, 80097ba <_write_r+0x1e>
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	200008e8 	.word	0x200008e8

080097c0 <_close_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	4d06      	ldr	r5, [pc, #24]	; (80097dc <_close_r+0x1c>)
 80097c4:	2300      	movs	r3, #0
 80097c6:	4604      	mov	r4, r0
 80097c8:	4608      	mov	r0, r1
 80097ca:	602b      	str	r3, [r5, #0]
 80097cc:	f7f8 fa87 	bl	8001cde <_close>
 80097d0:	1c43      	adds	r3, r0, #1
 80097d2:	d102      	bne.n	80097da <_close_r+0x1a>
 80097d4:	682b      	ldr	r3, [r5, #0]
 80097d6:	b103      	cbz	r3, 80097da <_close_r+0x1a>
 80097d8:	6023      	str	r3, [r4, #0]
 80097da:	bd38      	pop	{r3, r4, r5, pc}
 80097dc:	200008e8 	.word	0x200008e8

080097e0 <quorem>:
 80097e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e4:	6903      	ldr	r3, [r0, #16]
 80097e6:	690c      	ldr	r4, [r1, #16]
 80097e8:	42a3      	cmp	r3, r4
 80097ea:	4607      	mov	r7, r0
 80097ec:	f2c0 8081 	blt.w	80098f2 <quorem+0x112>
 80097f0:	3c01      	subs	r4, #1
 80097f2:	f101 0814 	add.w	r8, r1, #20
 80097f6:	f100 0514 	add.w	r5, r0, #20
 80097fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097fe:	9301      	str	r3, [sp, #4]
 8009800:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009804:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009808:	3301      	adds	r3, #1
 800980a:	429a      	cmp	r2, r3
 800980c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009810:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009814:	fbb2 f6f3 	udiv	r6, r2, r3
 8009818:	d331      	bcc.n	800987e <quorem+0x9e>
 800981a:	f04f 0e00 	mov.w	lr, #0
 800981e:	4640      	mov	r0, r8
 8009820:	46ac      	mov	ip, r5
 8009822:	46f2      	mov	sl, lr
 8009824:	f850 2b04 	ldr.w	r2, [r0], #4
 8009828:	b293      	uxth	r3, r2
 800982a:	fb06 e303 	mla	r3, r6, r3, lr
 800982e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009832:	b29b      	uxth	r3, r3
 8009834:	ebaa 0303 	sub.w	r3, sl, r3
 8009838:	0c12      	lsrs	r2, r2, #16
 800983a:	f8dc a000 	ldr.w	sl, [ip]
 800983e:	fb06 e202 	mla	r2, r6, r2, lr
 8009842:	fa13 f38a 	uxtah	r3, r3, sl
 8009846:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800984a:	fa1f fa82 	uxth.w	sl, r2
 800984e:	f8dc 2000 	ldr.w	r2, [ip]
 8009852:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009856:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800985a:	b29b      	uxth	r3, r3
 800985c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009860:	4581      	cmp	r9, r0
 8009862:	f84c 3b04 	str.w	r3, [ip], #4
 8009866:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800986a:	d2db      	bcs.n	8009824 <quorem+0x44>
 800986c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009870:	b92b      	cbnz	r3, 800987e <quorem+0x9e>
 8009872:	9b01      	ldr	r3, [sp, #4]
 8009874:	3b04      	subs	r3, #4
 8009876:	429d      	cmp	r5, r3
 8009878:	461a      	mov	r2, r3
 800987a:	d32e      	bcc.n	80098da <quorem+0xfa>
 800987c:	613c      	str	r4, [r7, #16]
 800987e:	4638      	mov	r0, r7
 8009880:	f001 fc32 	bl	800b0e8 <__mcmp>
 8009884:	2800      	cmp	r0, #0
 8009886:	db24      	blt.n	80098d2 <quorem+0xf2>
 8009888:	3601      	adds	r6, #1
 800988a:	4628      	mov	r0, r5
 800988c:	f04f 0c00 	mov.w	ip, #0
 8009890:	f858 2b04 	ldr.w	r2, [r8], #4
 8009894:	f8d0 e000 	ldr.w	lr, [r0]
 8009898:	b293      	uxth	r3, r2
 800989a:	ebac 0303 	sub.w	r3, ip, r3
 800989e:	0c12      	lsrs	r2, r2, #16
 80098a0:	fa13 f38e 	uxtah	r3, r3, lr
 80098a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80098a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098b2:	45c1      	cmp	r9, r8
 80098b4:	f840 3b04 	str.w	r3, [r0], #4
 80098b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80098bc:	d2e8      	bcs.n	8009890 <quorem+0xb0>
 80098be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098c6:	b922      	cbnz	r2, 80098d2 <quorem+0xf2>
 80098c8:	3b04      	subs	r3, #4
 80098ca:	429d      	cmp	r5, r3
 80098cc:	461a      	mov	r2, r3
 80098ce:	d30a      	bcc.n	80098e6 <quorem+0x106>
 80098d0:	613c      	str	r4, [r7, #16]
 80098d2:	4630      	mov	r0, r6
 80098d4:	b003      	add	sp, #12
 80098d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098da:	6812      	ldr	r2, [r2, #0]
 80098dc:	3b04      	subs	r3, #4
 80098de:	2a00      	cmp	r2, #0
 80098e0:	d1cc      	bne.n	800987c <quorem+0x9c>
 80098e2:	3c01      	subs	r4, #1
 80098e4:	e7c7      	b.n	8009876 <quorem+0x96>
 80098e6:	6812      	ldr	r2, [r2, #0]
 80098e8:	3b04      	subs	r3, #4
 80098ea:	2a00      	cmp	r2, #0
 80098ec:	d1f0      	bne.n	80098d0 <quorem+0xf0>
 80098ee:	3c01      	subs	r4, #1
 80098f0:	e7eb      	b.n	80098ca <quorem+0xea>
 80098f2:	2000      	movs	r0, #0
 80098f4:	e7ee      	b.n	80098d4 <quorem+0xf4>
	...

080098f8 <_dtoa_r>:
 80098f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fc:	ec59 8b10 	vmov	r8, r9, d0
 8009900:	b095      	sub	sp, #84	; 0x54
 8009902:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009904:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8009906:	9107      	str	r1, [sp, #28]
 8009908:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800990c:	4606      	mov	r6, r0
 800990e:	9209      	str	r2, [sp, #36]	; 0x24
 8009910:	9310      	str	r3, [sp, #64]	; 0x40
 8009912:	b975      	cbnz	r5, 8009932 <_dtoa_r+0x3a>
 8009914:	2010      	movs	r0, #16
 8009916:	f001 f8f7 	bl	800ab08 <malloc>
 800991a:	4602      	mov	r2, r0
 800991c:	6270      	str	r0, [r6, #36]	; 0x24
 800991e:	b920      	cbnz	r0, 800992a <_dtoa_r+0x32>
 8009920:	4bab      	ldr	r3, [pc, #684]	; (8009bd0 <_dtoa_r+0x2d8>)
 8009922:	21ea      	movs	r1, #234	; 0xea
 8009924:	48ab      	ldr	r0, [pc, #684]	; (8009bd4 <_dtoa_r+0x2dc>)
 8009926:	f002 fc33 	bl	800c190 <__assert_func>
 800992a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800992e:	6005      	str	r5, [r0, #0]
 8009930:	60c5      	str	r5, [r0, #12]
 8009932:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009934:	6819      	ldr	r1, [r3, #0]
 8009936:	b151      	cbz	r1, 800994e <_dtoa_r+0x56>
 8009938:	685a      	ldr	r2, [r3, #4]
 800993a:	604a      	str	r2, [r1, #4]
 800993c:	2301      	movs	r3, #1
 800993e:	4093      	lsls	r3, r2
 8009940:	608b      	str	r3, [r1, #8]
 8009942:	4630      	mov	r0, r6
 8009944:	f001 f948 	bl	800abd8 <_Bfree>
 8009948:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800994a:	2200      	movs	r2, #0
 800994c:	601a      	str	r2, [r3, #0]
 800994e:	f1b9 0300 	subs.w	r3, r9, #0
 8009952:	bfbb      	ittet	lt
 8009954:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009958:	9303      	strlt	r3, [sp, #12]
 800995a:	2300      	movge	r3, #0
 800995c:	2201      	movlt	r2, #1
 800995e:	bfac      	ite	ge
 8009960:	6023      	strge	r3, [r4, #0]
 8009962:	6022      	strlt	r2, [r4, #0]
 8009964:	4b9c      	ldr	r3, [pc, #624]	; (8009bd8 <_dtoa_r+0x2e0>)
 8009966:	9c03      	ldr	r4, [sp, #12]
 8009968:	43a3      	bics	r3, r4
 800996a:	d11a      	bne.n	80099a2 <_dtoa_r+0xaa>
 800996c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800996e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009972:	6013      	str	r3, [r2, #0]
 8009974:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009978:	ea53 0308 	orrs.w	r3, r3, r8
 800997c:	f000 8512 	beq.w	800a3a4 <_dtoa_r+0xaac>
 8009980:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009982:	b953      	cbnz	r3, 800999a <_dtoa_r+0xa2>
 8009984:	4b95      	ldr	r3, [pc, #596]	; (8009bdc <_dtoa_r+0x2e4>)
 8009986:	e01f      	b.n	80099c8 <_dtoa_r+0xd0>
 8009988:	4b95      	ldr	r3, [pc, #596]	; (8009be0 <_dtoa_r+0x2e8>)
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	3308      	adds	r3, #8
 800998e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009990:	6013      	str	r3, [r2, #0]
 8009992:	9800      	ldr	r0, [sp, #0]
 8009994:	b015      	add	sp, #84	; 0x54
 8009996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800999a:	4b90      	ldr	r3, [pc, #576]	; (8009bdc <_dtoa_r+0x2e4>)
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	3303      	adds	r3, #3
 80099a0:	e7f5      	b.n	800998e <_dtoa_r+0x96>
 80099a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80099aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ae:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80099b2:	d10b      	bne.n	80099cc <_dtoa_r+0xd4>
 80099b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80099b6:	2301      	movs	r3, #1
 80099b8:	6013      	str	r3, [r2, #0]
 80099ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f000 84ee 	beq.w	800a39e <_dtoa_r+0xaa6>
 80099c2:	4888      	ldr	r0, [pc, #544]	; (8009be4 <_dtoa_r+0x2ec>)
 80099c4:	6018      	str	r0, [r3, #0]
 80099c6:	1e43      	subs	r3, r0, #1
 80099c8:	9300      	str	r3, [sp, #0]
 80099ca:	e7e2      	b.n	8009992 <_dtoa_r+0x9a>
 80099cc:	a913      	add	r1, sp, #76	; 0x4c
 80099ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80099d2:	aa12      	add	r2, sp, #72	; 0x48
 80099d4:	4630      	mov	r0, r6
 80099d6:	f001 fca7 	bl	800b328 <__d2b>
 80099da:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80099de:	4605      	mov	r5, r0
 80099e0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80099e2:	2900      	cmp	r1, #0
 80099e4:	d047      	beq.n	8009a76 <_dtoa_r+0x17e>
 80099e6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80099e8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80099ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80099f0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80099f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80099f8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80099fc:	2400      	movs	r4, #0
 80099fe:	ec43 2b16 	vmov	d6, r2, r3
 8009a02:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009a06:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8009bb8 <_dtoa_r+0x2c0>
 8009a0a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009a0e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8009bc0 <_dtoa_r+0x2c8>
 8009a12:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009a16:	eeb0 7b46 	vmov.f64	d7, d6
 8009a1a:	ee06 1a90 	vmov	s13, r1
 8009a1e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8009a22:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8009bc8 <_dtoa_r+0x2d0>
 8009a26:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009a2a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009a2e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a36:	ee16 ba90 	vmov	fp, s13
 8009a3a:	9411      	str	r4, [sp, #68]	; 0x44
 8009a3c:	d508      	bpl.n	8009a50 <_dtoa_r+0x158>
 8009a3e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009a42:	eeb4 6b47 	vcmp.f64	d6, d7
 8009a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a4a:	bf18      	it	ne
 8009a4c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009a50:	f1bb 0f16 	cmp.w	fp, #22
 8009a54:	d832      	bhi.n	8009abc <_dtoa_r+0x1c4>
 8009a56:	4b64      	ldr	r3, [pc, #400]	; (8009be8 <_dtoa_r+0x2f0>)
 8009a58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009a5c:	ed93 7b00 	vldr	d7, [r3]
 8009a60:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8009a64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a6c:	d501      	bpl.n	8009a72 <_dtoa_r+0x17a>
 8009a6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a72:	2300      	movs	r3, #0
 8009a74:	e023      	b.n	8009abe <_dtoa_r+0x1c6>
 8009a76:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009a78:	4401      	add	r1, r0
 8009a7a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009a7e:	2b20      	cmp	r3, #32
 8009a80:	bfc3      	ittte	gt
 8009a82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a86:	fa04 f303 	lslgt.w	r3, r4, r3
 8009a8a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009a8e:	f1c3 0320 	rsble	r3, r3, #32
 8009a92:	bfc6      	itte	gt
 8009a94:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009a98:	ea43 0308 	orrgt.w	r3, r3, r8
 8009a9c:	fa08 f303 	lslle.w	r3, r8, r3
 8009aa0:	ee07 3a90 	vmov	s15, r3
 8009aa4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009aa8:	3901      	subs	r1, #1
 8009aaa:	ed8d 7b00 	vstr	d7, [sp]
 8009aae:	9c01      	ldr	r4, [sp, #4]
 8009ab0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ab4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009ab8:	2401      	movs	r4, #1
 8009aba:	e7a0      	b.n	80099fe <_dtoa_r+0x106>
 8009abc:	2301      	movs	r3, #1
 8009abe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ac0:	1a43      	subs	r3, r0, r1
 8009ac2:	1e5a      	subs	r2, r3, #1
 8009ac4:	bf45      	ittet	mi
 8009ac6:	f1c3 0301 	rsbmi	r3, r3, #1
 8009aca:	9305      	strmi	r3, [sp, #20]
 8009acc:	2300      	movpl	r3, #0
 8009ace:	2300      	movmi	r3, #0
 8009ad0:	9206      	str	r2, [sp, #24]
 8009ad2:	bf54      	ite	pl
 8009ad4:	9305      	strpl	r3, [sp, #20]
 8009ad6:	9306      	strmi	r3, [sp, #24]
 8009ad8:	f1bb 0f00 	cmp.w	fp, #0
 8009adc:	db18      	blt.n	8009b10 <_dtoa_r+0x218>
 8009ade:	9b06      	ldr	r3, [sp, #24]
 8009ae0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009ae4:	445b      	add	r3, fp
 8009ae6:	9306      	str	r3, [sp, #24]
 8009ae8:	2300      	movs	r3, #0
 8009aea:	9a07      	ldr	r2, [sp, #28]
 8009aec:	2a09      	cmp	r2, #9
 8009aee:	d849      	bhi.n	8009b84 <_dtoa_r+0x28c>
 8009af0:	2a05      	cmp	r2, #5
 8009af2:	bfc4      	itt	gt
 8009af4:	3a04      	subgt	r2, #4
 8009af6:	9207      	strgt	r2, [sp, #28]
 8009af8:	9a07      	ldr	r2, [sp, #28]
 8009afa:	f1a2 0202 	sub.w	r2, r2, #2
 8009afe:	bfcc      	ite	gt
 8009b00:	2400      	movgt	r4, #0
 8009b02:	2401      	movle	r4, #1
 8009b04:	2a03      	cmp	r2, #3
 8009b06:	d848      	bhi.n	8009b9a <_dtoa_r+0x2a2>
 8009b08:	e8df f002 	tbb	[pc, r2]
 8009b0c:	3a2c2e0b 	.word	0x3a2c2e0b
 8009b10:	9b05      	ldr	r3, [sp, #20]
 8009b12:	2200      	movs	r2, #0
 8009b14:	eba3 030b 	sub.w	r3, r3, fp
 8009b18:	9305      	str	r3, [sp, #20]
 8009b1a:	920e      	str	r2, [sp, #56]	; 0x38
 8009b1c:	f1cb 0300 	rsb	r3, fp, #0
 8009b20:	e7e3      	b.n	8009aea <_dtoa_r+0x1f2>
 8009b22:	2200      	movs	r2, #0
 8009b24:	9208      	str	r2, [sp, #32]
 8009b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b28:	2a00      	cmp	r2, #0
 8009b2a:	dc39      	bgt.n	8009ba0 <_dtoa_r+0x2a8>
 8009b2c:	f04f 0a01 	mov.w	sl, #1
 8009b30:	46d1      	mov	r9, sl
 8009b32:	4652      	mov	r2, sl
 8009b34:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009b38:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	6079      	str	r1, [r7, #4]
 8009b3e:	2004      	movs	r0, #4
 8009b40:	f100 0c14 	add.w	ip, r0, #20
 8009b44:	4594      	cmp	ip, r2
 8009b46:	6879      	ldr	r1, [r7, #4]
 8009b48:	d92f      	bls.n	8009baa <_dtoa_r+0x2b2>
 8009b4a:	4630      	mov	r0, r6
 8009b4c:	930c      	str	r3, [sp, #48]	; 0x30
 8009b4e:	f001 f803 	bl	800ab58 <_Balloc>
 8009b52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b54:	9000      	str	r0, [sp, #0]
 8009b56:	4602      	mov	r2, r0
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	d149      	bne.n	8009bf0 <_dtoa_r+0x2f8>
 8009b5c:	4b23      	ldr	r3, [pc, #140]	; (8009bec <_dtoa_r+0x2f4>)
 8009b5e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009b62:	e6df      	b.n	8009924 <_dtoa_r+0x2c>
 8009b64:	2201      	movs	r2, #1
 8009b66:	e7dd      	b.n	8009b24 <_dtoa_r+0x22c>
 8009b68:	2200      	movs	r2, #0
 8009b6a:	9208      	str	r2, [sp, #32]
 8009b6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b6e:	eb0b 0a02 	add.w	sl, fp, r2
 8009b72:	f10a 0901 	add.w	r9, sl, #1
 8009b76:	464a      	mov	r2, r9
 8009b78:	2a01      	cmp	r2, #1
 8009b7a:	bfb8      	it	lt
 8009b7c:	2201      	movlt	r2, #1
 8009b7e:	e7db      	b.n	8009b38 <_dtoa_r+0x240>
 8009b80:	2201      	movs	r2, #1
 8009b82:	e7f2      	b.n	8009b6a <_dtoa_r+0x272>
 8009b84:	2401      	movs	r4, #1
 8009b86:	2200      	movs	r2, #0
 8009b88:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009b8c:	f04f 3aff 	mov.w	sl, #4294967295
 8009b90:	2100      	movs	r1, #0
 8009b92:	46d1      	mov	r9, sl
 8009b94:	2212      	movs	r2, #18
 8009b96:	9109      	str	r1, [sp, #36]	; 0x24
 8009b98:	e7ce      	b.n	8009b38 <_dtoa_r+0x240>
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	9208      	str	r2, [sp, #32]
 8009b9e:	e7f5      	b.n	8009b8c <_dtoa_r+0x294>
 8009ba0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009ba4:	46d1      	mov	r9, sl
 8009ba6:	4652      	mov	r2, sl
 8009ba8:	e7c6      	b.n	8009b38 <_dtoa_r+0x240>
 8009baa:	3101      	adds	r1, #1
 8009bac:	6079      	str	r1, [r7, #4]
 8009bae:	0040      	lsls	r0, r0, #1
 8009bb0:	e7c6      	b.n	8009b40 <_dtoa_r+0x248>
 8009bb2:	bf00      	nop
 8009bb4:	f3af 8000 	nop.w
 8009bb8:	636f4361 	.word	0x636f4361
 8009bbc:	3fd287a7 	.word	0x3fd287a7
 8009bc0:	8b60c8b3 	.word	0x8b60c8b3
 8009bc4:	3fc68a28 	.word	0x3fc68a28
 8009bc8:	509f79fb 	.word	0x509f79fb
 8009bcc:	3fd34413 	.word	0x3fd34413
 8009bd0:	0800cf5e 	.word	0x0800cf5e
 8009bd4:	0800cf75 	.word	0x0800cf75
 8009bd8:	7ff00000 	.word	0x7ff00000
 8009bdc:	0800cf5a 	.word	0x0800cf5a
 8009be0:	0800cf51 	.word	0x0800cf51
 8009be4:	0800d1da 	.word	0x0800d1da
 8009be8:	0800d0f0 	.word	0x0800d0f0
 8009bec:	0800cfd4 	.word	0x0800cfd4
 8009bf0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009bf2:	9900      	ldr	r1, [sp, #0]
 8009bf4:	6011      	str	r1, [r2, #0]
 8009bf6:	f1b9 0f0e 	cmp.w	r9, #14
 8009bfa:	d872      	bhi.n	8009ce2 <_dtoa_r+0x3ea>
 8009bfc:	2c00      	cmp	r4, #0
 8009bfe:	d070      	beq.n	8009ce2 <_dtoa_r+0x3ea>
 8009c00:	f1bb 0f00 	cmp.w	fp, #0
 8009c04:	f340 80a6 	ble.w	8009d54 <_dtoa_r+0x45c>
 8009c08:	49ca      	ldr	r1, [pc, #808]	; (8009f34 <_dtoa_r+0x63c>)
 8009c0a:	f00b 020f 	and.w	r2, fp, #15
 8009c0e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009c12:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009c16:	ed92 7b00 	vldr	d7, [r2]
 8009c1a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009c1e:	f000 808d 	beq.w	8009d3c <_dtoa_r+0x444>
 8009c22:	4ac5      	ldr	r2, [pc, #788]	; (8009f38 <_dtoa_r+0x640>)
 8009c24:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8009c28:	ed92 6b08 	vldr	d6, [r2, #32]
 8009c2c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8009c30:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009c34:	f001 010f 	and.w	r1, r1, #15
 8009c38:	2203      	movs	r2, #3
 8009c3a:	48bf      	ldr	r0, [pc, #764]	; (8009f38 <_dtoa_r+0x640>)
 8009c3c:	2900      	cmp	r1, #0
 8009c3e:	d17f      	bne.n	8009d40 <_dtoa_r+0x448>
 8009c40:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009c44:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009c48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009c4e:	2900      	cmp	r1, #0
 8009c50:	f000 80b2 	beq.w	8009db8 <_dtoa_r+0x4c0>
 8009c54:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009c58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c5c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c64:	f140 80a8 	bpl.w	8009db8 <_dtoa_r+0x4c0>
 8009c68:	f1b9 0f00 	cmp.w	r9, #0
 8009c6c:	f000 80a4 	beq.w	8009db8 <_dtoa_r+0x4c0>
 8009c70:	f1ba 0f00 	cmp.w	sl, #0
 8009c74:	dd31      	ble.n	8009cda <_dtoa_r+0x3e2>
 8009c76:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009c7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009c7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c82:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009c86:	3201      	adds	r2, #1
 8009c88:	4650      	mov	r0, sl
 8009c8a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009c8e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009c92:	ee07 2a90 	vmov	s15, r2
 8009c96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009c9a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009c9e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8009ca2:	9c03      	ldr	r4, [sp, #12]
 8009ca4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009ca8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009cac:	2800      	cmp	r0, #0
 8009cae:	f040 8086 	bne.w	8009dbe <_dtoa_r+0x4c6>
 8009cb2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009cb6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009cba:	ec42 1b17 	vmov	d7, r1, r2
 8009cbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc6:	f300 8272 	bgt.w	800a1ae <_dtoa_r+0x8b6>
 8009cca:	eeb1 7b47 	vneg.f64	d7, d7
 8009cce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cd6:	f100 8267 	bmi.w	800a1a8 <_dtoa_r+0x8b0>
 8009cda:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8009cde:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009ce2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009ce4:	2a00      	cmp	r2, #0
 8009ce6:	f2c0 8129 	blt.w	8009f3c <_dtoa_r+0x644>
 8009cea:	f1bb 0f0e 	cmp.w	fp, #14
 8009cee:	f300 8125 	bgt.w	8009f3c <_dtoa_r+0x644>
 8009cf2:	4b90      	ldr	r3, [pc, #576]	; (8009f34 <_dtoa_r+0x63c>)
 8009cf4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009cf8:	ed93 6b00 	vldr	d6, [r3]
 8009cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f280 80c3 	bge.w	8009e8a <_dtoa_r+0x592>
 8009d04:	f1b9 0f00 	cmp.w	r9, #0
 8009d08:	f300 80bf 	bgt.w	8009e8a <_dtoa_r+0x592>
 8009d0c:	f040 824c 	bne.w	800a1a8 <_dtoa_r+0x8b0>
 8009d10:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009d14:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009d18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d24:	464c      	mov	r4, r9
 8009d26:	464f      	mov	r7, r9
 8009d28:	f280 8222 	bge.w	800a170 <_dtoa_r+0x878>
 8009d2c:	f8dd 8000 	ldr.w	r8, [sp]
 8009d30:	2331      	movs	r3, #49	; 0x31
 8009d32:	f808 3b01 	strb.w	r3, [r8], #1
 8009d36:	f10b 0b01 	add.w	fp, fp, #1
 8009d3a:	e21e      	b.n	800a17a <_dtoa_r+0x882>
 8009d3c:	2202      	movs	r2, #2
 8009d3e:	e77c      	b.n	8009c3a <_dtoa_r+0x342>
 8009d40:	07cc      	lsls	r4, r1, #31
 8009d42:	d504      	bpl.n	8009d4e <_dtoa_r+0x456>
 8009d44:	ed90 6b00 	vldr	d6, [r0]
 8009d48:	3201      	adds	r2, #1
 8009d4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009d4e:	1049      	asrs	r1, r1, #1
 8009d50:	3008      	adds	r0, #8
 8009d52:	e773      	b.n	8009c3c <_dtoa_r+0x344>
 8009d54:	d02e      	beq.n	8009db4 <_dtoa_r+0x4bc>
 8009d56:	f1cb 0100 	rsb	r1, fp, #0
 8009d5a:	4a76      	ldr	r2, [pc, #472]	; (8009f34 <_dtoa_r+0x63c>)
 8009d5c:	f001 000f 	and.w	r0, r1, #15
 8009d60:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009d64:	ed92 7b00 	vldr	d7, [r2]
 8009d68:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8009d6c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009d70:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009d74:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8009d78:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8009d7c:	486e      	ldr	r0, [pc, #440]	; (8009f38 <_dtoa_r+0x640>)
 8009d7e:	1109      	asrs	r1, r1, #4
 8009d80:	2400      	movs	r4, #0
 8009d82:	2202      	movs	r2, #2
 8009d84:	b939      	cbnz	r1, 8009d96 <_dtoa_r+0x49e>
 8009d86:	2c00      	cmp	r4, #0
 8009d88:	f43f af60 	beq.w	8009c4c <_dtoa_r+0x354>
 8009d8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d94:	e75a      	b.n	8009c4c <_dtoa_r+0x354>
 8009d96:	07cf      	lsls	r7, r1, #31
 8009d98:	d509      	bpl.n	8009dae <_dtoa_r+0x4b6>
 8009d9a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8009d9e:	ed90 7b00 	vldr	d7, [r0]
 8009da2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009da6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009daa:	3201      	adds	r2, #1
 8009dac:	2401      	movs	r4, #1
 8009dae:	1049      	asrs	r1, r1, #1
 8009db0:	3008      	adds	r0, #8
 8009db2:	e7e7      	b.n	8009d84 <_dtoa_r+0x48c>
 8009db4:	2202      	movs	r2, #2
 8009db6:	e749      	b.n	8009c4c <_dtoa_r+0x354>
 8009db8:	465f      	mov	r7, fp
 8009dba:	4648      	mov	r0, r9
 8009dbc:	e765      	b.n	8009c8a <_dtoa_r+0x392>
 8009dbe:	ec42 1b17 	vmov	d7, r1, r2
 8009dc2:	4a5c      	ldr	r2, [pc, #368]	; (8009f34 <_dtoa_r+0x63c>)
 8009dc4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009dc8:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009dcc:	9a00      	ldr	r2, [sp, #0]
 8009dce:	1814      	adds	r4, r2, r0
 8009dd0:	9a08      	ldr	r2, [sp, #32]
 8009dd2:	b352      	cbz	r2, 8009e2a <_dtoa_r+0x532>
 8009dd4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009dd8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009ddc:	f8dd 8000 	ldr.w	r8, [sp]
 8009de0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009de4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009de8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009dec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009df0:	ee14 2a90 	vmov	r2, s9
 8009df4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009df8:	3230      	adds	r2, #48	; 0x30
 8009dfa:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009dfe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e06:	f808 2b01 	strb.w	r2, [r8], #1
 8009e0a:	d439      	bmi.n	8009e80 <_dtoa_r+0x588>
 8009e0c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009e10:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e18:	d472      	bmi.n	8009f00 <_dtoa_r+0x608>
 8009e1a:	45a0      	cmp	r8, r4
 8009e1c:	f43f af5d 	beq.w	8009cda <_dtoa_r+0x3e2>
 8009e20:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009e24:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009e28:	e7e0      	b.n	8009dec <_dtoa_r+0x4f4>
 8009e2a:	f8dd 8000 	ldr.w	r8, [sp]
 8009e2e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009e32:	4621      	mov	r1, r4
 8009e34:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009e38:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009e3c:	ee14 2a90 	vmov	r2, s9
 8009e40:	3230      	adds	r2, #48	; 0x30
 8009e42:	f808 2b01 	strb.w	r2, [r8], #1
 8009e46:	45a0      	cmp	r8, r4
 8009e48:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009e4c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009e50:	d118      	bne.n	8009e84 <_dtoa_r+0x58c>
 8009e52:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009e56:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009e5a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e62:	dc4d      	bgt.n	8009f00 <_dtoa_r+0x608>
 8009e64:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009e68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e70:	f57f af33 	bpl.w	8009cda <_dtoa_r+0x3e2>
 8009e74:	4688      	mov	r8, r1
 8009e76:	3901      	subs	r1, #1
 8009e78:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009e7c:	2b30      	cmp	r3, #48	; 0x30
 8009e7e:	d0f9      	beq.n	8009e74 <_dtoa_r+0x57c>
 8009e80:	46bb      	mov	fp, r7
 8009e82:	e02a      	b.n	8009eda <_dtoa_r+0x5e2>
 8009e84:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009e88:	e7d6      	b.n	8009e38 <_dtoa_r+0x540>
 8009e8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e8e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009e92:	f8dd 8000 	ldr.w	r8, [sp]
 8009e96:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009e9a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009e9e:	ee15 3a10 	vmov	r3, s10
 8009ea2:	3330      	adds	r3, #48	; 0x30
 8009ea4:	f808 3b01 	strb.w	r3, [r8], #1
 8009ea8:	9b00      	ldr	r3, [sp, #0]
 8009eaa:	eba8 0303 	sub.w	r3, r8, r3
 8009eae:	4599      	cmp	r9, r3
 8009eb0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009eb4:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009eb8:	d133      	bne.n	8009f22 <_dtoa_r+0x62a>
 8009eba:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009ebe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ec6:	dc1a      	bgt.n	8009efe <_dtoa_r+0x606>
 8009ec8:	eeb4 7b46 	vcmp.f64	d7, d6
 8009ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ed0:	d103      	bne.n	8009eda <_dtoa_r+0x5e2>
 8009ed2:	ee15 3a10 	vmov	r3, s10
 8009ed6:	07d9      	lsls	r1, r3, #31
 8009ed8:	d411      	bmi.n	8009efe <_dtoa_r+0x606>
 8009eda:	4629      	mov	r1, r5
 8009edc:	4630      	mov	r0, r6
 8009ede:	f000 fe7b 	bl	800abd8 <_Bfree>
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ee6:	f888 3000 	strb.w	r3, [r8]
 8009eea:	f10b 0301 	add.w	r3, fp, #1
 8009eee:	6013      	str	r3, [r2, #0]
 8009ef0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f43f ad4d 	beq.w	8009992 <_dtoa_r+0x9a>
 8009ef8:	f8c3 8000 	str.w	r8, [r3]
 8009efc:	e549      	b.n	8009992 <_dtoa_r+0x9a>
 8009efe:	465f      	mov	r7, fp
 8009f00:	4643      	mov	r3, r8
 8009f02:	4698      	mov	r8, r3
 8009f04:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f08:	2a39      	cmp	r2, #57	; 0x39
 8009f0a:	d106      	bne.n	8009f1a <_dtoa_r+0x622>
 8009f0c:	9a00      	ldr	r2, [sp, #0]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d1f7      	bne.n	8009f02 <_dtoa_r+0x60a>
 8009f12:	9900      	ldr	r1, [sp, #0]
 8009f14:	2230      	movs	r2, #48	; 0x30
 8009f16:	3701      	adds	r7, #1
 8009f18:	700a      	strb	r2, [r1, #0]
 8009f1a:	781a      	ldrb	r2, [r3, #0]
 8009f1c:	3201      	adds	r2, #1
 8009f1e:	701a      	strb	r2, [r3, #0]
 8009f20:	e7ae      	b.n	8009e80 <_dtoa_r+0x588>
 8009f22:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009f26:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f2e:	d1b2      	bne.n	8009e96 <_dtoa_r+0x59e>
 8009f30:	e7d3      	b.n	8009eda <_dtoa_r+0x5e2>
 8009f32:	bf00      	nop
 8009f34:	0800d0f0 	.word	0x0800d0f0
 8009f38:	0800d0c8 	.word	0x0800d0c8
 8009f3c:	9908      	ldr	r1, [sp, #32]
 8009f3e:	2900      	cmp	r1, #0
 8009f40:	f000 80d1 	beq.w	800a0e6 <_dtoa_r+0x7ee>
 8009f44:	9907      	ldr	r1, [sp, #28]
 8009f46:	2901      	cmp	r1, #1
 8009f48:	f300 80b4 	bgt.w	800a0b4 <_dtoa_r+0x7bc>
 8009f4c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009f4e:	2900      	cmp	r1, #0
 8009f50:	f000 80ac 	beq.w	800a0ac <_dtoa_r+0x7b4>
 8009f54:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009f58:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009f5c:	461c      	mov	r4, r3
 8009f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8009f60:	9b05      	ldr	r3, [sp, #20]
 8009f62:	4413      	add	r3, r2
 8009f64:	9305      	str	r3, [sp, #20]
 8009f66:	9b06      	ldr	r3, [sp, #24]
 8009f68:	2101      	movs	r1, #1
 8009f6a:	4413      	add	r3, r2
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	9306      	str	r3, [sp, #24]
 8009f70:	f000 ff38 	bl	800ade4 <__i2b>
 8009f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f76:	4607      	mov	r7, r0
 8009f78:	f1b8 0f00 	cmp.w	r8, #0
 8009f7c:	dd0d      	ble.n	8009f9a <_dtoa_r+0x6a2>
 8009f7e:	9a06      	ldr	r2, [sp, #24]
 8009f80:	2a00      	cmp	r2, #0
 8009f82:	dd0a      	ble.n	8009f9a <_dtoa_r+0x6a2>
 8009f84:	4542      	cmp	r2, r8
 8009f86:	9905      	ldr	r1, [sp, #20]
 8009f88:	bfa8      	it	ge
 8009f8a:	4642      	movge	r2, r8
 8009f8c:	1a89      	subs	r1, r1, r2
 8009f8e:	9105      	str	r1, [sp, #20]
 8009f90:	9906      	ldr	r1, [sp, #24]
 8009f92:	eba8 0802 	sub.w	r8, r8, r2
 8009f96:	1a8a      	subs	r2, r1, r2
 8009f98:	9206      	str	r2, [sp, #24]
 8009f9a:	b303      	cbz	r3, 8009fde <_dtoa_r+0x6e6>
 8009f9c:	9a08      	ldr	r2, [sp, #32]
 8009f9e:	2a00      	cmp	r2, #0
 8009fa0:	f000 80a6 	beq.w	800a0f0 <_dtoa_r+0x7f8>
 8009fa4:	2c00      	cmp	r4, #0
 8009fa6:	dd13      	ble.n	8009fd0 <_dtoa_r+0x6d8>
 8009fa8:	4639      	mov	r1, r7
 8009faa:	4622      	mov	r2, r4
 8009fac:	4630      	mov	r0, r6
 8009fae:	930c      	str	r3, [sp, #48]	; 0x30
 8009fb0:	f000 ffd4 	bl	800af5c <__pow5mult>
 8009fb4:	462a      	mov	r2, r5
 8009fb6:	4601      	mov	r1, r0
 8009fb8:	4607      	mov	r7, r0
 8009fba:	4630      	mov	r0, r6
 8009fbc:	f000 ff28 	bl	800ae10 <__multiply>
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	900a      	str	r0, [sp, #40]	; 0x28
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	f000 fe07 	bl	800abd8 <_Bfree>
 8009fca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fce:	4615      	mov	r5, r2
 8009fd0:	1b1a      	subs	r2, r3, r4
 8009fd2:	d004      	beq.n	8009fde <_dtoa_r+0x6e6>
 8009fd4:	4629      	mov	r1, r5
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	f000 ffc0 	bl	800af5c <__pow5mult>
 8009fdc:	4605      	mov	r5, r0
 8009fde:	2101      	movs	r1, #1
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	f000 feff 	bl	800ade4 <__i2b>
 8009fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	4604      	mov	r4, r0
 8009fec:	f340 8082 	ble.w	800a0f4 <_dtoa_r+0x7fc>
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	4601      	mov	r1, r0
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f000 ffb1 	bl	800af5c <__pow5mult>
 8009ffa:	9b07      	ldr	r3, [sp, #28]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	4604      	mov	r4, r0
 800a000:	dd7b      	ble.n	800a0fa <_dtoa_r+0x802>
 800a002:	2300      	movs	r3, #0
 800a004:	930a      	str	r3, [sp, #40]	; 0x28
 800a006:	6922      	ldr	r2, [r4, #16]
 800a008:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a00c:	6910      	ldr	r0, [r2, #16]
 800a00e:	f000 fe99 	bl	800ad44 <__hi0bits>
 800a012:	f1c0 0020 	rsb	r0, r0, #32
 800a016:	9b06      	ldr	r3, [sp, #24]
 800a018:	4418      	add	r0, r3
 800a01a:	f010 001f 	ands.w	r0, r0, #31
 800a01e:	f000 808d 	beq.w	800a13c <_dtoa_r+0x844>
 800a022:	f1c0 0220 	rsb	r2, r0, #32
 800a026:	2a04      	cmp	r2, #4
 800a028:	f340 8086 	ble.w	800a138 <_dtoa_r+0x840>
 800a02c:	f1c0 001c 	rsb	r0, r0, #28
 800a030:	9b05      	ldr	r3, [sp, #20]
 800a032:	4403      	add	r3, r0
 800a034:	9305      	str	r3, [sp, #20]
 800a036:	9b06      	ldr	r3, [sp, #24]
 800a038:	4403      	add	r3, r0
 800a03a:	4480      	add	r8, r0
 800a03c:	9306      	str	r3, [sp, #24]
 800a03e:	9b05      	ldr	r3, [sp, #20]
 800a040:	2b00      	cmp	r3, #0
 800a042:	dd05      	ble.n	800a050 <_dtoa_r+0x758>
 800a044:	4629      	mov	r1, r5
 800a046:	461a      	mov	r2, r3
 800a048:	4630      	mov	r0, r6
 800a04a:	f000 ffe1 	bl	800b010 <__lshift>
 800a04e:	4605      	mov	r5, r0
 800a050:	9b06      	ldr	r3, [sp, #24]
 800a052:	2b00      	cmp	r3, #0
 800a054:	dd05      	ble.n	800a062 <_dtoa_r+0x76a>
 800a056:	4621      	mov	r1, r4
 800a058:	461a      	mov	r2, r3
 800a05a:	4630      	mov	r0, r6
 800a05c:	f000 ffd8 	bl	800b010 <__lshift>
 800a060:	4604      	mov	r4, r0
 800a062:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a064:	2b00      	cmp	r3, #0
 800a066:	d06b      	beq.n	800a140 <_dtoa_r+0x848>
 800a068:	4621      	mov	r1, r4
 800a06a:	4628      	mov	r0, r5
 800a06c:	f001 f83c 	bl	800b0e8 <__mcmp>
 800a070:	2800      	cmp	r0, #0
 800a072:	da65      	bge.n	800a140 <_dtoa_r+0x848>
 800a074:	2300      	movs	r3, #0
 800a076:	4629      	mov	r1, r5
 800a078:	220a      	movs	r2, #10
 800a07a:	4630      	mov	r0, r6
 800a07c:	f000 fdce 	bl	800ac1c <__multadd>
 800a080:	9b08      	ldr	r3, [sp, #32]
 800a082:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a086:	4605      	mov	r5, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f000 8192 	beq.w	800a3b2 <_dtoa_r+0xaba>
 800a08e:	4639      	mov	r1, r7
 800a090:	2300      	movs	r3, #0
 800a092:	220a      	movs	r2, #10
 800a094:	4630      	mov	r0, r6
 800a096:	f000 fdc1 	bl	800ac1c <__multadd>
 800a09a:	f1ba 0f00 	cmp.w	sl, #0
 800a09e:	4607      	mov	r7, r0
 800a0a0:	f300 808e 	bgt.w	800a1c0 <_dtoa_r+0x8c8>
 800a0a4:	9b07      	ldr	r3, [sp, #28]
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	dc51      	bgt.n	800a14e <_dtoa_r+0x856>
 800a0aa:	e089      	b.n	800a1c0 <_dtoa_r+0x8c8>
 800a0ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a0ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a0b2:	e751      	b.n	8009f58 <_dtoa_r+0x660>
 800a0b4:	f109 34ff 	add.w	r4, r9, #4294967295
 800a0b8:	42a3      	cmp	r3, r4
 800a0ba:	bfbf      	itttt	lt
 800a0bc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a0be:	1ae3      	sublt	r3, r4, r3
 800a0c0:	18d2      	addlt	r2, r2, r3
 800a0c2:	4613      	movlt	r3, r2
 800a0c4:	bfb7      	itett	lt
 800a0c6:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a0c8:	1b1c      	subge	r4, r3, r4
 800a0ca:	4623      	movlt	r3, r4
 800a0cc:	2400      	movlt	r4, #0
 800a0ce:	f1b9 0f00 	cmp.w	r9, #0
 800a0d2:	bfb5      	itete	lt
 800a0d4:	9a05      	ldrlt	r2, [sp, #20]
 800a0d6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800a0da:	eba2 0809 	sublt.w	r8, r2, r9
 800a0de:	464a      	movge	r2, r9
 800a0e0:	bfb8      	it	lt
 800a0e2:	2200      	movlt	r2, #0
 800a0e4:	e73b      	b.n	8009f5e <_dtoa_r+0x666>
 800a0e6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a0ea:	9f08      	ldr	r7, [sp, #32]
 800a0ec:	461c      	mov	r4, r3
 800a0ee:	e743      	b.n	8009f78 <_dtoa_r+0x680>
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	e76f      	b.n	8009fd4 <_dtoa_r+0x6dc>
 800a0f4:	9b07      	ldr	r3, [sp, #28]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	dc18      	bgt.n	800a12c <_dtoa_r+0x834>
 800a0fa:	9b02      	ldr	r3, [sp, #8]
 800a0fc:	b9b3      	cbnz	r3, 800a12c <_dtoa_r+0x834>
 800a0fe:	9b03      	ldr	r3, [sp, #12]
 800a100:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a104:	b9a2      	cbnz	r2, 800a130 <_dtoa_r+0x838>
 800a106:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a10a:	0d12      	lsrs	r2, r2, #20
 800a10c:	0512      	lsls	r2, r2, #20
 800a10e:	b18a      	cbz	r2, 800a134 <_dtoa_r+0x83c>
 800a110:	9b05      	ldr	r3, [sp, #20]
 800a112:	3301      	adds	r3, #1
 800a114:	9305      	str	r3, [sp, #20]
 800a116:	9b06      	ldr	r3, [sp, #24]
 800a118:	3301      	adds	r3, #1
 800a11a:	9306      	str	r3, [sp, #24]
 800a11c:	2301      	movs	r3, #1
 800a11e:	930a      	str	r3, [sp, #40]	; 0x28
 800a120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a122:	2b00      	cmp	r3, #0
 800a124:	f47f af6f 	bne.w	800a006 <_dtoa_r+0x70e>
 800a128:	2001      	movs	r0, #1
 800a12a:	e774      	b.n	800a016 <_dtoa_r+0x71e>
 800a12c:	2300      	movs	r3, #0
 800a12e:	e7f6      	b.n	800a11e <_dtoa_r+0x826>
 800a130:	9b02      	ldr	r3, [sp, #8]
 800a132:	e7f4      	b.n	800a11e <_dtoa_r+0x826>
 800a134:	920a      	str	r2, [sp, #40]	; 0x28
 800a136:	e7f3      	b.n	800a120 <_dtoa_r+0x828>
 800a138:	d081      	beq.n	800a03e <_dtoa_r+0x746>
 800a13a:	4610      	mov	r0, r2
 800a13c:	301c      	adds	r0, #28
 800a13e:	e777      	b.n	800a030 <_dtoa_r+0x738>
 800a140:	f1b9 0f00 	cmp.w	r9, #0
 800a144:	dc37      	bgt.n	800a1b6 <_dtoa_r+0x8be>
 800a146:	9b07      	ldr	r3, [sp, #28]
 800a148:	2b02      	cmp	r3, #2
 800a14a:	dd34      	ble.n	800a1b6 <_dtoa_r+0x8be>
 800a14c:	46ca      	mov	sl, r9
 800a14e:	f1ba 0f00 	cmp.w	sl, #0
 800a152:	d10d      	bne.n	800a170 <_dtoa_r+0x878>
 800a154:	4621      	mov	r1, r4
 800a156:	4653      	mov	r3, sl
 800a158:	2205      	movs	r2, #5
 800a15a:	4630      	mov	r0, r6
 800a15c:	f000 fd5e 	bl	800ac1c <__multadd>
 800a160:	4601      	mov	r1, r0
 800a162:	4604      	mov	r4, r0
 800a164:	4628      	mov	r0, r5
 800a166:	f000 ffbf 	bl	800b0e8 <__mcmp>
 800a16a:	2800      	cmp	r0, #0
 800a16c:	f73f adde 	bgt.w	8009d2c <_dtoa_r+0x434>
 800a170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a172:	f8dd 8000 	ldr.w	r8, [sp]
 800a176:	ea6f 0b03 	mvn.w	fp, r3
 800a17a:	f04f 0900 	mov.w	r9, #0
 800a17e:	4621      	mov	r1, r4
 800a180:	4630      	mov	r0, r6
 800a182:	f000 fd29 	bl	800abd8 <_Bfree>
 800a186:	2f00      	cmp	r7, #0
 800a188:	f43f aea7 	beq.w	8009eda <_dtoa_r+0x5e2>
 800a18c:	f1b9 0f00 	cmp.w	r9, #0
 800a190:	d005      	beq.n	800a19e <_dtoa_r+0x8a6>
 800a192:	45b9      	cmp	r9, r7
 800a194:	d003      	beq.n	800a19e <_dtoa_r+0x8a6>
 800a196:	4649      	mov	r1, r9
 800a198:	4630      	mov	r0, r6
 800a19a:	f000 fd1d 	bl	800abd8 <_Bfree>
 800a19e:	4639      	mov	r1, r7
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	f000 fd19 	bl	800abd8 <_Bfree>
 800a1a6:	e698      	b.n	8009eda <_dtoa_r+0x5e2>
 800a1a8:	2400      	movs	r4, #0
 800a1aa:	4627      	mov	r7, r4
 800a1ac:	e7e0      	b.n	800a170 <_dtoa_r+0x878>
 800a1ae:	46bb      	mov	fp, r7
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	4607      	mov	r7, r0
 800a1b4:	e5ba      	b.n	8009d2c <_dtoa_r+0x434>
 800a1b6:	9b08      	ldr	r3, [sp, #32]
 800a1b8:	46ca      	mov	sl, r9
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 8100 	beq.w	800a3c0 <_dtoa_r+0xac8>
 800a1c0:	f1b8 0f00 	cmp.w	r8, #0
 800a1c4:	dd05      	ble.n	800a1d2 <_dtoa_r+0x8da>
 800a1c6:	4639      	mov	r1, r7
 800a1c8:	4642      	mov	r2, r8
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	f000 ff20 	bl	800b010 <__lshift>
 800a1d0:	4607      	mov	r7, r0
 800a1d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d05d      	beq.n	800a294 <_dtoa_r+0x99c>
 800a1d8:	6879      	ldr	r1, [r7, #4]
 800a1da:	4630      	mov	r0, r6
 800a1dc:	f000 fcbc 	bl	800ab58 <_Balloc>
 800a1e0:	4680      	mov	r8, r0
 800a1e2:	b928      	cbnz	r0, 800a1f0 <_dtoa_r+0x8f8>
 800a1e4:	4b82      	ldr	r3, [pc, #520]	; (800a3f0 <_dtoa_r+0xaf8>)
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a1ec:	f7ff bb9a 	b.w	8009924 <_dtoa_r+0x2c>
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	3202      	adds	r2, #2
 800a1f4:	0092      	lsls	r2, r2, #2
 800a1f6:	f107 010c 	add.w	r1, r7, #12
 800a1fa:	300c      	adds	r0, #12
 800a1fc:	f000 fc9e 	bl	800ab3c <memcpy>
 800a200:	2201      	movs	r2, #1
 800a202:	4641      	mov	r1, r8
 800a204:	4630      	mov	r0, r6
 800a206:	f000 ff03 	bl	800b010 <__lshift>
 800a20a:	9b00      	ldr	r3, [sp, #0]
 800a20c:	3301      	adds	r3, #1
 800a20e:	9305      	str	r3, [sp, #20]
 800a210:	9b00      	ldr	r3, [sp, #0]
 800a212:	4453      	add	r3, sl
 800a214:	9309      	str	r3, [sp, #36]	; 0x24
 800a216:	9b02      	ldr	r3, [sp, #8]
 800a218:	f003 0301 	and.w	r3, r3, #1
 800a21c:	46b9      	mov	r9, r7
 800a21e:	9308      	str	r3, [sp, #32]
 800a220:	4607      	mov	r7, r0
 800a222:	9b05      	ldr	r3, [sp, #20]
 800a224:	4621      	mov	r1, r4
 800a226:	3b01      	subs	r3, #1
 800a228:	4628      	mov	r0, r5
 800a22a:	9302      	str	r3, [sp, #8]
 800a22c:	f7ff fad8 	bl	80097e0 <quorem>
 800a230:	4603      	mov	r3, r0
 800a232:	3330      	adds	r3, #48	; 0x30
 800a234:	9006      	str	r0, [sp, #24]
 800a236:	4649      	mov	r1, r9
 800a238:	4628      	mov	r0, r5
 800a23a:	930a      	str	r3, [sp, #40]	; 0x28
 800a23c:	f000 ff54 	bl	800b0e8 <__mcmp>
 800a240:	463a      	mov	r2, r7
 800a242:	4682      	mov	sl, r0
 800a244:	4621      	mov	r1, r4
 800a246:	4630      	mov	r0, r6
 800a248:	f000 ff6a 	bl	800b120 <__mdiff>
 800a24c:	68c2      	ldr	r2, [r0, #12]
 800a24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a250:	4680      	mov	r8, r0
 800a252:	bb0a      	cbnz	r2, 800a298 <_dtoa_r+0x9a0>
 800a254:	4601      	mov	r1, r0
 800a256:	4628      	mov	r0, r5
 800a258:	f000 ff46 	bl	800b0e8 <__mcmp>
 800a25c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a25e:	4602      	mov	r2, r0
 800a260:	4641      	mov	r1, r8
 800a262:	4630      	mov	r0, r6
 800a264:	920e      	str	r2, [sp, #56]	; 0x38
 800a266:	930a      	str	r3, [sp, #40]	; 0x28
 800a268:	f000 fcb6 	bl	800abd8 <_Bfree>
 800a26c:	9b07      	ldr	r3, [sp, #28]
 800a26e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a270:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a274:	ea43 0102 	orr.w	r1, r3, r2
 800a278:	9b08      	ldr	r3, [sp, #32]
 800a27a:	430b      	orrs	r3, r1
 800a27c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a27e:	d10d      	bne.n	800a29c <_dtoa_r+0x9a4>
 800a280:	2b39      	cmp	r3, #57	; 0x39
 800a282:	d029      	beq.n	800a2d8 <_dtoa_r+0x9e0>
 800a284:	f1ba 0f00 	cmp.w	sl, #0
 800a288:	dd01      	ble.n	800a28e <_dtoa_r+0x996>
 800a28a:	9b06      	ldr	r3, [sp, #24]
 800a28c:	3331      	adds	r3, #49	; 0x31
 800a28e:	9a02      	ldr	r2, [sp, #8]
 800a290:	7013      	strb	r3, [r2, #0]
 800a292:	e774      	b.n	800a17e <_dtoa_r+0x886>
 800a294:	4638      	mov	r0, r7
 800a296:	e7b8      	b.n	800a20a <_dtoa_r+0x912>
 800a298:	2201      	movs	r2, #1
 800a29a:	e7e1      	b.n	800a260 <_dtoa_r+0x968>
 800a29c:	f1ba 0f00 	cmp.w	sl, #0
 800a2a0:	db06      	blt.n	800a2b0 <_dtoa_r+0x9b8>
 800a2a2:	9907      	ldr	r1, [sp, #28]
 800a2a4:	ea41 0a0a 	orr.w	sl, r1, sl
 800a2a8:	9908      	ldr	r1, [sp, #32]
 800a2aa:	ea5a 0101 	orrs.w	r1, sl, r1
 800a2ae:	d120      	bne.n	800a2f2 <_dtoa_r+0x9fa>
 800a2b0:	2a00      	cmp	r2, #0
 800a2b2:	ddec      	ble.n	800a28e <_dtoa_r+0x996>
 800a2b4:	4629      	mov	r1, r5
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	9305      	str	r3, [sp, #20]
 800a2bc:	f000 fea8 	bl	800b010 <__lshift>
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	f000 ff10 	bl	800b0e8 <__mcmp>
 800a2c8:	2800      	cmp	r0, #0
 800a2ca:	9b05      	ldr	r3, [sp, #20]
 800a2cc:	dc02      	bgt.n	800a2d4 <_dtoa_r+0x9dc>
 800a2ce:	d1de      	bne.n	800a28e <_dtoa_r+0x996>
 800a2d0:	07da      	lsls	r2, r3, #31
 800a2d2:	d5dc      	bpl.n	800a28e <_dtoa_r+0x996>
 800a2d4:	2b39      	cmp	r3, #57	; 0x39
 800a2d6:	d1d8      	bne.n	800a28a <_dtoa_r+0x992>
 800a2d8:	9a02      	ldr	r2, [sp, #8]
 800a2da:	2339      	movs	r3, #57	; 0x39
 800a2dc:	7013      	strb	r3, [r2, #0]
 800a2de:	4643      	mov	r3, r8
 800a2e0:	4698      	mov	r8, r3
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a2e8:	2a39      	cmp	r2, #57	; 0x39
 800a2ea:	d051      	beq.n	800a390 <_dtoa_r+0xa98>
 800a2ec:	3201      	adds	r2, #1
 800a2ee:	701a      	strb	r2, [r3, #0]
 800a2f0:	e745      	b.n	800a17e <_dtoa_r+0x886>
 800a2f2:	2a00      	cmp	r2, #0
 800a2f4:	dd03      	ble.n	800a2fe <_dtoa_r+0xa06>
 800a2f6:	2b39      	cmp	r3, #57	; 0x39
 800a2f8:	d0ee      	beq.n	800a2d8 <_dtoa_r+0x9e0>
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	e7c7      	b.n	800a28e <_dtoa_r+0x996>
 800a2fe:	9a05      	ldr	r2, [sp, #20]
 800a300:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a302:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a306:	428a      	cmp	r2, r1
 800a308:	d02b      	beq.n	800a362 <_dtoa_r+0xa6a>
 800a30a:	4629      	mov	r1, r5
 800a30c:	2300      	movs	r3, #0
 800a30e:	220a      	movs	r2, #10
 800a310:	4630      	mov	r0, r6
 800a312:	f000 fc83 	bl	800ac1c <__multadd>
 800a316:	45b9      	cmp	r9, r7
 800a318:	4605      	mov	r5, r0
 800a31a:	f04f 0300 	mov.w	r3, #0
 800a31e:	f04f 020a 	mov.w	r2, #10
 800a322:	4649      	mov	r1, r9
 800a324:	4630      	mov	r0, r6
 800a326:	d107      	bne.n	800a338 <_dtoa_r+0xa40>
 800a328:	f000 fc78 	bl	800ac1c <__multadd>
 800a32c:	4681      	mov	r9, r0
 800a32e:	4607      	mov	r7, r0
 800a330:	9b05      	ldr	r3, [sp, #20]
 800a332:	3301      	adds	r3, #1
 800a334:	9305      	str	r3, [sp, #20]
 800a336:	e774      	b.n	800a222 <_dtoa_r+0x92a>
 800a338:	f000 fc70 	bl	800ac1c <__multadd>
 800a33c:	4639      	mov	r1, r7
 800a33e:	4681      	mov	r9, r0
 800a340:	2300      	movs	r3, #0
 800a342:	220a      	movs	r2, #10
 800a344:	4630      	mov	r0, r6
 800a346:	f000 fc69 	bl	800ac1c <__multadd>
 800a34a:	4607      	mov	r7, r0
 800a34c:	e7f0      	b.n	800a330 <_dtoa_r+0xa38>
 800a34e:	f1ba 0f00 	cmp.w	sl, #0
 800a352:	9a00      	ldr	r2, [sp, #0]
 800a354:	bfcc      	ite	gt
 800a356:	46d0      	movgt	r8, sl
 800a358:	f04f 0801 	movle.w	r8, #1
 800a35c:	4490      	add	r8, r2
 800a35e:	f04f 0900 	mov.w	r9, #0
 800a362:	4629      	mov	r1, r5
 800a364:	2201      	movs	r2, #1
 800a366:	4630      	mov	r0, r6
 800a368:	9302      	str	r3, [sp, #8]
 800a36a:	f000 fe51 	bl	800b010 <__lshift>
 800a36e:	4621      	mov	r1, r4
 800a370:	4605      	mov	r5, r0
 800a372:	f000 feb9 	bl	800b0e8 <__mcmp>
 800a376:	2800      	cmp	r0, #0
 800a378:	dcb1      	bgt.n	800a2de <_dtoa_r+0x9e6>
 800a37a:	d102      	bne.n	800a382 <_dtoa_r+0xa8a>
 800a37c:	9b02      	ldr	r3, [sp, #8]
 800a37e:	07db      	lsls	r3, r3, #31
 800a380:	d4ad      	bmi.n	800a2de <_dtoa_r+0x9e6>
 800a382:	4643      	mov	r3, r8
 800a384:	4698      	mov	r8, r3
 800a386:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a38a:	2a30      	cmp	r2, #48	; 0x30
 800a38c:	d0fa      	beq.n	800a384 <_dtoa_r+0xa8c>
 800a38e:	e6f6      	b.n	800a17e <_dtoa_r+0x886>
 800a390:	9a00      	ldr	r2, [sp, #0]
 800a392:	429a      	cmp	r2, r3
 800a394:	d1a4      	bne.n	800a2e0 <_dtoa_r+0x9e8>
 800a396:	f10b 0b01 	add.w	fp, fp, #1
 800a39a:	2331      	movs	r3, #49	; 0x31
 800a39c:	e778      	b.n	800a290 <_dtoa_r+0x998>
 800a39e:	4b15      	ldr	r3, [pc, #84]	; (800a3f4 <_dtoa_r+0xafc>)
 800a3a0:	f7ff bb12 	b.w	80099c8 <_dtoa_r+0xd0>
 800a3a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f47f aaee 	bne.w	8009988 <_dtoa_r+0x90>
 800a3ac:	4b12      	ldr	r3, [pc, #72]	; (800a3f8 <_dtoa_r+0xb00>)
 800a3ae:	f7ff bb0b 	b.w	80099c8 <_dtoa_r+0xd0>
 800a3b2:	f1ba 0f00 	cmp.w	sl, #0
 800a3b6:	dc03      	bgt.n	800a3c0 <_dtoa_r+0xac8>
 800a3b8:	9b07      	ldr	r3, [sp, #28]
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	f73f aec7 	bgt.w	800a14e <_dtoa_r+0x856>
 800a3c0:	f8dd 8000 	ldr.w	r8, [sp]
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	f7ff fa0a 	bl	80097e0 <quorem>
 800a3cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a3d0:	f808 3b01 	strb.w	r3, [r8], #1
 800a3d4:	9a00      	ldr	r2, [sp, #0]
 800a3d6:	eba8 0202 	sub.w	r2, r8, r2
 800a3da:	4592      	cmp	sl, r2
 800a3dc:	ddb7      	ble.n	800a34e <_dtoa_r+0xa56>
 800a3de:	4629      	mov	r1, r5
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	220a      	movs	r2, #10
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	f000 fc19 	bl	800ac1c <__multadd>
 800a3ea:	4605      	mov	r5, r0
 800a3ec:	e7ea      	b.n	800a3c4 <_dtoa_r+0xacc>
 800a3ee:	bf00      	nop
 800a3f0:	0800cfd4 	.word	0x0800cfd4
 800a3f4:	0800d1d9 	.word	0x0800d1d9
 800a3f8:	0800cf51 	.word	0x0800cf51

0800a3fc <rshift>:
 800a3fc:	6903      	ldr	r3, [r0, #16]
 800a3fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a402:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a406:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a40a:	f100 0414 	add.w	r4, r0, #20
 800a40e:	dd45      	ble.n	800a49c <rshift+0xa0>
 800a410:	f011 011f 	ands.w	r1, r1, #31
 800a414:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a418:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a41c:	d10c      	bne.n	800a438 <rshift+0x3c>
 800a41e:	f100 0710 	add.w	r7, r0, #16
 800a422:	4629      	mov	r1, r5
 800a424:	42b1      	cmp	r1, r6
 800a426:	d334      	bcc.n	800a492 <rshift+0x96>
 800a428:	1a9b      	subs	r3, r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	1eea      	subs	r2, r5, #3
 800a42e:	4296      	cmp	r6, r2
 800a430:	bf38      	it	cc
 800a432:	2300      	movcc	r3, #0
 800a434:	4423      	add	r3, r4
 800a436:	e015      	b.n	800a464 <rshift+0x68>
 800a438:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a43c:	f1c1 0820 	rsb	r8, r1, #32
 800a440:	40cf      	lsrs	r7, r1
 800a442:	f105 0e04 	add.w	lr, r5, #4
 800a446:	46a1      	mov	r9, r4
 800a448:	4576      	cmp	r6, lr
 800a44a:	46f4      	mov	ip, lr
 800a44c:	d815      	bhi.n	800a47a <rshift+0x7e>
 800a44e:	1a9b      	subs	r3, r3, r2
 800a450:	009a      	lsls	r2, r3, #2
 800a452:	3a04      	subs	r2, #4
 800a454:	3501      	adds	r5, #1
 800a456:	42ae      	cmp	r6, r5
 800a458:	bf38      	it	cc
 800a45a:	2200      	movcc	r2, #0
 800a45c:	18a3      	adds	r3, r4, r2
 800a45e:	50a7      	str	r7, [r4, r2]
 800a460:	b107      	cbz	r7, 800a464 <rshift+0x68>
 800a462:	3304      	adds	r3, #4
 800a464:	1b1a      	subs	r2, r3, r4
 800a466:	42a3      	cmp	r3, r4
 800a468:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a46c:	bf08      	it	eq
 800a46e:	2300      	moveq	r3, #0
 800a470:	6102      	str	r2, [r0, #16]
 800a472:	bf08      	it	eq
 800a474:	6143      	streq	r3, [r0, #20]
 800a476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a47a:	f8dc c000 	ldr.w	ip, [ip]
 800a47e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a482:	ea4c 0707 	orr.w	r7, ip, r7
 800a486:	f849 7b04 	str.w	r7, [r9], #4
 800a48a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a48e:	40cf      	lsrs	r7, r1
 800a490:	e7da      	b.n	800a448 <rshift+0x4c>
 800a492:	f851 cb04 	ldr.w	ip, [r1], #4
 800a496:	f847 cf04 	str.w	ip, [r7, #4]!
 800a49a:	e7c3      	b.n	800a424 <rshift+0x28>
 800a49c:	4623      	mov	r3, r4
 800a49e:	e7e1      	b.n	800a464 <rshift+0x68>

0800a4a0 <__hexdig_fun>:
 800a4a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a4a4:	2b09      	cmp	r3, #9
 800a4a6:	d802      	bhi.n	800a4ae <__hexdig_fun+0xe>
 800a4a8:	3820      	subs	r0, #32
 800a4aa:	b2c0      	uxtb	r0, r0
 800a4ac:	4770      	bx	lr
 800a4ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a4b2:	2b05      	cmp	r3, #5
 800a4b4:	d801      	bhi.n	800a4ba <__hexdig_fun+0x1a>
 800a4b6:	3847      	subs	r0, #71	; 0x47
 800a4b8:	e7f7      	b.n	800a4aa <__hexdig_fun+0xa>
 800a4ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a4be:	2b05      	cmp	r3, #5
 800a4c0:	d801      	bhi.n	800a4c6 <__hexdig_fun+0x26>
 800a4c2:	3827      	subs	r0, #39	; 0x27
 800a4c4:	e7f1      	b.n	800a4aa <__hexdig_fun+0xa>
 800a4c6:	2000      	movs	r0, #0
 800a4c8:	4770      	bx	lr
	...

0800a4cc <__gethex>:
 800a4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d0:	ed2d 8b02 	vpush	{d8}
 800a4d4:	b089      	sub	sp, #36	; 0x24
 800a4d6:	ee08 0a10 	vmov	s16, r0
 800a4da:	9304      	str	r3, [sp, #16]
 800a4dc:	4bbc      	ldr	r3, [pc, #752]	; (800a7d0 <__gethex+0x304>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	9301      	str	r3, [sp, #4]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	468b      	mov	fp, r1
 800a4e6:	4690      	mov	r8, r2
 800a4e8:	f7f5 feb4 	bl	8000254 <strlen>
 800a4ec:	9b01      	ldr	r3, [sp, #4]
 800a4ee:	f8db 2000 	ldr.w	r2, [fp]
 800a4f2:	4403      	add	r3, r0
 800a4f4:	4682      	mov	sl, r0
 800a4f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a4fa:	9305      	str	r3, [sp, #20]
 800a4fc:	1c93      	adds	r3, r2, #2
 800a4fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a502:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a506:	32fe      	adds	r2, #254	; 0xfe
 800a508:	18d1      	adds	r1, r2, r3
 800a50a:	461f      	mov	r7, r3
 800a50c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a510:	9100      	str	r1, [sp, #0]
 800a512:	2830      	cmp	r0, #48	; 0x30
 800a514:	d0f8      	beq.n	800a508 <__gethex+0x3c>
 800a516:	f7ff ffc3 	bl	800a4a0 <__hexdig_fun>
 800a51a:	4604      	mov	r4, r0
 800a51c:	2800      	cmp	r0, #0
 800a51e:	d13a      	bne.n	800a596 <__gethex+0xca>
 800a520:	9901      	ldr	r1, [sp, #4]
 800a522:	4652      	mov	r2, sl
 800a524:	4638      	mov	r0, r7
 800a526:	f7fe fa98 	bl	8008a5a <strncmp>
 800a52a:	4605      	mov	r5, r0
 800a52c:	2800      	cmp	r0, #0
 800a52e:	d168      	bne.n	800a602 <__gethex+0x136>
 800a530:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a534:	eb07 060a 	add.w	r6, r7, sl
 800a538:	f7ff ffb2 	bl	800a4a0 <__hexdig_fun>
 800a53c:	2800      	cmp	r0, #0
 800a53e:	d062      	beq.n	800a606 <__gethex+0x13a>
 800a540:	4633      	mov	r3, r6
 800a542:	7818      	ldrb	r0, [r3, #0]
 800a544:	2830      	cmp	r0, #48	; 0x30
 800a546:	461f      	mov	r7, r3
 800a548:	f103 0301 	add.w	r3, r3, #1
 800a54c:	d0f9      	beq.n	800a542 <__gethex+0x76>
 800a54e:	f7ff ffa7 	bl	800a4a0 <__hexdig_fun>
 800a552:	2301      	movs	r3, #1
 800a554:	fab0 f480 	clz	r4, r0
 800a558:	0964      	lsrs	r4, r4, #5
 800a55a:	4635      	mov	r5, r6
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	463a      	mov	r2, r7
 800a560:	4616      	mov	r6, r2
 800a562:	3201      	adds	r2, #1
 800a564:	7830      	ldrb	r0, [r6, #0]
 800a566:	f7ff ff9b 	bl	800a4a0 <__hexdig_fun>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	d1f8      	bne.n	800a560 <__gethex+0x94>
 800a56e:	9901      	ldr	r1, [sp, #4]
 800a570:	4652      	mov	r2, sl
 800a572:	4630      	mov	r0, r6
 800a574:	f7fe fa71 	bl	8008a5a <strncmp>
 800a578:	b980      	cbnz	r0, 800a59c <__gethex+0xd0>
 800a57a:	b94d      	cbnz	r5, 800a590 <__gethex+0xc4>
 800a57c:	eb06 050a 	add.w	r5, r6, sl
 800a580:	462a      	mov	r2, r5
 800a582:	4616      	mov	r6, r2
 800a584:	3201      	adds	r2, #1
 800a586:	7830      	ldrb	r0, [r6, #0]
 800a588:	f7ff ff8a 	bl	800a4a0 <__hexdig_fun>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	d1f8      	bne.n	800a582 <__gethex+0xb6>
 800a590:	1bad      	subs	r5, r5, r6
 800a592:	00ad      	lsls	r5, r5, #2
 800a594:	e004      	b.n	800a5a0 <__gethex+0xd4>
 800a596:	2400      	movs	r4, #0
 800a598:	4625      	mov	r5, r4
 800a59a:	e7e0      	b.n	800a55e <__gethex+0x92>
 800a59c:	2d00      	cmp	r5, #0
 800a59e:	d1f7      	bne.n	800a590 <__gethex+0xc4>
 800a5a0:	7833      	ldrb	r3, [r6, #0]
 800a5a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a5a6:	2b50      	cmp	r3, #80	; 0x50
 800a5a8:	d13b      	bne.n	800a622 <__gethex+0x156>
 800a5aa:	7873      	ldrb	r3, [r6, #1]
 800a5ac:	2b2b      	cmp	r3, #43	; 0x2b
 800a5ae:	d02c      	beq.n	800a60a <__gethex+0x13e>
 800a5b0:	2b2d      	cmp	r3, #45	; 0x2d
 800a5b2:	d02e      	beq.n	800a612 <__gethex+0x146>
 800a5b4:	1c71      	adds	r1, r6, #1
 800a5b6:	f04f 0900 	mov.w	r9, #0
 800a5ba:	7808      	ldrb	r0, [r1, #0]
 800a5bc:	f7ff ff70 	bl	800a4a0 <__hexdig_fun>
 800a5c0:	1e43      	subs	r3, r0, #1
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	2b18      	cmp	r3, #24
 800a5c6:	d82c      	bhi.n	800a622 <__gethex+0x156>
 800a5c8:	f1a0 0210 	sub.w	r2, r0, #16
 800a5cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a5d0:	f7ff ff66 	bl	800a4a0 <__hexdig_fun>
 800a5d4:	1e43      	subs	r3, r0, #1
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	2b18      	cmp	r3, #24
 800a5da:	d91d      	bls.n	800a618 <__gethex+0x14c>
 800a5dc:	f1b9 0f00 	cmp.w	r9, #0
 800a5e0:	d000      	beq.n	800a5e4 <__gethex+0x118>
 800a5e2:	4252      	negs	r2, r2
 800a5e4:	4415      	add	r5, r2
 800a5e6:	f8cb 1000 	str.w	r1, [fp]
 800a5ea:	b1e4      	cbz	r4, 800a626 <__gethex+0x15a>
 800a5ec:	9b00      	ldr	r3, [sp, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	bf14      	ite	ne
 800a5f2:	2700      	movne	r7, #0
 800a5f4:	2706      	moveq	r7, #6
 800a5f6:	4638      	mov	r0, r7
 800a5f8:	b009      	add	sp, #36	; 0x24
 800a5fa:	ecbd 8b02 	vpop	{d8}
 800a5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a602:	463e      	mov	r6, r7
 800a604:	4625      	mov	r5, r4
 800a606:	2401      	movs	r4, #1
 800a608:	e7ca      	b.n	800a5a0 <__gethex+0xd4>
 800a60a:	f04f 0900 	mov.w	r9, #0
 800a60e:	1cb1      	adds	r1, r6, #2
 800a610:	e7d3      	b.n	800a5ba <__gethex+0xee>
 800a612:	f04f 0901 	mov.w	r9, #1
 800a616:	e7fa      	b.n	800a60e <__gethex+0x142>
 800a618:	230a      	movs	r3, #10
 800a61a:	fb03 0202 	mla	r2, r3, r2, r0
 800a61e:	3a10      	subs	r2, #16
 800a620:	e7d4      	b.n	800a5cc <__gethex+0x100>
 800a622:	4631      	mov	r1, r6
 800a624:	e7df      	b.n	800a5e6 <__gethex+0x11a>
 800a626:	1bf3      	subs	r3, r6, r7
 800a628:	3b01      	subs	r3, #1
 800a62a:	4621      	mov	r1, r4
 800a62c:	2b07      	cmp	r3, #7
 800a62e:	dc0b      	bgt.n	800a648 <__gethex+0x17c>
 800a630:	ee18 0a10 	vmov	r0, s16
 800a634:	f000 fa90 	bl	800ab58 <_Balloc>
 800a638:	4604      	mov	r4, r0
 800a63a:	b940      	cbnz	r0, 800a64e <__gethex+0x182>
 800a63c:	4b65      	ldr	r3, [pc, #404]	; (800a7d4 <__gethex+0x308>)
 800a63e:	4602      	mov	r2, r0
 800a640:	21de      	movs	r1, #222	; 0xde
 800a642:	4865      	ldr	r0, [pc, #404]	; (800a7d8 <__gethex+0x30c>)
 800a644:	f001 fda4 	bl	800c190 <__assert_func>
 800a648:	3101      	adds	r1, #1
 800a64a:	105b      	asrs	r3, r3, #1
 800a64c:	e7ee      	b.n	800a62c <__gethex+0x160>
 800a64e:	f100 0914 	add.w	r9, r0, #20
 800a652:	f04f 0b00 	mov.w	fp, #0
 800a656:	f1ca 0301 	rsb	r3, sl, #1
 800a65a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a65e:	f8cd b000 	str.w	fp, [sp]
 800a662:	9306      	str	r3, [sp, #24]
 800a664:	42b7      	cmp	r7, r6
 800a666:	d340      	bcc.n	800a6ea <__gethex+0x21e>
 800a668:	9802      	ldr	r0, [sp, #8]
 800a66a:	9b00      	ldr	r3, [sp, #0]
 800a66c:	f840 3b04 	str.w	r3, [r0], #4
 800a670:	eba0 0009 	sub.w	r0, r0, r9
 800a674:	1080      	asrs	r0, r0, #2
 800a676:	0146      	lsls	r6, r0, #5
 800a678:	6120      	str	r0, [r4, #16]
 800a67a:	4618      	mov	r0, r3
 800a67c:	f000 fb62 	bl	800ad44 <__hi0bits>
 800a680:	1a30      	subs	r0, r6, r0
 800a682:	f8d8 6000 	ldr.w	r6, [r8]
 800a686:	42b0      	cmp	r0, r6
 800a688:	dd63      	ble.n	800a752 <__gethex+0x286>
 800a68a:	1b87      	subs	r7, r0, r6
 800a68c:	4639      	mov	r1, r7
 800a68e:	4620      	mov	r0, r4
 800a690:	f000 fefd 	bl	800b48e <__any_on>
 800a694:	4682      	mov	sl, r0
 800a696:	b1a8      	cbz	r0, 800a6c4 <__gethex+0x1f8>
 800a698:	1e7b      	subs	r3, r7, #1
 800a69a:	1159      	asrs	r1, r3, #5
 800a69c:	f003 021f 	and.w	r2, r3, #31
 800a6a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a6a4:	f04f 0a01 	mov.w	sl, #1
 800a6a8:	fa0a f202 	lsl.w	r2, sl, r2
 800a6ac:	420a      	tst	r2, r1
 800a6ae:	d009      	beq.n	800a6c4 <__gethex+0x1f8>
 800a6b0:	4553      	cmp	r3, sl
 800a6b2:	dd05      	ble.n	800a6c0 <__gethex+0x1f4>
 800a6b4:	1eb9      	subs	r1, r7, #2
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f000 fee9 	bl	800b48e <__any_on>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	d145      	bne.n	800a74c <__gethex+0x280>
 800a6c0:	f04f 0a02 	mov.w	sl, #2
 800a6c4:	4639      	mov	r1, r7
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f7ff fe98 	bl	800a3fc <rshift>
 800a6cc:	443d      	add	r5, r7
 800a6ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6d2:	42ab      	cmp	r3, r5
 800a6d4:	da4c      	bge.n	800a770 <__gethex+0x2a4>
 800a6d6:	ee18 0a10 	vmov	r0, s16
 800a6da:	4621      	mov	r1, r4
 800a6dc:	f000 fa7c 	bl	800abd8 <_Bfree>
 800a6e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	6013      	str	r3, [r2, #0]
 800a6e6:	27a3      	movs	r7, #163	; 0xa3
 800a6e8:	e785      	b.n	800a5f6 <__gethex+0x12a>
 800a6ea:	1e73      	subs	r3, r6, #1
 800a6ec:	9a05      	ldr	r2, [sp, #20]
 800a6ee:	9303      	str	r3, [sp, #12]
 800a6f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d019      	beq.n	800a72c <__gethex+0x260>
 800a6f8:	f1bb 0f20 	cmp.w	fp, #32
 800a6fc:	d107      	bne.n	800a70e <__gethex+0x242>
 800a6fe:	9b02      	ldr	r3, [sp, #8]
 800a700:	9a00      	ldr	r2, [sp, #0]
 800a702:	f843 2b04 	str.w	r2, [r3], #4
 800a706:	9302      	str	r3, [sp, #8]
 800a708:	2300      	movs	r3, #0
 800a70a:	9300      	str	r3, [sp, #0]
 800a70c:	469b      	mov	fp, r3
 800a70e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a712:	f7ff fec5 	bl	800a4a0 <__hexdig_fun>
 800a716:	9b00      	ldr	r3, [sp, #0]
 800a718:	f000 000f 	and.w	r0, r0, #15
 800a71c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a720:	4303      	orrs	r3, r0
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	f10b 0b04 	add.w	fp, fp, #4
 800a728:	9b03      	ldr	r3, [sp, #12]
 800a72a:	e00d      	b.n	800a748 <__gethex+0x27c>
 800a72c:	9b03      	ldr	r3, [sp, #12]
 800a72e:	9a06      	ldr	r2, [sp, #24]
 800a730:	4413      	add	r3, r2
 800a732:	42bb      	cmp	r3, r7
 800a734:	d3e0      	bcc.n	800a6f8 <__gethex+0x22c>
 800a736:	4618      	mov	r0, r3
 800a738:	9901      	ldr	r1, [sp, #4]
 800a73a:	9307      	str	r3, [sp, #28]
 800a73c:	4652      	mov	r2, sl
 800a73e:	f7fe f98c 	bl	8008a5a <strncmp>
 800a742:	9b07      	ldr	r3, [sp, #28]
 800a744:	2800      	cmp	r0, #0
 800a746:	d1d7      	bne.n	800a6f8 <__gethex+0x22c>
 800a748:	461e      	mov	r6, r3
 800a74a:	e78b      	b.n	800a664 <__gethex+0x198>
 800a74c:	f04f 0a03 	mov.w	sl, #3
 800a750:	e7b8      	b.n	800a6c4 <__gethex+0x1f8>
 800a752:	da0a      	bge.n	800a76a <__gethex+0x29e>
 800a754:	1a37      	subs	r7, r6, r0
 800a756:	4621      	mov	r1, r4
 800a758:	ee18 0a10 	vmov	r0, s16
 800a75c:	463a      	mov	r2, r7
 800a75e:	f000 fc57 	bl	800b010 <__lshift>
 800a762:	1bed      	subs	r5, r5, r7
 800a764:	4604      	mov	r4, r0
 800a766:	f100 0914 	add.w	r9, r0, #20
 800a76a:	f04f 0a00 	mov.w	sl, #0
 800a76e:	e7ae      	b.n	800a6ce <__gethex+0x202>
 800a770:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a774:	42a8      	cmp	r0, r5
 800a776:	dd72      	ble.n	800a85e <__gethex+0x392>
 800a778:	1b45      	subs	r5, r0, r5
 800a77a:	42ae      	cmp	r6, r5
 800a77c:	dc36      	bgt.n	800a7ec <__gethex+0x320>
 800a77e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a782:	2b02      	cmp	r3, #2
 800a784:	d02a      	beq.n	800a7dc <__gethex+0x310>
 800a786:	2b03      	cmp	r3, #3
 800a788:	d02c      	beq.n	800a7e4 <__gethex+0x318>
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d115      	bne.n	800a7ba <__gethex+0x2ee>
 800a78e:	42ae      	cmp	r6, r5
 800a790:	d113      	bne.n	800a7ba <__gethex+0x2ee>
 800a792:	2e01      	cmp	r6, #1
 800a794:	d10b      	bne.n	800a7ae <__gethex+0x2e2>
 800a796:	9a04      	ldr	r2, [sp, #16]
 800a798:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a79c:	6013      	str	r3, [r2, #0]
 800a79e:	2301      	movs	r3, #1
 800a7a0:	6123      	str	r3, [r4, #16]
 800a7a2:	f8c9 3000 	str.w	r3, [r9]
 800a7a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7a8:	2762      	movs	r7, #98	; 0x62
 800a7aa:	601c      	str	r4, [r3, #0]
 800a7ac:	e723      	b.n	800a5f6 <__gethex+0x12a>
 800a7ae:	1e71      	subs	r1, r6, #1
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f000 fe6c 	bl	800b48e <__any_on>
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	d1ed      	bne.n	800a796 <__gethex+0x2ca>
 800a7ba:	ee18 0a10 	vmov	r0, s16
 800a7be:	4621      	mov	r1, r4
 800a7c0:	f000 fa0a 	bl	800abd8 <_Bfree>
 800a7c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	6013      	str	r3, [r2, #0]
 800a7ca:	2750      	movs	r7, #80	; 0x50
 800a7cc:	e713      	b.n	800a5f6 <__gethex+0x12a>
 800a7ce:	bf00      	nop
 800a7d0:	0800d050 	.word	0x0800d050
 800a7d4:	0800cfd4 	.word	0x0800cfd4
 800a7d8:	0800cfe5 	.word	0x0800cfe5
 800a7dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1eb      	bne.n	800a7ba <__gethex+0x2ee>
 800a7e2:	e7d8      	b.n	800a796 <__gethex+0x2ca>
 800a7e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1d5      	bne.n	800a796 <__gethex+0x2ca>
 800a7ea:	e7e6      	b.n	800a7ba <__gethex+0x2ee>
 800a7ec:	1e6f      	subs	r7, r5, #1
 800a7ee:	f1ba 0f00 	cmp.w	sl, #0
 800a7f2:	d131      	bne.n	800a858 <__gethex+0x38c>
 800a7f4:	b127      	cbz	r7, 800a800 <__gethex+0x334>
 800a7f6:	4639      	mov	r1, r7
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	f000 fe48 	bl	800b48e <__any_on>
 800a7fe:	4682      	mov	sl, r0
 800a800:	117b      	asrs	r3, r7, #5
 800a802:	2101      	movs	r1, #1
 800a804:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a808:	f007 071f 	and.w	r7, r7, #31
 800a80c:	fa01 f707 	lsl.w	r7, r1, r7
 800a810:	421f      	tst	r7, r3
 800a812:	4629      	mov	r1, r5
 800a814:	4620      	mov	r0, r4
 800a816:	bf18      	it	ne
 800a818:	f04a 0a02 	orrne.w	sl, sl, #2
 800a81c:	1b76      	subs	r6, r6, r5
 800a81e:	f7ff fded 	bl	800a3fc <rshift>
 800a822:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a826:	2702      	movs	r7, #2
 800a828:	f1ba 0f00 	cmp.w	sl, #0
 800a82c:	d048      	beq.n	800a8c0 <__gethex+0x3f4>
 800a82e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a832:	2b02      	cmp	r3, #2
 800a834:	d015      	beq.n	800a862 <__gethex+0x396>
 800a836:	2b03      	cmp	r3, #3
 800a838:	d017      	beq.n	800a86a <__gethex+0x39e>
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d109      	bne.n	800a852 <__gethex+0x386>
 800a83e:	f01a 0f02 	tst.w	sl, #2
 800a842:	d006      	beq.n	800a852 <__gethex+0x386>
 800a844:	f8d9 0000 	ldr.w	r0, [r9]
 800a848:	ea4a 0a00 	orr.w	sl, sl, r0
 800a84c:	f01a 0f01 	tst.w	sl, #1
 800a850:	d10e      	bne.n	800a870 <__gethex+0x3a4>
 800a852:	f047 0710 	orr.w	r7, r7, #16
 800a856:	e033      	b.n	800a8c0 <__gethex+0x3f4>
 800a858:	f04f 0a01 	mov.w	sl, #1
 800a85c:	e7d0      	b.n	800a800 <__gethex+0x334>
 800a85e:	2701      	movs	r7, #1
 800a860:	e7e2      	b.n	800a828 <__gethex+0x35c>
 800a862:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a864:	f1c3 0301 	rsb	r3, r3, #1
 800a868:	9315      	str	r3, [sp, #84]	; 0x54
 800a86a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d0f0      	beq.n	800a852 <__gethex+0x386>
 800a870:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a874:	f104 0314 	add.w	r3, r4, #20
 800a878:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a87c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a880:	f04f 0c00 	mov.w	ip, #0
 800a884:	4618      	mov	r0, r3
 800a886:	f853 2b04 	ldr.w	r2, [r3], #4
 800a88a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a88e:	d01c      	beq.n	800a8ca <__gethex+0x3fe>
 800a890:	3201      	adds	r2, #1
 800a892:	6002      	str	r2, [r0, #0]
 800a894:	2f02      	cmp	r7, #2
 800a896:	f104 0314 	add.w	r3, r4, #20
 800a89a:	d13f      	bne.n	800a91c <__gethex+0x450>
 800a89c:	f8d8 2000 	ldr.w	r2, [r8]
 800a8a0:	3a01      	subs	r2, #1
 800a8a2:	42b2      	cmp	r2, r6
 800a8a4:	d10a      	bne.n	800a8bc <__gethex+0x3f0>
 800a8a6:	1171      	asrs	r1, r6, #5
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a8ae:	f006 061f 	and.w	r6, r6, #31
 800a8b2:	fa02 f606 	lsl.w	r6, r2, r6
 800a8b6:	421e      	tst	r6, r3
 800a8b8:	bf18      	it	ne
 800a8ba:	4617      	movne	r7, r2
 800a8bc:	f047 0720 	orr.w	r7, r7, #32
 800a8c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8c2:	601c      	str	r4, [r3, #0]
 800a8c4:	9b04      	ldr	r3, [sp, #16]
 800a8c6:	601d      	str	r5, [r3, #0]
 800a8c8:	e695      	b.n	800a5f6 <__gethex+0x12a>
 800a8ca:	4299      	cmp	r1, r3
 800a8cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a8d0:	d8d8      	bhi.n	800a884 <__gethex+0x3b8>
 800a8d2:	68a3      	ldr	r3, [r4, #8]
 800a8d4:	459b      	cmp	fp, r3
 800a8d6:	db19      	blt.n	800a90c <__gethex+0x440>
 800a8d8:	6861      	ldr	r1, [r4, #4]
 800a8da:	ee18 0a10 	vmov	r0, s16
 800a8de:	3101      	adds	r1, #1
 800a8e0:	f000 f93a 	bl	800ab58 <_Balloc>
 800a8e4:	4681      	mov	r9, r0
 800a8e6:	b918      	cbnz	r0, 800a8f0 <__gethex+0x424>
 800a8e8:	4b1a      	ldr	r3, [pc, #104]	; (800a954 <__gethex+0x488>)
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	2184      	movs	r1, #132	; 0x84
 800a8ee:	e6a8      	b.n	800a642 <__gethex+0x176>
 800a8f0:	6922      	ldr	r2, [r4, #16]
 800a8f2:	3202      	adds	r2, #2
 800a8f4:	f104 010c 	add.w	r1, r4, #12
 800a8f8:	0092      	lsls	r2, r2, #2
 800a8fa:	300c      	adds	r0, #12
 800a8fc:	f000 f91e 	bl	800ab3c <memcpy>
 800a900:	4621      	mov	r1, r4
 800a902:	ee18 0a10 	vmov	r0, s16
 800a906:	f000 f967 	bl	800abd8 <_Bfree>
 800a90a:	464c      	mov	r4, r9
 800a90c:	6923      	ldr	r3, [r4, #16]
 800a90e:	1c5a      	adds	r2, r3, #1
 800a910:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a914:	6122      	str	r2, [r4, #16]
 800a916:	2201      	movs	r2, #1
 800a918:	615a      	str	r2, [r3, #20]
 800a91a:	e7bb      	b.n	800a894 <__gethex+0x3c8>
 800a91c:	6922      	ldr	r2, [r4, #16]
 800a91e:	455a      	cmp	r2, fp
 800a920:	dd0b      	ble.n	800a93a <__gethex+0x46e>
 800a922:	2101      	movs	r1, #1
 800a924:	4620      	mov	r0, r4
 800a926:	f7ff fd69 	bl	800a3fc <rshift>
 800a92a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a92e:	3501      	adds	r5, #1
 800a930:	42ab      	cmp	r3, r5
 800a932:	f6ff aed0 	blt.w	800a6d6 <__gethex+0x20a>
 800a936:	2701      	movs	r7, #1
 800a938:	e7c0      	b.n	800a8bc <__gethex+0x3f0>
 800a93a:	f016 061f 	ands.w	r6, r6, #31
 800a93e:	d0fa      	beq.n	800a936 <__gethex+0x46a>
 800a940:	449a      	add	sl, r3
 800a942:	f1c6 0620 	rsb	r6, r6, #32
 800a946:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a94a:	f000 f9fb 	bl	800ad44 <__hi0bits>
 800a94e:	42b0      	cmp	r0, r6
 800a950:	dbe7      	blt.n	800a922 <__gethex+0x456>
 800a952:	e7f0      	b.n	800a936 <__gethex+0x46a>
 800a954:	0800cfd4 	.word	0x0800cfd4

0800a958 <L_shift>:
 800a958:	f1c2 0208 	rsb	r2, r2, #8
 800a95c:	0092      	lsls	r2, r2, #2
 800a95e:	b570      	push	{r4, r5, r6, lr}
 800a960:	f1c2 0620 	rsb	r6, r2, #32
 800a964:	6843      	ldr	r3, [r0, #4]
 800a966:	6804      	ldr	r4, [r0, #0]
 800a968:	fa03 f506 	lsl.w	r5, r3, r6
 800a96c:	432c      	orrs	r4, r5
 800a96e:	40d3      	lsrs	r3, r2
 800a970:	6004      	str	r4, [r0, #0]
 800a972:	f840 3f04 	str.w	r3, [r0, #4]!
 800a976:	4288      	cmp	r0, r1
 800a978:	d3f4      	bcc.n	800a964 <L_shift+0xc>
 800a97a:	bd70      	pop	{r4, r5, r6, pc}

0800a97c <__match>:
 800a97c:	b530      	push	{r4, r5, lr}
 800a97e:	6803      	ldr	r3, [r0, #0]
 800a980:	3301      	adds	r3, #1
 800a982:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a986:	b914      	cbnz	r4, 800a98e <__match+0x12>
 800a988:	6003      	str	r3, [r0, #0]
 800a98a:	2001      	movs	r0, #1
 800a98c:	bd30      	pop	{r4, r5, pc}
 800a98e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a992:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a996:	2d19      	cmp	r5, #25
 800a998:	bf98      	it	ls
 800a99a:	3220      	addls	r2, #32
 800a99c:	42a2      	cmp	r2, r4
 800a99e:	d0f0      	beq.n	800a982 <__match+0x6>
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	e7f3      	b.n	800a98c <__match+0x10>

0800a9a4 <__hexnan>:
 800a9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a8:	680b      	ldr	r3, [r1, #0]
 800a9aa:	6801      	ldr	r1, [r0, #0]
 800a9ac:	115e      	asrs	r6, r3, #5
 800a9ae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a9b2:	f013 031f 	ands.w	r3, r3, #31
 800a9b6:	b087      	sub	sp, #28
 800a9b8:	bf18      	it	ne
 800a9ba:	3604      	addne	r6, #4
 800a9bc:	2500      	movs	r5, #0
 800a9be:	1f37      	subs	r7, r6, #4
 800a9c0:	4682      	mov	sl, r0
 800a9c2:	4690      	mov	r8, r2
 800a9c4:	9301      	str	r3, [sp, #4]
 800a9c6:	f846 5c04 	str.w	r5, [r6, #-4]
 800a9ca:	46b9      	mov	r9, r7
 800a9cc:	463c      	mov	r4, r7
 800a9ce:	9502      	str	r5, [sp, #8]
 800a9d0:	46ab      	mov	fp, r5
 800a9d2:	784a      	ldrb	r2, [r1, #1]
 800a9d4:	1c4b      	adds	r3, r1, #1
 800a9d6:	9303      	str	r3, [sp, #12]
 800a9d8:	b342      	cbz	r2, 800aa2c <__hexnan+0x88>
 800a9da:	4610      	mov	r0, r2
 800a9dc:	9105      	str	r1, [sp, #20]
 800a9de:	9204      	str	r2, [sp, #16]
 800a9e0:	f7ff fd5e 	bl	800a4a0 <__hexdig_fun>
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	d14f      	bne.n	800aa88 <__hexnan+0xe4>
 800a9e8:	9a04      	ldr	r2, [sp, #16]
 800a9ea:	9905      	ldr	r1, [sp, #20]
 800a9ec:	2a20      	cmp	r2, #32
 800a9ee:	d818      	bhi.n	800aa22 <__hexnan+0x7e>
 800a9f0:	9b02      	ldr	r3, [sp, #8]
 800a9f2:	459b      	cmp	fp, r3
 800a9f4:	dd13      	ble.n	800aa1e <__hexnan+0x7a>
 800a9f6:	454c      	cmp	r4, r9
 800a9f8:	d206      	bcs.n	800aa08 <__hexnan+0x64>
 800a9fa:	2d07      	cmp	r5, #7
 800a9fc:	dc04      	bgt.n	800aa08 <__hexnan+0x64>
 800a9fe:	462a      	mov	r2, r5
 800aa00:	4649      	mov	r1, r9
 800aa02:	4620      	mov	r0, r4
 800aa04:	f7ff ffa8 	bl	800a958 <L_shift>
 800aa08:	4544      	cmp	r4, r8
 800aa0a:	d950      	bls.n	800aaae <__hexnan+0x10a>
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	f1a4 0904 	sub.w	r9, r4, #4
 800aa12:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa16:	f8cd b008 	str.w	fp, [sp, #8]
 800aa1a:	464c      	mov	r4, r9
 800aa1c:	461d      	mov	r5, r3
 800aa1e:	9903      	ldr	r1, [sp, #12]
 800aa20:	e7d7      	b.n	800a9d2 <__hexnan+0x2e>
 800aa22:	2a29      	cmp	r2, #41	; 0x29
 800aa24:	d156      	bne.n	800aad4 <__hexnan+0x130>
 800aa26:	3102      	adds	r1, #2
 800aa28:	f8ca 1000 	str.w	r1, [sl]
 800aa2c:	f1bb 0f00 	cmp.w	fp, #0
 800aa30:	d050      	beq.n	800aad4 <__hexnan+0x130>
 800aa32:	454c      	cmp	r4, r9
 800aa34:	d206      	bcs.n	800aa44 <__hexnan+0xa0>
 800aa36:	2d07      	cmp	r5, #7
 800aa38:	dc04      	bgt.n	800aa44 <__hexnan+0xa0>
 800aa3a:	462a      	mov	r2, r5
 800aa3c:	4649      	mov	r1, r9
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f7ff ff8a 	bl	800a958 <L_shift>
 800aa44:	4544      	cmp	r4, r8
 800aa46:	d934      	bls.n	800aab2 <__hexnan+0x10e>
 800aa48:	f1a8 0204 	sub.w	r2, r8, #4
 800aa4c:	4623      	mov	r3, r4
 800aa4e:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa52:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa56:	429f      	cmp	r7, r3
 800aa58:	d2f9      	bcs.n	800aa4e <__hexnan+0xaa>
 800aa5a:	1b3b      	subs	r3, r7, r4
 800aa5c:	f023 0303 	bic.w	r3, r3, #3
 800aa60:	3304      	adds	r3, #4
 800aa62:	3401      	adds	r4, #1
 800aa64:	3e03      	subs	r6, #3
 800aa66:	42b4      	cmp	r4, r6
 800aa68:	bf88      	it	hi
 800aa6a:	2304      	movhi	r3, #4
 800aa6c:	4443      	add	r3, r8
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f843 2b04 	str.w	r2, [r3], #4
 800aa74:	429f      	cmp	r7, r3
 800aa76:	d2fb      	bcs.n	800aa70 <__hexnan+0xcc>
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	b91b      	cbnz	r3, 800aa84 <__hexnan+0xe0>
 800aa7c:	4547      	cmp	r7, r8
 800aa7e:	d127      	bne.n	800aad0 <__hexnan+0x12c>
 800aa80:	2301      	movs	r3, #1
 800aa82:	603b      	str	r3, [r7, #0]
 800aa84:	2005      	movs	r0, #5
 800aa86:	e026      	b.n	800aad6 <__hexnan+0x132>
 800aa88:	3501      	adds	r5, #1
 800aa8a:	2d08      	cmp	r5, #8
 800aa8c:	f10b 0b01 	add.w	fp, fp, #1
 800aa90:	dd06      	ble.n	800aaa0 <__hexnan+0xfc>
 800aa92:	4544      	cmp	r4, r8
 800aa94:	d9c3      	bls.n	800aa1e <__hexnan+0x7a>
 800aa96:	2300      	movs	r3, #0
 800aa98:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa9c:	2501      	movs	r5, #1
 800aa9e:	3c04      	subs	r4, #4
 800aaa0:	6822      	ldr	r2, [r4, #0]
 800aaa2:	f000 000f 	and.w	r0, r0, #15
 800aaa6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aaaa:	6022      	str	r2, [r4, #0]
 800aaac:	e7b7      	b.n	800aa1e <__hexnan+0x7a>
 800aaae:	2508      	movs	r5, #8
 800aab0:	e7b5      	b.n	800aa1e <__hexnan+0x7a>
 800aab2:	9b01      	ldr	r3, [sp, #4]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d0df      	beq.n	800aa78 <__hexnan+0xd4>
 800aab8:	f04f 32ff 	mov.w	r2, #4294967295
 800aabc:	f1c3 0320 	rsb	r3, r3, #32
 800aac0:	fa22 f303 	lsr.w	r3, r2, r3
 800aac4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aac8:	401a      	ands	r2, r3
 800aaca:	f846 2c04 	str.w	r2, [r6, #-4]
 800aace:	e7d3      	b.n	800aa78 <__hexnan+0xd4>
 800aad0:	3f04      	subs	r7, #4
 800aad2:	e7d1      	b.n	800aa78 <__hexnan+0xd4>
 800aad4:	2004      	movs	r0, #4
 800aad6:	b007      	add	sp, #28
 800aad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aadc <_localeconv_r>:
 800aadc:	4800      	ldr	r0, [pc, #0]	; (800aae0 <_localeconv_r+0x4>)
 800aade:	4770      	bx	lr
 800aae0:	2000018c 	.word	0x2000018c

0800aae4 <_lseek_r>:
 800aae4:	b538      	push	{r3, r4, r5, lr}
 800aae6:	4d07      	ldr	r5, [pc, #28]	; (800ab04 <_lseek_r+0x20>)
 800aae8:	4604      	mov	r4, r0
 800aaea:	4608      	mov	r0, r1
 800aaec:	4611      	mov	r1, r2
 800aaee:	2200      	movs	r2, #0
 800aaf0:	602a      	str	r2, [r5, #0]
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	f7f7 f91a 	bl	8001d2c <_lseek>
 800aaf8:	1c43      	adds	r3, r0, #1
 800aafa:	d102      	bne.n	800ab02 <_lseek_r+0x1e>
 800aafc:	682b      	ldr	r3, [r5, #0]
 800aafe:	b103      	cbz	r3, 800ab02 <_lseek_r+0x1e>
 800ab00:	6023      	str	r3, [r4, #0]
 800ab02:	bd38      	pop	{r3, r4, r5, pc}
 800ab04:	200008e8 	.word	0x200008e8

0800ab08 <malloc>:
 800ab08:	4b02      	ldr	r3, [pc, #8]	; (800ab14 <malloc+0xc>)
 800ab0a:	4601      	mov	r1, r0
 800ab0c:	6818      	ldr	r0, [r3, #0]
 800ab0e:	f000 bd3f 	b.w	800b590 <_malloc_r>
 800ab12:	bf00      	nop
 800ab14:	20000034 	.word	0x20000034

0800ab18 <__ascii_mbtowc>:
 800ab18:	b082      	sub	sp, #8
 800ab1a:	b901      	cbnz	r1, 800ab1e <__ascii_mbtowc+0x6>
 800ab1c:	a901      	add	r1, sp, #4
 800ab1e:	b142      	cbz	r2, 800ab32 <__ascii_mbtowc+0x1a>
 800ab20:	b14b      	cbz	r3, 800ab36 <__ascii_mbtowc+0x1e>
 800ab22:	7813      	ldrb	r3, [r2, #0]
 800ab24:	600b      	str	r3, [r1, #0]
 800ab26:	7812      	ldrb	r2, [r2, #0]
 800ab28:	1e10      	subs	r0, r2, #0
 800ab2a:	bf18      	it	ne
 800ab2c:	2001      	movne	r0, #1
 800ab2e:	b002      	add	sp, #8
 800ab30:	4770      	bx	lr
 800ab32:	4610      	mov	r0, r2
 800ab34:	e7fb      	b.n	800ab2e <__ascii_mbtowc+0x16>
 800ab36:	f06f 0001 	mvn.w	r0, #1
 800ab3a:	e7f8      	b.n	800ab2e <__ascii_mbtowc+0x16>

0800ab3c <memcpy>:
 800ab3c:	440a      	add	r2, r1
 800ab3e:	4291      	cmp	r1, r2
 800ab40:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab44:	d100      	bne.n	800ab48 <memcpy+0xc>
 800ab46:	4770      	bx	lr
 800ab48:	b510      	push	{r4, lr}
 800ab4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab52:	4291      	cmp	r1, r2
 800ab54:	d1f9      	bne.n	800ab4a <memcpy+0xe>
 800ab56:	bd10      	pop	{r4, pc}

0800ab58 <_Balloc>:
 800ab58:	b570      	push	{r4, r5, r6, lr}
 800ab5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	460d      	mov	r5, r1
 800ab60:	b976      	cbnz	r6, 800ab80 <_Balloc+0x28>
 800ab62:	2010      	movs	r0, #16
 800ab64:	f7ff ffd0 	bl	800ab08 <malloc>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	6260      	str	r0, [r4, #36]	; 0x24
 800ab6c:	b920      	cbnz	r0, 800ab78 <_Balloc+0x20>
 800ab6e:	4b18      	ldr	r3, [pc, #96]	; (800abd0 <_Balloc+0x78>)
 800ab70:	4818      	ldr	r0, [pc, #96]	; (800abd4 <_Balloc+0x7c>)
 800ab72:	2166      	movs	r1, #102	; 0x66
 800ab74:	f001 fb0c 	bl	800c190 <__assert_func>
 800ab78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab7c:	6006      	str	r6, [r0, #0]
 800ab7e:	60c6      	str	r6, [r0, #12]
 800ab80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab82:	68f3      	ldr	r3, [r6, #12]
 800ab84:	b183      	cbz	r3, 800aba8 <_Balloc+0x50>
 800ab86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab8e:	b9b8      	cbnz	r0, 800abc0 <_Balloc+0x68>
 800ab90:	2101      	movs	r1, #1
 800ab92:	fa01 f605 	lsl.w	r6, r1, r5
 800ab96:	1d72      	adds	r2, r6, #5
 800ab98:	0092      	lsls	r2, r2, #2
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f000 fc98 	bl	800b4d0 <_calloc_r>
 800aba0:	b160      	cbz	r0, 800abbc <_Balloc+0x64>
 800aba2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aba6:	e00e      	b.n	800abc6 <_Balloc+0x6e>
 800aba8:	2221      	movs	r2, #33	; 0x21
 800abaa:	2104      	movs	r1, #4
 800abac:	4620      	mov	r0, r4
 800abae:	f000 fc8f 	bl	800b4d0 <_calloc_r>
 800abb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abb4:	60f0      	str	r0, [r6, #12]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1e4      	bne.n	800ab86 <_Balloc+0x2e>
 800abbc:	2000      	movs	r0, #0
 800abbe:	bd70      	pop	{r4, r5, r6, pc}
 800abc0:	6802      	ldr	r2, [r0, #0]
 800abc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abc6:	2300      	movs	r3, #0
 800abc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abcc:	e7f7      	b.n	800abbe <_Balloc+0x66>
 800abce:	bf00      	nop
 800abd0:	0800cf5e 	.word	0x0800cf5e
 800abd4:	0800d064 	.word	0x0800d064

0800abd8 <_Bfree>:
 800abd8:	b570      	push	{r4, r5, r6, lr}
 800abda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800abdc:	4605      	mov	r5, r0
 800abde:	460c      	mov	r4, r1
 800abe0:	b976      	cbnz	r6, 800ac00 <_Bfree+0x28>
 800abe2:	2010      	movs	r0, #16
 800abe4:	f7ff ff90 	bl	800ab08 <malloc>
 800abe8:	4602      	mov	r2, r0
 800abea:	6268      	str	r0, [r5, #36]	; 0x24
 800abec:	b920      	cbnz	r0, 800abf8 <_Bfree+0x20>
 800abee:	4b09      	ldr	r3, [pc, #36]	; (800ac14 <_Bfree+0x3c>)
 800abf0:	4809      	ldr	r0, [pc, #36]	; (800ac18 <_Bfree+0x40>)
 800abf2:	218a      	movs	r1, #138	; 0x8a
 800abf4:	f001 facc 	bl	800c190 <__assert_func>
 800abf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abfc:	6006      	str	r6, [r0, #0]
 800abfe:	60c6      	str	r6, [r0, #12]
 800ac00:	b13c      	cbz	r4, 800ac12 <_Bfree+0x3a>
 800ac02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac04:	6862      	ldr	r2, [r4, #4]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac0c:	6021      	str	r1, [r4, #0]
 800ac0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac12:	bd70      	pop	{r4, r5, r6, pc}
 800ac14:	0800cf5e 	.word	0x0800cf5e
 800ac18:	0800d064 	.word	0x0800d064

0800ac1c <__multadd>:
 800ac1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac20:	690e      	ldr	r6, [r1, #16]
 800ac22:	4607      	mov	r7, r0
 800ac24:	4698      	mov	r8, r3
 800ac26:	460c      	mov	r4, r1
 800ac28:	f101 0014 	add.w	r0, r1, #20
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	6805      	ldr	r5, [r0, #0]
 800ac30:	b2a9      	uxth	r1, r5
 800ac32:	fb02 8101 	mla	r1, r2, r1, r8
 800ac36:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ac3a:	0c2d      	lsrs	r5, r5, #16
 800ac3c:	fb02 c505 	mla	r5, r2, r5, ip
 800ac40:	b289      	uxth	r1, r1
 800ac42:	3301      	adds	r3, #1
 800ac44:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ac48:	429e      	cmp	r6, r3
 800ac4a:	f840 1b04 	str.w	r1, [r0], #4
 800ac4e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ac52:	dcec      	bgt.n	800ac2e <__multadd+0x12>
 800ac54:	f1b8 0f00 	cmp.w	r8, #0
 800ac58:	d022      	beq.n	800aca0 <__multadd+0x84>
 800ac5a:	68a3      	ldr	r3, [r4, #8]
 800ac5c:	42b3      	cmp	r3, r6
 800ac5e:	dc19      	bgt.n	800ac94 <__multadd+0x78>
 800ac60:	6861      	ldr	r1, [r4, #4]
 800ac62:	4638      	mov	r0, r7
 800ac64:	3101      	adds	r1, #1
 800ac66:	f7ff ff77 	bl	800ab58 <_Balloc>
 800ac6a:	4605      	mov	r5, r0
 800ac6c:	b928      	cbnz	r0, 800ac7a <__multadd+0x5e>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	4b0d      	ldr	r3, [pc, #52]	; (800aca8 <__multadd+0x8c>)
 800ac72:	480e      	ldr	r0, [pc, #56]	; (800acac <__multadd+0x90>)
 800ac74:	21b5      	movs	r1, #181	; 0xb5
 800ac76:	f001 fa8b 	bl	800c190 <__assert_func>
 800ac7a:	6922      	ldr	r2, [r4, #16]
 800ac7c:	3202      	adds	r2, #2
 800ac7e:	f104 010c 	add.w	r1, r4, #12
 800ac82:	0092      	lsls	r2, r2, #2
 800ac84:	300c      	adds	r0, #12
 800ac86:	f7ff ff59 	bl	800ab3c <memcpy>
 800ac8a:	4621      	mov	r1, r4
 800ac8c:	4638      	mov	r0, r7
 800ac8e:	f7ff ffa3 	bl	800abd8 <_Bfree>
 800ac92:	462c      	mov	r4, r5
 800ac94:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ac98:	3601      	adds	r6, #1
 800ac9a:	f8c3 8014 	str.w	r8, [r3, #20]
 800ac9e:	6126      	str	r6, [r4, #16]
 800aca0:	4620      	mov	r0, r4
 800aca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aca6:	bf00      	nop
 800aca8:	0800cfd4 	.word	0x0800cfd4
 800acac:	0800d064 	.word	0x0800d064

0800acb0 <__s2b>:
 800acb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acb4:	460c      	mov	r4, r1
 800acb6:	4615      	mov	r5, r2
 800acb8:	461f      	mov	r7, r3
 800acba:	2209      	movs	r2, #9
 800acbc:	3308      	adds	r3, #8
 800acbe:	4606      	mov	r6, r0
 800acc0:	fb93 f3f2 	sdiv	r3, r3, r2
 800acc4:	2100      	movs	r1, #0
 800acc6:	2201      	movs	r2, #1
 800acc8:	429a      	cmp	r2, r3
 800acca:	db09      	blt.n	800ace0 <__s2b+0x30>
 800accc:	4630      	mov	r0, r6
 800acce:	f7ff ff43 	bl	800ab58 <_Balloc>
 800acd2:	b940      	cbnz	r0, 800ace6 <__s2b+0x36>
 800acd4:	4602      	mov	r2, r0
 800acd6:	4b19      	ldr	r3, [pc, #100]	; (800ad3c <__s2b+0x8c>)
 800acd8:	4819      	ldr	r0, [pc, #100]	; (800ad40 <__s2b+0x90>)
 800acda:	21ce      	movs	r1, #206	; 0xce
 800acdc:	f001 fa58 	bl	800c190 <__assert_func>
 800ace0:	0052      	lsls	r2, r2, #1
 800ace2:	3101      	adds	r1, #1
 800ace4:	e7f0      	b.n	800acc8 <__s2b+0x18>
 800ace6:	9b08      	ldr	r3, [sp, #32]
 800ace8:	6143      	str	r3, [r0, #20]
 800acea:	2d09      	cmp	r5, #9
 800acec:	f04f 0301 	mov.w	r3, #1
 800acf0:	6103      	str	r3, [r0, #16]
 800acf2:	dd16      	ble.n	800ad22 <__s2b+0x72>
 800acf4:	f104 0909 	add.w	r9, r4, #9
 800acf8:	46c8      	mov	r8, r9
 800acfa:	442c      	add	r4, r5
 800acfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ad00:	4601      	mov	r1, r0
 800ad02:	3b30      	subs	r3, #48	; 0x30
 800ad04:	220a      	movs	r2, #10
 800ad06:	4630      	mov	r0, r6
 800ad08:	f7ff ff88 	bl	800ac1c <__multadd>
 800ad0c:	45a0      	cmp	r8, r4
 800ad0e:	d1f5      	bne.n	800acfc <__s2b+0x4c>
 800ad10:	f1a5 0408 	sub.w	r4, r5, #8
 800ad14:	444c      	add	r4, r9
 800ad16:	1b2d      	subs	r5, r5, r4
 800ad18:	1963      	adds	r3, r4, r5
 800ad1a:	42bb      	cmp	r3, r7
 800ad1c:	db04      	blt.n	800ad28 <__s2b+0x78>
 800ad1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad22:	340a      	adds	r4, #10
 800ad24:	2509      	movs	r5, #9
 800ad26:	e7f6      	b.n	800ad16 <__s2b+0x66>
 800ad28:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad2c:	4601      	mov	r1, r0
 800ad2e:	3b30      	subs	r3, #48	; 0x30
 800ad30:	220a      	movs	r2, #10
 800ad32:	4630      	mov	r0, r6
 800ad34:	f7ff ff72 	bl	800ac1c <__multadd>
 800ad38:	e7ee      	b.n	800ad18 <__s2b+0x68>
 800ad3a:	bf00      	nop
 800ad3c:	0800cfd4 	.word	0x0800cfd4
 800ad40:	0800d064 	.word	0x0800d064

0800ad44 <__hi0bits>:
 800ad44:	0c03      	lsrs	r3, r0, #16
 800ad46:	041b      	lsls	r3, r3, #16
 800ad48:	b9d3      	cbnz	r3, 800ad80 <__hi0bits+0x3c>
 800ad4a:	0400      	lsls	r0, r0, #16
 800ad4c:	2310      	movs	r3, #16
 800ad4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ad52:	bf04      	itt	eq
 800ad54:	0200      	lsleq	r0, r0, #8
 800ad56:	3308      	addeq	r3, #8
 800ad58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad5c:	bf04      	itt	eq
 800ad5e:	0100      	lsleq	r0, r0, #4
 800ad60:	3304      	addeq	r3, #4
 800ad62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad66:	bf04      	itt	eq
 800ad68:	0080      	lsleq	r0, r0, #2
 800ad6a:	3302      	addeq	r3, #2
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	db05      	blt.n	800ad7c <__hi0bits+0x38>
 800ad70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad74:	f103 0301 	add.w	r3, r3, #1
 800ad78:	bf08      	it	eq
 800ad7a:	2320      	moveq	r3, #32
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	4770      	bx	lr
 800ad80:	2300      	movs	r3, #0
 800ad82:	e7e4      	b.n	800ad4e <__hi0bits+0xa>

0800ad84 <__lo0bits>:
 800ad84:	6803      	ldr	r3, [r0, #0]
 800ad86:	f013 0207 	ands.w	r2, r3, #7
 800ad8a:	4601      	mov	r1, r0
 800ad8c:	d00b      	beq.n	800ada6 <__lo0bits+0x22>
 800ad8e:	07da      	lsls	r2, r3, #31
 800ad90:	d424      	bmi.n	800addc <__lo0bits+0x58>
 800ad92:	0798      	lsls	r0, r3, #30
 800ad94:	bf49      	itett	mi
 800ad96:	085b      	lsrmi	r3, r3, #1
 800ad98:	089b      	lsrpl	r3, r3, #2
 800ad9a:	2001      	movmi	r0, #1
 800ad9c:	600b      	strmi	r3, [r1, #0]
 800ad9e:	bf5c      	itt	pl
 800ada0:	600b      	strpl	r3, [r1, #0]
 800ada2:	2002      	movpl	r0, #2
 800ada4:	4770      	bx	lr
 800ada6:	b298      	uxth	r0, r3
 800ada8:	b9b0      	cbnz	r0, 800add8 <__lo0bits+0x54>
 800adaa:	0c1b      	lsrs	r3, r3, #16
 800adac:	2010      	movs	r0, #16
 800adae:	f013 0fff 	tst.w	r3, #255	; 0xff
 800adb2:	bf04      	itt	eq
 800adb4:	0a1b      	lsreq	r3, r3, #8
 800adb6:	3008      	addeq	r0, #8
 800adb8:	071a      	lsls	r2, r3, #28
 800adba:	bf04      	itt	eq
 800adbc:	091b      	lsreq	r3, r3, #4
 800adbe:	3004      	addeq	r0, #4
 800adc0:	079a      	lsls	r2, r3, #30
 800adc2:	bf04      	itt	eq
 800adc4:	089b      	lsreq	r3, r3, #2
 800adc6:	3002      	addeq	r0, #2
 800adc8:	07da      	lsls	r2, r3, #31
 800adca:	d403      	bmi.n	800add4 <__lo0bits+0x50>
 800adcc:	085b      	lsrs	r3, r3, #1
 800adce:	f100 0001 	add.w	r0, r0, #1
 800add2:	d005      	beq.n	800ade0 <__lo0bits+0x5c>
 800add4:	600b      	str	r3, [r1, #0]
 800add6:	4770      	bx	lr
 800add8:	4610      	mov	r0, r2
 800adda:	e7e8      	b.n	800adae <__lo0bits+0x2a>
 800addc:	2000      	movs	r0, #0
 800adde:	4770      	bx	lr
 800ade0:	2020      	movs	r0, #32
 800ade2:	4770      	bx	lr

0800ade4 <__i2b>:
 800ade4:	b510      	push	{r4, lr}
 800ade6:	460c      	mov	r4, r1
 800ade8:	2101      	movs	r1, #1
 800adea:	f7ff feb5 	bl	800ab58 <_Balloc>
 800adee:	4602      	mov	r2, r0
 800adf0:	b928      	cbnz	r0, 800adfe <__i2b+0x1a>
 800adf2:	4b05      	ldr	r3, [pc, #20]	; (800ae08 <__i2b+0x24>)
 800adf4:	4805      	ldr	r0, [pc, #20]	; (800ae0c <__i2b+0x28>)
 800adf6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800adfa:	f001 f9c9 	bl	800c190 <__assert_func>
 800adfe:	2301      	movs	r3, #1
 800ae00:	6144      	str	r4, [r0, #20]
 800ae02:	6103      	str	r3, [r0, #16]
 800ae04:	bd10      	pop	{r4, pc}
 800ae06:	bf00      	nop
 800ae08:	0800cfd4 	.word	0x0800cfd4
 800ae0c:	0800d064 	.word	0x0800d064

0800ae10 <__multiply>:
 800ae10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae14:	4614      	mov	r4, r2
 800ae16:	690a      	ldr	r2, [r1, #16]
 800ae18:	6923      	ldr	r3, [r4, #16]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	bfb8      	it	lt
 800ae1e:	460b      	movlt	r3, r1
 800ae20:	460d      	mov	r5, r1
 800ae22:	bfbc      	itt	lt
 800ae24:	4625      	movlt	r5, r4
 800ae26:	461c      	movlt	r4, r3
 800ae28:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ae2c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ae30:	68ab      	ldr	r3, [r5, #8]
 800ae32:	6869      	ldr	r1, [r5, #4]
 800ae34:	eb0a 0709 	add.w	r7, sl, r9
 800ae38:	42bb      	cmp	r3, r7
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	bfb8      	it	lt
 800ae3e:	3101      	addlt	r1, #1
 800ae40:	f7ff fe8a 	bl	800ab58 <_Balloc>
 800ae44:	b930      	cbnz	r0, 800ae54 <__multiply+0x44>
 800ae46:	4602      	mov	r2, r0
 800ae48:	4b42      	ldr	r3, [pc, #264]	; (800af54 <__multiply+0x144>)
 800ae4a:	4843      	ldr	r0, [pc, #268]	; (800af58 <__multiply+0x148>)
 800ae4c:	f240 115d 	movw	r1, #349	; 0x15d
 800ae50:	f001 f99e 	bl	800c190 <__assert_func>
 800ae54:	f100 0614 	add.w	r6, r0, #20
 800ae58:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ae5c:	4633      	mov	r3, r6
 800ae5e:	2200      	movs	r2, #0
 800ae60:	4543      	cmp	r3, r8
 800ae62:	d31e      	bcc.n	800aea2 <__multiply+0x92>
 800ae64:	f105 0c14 	add.w	ip, r5, #20
 800ae68:	f104 0314 	add.w	r3, r4, #20
 800ae6c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ae70:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ae74:	9202      	str	r2, [sp, #8]
 800ae76:	ebac 0205 	sub.w	r2, ip, r5
 800ae7a:	3a15      	subs	r2, #21
 800ae7c:	f022 0203 	bic.w	r2, r2, #3
 800ae80:	3204      	adds	r2, #4
 800ae82:	f105 0115 	add.w	r1, r5, #21
 800ae86:	458c      	cmp	ip, r1
 800ae88:	bf38      	it	cc
 800ae8a:	2204      	movcc	r2, #4
 800ae8c:	9201      	str	r2, [sp, #4]
 800ae8e:	9a02      	ldr	r2, [sp, #8]
 800ae90:	9303      	str	r3, [sp, #12]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d808      	bhi.n	800aea8 <__multiply+0x98>
 800ae96:	2f00      	cmp	r7, #0
 800ae98:	dc55      	bgt.n	800af46 <__multiply+0x136>
 800ae9a:	6107      	str	r7, [r0, #16]
 800ae9c:	b005      	add	sp, #20
 800ae9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea2:	f843 2b04 	str.w	r2, [r3], #4
 800aea6:	e7db      	b.n	800ae60 <__multiply+0x50>
 800aea8:	f8b3 a000 	ldrh.w	sl, [r3]
 800aeac:	f1ba 0f00 	cmp.w	sl, #0
 800aeb0:	d020      	beq.n	800aef4 <__multiply+0xe4>
 800aeb2:	f105 0e14 	add.w	lr, r5, #20
 800aeb6:	46b1      	mov	r9, r6
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f85e 4b04 	ldr.w	r4, [lr], #4
 800aebe:	f8d9 b000 	ldr.w	fp, [r9]
 800aec2:	b2a1      	uxth	r1, r4
 800aec4:	fa1f fb8b 	uxth.w	fp, fp
 800aec8:	fb0a b101 	mla	r1, sl, r1, fp
 800aecc:	4411      	add	r1, r2
 800aece:	f8d9 2000 	ldr.w	r2, [r9]
 800aed2:	0c24      	lsrs	r4, r4, #16
 800aed4:	0c12      	lsrs	r2, r2, #16
 800aed6:	fb0a 2404 	mla	r4, sl, r4, r2
 800aeda:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800aede:	b289      	uxth	r1, r1
 800aee0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aee4:	45f4      	cmp	ip, lr
 800aee6:	f849 1b04 	str.w	r1, [r9], #4
 800aeea:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800aeee:	d8e4      	bhi.n	800aeba <__multiply+0xaa>
 800aef0:	9901      	ldr	r1, [sp, #4]
 800aef2:	5072      	str	r2, [r6, r1]
 800aef4:	9a03      	ldr	r2, [sp, #12]
 800aef6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aefa:	3304      	adds	r3, #4
 800aefc:	f1b9 0f00 	cmp.w	r9, #0
 800af00:	d01f      	beq.n	800af42 <__multiply+0x132>
 800af02:	6834      	ldr	r4, [r6, #0]
 800af04:	f105 0114 	add.w	r1, r5, #20
 800af08:	46b6      	mov	lr, r6
 800af0a:	f04f 0a00 	mov.w	sl, #0
 800af0e:	880a      	ldrh	r2, [r1, #0]
 800af10:	f8be b002 	ldrh.w	fp, [lr, #2]
 800af14:	fb09 b202 	mla	r2, r9, r2, fp
 800af18:	4492      	add	sl, r2
 800af1a:	b2a4      	uxth	r4, r4
 800af1c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800af20:	f84e 4b04 	str.w	r4, [lr], #4
 800af24:	f851 4b04 	ldr.w	r4, [r1], #4
 800af28:	f8be 2000 	ldrh.w	r2, [lr]
 800af2c:	0c24      	lsrs	r4, r4, #16
 800af2e:	fb09 2404 	mla	r4, r9, r4, r2
 800af32:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800af36:	458c      	cmp	ip, r1
 800af38:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800af3c:	d8e7      	bhi.n	800af0e <__multiply+0xfe>
 800af3e:	9a01      	ldr	r2, [sp, #4]
 800af40:	50b4      	str	r4, [r6, r2]
 800af42:	3604      	adds	r6, #4
 800af44:	e7a3      	b.n	800ae8e <__multiply+0x7e>
 800af46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1a5      	bne.n	800ae9a <__multiply+0x8a>
 800af4e:	3f01      	subs	r7, #1
 800af50:	e7a1      	b.n	800ae96 <__multiply+0x86>
 800af52:	bf00      	nop
 800af54:	0800cfd4 	.word	0x0800cfd4
 800af58:	0800d064 	.word	0x0800d064

0800af5c <__pow5mult>:
 800af5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af60:	4615      	mov	r5, r2
 800af62:	f012 0203 	ands.w	r2, r2, #3
 800af66:	4606      	mov	r6, r0
 800af68:	460f      	mov	r7, r1
 800af6a:	d007      	beq.n	800af7c <__pow5mult+0x20>
 800af6c:	4c25      	ldr	r4, [pc, #148]	; (800b004 <__pow5mult+0xa8>)
 800af6e:	3a01      	subs	r2, #1
 800af70:	2300      	movs	r3, #0
 800af72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af76:	f7ff fe51 	bl	800ac1c <__multadd>
 800af7a:	4607      	mov	r7, r0
 800af7c:	10ad      	asrs	r5, r5, #2
 800af7e:	d03d      	beq.n	800affc <__pow5mult+0xa0>
 800af80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af82:	b97c      	cbnz	r4, 800afa4 <__pow5mult+0x48>
 800af84:	2010      	movs	r0, #16
 800af86:	f7ff fdbf 	bl	800ab08 <malloc>
 800af8a:	4602      	mov	r2, r0
 800af8c:	6270      	str	r0, [r6, #36]	; 0x24
 800af8e:	b928      	cbnz	r0, 800af9c <__pow5mult+0x40>
 800af90:	4b1d      	ldr	r3, [pc, #116]	; (800b008 <__pow5mult+0xac>)
 800af92:	481e      	ldr	r0, [pc, #120]	; (800b00c <__pow5mult+0xb0>)
 800af94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af98:	f001 f8fa 	bl	800c190 <__assert_func>
 800af9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afa0:	6004      	str	r4, [r0, #0]
 800afa2:	60c4      	str	r4, [r0, #12]
 800afa4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800afa8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800afac:	b94c      	cbnz	r4, 800afc2 <__pow5mult+0x66>
 800afae:	f240 2171 	movw	r1, #625	; 0x271
 800afb2:	4630      	mov	r0, r6
 800afb4:	f7ff ff16 	bl	800ade4 <__i2b>
 800afb8:	2300      	movs	r3, #0
 800afba:	f8c8 0008 	str.w	r0, [r8, #8]
 800afbe:	4604      	mov	r4, r0
 800afc0:	6003      	str	r3, [r0, #0]
 800afc2:	f04f 0900 	mov.w	r9, #0
 800afc6:	07eb      	lsls	r3, r5, #31
 800afc8:	d50a      	bpl.n	800afe0 <__pow5mult+0x84>
 800afca:	4639      	mov	r1, r7
 800afcc:	4622      	mov	r2, r4
 800afce:	4630      	mov	r0, r6
 800afd0:	f7ff ff1e 	bl	800ae10 <__multiply>
 800afd4:	4639      	mov	r1, r7
 800afd6:	4680      	mov	r8, r0
 800afd8:	4630      	mov	r0, r6
 800afda:	f7ff fdfd 	bl	800abd8 <_Bfree>
 800afde:	4647      	mov	r7, r8
 800afe0:	106d      	asrs	r5, r5, #1
 800afe2:	d00b      	beq.n	800affc <__pow5mult+0xa0>
 800afe4:	6820      	ldr	r0, [r4, #0]
 800afe6:	b938      	cbnz	r0, 800aff8 <__pow5mult+0x9c>
 800afe8:	4622      	mov	r2, r4
 800afea:	4621      	mov	r1, r4
 800afec:	4630      	mov	r0, r6
 800afee:	f7ff ff0f 	bl	800ae10 <__multiply>
 800aff2:	6020      	str	r0, [r4, #0]
 800aff4:	f8c0 9000 	str.w	r9, [r0]
 800aff8:	4604      	mov	r4, r0
 800affa:	e7e4      	b.n	800afc6 <__pow5mult+0x6a>
 800affc:	4638      	mov	r0, r7
 800affe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b002:	bf00      	nop
 800b004:	0800d1b8 	.word	0x0800d1b8
 800b008:	0800cf5e 	.word	0x0800cf5e
 800b00c:	0800d064 	.word	0x0800d064

0800b010 <__lshift>:
 800b010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b014:	460c      	mov	r4, r1
 800b016:	6849      	ldr	r1, [r1, #4]
 800b018:	6923      	ldr	r3, [r4, #16]
 800b01a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b01e:	68a3      	ldr	r3, [r4, #8]
 800b020:	4607      	mov	r7, r0
 800b022:	4691      	mov	r9, r2
 800b024:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b028:	f108 0601 	add.w	r6, r8, #1
 800b02c:	42b3      	cmp	r3, r6
 800b02e:	db0b      	blt.n	800b048 <__lshift+0x38>
 800b030:	4638      	mov	r0, r7
 800b032:	f7ff fd91 	bl	800ab58 <_Balloc>
 800b036:	4605      	mov	r5, r0
 800b038:	b948      	cbnz	r0, 800b04e <__lshift+0x3e>
 800b03a:	4602      	mov	r2, r0
 800b03c:	4b28      	ldr	r3, [pc, #160]	; (800b0e0 <__lshift+0xd0>)
 800b03e:	4829      	ldr	r0, [pc, #164]	; (800b0e4 <__lshift+0xd4>)
 800b040:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b044:	f001 f8a4 	bl	800c190 <__assert_func>
 800b048:	3101      	adds	r1, #1
 800b04a:	005b      	lsls	r3, r3, #1
 800b04c:	e7ee      	b.n	800b02c <__lshift+0x1c>
 800b04e:	2300      	movs	r3, #0
 800b050:	f100 0114 	add.w	r1, r0, #20
 800b054:	f100 0210 	add.w	r2, r0, #16
 800b058:	4618      	mov	r0, r3
 800b05a:	4553      	cmp	r3, sl
 800b05c:	db33      	blt.n	800b0c6 <__lshift+0xb6>
 800b05e:	6920      	ldr	r0, [r4, #16]
 800b060:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b064:	f104 0314 	add.w	r3, r4, #20
 800b068:	f019 091f 	ands.w	r9, r9, #31
 800b06c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b070:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b074:	d02b      	beq.n	800b0ce <__lshift+0xbe>
 800b076:	f1c9 0e20 	rsb	lr, r9, #32
 800b07a:	468a      	mov	sl, r1
 800b07c:	2200      	movs	r2, #0
 800b07e:	6818      	ldr	r0, [r3, #0]
 800b080:	fa00 f009 	lsl.w	r0, r0, r9
 800b084:	4302      	orrs	r2, r0
 800b086:	f84a 2b04 	str.w	r2, [sl], #4
 800b08a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b08e:	459c      	cmp	ip, r3
 800b090:	fa22 f20e 	lsr.w	r2, r2, lr
 800b094:	d8f3      	bhi.n	800b07e <__lshift+0x6e>
 800b096:	ebac 0304 	sub.w	r3, ip, r4
 800b09a:	3b15      	subs	r3, #21
 800b09c:	f023 0303 	bic.w	r3, r3, #3
 800b0a0:	3304      	adds	r3, #4
 800b0a2:	f104 0015 	add.w	r0, r4, #21
 800b0a6:	4584      	cmp	ip, r0
 800b0a8:	bf38      	it	cc
 800b0aa:	2304      	movcc	r3, #4
 800b0ac:	50ca      	str	r2, [r1, r3]
 800b0ae:	b10a      	cbz	r2, 800b0b4 <__lshift+0xa4>
 800b0b0:	f108 0602 	add.w	r6, r8, #2
 800b0b4:	3e01      	subs	r6, #1
 800b0b6:	4638      	mov	r0, r7
 800b0b8:	612e      	str	r6, [r5, #16]
 800b0ba:	4621      	mov	r1, r4
 800b0bc:	f7ff fd8c 	bl	800abd8 <_Bfree>
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	e7c5      	b.n	800b05a <__lshift+0x4a>
 800b0ce:	3904      	subs	r1, #4
 800b0d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0d8:	459c      	cmp	ip, r3
 800b0da:	d8f9      	bhi.n	800b0d0 <__lshift+0xc0>
 800b0dc:	e7ea      	b.n	800b0b4 <__lshift+0xa4>
 800b0de:	bf00      	nop
 800b0e0:	0800cfd4 	.word	0x0800cfd4
 800b0e4:	0800d064 	.word	0x0800d064

0800b0e8 <__mcmp>:
 800b0e8:	b530      	push	{r4, r5, lr}
 800b0ea:	6902      	ldr	r2, [r0, #16]
 800b0ec:	690c      	ldr	r4, [r1, #16]
 800b0ee:	1b12      	subs	r2, r2, r4
 800b0f0:	d10e      	bne.n	800b110 <__mcmp+0x28>
 800b0f2:	f100 0314 	add.w	r3, r0, #20
 800b0f6:	3114      	adds	r1, #20
 800b0f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b0fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b100:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b104:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b108:	42a5      	cmp	r5, r4
 800b10a:	d003      	beq.n	800b114 <__mcmp+0x2c>
 800b10c:	d305      	bcc.n	800b11a <__mcmp+0x32>
 800b10e:	2201      	movs	r2, #1
 800b110:	4610      	mov	r0, r2
 800b112:	bd30      	pop	{r4, r5, pc}
 800b114:	4283      	cmp	r3, r0
 800b116:	d3f3      	bcc.n	800b100 <__mcmp+0x18>
 800b118:	e7fa      	b.n	800b110 <__mcmp+0x28>
 800b11a:	f04f 32ff 	mov.w	r2, #4294967295
 800b11e:	e7f7      	b.n	800b110 <__mcmp+0x28>

0800b120 <__mdiff>:
 800b120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b124:	460c      	mov	r4, r1
 800b126:	4606      	mov	r6, r0
 800b128:	4611      	mov	r1, r2
 800b12a:	4620      	mov	r0, r4
 800b12c:	4617      	mov	r7, r2
 800b12e:	f7ff ffdb 	bl	800b0e8 <__mcmp>
 800b132:	1e05      	subs	r5, r0, #0
 800b134:	d110      	bne.n	800b158 <__mdiff+0x38>
 800b136:	4629      	mov	r1, r5
 800b138:	4630      	mov	r0, r6
 800b13a:	f7ff fd0d 	bl	800ab58 <_Balloc>
 800b13e:	b930      	cbnz	r0, 800b14e <__mdiff+0x2e>
 800b140:	4b39      	ldr	r3, [pc, #228]	; (800b228 <__mdiff+0x108>)
 800b142:	4602      	mov	r2, r0
 800b144:	f240 2132 	movw	r1, #562	; 0x232
 800b148:	4838      	ldr	r0, [pc, #224]	; (800b22c <__mdiff+0x10c>)
 800b14a:	f001 f821 	bl	800c190 <__assert_func>
 800b14e:	2301      	movs	r3, #1
 800b150:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b154:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b158:	bfa4      	itt	ge
 800b15a:	463b      	movge	r3, r7
 800b15c:	4627      	movge	r7, r4
 800b15e:	4630      	mov	r0, r6
 800b160:	6879      	ldr	r1, [r7, #4]
 800b162:	bfa6      	itte	ge
 800b164:	461c      	movge	r4, r3
 800b166:	2500      	movge	r5, #0
 800b168:	2501      	movlt	r5, #1
 800b16a:	f7ff fcf5 	bl	800ab58 <_Balloc>
 800b16e:	b920      	cbnz	r0, 800b17a <__mdiff+0x5a>
 800b170:	4b2d      	ldr	r3, [pc, #180]	; (800b228 <__mdiff+0x108>)
 800b172:	4602      	mov	r2, r0
 800b174:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b178:	e7e6      	b.n	800b148 <__mdiff+0x28>
 800b17a:	693e      	ldr	r6, [r7, #16]
 800b17c:	60c5      	str	r5, [r0, #12]
 800b17e:	6925      	ldr	r5, [r4, #16]
 800b180:	f107 0114 	add.w	r1, r7, #20
 800b184:	f104 0914 	add.w	r9, r4, #20
 800b188:	f100 0e14 	add.w	lr, r0, #20
 800b18c:	f107 0210 	add.w	r2, r7, #16
 800b190:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b194:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b198:	46f2      	mov	sl, lr
 800b19a:	2700      	movs	r7, #0
 800b19c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b1a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b1a4:	fa1f f883 	uxth.w	r8, r3
 800b1a8:	fa17 f78b 	uxtah	r7, r7, fp
 800b1ac:	0c1b      	lsrs	r3, r3, #16
 800b1ae:	eba7 0808 	sub.w	r8, r7, r8
 800b1b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b1b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b1ba:	fa1f f888 	uxth.w	r8, r8
 800b1be:	141f      	asrs	r7, r3, #16
 800b1c0:	454d      	cmp	r5, r9
 800b1c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b1c6:	f84a 3b04 	str.w	r3, [sl], #4
 800b1ca:	d8e7      	bhi.n	800b19c <__mdiff+0x7c>
 800b1cc:	1b2b      	subs	r3, r5, r4
 800b1ce:	3b15      	subs	r3, #21
 800b1d0:	f023 0303 	bic.w	r3, r3, #3
 800b1d4:	3304      	adds	r3, #4
 800b1d6:	3415      	adds	r4, #21
 800b1d8:	42a5      	cmp	r5, r4
 800b1da:	bf38      	it	cc
 800b1dc:	2304      	movcc	r3, #4
 800b1de:	4419      	add	r1, r3
 800b1e0:	4473      	add	r3, lr
 800b1e2:	469e      	mov	lr, r3
 800b1e4:	460d      	mov	r5, r1
 800b1e6:	4565      	cmp	r5, ip
 800b1e8:	d30e      	bcc.n	800b208 <__mdiff+0xe8>
 800b1ea:	f10c 0203 	add.w	r2, ip, #3
 800b1ee:	1a52      	subs	r2, r2, r1
 800b1f0:	f022 0203 	bic.w	r2, r2, #3
 800b1f4:	3903      	subs	r1, #3
 800b1f6:	458c      	cmp	ip, r1
 800b1f8:	bf38      	it	cc
 800b1fa:	2200      	movcc	r2, #0
 800b1fc:	441a      	add	r2, r3
 800b1fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b202:	b17b      	cbz	r3, 800b224 <__mdiff+0x104>
 800b204:	6106      	str	r6, [r0, #16]
 800b206:	e7a5      	b.n	800b154 <__mdiff+0x34>
 800b208:	f855 8b04 	ldr.w	r8, [r5], #4
 800b20c:	fa17 f488 	uxtah	r4, r7, r8
 800b210:	1422      	asrs	r2, r4, #16
 800b212:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b216:	b2a4      	uxth	r4, r4
 800b218:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b21c:	f84e 4b04 	str.w	r4, [lr], #4
 800b220:	1417      	asrs	r7, r2, #16
 800b222:	e7e0      	b.n	800b1e6 <__mdiff+0xc6>
 800b224:	3e01      	subs	r6, #1
 800b226:	e7ea      	b.n	800b1fe <__mdiff+0xde>
 800b228:	0800cfd4 	.word	0x0800cfd4
 800b22c:	0800d064 	.word	0x0800d064

0800b230 <__ulp>:
 800b230:	b082      	sub	sp, #8
 800b232:	ed8d 0b00 	vstr	d0, [sp]
 800b236:	9b01      	ldr	r3, [sp, #4]
 800b238:	4912      	ldr	r1, [pc, #72]	; (800b284 <__ulp+0x54>)
 800b23a:	4019      	ands	r1, r3
 800b23c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b240:	2900      	cmp	r1, #0
 800b242:	dd05      	ble.n	800b250 <__ulp+0x20>
 800b244:	2200      	movs	r2, #0
 800b246:	460b      	mov	r3, r1
 800b248:	ec43 2b10 	vmov	d0, r2, r3
 800b24c:	b002      	add	sp, #8
 800b24e:	4770      	bx	lr
 800b250:	4249      	negs	r1, r1
 800b252:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b256:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b25a:	f04f 0200 	mov.w	r2, #0
 800b25e:	f04f 0300 	mov.w	r3, #0
 800b262:	da04      	bge.n	800b26e <__ulp+0x3e>
 800b264:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b268:	fa41 f300 	asr.w	r3, r1, r0
 800b26c:	e7ec      	b.n	800b248 <__ulp+0x18>
 800b26e:	f1a0 0114 	sub.w	r1, r0, #20
 800b272:	291e      	cmp	r1, #30
 800b274:	bfda      	itte	le
 800b276:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b27a:	fa20 f101 	lsrle.w	r1, r0, r1
 800b27e:	2101      	movgt	r1, #1
 800b280:	460a      	mov	r2, r1
 800b282:	e7e1      	b.n	800b248 <__ulp+0x18>
 800b284:	7ff00000 	.word	0x7ff00000

0800b288 <__b2d>:
 800b288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b28a:	6905      	ldr	r5, [r0, #16]
 800b28c:	f100 0714 	add.w	r7, r0, #20
 800b290:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b294:	1f2e      	subs	r6, r5, #4
 800b296:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b29a:	4620      	mov	r0, r4
 800b29c:	f7ff fd52 	bl	800ad44 <__hi0bits>
 800b2a0:	f1c0 0320 	rsb	r3, r0, #32
 800b2a4:	280a      	cmp	r0, #10
 800b2a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b324 <__b2d+0x9c>
 800b2aa:	600b      	str	r3, [r1, #0]
 800b2ac:	dc14      	bgt.n	800b2d8 <__b2d+0x50>
 800b2ae:	f1c0 0e0b 	rsb	lr, r0, #11
 800b2b2:	fa24 f10e 	lsr.w	r1, r4, lr
 800b2b6:	42b7      	cmp	r7, r6
 800b2b8:	ea41 030c 	orr.w	r3, r1, ip
 800b2bc:	bf34      	ite	cc
 800b2be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b2c2:	2100      	movcs	r1, #0
 800b2c4:	3015      	adds	r0, #21
 800b2c6:	fa04 f000 	lsl.w	r0, r4, r0
 800b2ca:	fa21 f10e 	lsr.w	r1, r1, lr
 800b2ce:	ea40 0201 	orr.w	r2, r0, r1
 800b2d2:	ec43 2b10 	vmov	d0, r2, r3
 800b2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2d8:	42b7      	cmp	r7, r6
 800b2da:	bf3a      	itte	cc
 800b2dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b2e0:	f1a5 0608 	subcc.w	r6, r5, #8
 800b2e4:	2100      	movcs	r1, #0
 800b2e6:	380b      	subs	r0, #11
 800b2e8:	d017      	beq.n	800b31a <__b2d+0x92>
 800b2ea:	f1c0 0c20 	rsb	ip, r0, #32
 800b2ee:	fa04 f500 	lsl.w	r5, r4, r0
 800b2f2:	42be      	cmp	r6, r7
 800b2f4:	fa21 f40c 	lsr.w	r4, r1, ip
 800b2f8:	ea45 0504 	orr.w	r5, r5, r4
 800b2fc:	bf8c      	ite	hi
 800b2fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b302:	2400      	movls	r4, #0
 800b304:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b308:	fa01 f000 	lsl.w	r0, r1, r0
 800b30c:	fa24 f40c 	lsr.w	r4, r4, ip
 800b310:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b314:	ea40 0204 	orr.w	r2, r0, r4
 800b318:	e7db      	b.n	800b2d2 <__b2d+0x4a>
 800b31a:	ea44 030c 	orr.w	r3, r4, ip
 800b31e:	460a      	mov	r2, r1
 800b320:	e7d7      	b.n	800b2d2 <__b2d+0x4a>
 800b322:	bf00      	nop
 800b324:	3ff00000 	.word	0x3ff00000

0800b328 <__d2b>:
 800b328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b32c:	4689      	mov	r9, r1
 800b32e:	2101      	movs	r1, #1
 800b330:	ec57 6b10 	vmov	r6, r7, d0
 800b334:	4690      	mov	r8, r2
 800b336:	f7ff fc0f 	bl	800ab58 <_Balloc>
 800b33a:	4604      	mov	r4, r0
 800b33c:	b930      	cbnz	r0, 800b34c <__d2b+0x24>
 800b33e:	4602      	mov	r2, r0
 800b340:	4b25      	ldr	r3, [pc, #148]	; (800b3d8 <__d2b+0xb0>)
 800b342:	4826      	ldr	r0, [pc, #152]	; (800b3dc <__d2b+0xb4>)
 800b344:	f240 310a 	movw	r1, #778	; 0x30a
 800b348:	f000 ff22 	bl	800c190 <__assert_func>
 800b34c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b350:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b354:	bb35      	cbnz	r5, 800b3a4 <__d2b+0x7c>
 800b356:	2e00      	cmp	r6, #0
 800b358:	9301      	str	r3, [sp, #4]
 800b35a:	d028      	beq.n	800b3ae <__d2b+0x86>
 800b35c:	4668      	mov	r0, sp
 800b35e:	9600      	str	r6, [sp, #0]
 800b360:	f7ff fd10 	bl	800ad84 <__lo0bits>
 800b364:	9900      	ldr	r1, [sp, #0]
 800b366:	b300      	cbz	r0, 800b3aa <__d2b+0x82>
 800b368:	9a01      	ldr	r2, [sp, #4]
 800b36a:	f1c0 0320 	rsb	r3, r0, #32
 800b36e:	fa02 f303 	lsl.w	r3, r2, r3
 800b372:	430b      	orrs	r3, r1
 800b374:	40c2      	lsrs	r2, r0
 800b376:	6163      	str	r3, [r4, #20]
 800b378:	9201      	str	r2, [sp, #4]
 800b37a:	9b01      	ldr	r3, [sp, #4]
 800b37c:	61a3      	str	r3, [r4, #24]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	bf14      	ite	ne
 800b382:	2202      	movne	r2, #2
 800b384:	2201      	moveq	r2, #1
 800b386:	6122      	str	r2, [r4, #16]
 800b388:	b1d5      	cbz	r5, 800b3c0 <__d2b+0x98>
 800b38a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b38e:	4405      	add	r5, r0
 800b390:	f8c9 5000 	str.w	r5, [r9]
 800b394:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b398:	f8c8 0000 	str.w	r0, [r8]
 800b39c:	4620      	mov	r0, r4
 800b39e:	b003      	add	sp, #12
 800b3a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3a8:	e7d5      	b.n	800b356 <__d2b+0x2e>
 800b3aa:	6161      	str	r1, [r4, #20]
 800b3ac:	e7e5      	b.n	800b37a <__d2b+0x52>
 800b3ae:	a801      	add	r0, sp, #4
 800b3b0:	f7ff fce8 	bl	800ad84 <__lo0bits>
 800b3b4:	9b01      	ldr	r3, [sp, #4]
 800b3b6:	6163      	str	r3, [r4, #20]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	6122      	str	r2, [r4, #16]
 800b3bc:	3020      	adds	r0, #32
 800b3be:	e7e3      	b.n	800b388 <__d2b+0x60>
 800b3c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b3c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b3c8:	f8c9 0000 	str.w	r0, [r9]
 800b3cc:	6918      	ldr	r0, [r3, #16]
 800b3ce:	f7ff fcb9 	bl	800ad44 <__hi0bits>
 800b3d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b3d6:	e7df      	b.n	800b398 <__d2b+0x70>
 800b3d8:	0800cfd4 	.word	0x0800cfd4
 800b3dc:	0800d064 	.word	0x0800d064

0800b3e0 <__ratio>:
 800b3e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e4:	468a      	mov	sl, r1
 800b3e6:	4669      	mov	r1, sp
 800b3e8:	4683      	mov	fp, r0
 800b3ea:	f7ff ff4d 	bl	800b288 <__b2d>
 800b3ee:	a901      	add	r1, sp, #4
 800b3f0:	4650      	mov	r0, sl
 800b3f2:	ec59 8b10 	vmov	r8, r9, d0
 800b3f6:	ee10 6a10 	vmov	r6, s0
 800b3fa:	f7ff ff45 	bl	800b288 <__b2d>
 800b3fe:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b402:	f8da 2010 	ldr.w	r2, [sl, #16]
 800b406:	eba3 0c02 	sub.w	ip, r3, r2
 800b40a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b40e:	1a9b      	subs	r3, r3, r2
 800b410:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b414:	ec55 4b10 	vmov	r4, r5, d0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	ee10 0a10 	vmov	r0, s0
 800b41e:	bfce      	itee	gt
 800b420:	464a      	movgt	r2, r9
 800b422:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b426:	462a      	movle	r2, r5
 800b428:	464f      	mov	r7, r9
 800b42a:	4629      	mov	r1, r5
 800b42c:	bfcc      	ite	gt
 800b42e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b432:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b436:	ec47 6b17 	vmov	d7, r6, r7
 800b43a:	ec41 0b16 	vmov	d6, r0, r1
 800b43e:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800b442:	b003      	add	sp, #12
 800b444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b448 <__copybits>:
 800b448:	3901      	subs	r1, #1
 800b44a:	b570      	push	{r4, r5, r6, lr}
 800b44c:	1149      	asrs	r1, r1, #5
 800b44e:	6914      	ldr	r4, [r2, #16]
 800b450:	3101      	adds	r1, #1
 800b452:	f102 0314 	add.w	r3, r2, #20
 800b456:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b45a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b45e:	1f05      	subs	r5, r0, #4
 800b460:	42a3      	cmp	r3, r4
 800b462:	d30c      	bcc.n	800b47e <__copybits+0x36>
 800b464:	1aa3      	subs	r3, r4, r2
 800b466:	3b11      	subs	r3, #17
 800b468:	f023 0303 	bic.w	r3, r3, #3
 800b46c:	3211      	adds	r2, #17
 800b46e:	42a2      	cmp	r2, r4
 800b470:	bf88      	it	hi
 800b472:	2300      	movhi	r3, #0
 800b474:	4418      	add	r0, r3
 800b476:	2300      	movs	r3, #0
 800b478:	4288      	cmp	r0, r1
 800b47a:	d305      	bcc.n	800b488 <__copybits+0x40>
 800b47c:	bd70      	pop	{r4, r5, r6, pc}
 800b47e:	f853 6b04 	ldr.w	r6, [r3], #4
 800b482:	f845 6f04 	str.w	r6, [r5, #4]!
 800b486:	e7eb      	b.n	800b460 <__copybits+0x18>
 800b488:	f840 3b04 	str.w	r3, [r0], #4
 800b48c:	e7f4      	b.n	800b478 <__copybits+0x30>

0800b48e <__any_on>:
 800b48e:	f100 0214 	add.w	r2, r0, #20
 800b492:	6900      	ldr	r0, [r0, #16]
 800b494:	114b      	asrs	r3, r1, #5
 800b496:	4298      	cmp	r0, r3
 800b498:	b510      	push	{r4, lr}
 800b49a:	db11      	blt.n	800b4c0 <__any_on+0x32>
 800b49c:	dd0a      	ble.n	800b4b4 <__any_on+0x26>
 800b49e:	f011 011f 	ands.w	r1, r1, #31
 800b4a2:	d007      	beq.n	800b4b4 <__any_on+0x26>
 800b4a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b4a8:	fa24 f001 	lsr.w	r0, r4, r1
 800b4ac:	fa00 f101 	lsl.w	r1, r0, r1
 800b4b0:	428c      	cmp	r4, r1
 800b4b2:	d10b      	bne.n	800b4cc <__any_on+0x3e>
 800b4b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d803      	bhi.n	800b4c4 <__any_on+0x36>
 800b4bc:	2000      	movs	r0, #0
 800b4be:	bd10      	pop	{r4, pc}
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	e7f7      	b.n	800b4b4 <__any_on+0x26>
 800b4c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b4c8:	2900      	cmp	r1, #0
 800b4ca:	d0f5      	beq.n	800b4b8 <__any_on+0x2a>
 800b4cc:	2001      	movs	r0, #1
 800b4ce:	e7f6      	b.n	800b4be <__any_on+0x30>

0800b4d0 <_calloc_r>:
 800b4d0:	b513      	push	{r0, r1, r4, lr}
 800b4d2:	434a      	muls	r2, r1
 800b4d4:	4611      	mov	r1, r2
 800b4d6:	9201      	str	r2, [sp, #4]
 800b4d8:	f000 f85a 	bl	800b590 <_malloc_r>
 800b4dc:	4604      	mov	r4, r0
 800b4de:	b118      	cbz	r0, 800b4e8 <_calloc_r+0x18>
 800b4e0:	9a01      	ldr	r2, [sp, #4]
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	f7fc fbd4 	bl	8007c90 <memset>
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	b002      	add	sp, #8
 800b4ec:	bd10      	pop	{r4, pc}
	...

0800b4f0 <_free_r>:
 800b4f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4f2:	2900      	cmp	r1, #0
 800b4f4:	d048      	beq.n	800b588 <_free_r+0x98>
 800b4f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4fa:	9001      	str	r0, [sp, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	f1a1 0404 	sub.w	r4, r1, #4
 800b502:	bfb8      	it	lt
 800b504:	18e4      	addlt	r4, r4, r3
 800b506:	f001 f847 	bl	800c598 <__malloc_lock>
 800b50a:	4a20      	ldr	r2, [pc, #128]	; (800b58c <_free_r+0x9c>)
 800b50c:	9801      	ldr	r0, [sp, #4]
 800b50e:	6813      	ldr	r3, [r2, #0]
 800b510:	4615      	mov	r5, r2
 800b512:	b933      	cbnz	r3, 800b522 <_free_r+0x32>
 800b514:	6063      	str	r3, [r4, #4]
 800b516:	6014      	str	r4, [r2, #0]
 800b518:	b003      	add	sp, #12
 800b51a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b51e:	f001 b841 	b.w	800c5a4 <__malloc_unlock>
 800b522:	42a3      	cmp	r3, r4
 800b524:	d90b      	bls.n	800b53e <_free_r+0x4e>
 800b526:	6821      	ldr	r1, [r4, #0]
 800b528:	1862      	adds	r2, r4, r1
 800b52a:	4293      	cmp	r3, r2
 800b52c:	bf04      	itt	eq
 800b52e:	681a      	ldreq	r2, [r3, #0]
 800b530:	685b      	ldreq	r3, [r3, #4]
 800b532:	6063      	str	r3, [r4, #4]
 800b534:	bf04      	itt	eq
 800b536:	1852      	addeq	r2, r2, r1
 800b538:	6022      	streq	r2, [r4, #0]
 800b53a:	602c      	str	r4, [r5, #0]
 800b53c:	e7ec      	b.n	800b518 <_free_r+0x28>
 800b53e:	461a      	mov	r2, r3
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	b10b      	cbz	r3, 800b548 <_free_r+0x58>
 800b544:	42a3      	cmp	r3, r4
 800b546:	d9fa      	bls.n	800b53e <_free_r+0x4e>
 800b548:	6811      	ldr	r1, [r2, #0]
 800b54a:	1855      	adds	r5, r2, r1
 800b54c:	42a5      	cmp	r5, r4
 800b54e:	d10b      	bne.n	800b568 <_free_r+0x78>
 800b550:	6824      	ldr	r4, [r4, #0]
 800b552:	4421      	add	r1, r4
 800b554:	1854      	adds	r4, r2, r1
 800b556:	42a3      	cmp	r3, r4
 800b558:	6011      	str	r1, [r2, #0]
 800b55a:	d1dd      	bne.n	800b518 <_free_r+0x28>
 800b55c:	681c      	ldr	r4, [r3, #0]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	6053      	str	r3, [r2, #4]
 800b562:	4421      	add	r1, r4
 800b564:	6011      	str	r1, [r2, #0]
 800b566:	e7d7      	b.n	800b518 <_free_r+0x28>
 800b568:	d902      	bls.n	800b570 <_free_r+0x80>
 800b56a:	230c      	movs	r3, #12
 800b56c:	6003      	str	r3, [r0, #0]
 800b56e:	e7d3      	b.n	800b518 <_free_r+0x28>
 800b570:	6825      	ldr	r5, [r4, #0]
 800b572:	1961      	adds	r1, r4, r5
 800b574:	428b      	cmp	r3, r1
 800b576:	bf04      	itt	eq
 800b578:	6819      	ldreq	r1, [r3, #0]
 800b57a:	685b      	ldreq	r3, [r3, #4]
 800b57c:	6063      	str	r3, [r4, #4]
 800b57e:	bf04      	itt	eq
 800b580:	1949      	addeq	r1, r1, r5
 800b582:	6021      	streq	r1, [r4, #0]
 800b584:	6054      	str	r4, [r2, #4]
 800b586:	e7c7      	b.n	800b518 <_free_r+0x28>
 800b588:	b003      	add	sp, #12
 800b58a:	bd30      	pop	{r4, r5, pc}
 800b58c:	200002dc 	.word	0x200002dc

0800b590 <_malloc_r>:
 800b590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b592:	1ccd      	adds	r5, r1, #3
 800b594:	f025 0503 	bic.w	r5, r5, #3
 800b598:	3508      	adds	r5, #8
 800b59a:	2d0c      	cmp	r5, #12
 800b59c:	bf38      	it	cc
 800b59e:	250c      	movcc	r5, #12
 800b5a0:	2d00      	cmp	r5, #0
 800b5a2:	4606      	mov	r6, r0
 800b5a4:	db01      	blt.n	800b5aa <_malloc_r+0x1a>
 800b5a6:	42a9      	cmp	r1, r5
 800b5a8:	d903      	bls.n	800b5b2 <_malloc_r+0x22>
 800b5aa:	230c      	movs	r3, #12
 800b5ac:	6033      	str	r3, [r6, #0]
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5b2:	f000 fff1 	bl	800c598 <__malloc_lock>
 800b5b6:	4921      	ldr	r1, [pc, #132]	; (800b63c <_malloc_r+0xac>)
 800b5b8:	680a      	ldr	r2, [r1, #0]
 800b5ba:	4614      	mov	r4, r2
 800b5bc:	b99c      	cbnz	r4, 800b5e6 <_malloc_r+0x56>
 800b5be:	4f20      	ldr	r7, [pc, #128]	; (800b640 <_malloc_r+0xb0>)
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	b923      	cbnz	r3, 800b5ce <_malloc_r+0x3e>
 800b5c4:	4621      	mov	r1, r4
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	f000 fcd2 	bl	800bf70 <_sbrk_r>
 800b5cc:	6038      	str	r0, [r7, #0]
 800b5ce:	4629      	mov	r1, r5
 800b5d0:	4630      	mov	r0, r6
 800b5d2:	f000 fccd 	bl	800bf70 <_sbrk_r>
 800b5d6:	1c43      	adds	r3, r0, #1
 800b5d8:	d123      	bne.n	800b622 <_malloc_r+0x92>
 800b5da:	230c      	movs	r3, #12
 800b5dc:	6033      	str	r3, [r6, #0]
 800b5de:	4630      	mov	r0, r6
 800b5e0:	f000 ffe0 	bl	800c5a4 <__malloc_unlock>
 800b5e4:	e7e3      	b.n	800b5ae <_malloc_r+0x1e>
 800b5e6:	6823      	ldr	r3, [r4, #0]
 800b5e8:	1b5b      	subs	r3, r3, r5
 800b5ea:	d417      	bmi.n	800b61c <_malloc_r+0x8c>
 800b5ec:	2b0b      	cmp	r3, #11
 800b5ee:	d903      	bls.n	800b5f8 <_malloc_r+0x68>
 800b5f0:	6023      	str	r3, [r4, #0]
 800b5f2:	441c      	add	r4, r3
 800b5f4:	6025      	str	r5, [r4, #0]
 800b5f6:	e004      	b.n	800b602 <_malloc_r+0x72>
 800b5f8:	6863      	ldr	r3, [r4, #4]
 800b5fa:	42a2      	cmp	r2, r4
 800b5fc:	bf0c      	ite	eq
 800b5fe:	600b      	streq	r3, [r1, #0]
 800b600:	6053      	strne	r3, [r2, #4]
 800b602:	4630      	mov	r0, r6
 800b604:	f000 ffce 	bl	800c5a4 <__malloc_unlock>
 800b608:	f104 000b 	add.w	r0, r4, #11
 800b60c:	1d23      	adds	r3, r4, #4
 800b60e:	f020 0007 	bic.w	r0, r0, #7
 800b612:	1ac2      	subs	r2, r0, r3
 800b614:	d0cc      	beq.n	800b5b0 <_malloc_r+0x20>
 800b616:	1a1b      	subs	r3, r3, r0
 800b618:	50a3      	str	r3, [r4, r2]
 800b61a:	e7c9      	b.n	800b5b0 <_malloc_r+0x20>
 800b61c:	4622      	mov	r2, r4
 800b61e:	6864      	ldr	r4, [r4, #4]
 800b620:	e7cc      	b.n	800b5bc <_malloc_r+0x2c>
 800b622:	1cc4      	adds	r4, r0, #3
 800b624:	f024 0403 	bic.w	r4, r4, #3
 800b628:	42a0      	cmp	r0, r4
 800b62a:	d0e3      	beq.n	800b5f4 <_malloc_r+0x64>
 800b62c:	1a21      	subs	r1, r4, r0
 800b62e:	4630      	mov	r0, r6
 800b630:	f000 fc9e 	bl	800bf70 <_sbrk_r>
 800b634:	3001      	adds	r0, #1
 800b636:	d1dd      	bne.n	800b5f4 <_malloc_r+0x64>
 800b638:	e7cf      	b.n	800b5da <_malloc_r+0x4a>
 800b63a:	bf00      	nop
 800b63c:	200002dc 	.word	0x200002dc
 800b640:	200002e0 	.word	0x200002e0

0800b644 <__ssputs_r>:
 800b644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b648:	688e      	ldr	r6, [r1, #8]
 800b64a:	429e      	cmp	r6, r3
 800b64c:	4682      	mov	sl, r0
 800b64e:	460c      	mov	r4, r1
 800b650:	4690      	mov	r8, r2
 800b652:	461f      	mov	r7, r3
 800b654:	d838      	bhi.n	800b6c8 <__ssputs_r+0x84>
 800b656:	898a      	ldrh	r2, [r1, #12]
 800b658:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b65c:	d032      	beq.n	800b6c4 <__ssputs_r+0x80>
 800b65e:	6825      	ldr	r5, [r4, #0]
 800b660:	6909      	ldr	r1, [r1, #16]
 800b662:	eba5 0901 	sub.w	r9, r5, r1
 800b666:	6965      	ldr	r5, [r4, #20]
 800b668:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b66c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b670:	3301      	adds	r3, #1
 800b672:	444b      	add	r3, r9
 800b674:	106d      	asrs	r5, r5, #1
 800b676:	429d      	cmp	r5, r3
 800b678:	bf38      	it	cc
 800b67a:	461d      	movcc	r5, r3
 800b67c:	0553      	lsls	r3, r2, #21
 800b67e:	d531      	bpl.n	800b6e4 <__ssputs_r+0xa0>
 800b680:	4629      	mov	r1, r5
 800b682:	f7ff ff85 	bl	800b590 <_malloc_r>
 800b686:	4606      	mov	r6, r0
 800b688:	b950      	cbnz	r0, 800b6a0 <__ssputs_r+0x5c>
 800b68a:	230c      	movs	r3, #12
 800b68c:	f8ca 3000 	str.w	r3, [sl]
 800b690:	89a3      	ldrh	r3, [r4, #12]
 800b692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b696:	81a3      	strh	r3, [r4, #12]
 800b698:	f04f 30ff 	mov.w	r0, #4294967295
 800b69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a0:	6921      	ldr	r1, [r4, #16]
 800b6a2:	464a      	mov	r2, r9
 800b6a4:	f7ff fa4a 	bl	800ab3c <memcpy>
 800b6a8:	89a3      	ldrh	r3, [r4, #12]
 800b6aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6b2:	81a3      	strh	r3, [r4, #12]
 800b6b4:	6126      	str	r6, [r4, #16]
 800b6b6:	6165      	str	r5, [r4, #20]
 800b6b8:	444e      	add	r6, r9
 800b6ba:	eba5 0509 	sub.w	r5, r5, r9
 800b6be:	6026      	str	r6, [r4, #0]
 800b6c0:	60a5      	str	r5, [r4, #8]
 800b6c2:	463e      	mov	r6, r7
 800b6c4:	42be      	cmp	r6, r7
 800b6c6:	d900      	bls.n	800b6ca <__ssputs_r+0x86>
 800b6c8:	463e      	mov	r6, r7
 800b6ca:	4632      	mov	r2, r6
 800b6cc:	6820      	ldr	r0, [r4, #0]
 800b6ce:	4641      	mov	r1, r8
 800b6d0:	f000 ff48 	bl	800c564 <memmove>
 800b6d4:	68a3      	ldr	r3, [r4, #8]
 800b6d6:	6822      	ldr	r2, [r4, #0]
 800b6d8:	1b9b      	subs	r3, r3, r6
 800b6da:	4432      	add	r2, r6
 800b6dc:	60a3      	str	r3, [r4, #8]
 800b6de:	6022      	str	r2, [r4, #0]
 800b6e0:	2000      	movs	r0, #0
 800b6e2:	e7db      	b.n	800b69c <__ssputs_r+0x58>
 800b6e4:	462a      	mov	r2, r5
 800b6e6:	f000 ff63 	bl	800c5b0 <_realloc_r>
 800b6ea:	4606      	mov	r6, r0
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	d1e1      	bne.n	800b6b4 <__ssputs_r+0x70>
 800b6f0:	6921      	ldr	r1, [r4, #16]
 800b6f2:	4650      	mov	r0, sl
 800b6f4:	f7ff fefc 	bl	800b4f0 <_free_r>
 800b6f8:	e7c7      	b.n	800b68a <__ssputs_r+0x46>
	...

0800b6fc <_svfiprintf_r>:
 800b6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b700:	4698      	mov	r8, r3
 800b702:	898b      	ldrh	r3, [r1, #12]
 800b704:	061b      	lsls	r3, r3, #24
 800b706:	b09d      	sub	sp, #116	; 0x74
 800b708:	4607      	mov	r7, r0
 800b70a:	460d      	mov	r5, r1
 800b70c:	4614      	mov	r4, r2
 800b70e:	d50e      	bpl.n	800b72e <_svfiprintf_r+0x32>
 800b710:	690b      	ldr	r3, [r1, #16]
 800b712:	b963      	cbnz	r3, 800b72e <_svfiprintf_r+0x32>
 800b714:	2140      	movs	r1, #64	; 0x40
 800b716:	f7ff ff3b 	bl	800b590 <_malloc_r>
 800b71a:	6028      	str	r0, [r5, #0]
 800b71c:	6128      	str	r0, [r5, #16]
 800b71e:	b920      	cbnz	r0, 800b72a <_svfiprintf_r+0x2e>
 800b720:	230c      	movs	r3, #12
 800b722:	603b      	str	r3, [r7, #0]
 800b724:	f04f 30ff 	mov.w	r0, #4294967295
 800b728:	e0d1      	b.n	800b8ce <_svfiprintf_r+0x1d2>
 800b72a:	2340      	movs	r3, #64	; 0x40
 800b72c:	616b      	str	r3, [r5, #20]
 800b72e:	2300      	movs	r3, #0
 800b730:	9309      	str	r3, [sp, #36]	; 0x24
 800b732:	2320      	movs	r3, #32
 800b734:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b738:	f8cd 800c 	str.w	r8, [sp, #12]
 800b73c:	2330      	movs	r3, #48	; 0x30
 800b73e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b8e8 <_svfiprintf_r+0x1ec>
 800b742:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b746:	f04f 0901 	mov.w	r9, #1
 800b74a:	4623      	mov	r3, r4
 800b74c:	469a      	mov	sl, r3
 800b74e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b752:	b10a      	cbz	r2, 800b758 <_svfiprintf_r+0x5c>
 800b754:	2a25      	cmp	r2, #37	; 0x25
 800b756:	d1f9      	bne.n	800b74c <_svfiprintf_r+0x50>
 800b758:	ebba 0b04 	subs.w	fp, sl, r4
 800b75c:	d00b      	beq.n	800b776 <_svfiprintf_r+0x7a>
 800b75e:	465b      	mov	r3, fp
 800b760:	4622      	mov	r2, r4
 800b762:	4629      	mov	r1, r5
 800b764:	4638      	mov	r0, r7
 800b766:	f7ff ff6d 	bl	800b644 <__ssputs_r>
 800b76a:	3001      	adds	r0, #1
 800b76c:	f000 80aa 	beq.w	800b8c4 <_svfiprintf_r+0x1c8>
 800b770:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b772:	445a      	add	r2, fp
 800b774:	9209      	str	r2, [sp, #36]	; 0x24
 800b776:	f89a 3000 	ldrb.w	r3, [sl]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	f000 80a2 	beq.w	800b8c4 <_svfiprintf_r+0x1c8>
 800b780:	2300      	movs	r3, #0
 800b782:	f04f 32ff 	mov.w	r2, #4294967295
 800b786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b78a:	f10a 0a01 	add.w	sl, sl, #1
 800b78e:	9304      	str	r3, [sp, #16]
 800b790:	9307      	str	r3, [sp, #28]
 800b792:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b796:	931a      	str	r3, [sp, #104]	; 0x68
 800b798:	4654      	mov	r4, sl
 800b79a:	2205      	movs	r2, #5
 800b79c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7a0:	4851      	ldr	r0, [pc, #324]	; (800b8e8 <_svfiprintf_r+0x1ec>)
 800b7a2:	f7f4 fd65 	bl	8000270 <memchr>
 800b7a6:	9a04      	ldr	r2, [sp, #16]
 800b7a8:	b9d8      	cbnz	r0, 800b7e2 <_svfiprintf_r+0xe6>
 800b7aa:	06d0      	lsls	r0, r2, #27
 800b7ac:	bf44      	itt	mi
 800b7ae:	2320      	movmi	r3, #32
 800b7b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7b4:	0711      	lsls	r1, r2, #28
 800b7b6:	bf44      	itt	mi
 800b7b8:	232b      	movmi	r3, #43	; 0x2b
 800b7ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7be:	f89a 3000 	ldrb.w	r3, [sl]
 800b7c2:	2b2a      	cmp	r3, #42	; 0x2a
 800b7c4:	d015      	beq.n	800b7f2 <_svfiprintf_r+0xf6>
 800b7c6:	9a07      	ldr	r2, [sp, #28]
 800b7c8:	4654      	mov	r4, sl
 800b7ca:	2000      	movs	r0, #0
 800b7cc:	f04f 0c0a 	mov.w	ip, #10
 800b7d0:	4621      	mov	r1, r4
 800b7d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7d6:	3b30      	subs	r3, #48	; 0x30
 800b7d8:	2b09      	cmp	r3, #9
 800b7da:	d94e      	bls.n	800b87a <_svfiprintf_r+0x17e>
 800b7dc:	b1b0      	cbz	r0, 800b80c <_svfiprintf_r+0x110>
 800b7de:	9207      	str	r2, [sp, #28]
 800b7e0:	e014      	b.n	800b80c <_svfiprintf_r+0x110>
 800b7e2:	eba0 0308 	sub.w	r3, r0, r8
 800b7e6:	fa09 f303 	lsl.w	r3, r9, r3
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	9304      	str	r3, [sp, #16]
 800b7ee:	46a2      	mov	sl, r4
 800b7f0:	e7d2      	b.n	800b798 <_svfiprintf_r+0x9c>
 800b7f2:	9b03      	ldr	r3, [sp, #12]
 800b7f4:	1d19      	adds	r1, r3, #4
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	9103      	str	r1, [sp, #12]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	bfbb      	ittet	lt
 800b7fe:	425b      	neglt	r3, r3
 800b800:	f042 0202 	orrlt.w	r2, r2, #2
 800b804:	9307      	strge	r3, [sp, #28]
 800b806:	9307      	strlt	r3, [sp, #28]
 800b808:	bfb8      	it	lt
 800b80a:	9204      	strlt	r2, [sp, #16]
 800b80c:	7823      	ldrb	r3, [r4, #0]
 800b80e:	2b2e      	cmp	r3, #46	; 0x2e
 800b810:	d10c      	bne.n	800b82c <_svfiprintf_r+0x130>
 800b812:	7863      	ldrb	r3, [r4, #1]
 800b814:	2b2a      	cmp	r3, #42	; 0x2a
 800b816:	d135      	bne.n	800b884 <_svfiprintf_r+0x188>
 800b818:	9b03      	ldr	r3, [sp, #12]
 800b81a:	1d1a      	adds	r2, r3, #4
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	9203      	str	r2, [sp, #12]
 800b820:	2b00      	cmp	r3, #0
 800b822:	bfb8      	it	lt
 800b824:	f04f 33ff 	movlt.w	r3, #4294967295
 800b828:	3402      	adds	r4, #2
 800b82a:	9305      	str	r3, [sp, #20]
 800b82c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b8f8 <_svfiprintf_r+0x1fc>
 800b830:	7821      	ldrb	r1, [r4, #0]
 800b832:	2203      	movs	r2, #3
 800b834:	4650      	mov	r0, sl
 800b836:	f7f4 fd1b 	bl	8000270 <memchr>
 800b83a:	b140      	cbz	r0, 800b84e <_svfiprintf_r+0x152>
 800b83c:	2340      	movs	r3, #64	; 0x40
 800b83e:	eba0 000a 	sub.w	r0, r0, sl
 800b842:	fa03 f000 	lsl.w	r0, r3, r0
 800b846:	9b04      	ldr	r3, [sp, #16]
 800b848:	4303      	orrs	r3, r0
 800b84a:	3401      	adds	r4, #1
 800b84c:	9304      	str	r3, [sp, #16]
 800b84e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b852:	4826      	ldr	r0, [pc, #152]	; (800b8ec <_svfiprintf_r+0x1f0>)
 800b854:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b858:	2206      	movs	r2, #6
 800b85a:	f7f4 fd09 	bl	8000270 <memchr>
 800b85e:	2800      	cmp	r0, #0
 800b860:	d038      	beq.n	800b8d4 <_svfiprintf_r+0x1d8>
 800b862:	4b23      	ldr	r3, [pc, #140]	; (800b8f0 <_svfiprintf_r+0x1f4>)
 800b864:	bb1b      	cbnz	r3, 800b8ae <_svfiprintf_r+0x1b2>
 800b866:	9b03      	ldr	r3, [sp, #12]
 800b868:	3307      	adds	r3, #7
 800b86a:	f023 0307 	bic.w	r3, r3, #7
 800b86e:	3308      	adds	r3, #8
 800b870:	9303      	str	r3, [sp, #12]
 800b872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b874:	4433      	add	r3, r6
 800b876:	9309      	str	r3, [sp, #36]	; 0x24
 800b878:	e767      	b.n	800b74a <_svfiprintf_r+0x4e>
 800b87a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b87e:	460c      	mov	r4, r1
 800b880:	2001      	movs	r0, #1
 800b882:	e7a5      	b.n	800b7d0 <_svfiprintf_r+0xd4>
 800b884:	2300      	movs	r3, #0
 800b886:	3401      	adds	r4, #1
 800b888:	9305      	str	r3, [sp, #20]
 800b88a:	4619      	mov	r1, r3
 800b88c:	f04f 0c0a 	mov.w	ip, #10
 800b890:	4620      	mov	r0, r4
 800b892:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b896:	3a30      	subs	r2, #48	; 0x30
 800b898:	2a09      	cmp	r2, #9
 800b89a:	d903      	bls.n	800b8a4 <_svfiprintf_r+0x1a8>
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d0c5      	beq.n	800b82c <_svfiprintf_r+0x130>
 800b8a0:	9105      	str	r1, [sp, #20]
 800b8a2:	e7c3      	b.n	800b82c <_svfiprintf_r+0x130>
 800b8a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e7f0      	b.n	800b890 <_svfiprintf_r+0x194>
 800b8ae:	ab03      	add	r3, sp, #12
 800b8b0:	9300      	str	r3, [sp, #0]
 800b8b2:	462a      	mov	r2, r5
 800b8b4:	4b0f      	ldr	r3, [pc, #60]	; (800b8f4 <_svfiprintf_r+0x1f8>)
 800b8b6:	a904      	add	r1, sp, #16
 800b8b8:	4638      	mov	r0, r7
 800b8ba:	f7fc fa81 	bl	8007dc0 <_printf_float>
 800b8be:	1c42      	adds	r2, r0, #1
 800b8c0:	4606      	mov	r6, r0
 800b8c2:	d1d6      	bne.n	800b872 <_svfiprintf_r+0x176>
 800b8c4:	89ab      	ldrh	r3, [r5, #12]
 800b8c6:	065b      	lsls	r3, r3, #25
 800b8c8:	f53f af2c 	bmi.w	800b724 <_svfiprintf_r+0x28>
 800b8cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8ce:	b01d      	add	sp, #116	; 0x74
 800b8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d4:	ab03      	add	r3, sp, #12
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	462a      	mov	r2, r5
 800b8da:	4b06      	ldr	r3, [pc, #24]	; (800b8f4 <_svfiprintf_r+0x1f8>)
 800b8dc:	a904      	add	r1, sp, #16
 800b8de:	4638      	mov	r0, r7
 800b8e0:	f7fc fcfa 	bl	80082d8 <_printf_i>
 800b8e4:	e7eb      	b.n	800b8be <_svfiprintf_r+0x1c2>
 800b8e6:	bf00      	nop
 800b8e8:	0800d1c4 	.word	0x0800d1c4
 800b8ec:	0800d1ce 	.word	0x0800d1ce
 800b8f0:	08007dc1 	.word	0x08007dc1
 800b8f4:	0800b645 	.word	0x0800b645
 800b8f8:	0800d1ca 	.word	0x0800d1ca

0800b8fc <_sungetc_r>:
 800b8fc:	b538      	push	{r3, r4, r5, lr}
 800b8fe:	1c4b      	adds	r3, r1, #1
 800b900:	4614      	mov	r4, r2
 800b902:	d103      	bne.n	800b90c <_sungetc_r+0x10>
 800b904:	f04f 35ff 	mov.w	r5, #4294967295
 800b908:	4628      	mov	r0, r5
 800b90a:	bd38      	pop	{r3, r4, r5, pc}
 800b90c:	8993      	ldrh	r3, [r2, #12]
 800b90e:	f023 0320 	bic.w	r3, r3, #32
 800b912:	8193      	strh	r3, [r2, #12]
 800b914:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b916:	6852      	ldr	r2, [r2, #4]
 800b918:	b2cd      	uxtb	r5, r1
 800b91a:	b18b      	cbz	r3, 800b940 <_sungetc_r+0x44>
 800b91c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b91e:	4293      	cmp	r3, r2
 800b920:	dd08      	ble.n	800b934 <_sungetc_r+0x38>
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	1e5a      	subs	r2, r3, #1
 800b926:	6022      	str	r2, [r4, #0]
 800b928:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b92c:	6863      	ldr	r3, [r4, #4]
 800b92e:	3301      	adds	r3, #1
 800b930:	6063      	str	r3, [r4, #4]
 800b932:	e7e9      	b.n	800b908 <_sungetc_r+0xc>
 800b934:	4621      	mov	r1, r4
 800b936:	f000 fbe3 	bl	800c100 <__submore>
 800b93a:	2800      	cmp	r0, #0
 800b93c:	d0f1      	beq.n	800b922 <_sungetc_r+0x26>
 800b93e:	e7e1      	b.n	800b904 <_sungetc_r+0x8>
 800b940:	6921      	ldr	r1, [r4, #16]
 800b942:	6823      	ldr	r3, [r4, #0]
 800b944:	b151      	cbz	r1, 800b95c <_sungetc_r+0x60>
 800b946:	4299      	cmp	r1, r3
 800b948:	d208      	bcs.n	800b95c <_sungetc_r+0x60>
 800b94a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b94e:	42a9      	cmp	r1, r5
 800b950:	d104      	bne.n	800b95c <_sungetc_r+0x60>
 800b952:	3b01      	subs	r3, #1
 800b954:	3201      	adds	r2, #1
 800b956:	6023      	str	r3, [r4, #0]
 800b958:	6062      	str	r2, [r4, #4]
 800b95a:	e7d5      	b.n	800b908 <_sungetc_r+0xc>
 800b95c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b964:	6363      	str	r3, [r4, #52]	; 0x34
 800b966:	2303      	movs	r3, #3
 800b968:	63a3      	str	r3, [r4, #56]	; 0x38
 800b96a:	4623      	mov	r3, r4
 800b96c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b970:	6023      	str	r3, [r4, #0]
 800b972:	2301      	movs	r3, #1
 800b974:	e7dc      	b.n	800b930 <_sungetc_r+0x34>

0800b976 <__ssrefill_r>:
 800b976:	b510      	push	{r4, lr}
 800b978:	460c      	mov	r4, r1
 800b97a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b97c:	b169      	cbz	r1, 800b99a <__ssrefill_r+0x24>
 800b97e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b982:	4299      	cmp	r1, r3
 800b984:	d001      	beq.n	800b98a <__ssrefill_r+0x14>
 800b986:	f7ff fdb3 	bl	800b4f0 <_free_r>
 800b98a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b98c:	6063      	str	r3, [r4, #4]
 800b98e:	2000      	movs	r0, #0
 800b990:	6360      	str	r0, [r4, #52]	; 0x34
 800b992:	b113      	cbz	r3, 800b99a <__ssrefill_r+0x24>
 800b994:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b996:	6023      	str	r3, [r4, #0]
 800b998:	bd10      	pop	{r4, pc}
 800b99a:	6923      	ldr	r3, [r4, #16]
 800b99c:	6023      	str	r3, [r4, #0]
 800b99e:	2300      	movs	r3, #0
 800b9a0:	6063      	str	r3, [r4, #4]
 800b9a2:	89a3      	ldrh	r3, [r4, #12]
 800b9a4:	f043 0320 	orr.w	r3, r3, #32
 800b9a8:	81a3      	strh	r3, [r4, #12]
 800b9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ae:	e7f3      	b.n	800b998 <__ssrefill_r+0x22>

0800b9b0 <__ssvfiscanf_r>:
 800b9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b4:	460c      	mov	r4, r1
 800b9b6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b9ba:	2100      	movs	r1, #0
 800b9bc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b9c0:	49b2      	ldr	r1, [pc, #712]	; (800bc8c <__ssvfiscanf_r+0x2dc>)
 800b9c2:	91a0      	str	r1, [sp, #640]	; 0x280
 800b9c4:	f10d 0804 	add.w	r8, sp, #4
 800b9c8:	49b1      	ldr	r1, [pc, #708]	; (800bc90 <__ssvfiscanf_r+0x2e0>)
 800b9ca:	4fb2      	ldr	r7, [pc, #712]	; (800bc94 <__ssvfiscanf_r+0x2e4>)
 800b9cc:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800bc98 <__ssvfiscanf_r+0x2e8>
 800b9d0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b9d4:	4606      	mov	r6, r0
 800b9d6:	91a1      	str	r1, [sp, #644]	; 0x284
 800b9d8:	9300      	str	r3, [sp, #0]
 800b9da:	f892 a000 	ldrb.w	sl, [r2]
 800b9de:	f1ba 0f00 	cmp.w	sl, #0
 800b9e2:	f000 8151 	beq.w	800bc88 <__ssvfiscanf_r+0x2d8>
 800b9e6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800b9ea:	f013 0308 	ands.w	r3, r3, #8
 800b9ee:	f102 0501 	add.w	r5, r2, #1
 800b9f2:	d019      	beq.n	800ba28 <__ssvfiscanf_r+0x78>
 800b9f4:	6863      	ldr	r3, [r4, #4]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	dd0f      	ble.n	800ba1a <__ssvfiscanf_r+0x6a>
 800b9fa:	6823      	ldr	r3, [r4, #0]
 800b9fc:	781a      	ldrb	r2, [r3, #0]
 800b9fe:	5cba      	ldrb	r2, [r7, r2]
 800ba00:	0712      	lsls	r2, r2, #28
 800ba02:	d401      	bmi.n	800ba08 <__ssvfiscanf_r+0x58>
 800ba04:	462a      	mov	r2, r5
 800ba06:	e7e8      	b.n	800b9da <__ssvfiscanf_r+0x2a>
 800ba08:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ba0a:	3201      	adds	r2, #1
 800ba0c:	9245      	str	r2, [sp, #276]	; 0x114
 800ba0e:	6862      	ldr	r2, [r4, #4]
 800ba10:	3301      	adds	r3, #1
 800ba12:	3a01      	subs	r2, #1
 800ba14:	6062      	str	r2, [r4, #4]
 800ba16:	6023      	str	r3, [r4, #0]
 800ba18:	e7ec      	b.n	800b9f4 <__ssvfiscanf_r+0x44>
 800ba1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ba1c:	4621      	mov	r1, r4
 800ba1e:	4630      	mov	r0, r6
 800ba20:	4798      	blx	r3
 800ba22:	2800      	cmp	r0, #0
 800ba24:	d0e9      	beq.n	800b9fa <__ssvfiscanf_r+0x4a>
 800ba26:	e7ed      	b.n	800ba04 <__ssvfiscanf_r+0x54>
 800ba28:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800ba2c:	f040 8083 	bne.w	800bb36 <__ssvfiscanf_r+0x186>
 800ba30:	9341      	str	r3, [sp, #260]	; 0x104
 800ba32:	9343      	str	r3, [sp, #268]	; 0x10c
 800ba34:	7853      	ldrb	r3, [r2, #1]
 800ba36:	2b2a      	cmp	r3, #42	; 0x2a
 800ba38:	bf02      	ittt	eq
 800ba3a:	2310      	moveq	r3, #16
 800ba3c:	1c95      	addeq	r5, r2, #2
 800ba3e:	9341      	streq	r3, [sp, #260]	; 0x104
 800ba40:	220a      	movs	r2, #10
 800ba42:	46ab      	mov	fp, r5
 800ba44:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800ba48:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ba4c:	2b09      	cmp	r3, #9
 800ba4e:	d91d      	bls.n	800ba8c <__ssvfiscanf_r+0xdc>
 800ba50:	4891      	ldr	r0, [pc, #580]	; (800bc98 <__ssvfiscanf_r+0x2e8>)
 800ba52:	2203      	movs	r2, #3
 800ba54:	f7f4 fc0c 	bl	8000270 <memchr>
 800ba58:	b140      	cbz	r0, 800ba6c <__ssvfiscanf_r+0xbc>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	eba0 0009 	sub.w	r0, r0, r9
 800ba60:	fa03 f000 	lsl.w	r0, r3, r0
 800ba64:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ba66:	4318      	orrs	r0, r3
 800ba68:	9041      	str	r0, [sp, #260]	; 0x104
 800ba6a:	465d      	mov	r5, fp
 800ba6c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ba70:	2b78      	cmp	r3, #120	; 0x78
 800ba72:	d806      	bhi.n	800ba82 <__ssvfiscanf_r+0xd2>
 800ba74:	2b57      	cmp	r3, #87	; 0x57
 800ba76:	d810      	bhi.n	800ba9a <__ssvfiscanf_r+0xea>
 800ba78:	2b25      	cmp	r3, #37	; 0x25
 800ba7a:	d05c      	beq.n	800bb36 <__ssvfiscanf_r+0x186>
 800ba7c:	d856      	bhi.n	800bb2c <__ssvfiscanf_r+0x17c>
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d074      	beq.n	800bb6c <__ssvfiscanf_r+0x1bc>
 800ba82:	2303      	movs	r3, #3
 800ba84:	9347      	str	r3, [sp, #284]	; 0x11c
 800ba86:	230a      	movs	r3, #10
 800ba88:	9342      	str	r3, [sp, #264]	; 0x108
 800ba8a:	e081      	b.n	800bb90 <__ssvfiscanf_r+0x1e0>
 800ba8c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ba8e:	fb02 1303 	mla	r3, r2, r3, r1
 800ba92:	3b30      	subs	r3, #48	; 0x30
 800ba94:	9343      	str	r3, [sp, #268]	; 0x10c
 800ba96:	465d      	mov	r5, fp
 800ba98:	e7d3      	b.n	800ba42 <__ssvfiscanf_r+0x92>
 800ba9a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ba9e:	2a20      	cmp	r2, #32
 800baa0:	d8ef      	bhi.n	800ba82 <__ssvfiscanf_r+0xd2>
 800baa2:	a101      	add	r1, pc, #4	; (adr r1, 800baa8 <__ssvfiscanf_r+0xf8>)
 800baa4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800baa8:	0800bb7b 	.word	0x0800bb7b
 800baac:	0800ba83 	.word	0x0800ba83
 800bab0:	0800ba83 	.word	0x0800ba83
 800bab4:	0800bbd9 	.word	0x0800bbd9
 800bab8:	0800ba83 	.word	0x0800ba83
 800babc:	0800ba83 	.word	0x0800ba83
 800bac0:	0800ba83 	.word	0x0800ba83
 800bac4:	0800ba83 	.word	0x0800ba83
 800bac8:	0800ba83 	.word	0x0800ba83
 800bacc:	0800ba83 	.word	0x0800ba83
 800bad0:	0800ba83 	.word	0x0800ba83
 800bad4:	0800bbef 	.word	0x0800bbef
 800bad8:	0800bbc5 	.word	0x0800bbc5
 800badc:	0800bb33 	.word	0x0800bb33
 800bae0:	0800bb33 	.word	0x0800bb33
 800bae4:	0800bb33 	.word	0x0800bb33
 800bae8:	0800ba83 	.word	0x0800ba83
 800baec:	0800bbc9 	.word	0x0800bbc9
 800baf0:	0800ba83 	.word	0x0800ba83
 800baf4:	0800ba83 	.word	0x0800ba83
 800baf8:	0800ba83 	.word	0x0800ba83
 800bafc:	0800ba83 	.word	0x0800ba83
 800bb00:	0800bbff 	.word	0x0800bbff
 800bb04:	0800bbd1 	.word	0x0800bbd1
 800bb08:	0800bb73 	.word	0x0800bb73
 800bb0c:	0800ba83 	.word	0x0800ba83
 800bb10:	0800ba83 	.word	0x0800ba83
 800bb14:	0800bbfb 	.word	0x0800bbfb
 800bb18:	0800ba83 	.word	0x0800ba83
 800bb1c:	0800bbc5 	.word	0x0800bbc5
 800bb20:	0800ba83 	.word	0x0800ba83
 800bb24:	0800ba83 	.word	0x0800ba83
 800bb28:	0800bb7b 	.word	0x0800bb7b
 800bb2c:	3b45      	subs	r3, #69	; 0x45
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	d8a7      	bhi.n	800ba82 <__ssvfiscanf_r+0xd2>
 800bb32:	2305      	movs	r3, #5
 800bb34:	e02b      	b.n	800bb8e <__ssvfiscanf_r+0x1de>
 800bb36:	6863      	ldr	r3, [r4, #4]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	dd0d      	ble.n	800bb58 <__ssvfiscanf_r+0x1a8>
 800bb3c:	6823      	ldr	r3, [r4, #0]
 800bb3e:	781a      	ldrb	r2, [r3, #0]
 800bb40:	4552      	cmp	r2, sl
 800bb42:	f040 80a1 	bne.w	800bc88 <__ssvfiscanf_r+0x2d8>
 800bb46:	3301      	adds	r3, #1
 800bb48:	6862      	ldr	r2, [r4, #4]
 800bb4a:	6023      	str	r3, [r4, #0]
 800bb4c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bb4e:	3a01      	subs	r2, #1
 800bb50:	3301      	adds	r3, #1
 800bb52:	6062      	str	r2, [r4, #4]
 800bb54:	9345      	str	r3, [sp, #276]	; 0x114
 800bb56:	e755      	b.n	800ba04 <__ssvfiscanf_r+0x54>
 800bb58:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bb5a:	4621      	mov	r1, r4
 800bb5c:	4630      	mov	r0, r6
 800bb5e:	4798      	blx	r3
 800bb60:	2800      	cmp	r0, #0
 800bb62:	d0eb      	beq.n	800bb3c <__ssvfiscanf_r+0x18c>
 800bb64:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bb66:	2800      	cmp	r0, #0
 800bb68:	f040 8084 	bne.w	800bc74 <__ssvfiscanf_r+0x2c4>
 800bb6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb70:	e086      	b.n	800bc80 <__ssvfiscanf_r+0x2d0>
 800bb72:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bb74:	f042 0220 	orr.w	r2, r2, #32
 800bb78:	9241      	str	r2, [sp, #260]	; 0x104
 800bb7a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bb7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb80:	9241      	str	r2, [sp, #260]	; 0x104
 800bb82:	2210      	movs	r2, #16
 800bb84:	2b6f      	cmp	r3, #111	; 0x6f
 800bb86:	9242      	str	r2, [sp, #264]	; 0x108
 800bb88:	bf34      	ite	cc
 800bb8a:	2303      	movcc	r3, #3
 800bb8c:	2304      	movcs	r3, #4
 800bb8e:	9347      	str	r3, [sp, #284]	; 0x11c
 800bb90:	6863      	ldr	r3, [r4, #4]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	dd41      	ble.n	800bc1a <__ssvfiscanf_r+0x26a>
 800bb96:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bb98:	0659      	lsls	r1, r3, #25
 800bb9a:	d404      	bmi.n	800bba6 <__ssvfiscanf_r+0x1f6>
 800bb9c:	6823      	ldr	r3, [r4, #0]
 800bb9e:	781a      	ldrb	r2, [r3, #0]
 800bba0:	5cba      	ldrb	r2, [r7, r2]
 800bba2:	0712      	lsls	r2, r2, #28
 800bba4:	d440      	bmi.n	800bc28 <__ssvfiscanf_r+0x278>
 800bba6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bba8:	2b02      	cmp	r3, #2
 800bbaa:	dc4f      	bgt.n	800bc4c <__ssvfiscanf_r+0x29c>
 800bbac:	466b      	mov	r3, sp
 800bbae:	4622      	mov	r2, r4
 800bbb0:	a941      	add	r1, sp, #260	; 0x104
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	f000 f874 	bl	800bca0 <_scanf_chars>
 800bbb8:	2801      	cmp	r0, #1
 800bbba:	d065      	beq.n	800bc88 <__ssvfiscanf_r+0x2d8>
 800bbbc:	2802      	cmp	r0, #2
 800bbbe:	f47f af21 	bne.w	800ba04 <__ssvfiscanf_r+0x54>
 800bbc2:	e7cf      	b.n	800bb64 <__ssvfiscanf_r+0x1b4>
 800bbc4:	220a      	movs	r2, #10
 800bbc6:	e7dd      	b.n	800bb84 <__ssvfiscanf_r+0x1d4>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	9342      	str	r3, [sp, #264]	; 0x108
 800bbcc:	2303      	movs	r3, #3
 800bbce:	e7de      	b.n	800bb8e <__ssvfiscanf_r+0x1de>
 800bbd0:	2308      	movs	r3, #8
 800bbd2:	9342      	str	r3, [sp, #264]	; 0x108
 800bbd4:	2304      	movs	r3, #4
 800bbd6:	e7da      	b.n	800bb8e <__ssvfiscanf_r+0x1de>
 800bbd8:	4629      	mov	r1, r5
 800bbda:	4640      	mov	r0, r8
 800bbdc:	f000 f9d8 	bl	800bf90 <__sccl>
 800bbe0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bbe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbe6:	9341      	str	r3, [sp, #260]	; 0x104
 800bbe8:	4605      	mov	r5, r0
 800bbea:	2301      	movs	r3, #1
 800bbec:	e7cf      	b.n	800bb8e <__ssvfiscanf_r+0x1de>
 800bbee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bbf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbf4:	9341      	str	r3, [sp, #260]	; 0x104
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	e7c9      	b.n	800bb8e <__ssvfiscanf_r+0x1de>
 800bbfa:	2302      	movs	r3, #2
 800bbfc:	e7c7      	b.n	800bb8e <__ssvfiscanf_r+0x1de>
 800bbfe:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bc00:	06c3      	lsls	r3, r0, #27
 800bc02:	f53f aeff 	bmi.w	800ba04 <__ssvfiscanf_r+0x54>
 800bc06:	9b00      	ldr	r3, [sp, #0]
 800bc08:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bc0a:	1d19      	adds	r1, r3, #4
 800bc0c:	9100      	str	r1, [sp, #0]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	07c0      	lsls	r0, r0, #31
 800bc12:	bf4c      	ite	mi
 800bc14:	801a      	strhmi	r2, [r3, #0]
 800bc16:	601a      	strpl	r2, [r3, #0]
 800bc18:	e6f4      	b.n	800ba04 <__ssvfiscanf_r+0x54>
 800bc1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc1c:	4621      	mov	r1, r4
 800bc1e:	4630      	mov	r0, r6
 800bc20:	4798      	blx	r3
 800bc22:	2800      	cmp	r0, #0
 800bc24:	d0b7      	beq.n	800bb96 <__ssvfiscanf_r+0x1e6>
 800bc26:	e79d      	b.n	800bb64 <__ssvfiscanf_r+0x1b4>
 800bc28:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bc2a:	3201      	adds	r2, #1
 800bc2c:	9245      	str	r2, [sp, #276]	; 0x114
 800bc2e:	6862      	ldr	r2, [r4, #4]
 800bc30:	3a01      	subs	r2, #1
 800bc32:	2a00      	cmp	r2, #0
 800bc34:	6062      	str	r2, [r4, #4]
 800bc36:	dd02      	ble.n	800bc3e <__ssvfiscanf_r+0x28e>
 800bc38:	3301      	adds	r3, #1
 800bc3a:	6023      	str	r3, [r4, #0]
 800bc3c:	e7ae      	b.n	800bb9c <__ssvfiscanf_r+0x1ec>
 800bc3e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc40:	4621      	mov	r1, r4
 800bc42:	4630      	mov	r0, r6
 800bc44:	4798      	blx	r3
 800bc46:	2800      	cmp	r0, #0
 800bc48:	d0a8      	beq.n	800bb9c <__ssvfiscanf_r+0x1ec>
 800bc4a:	e78b      	b.n	800bb64 <__ssvfiscanf_r+0x1b4>
 800bc4c:	2b04      	cmp	r3, #4
 800bc4e:	dc06      	bgt.n	800bc5e <__ssvfiscanf_r+0x2ae>
 800bc50:	466b      	mov	r3, sp
 800bc52:	4622      	mov	r2, r4
 800bc54:	a941      	add	r1, sp, #260	; 0x104
 800bc56:	4630      	mov	r0, r6
 800bc58:	f000 f87a 	bl	800bd50 <_scanf_i>
 800bc5c:	e7ac      	b.n	800bbb8 <__ssvfiscanf_r+0x208>
 800bc5e:	4b0f      	ldr	r3, [pc, #60]	; (800bc9c <__ssvfiscanf_r+0x2ec>)
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f43f aecf 	beq.w	800ba04 <__ssvfiscanf_r+0x54>
 800bc66:	466b      	mov	r3, sp
 800bc68:	4622      	mov	r2, r4
 800bc6a:	a941      	add	r1, sp, #260	; 0x104
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	f7fc fc59 	bl	8008524 <_scanf_float>
 800bc72:	e7a1      	b.n	800bbb8 <__ssvfiscanf_r+0x208>
 800bc74:	89a3      	ldrh	r3, [r4, #12]
 800bc76:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bc7a:	bf18      	it	ne
 800bc7c:	f04f 30ff 	movne.w	r0, #4294967295
 800bc80:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800bc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc88:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bc8a:	e7f9      	b.n	800bc80 <__ssvfiscanf_r+0x2d0>
 800bc8c:	0800b8fd 	.word	0x0800b8fd
 800bc90:	0800b977 	.word	0x0800b977
 800bc94:	0800ce51 	.word	0x0800ce51
 800bc98:	0800d1ca 	.word	0x0800d1ca
 800bc9c:	08008525 	.word	0x08008525

0800bca0 <_scanf_chars>:
 800bca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bca4:	4615      	mov	r5, r2
 800bca6:	688a      	ldr	r2, [r1, #8]
 800bca8:	4680      	mov	r8, r0
 800bcaa:	460c      	mov	r4, r1
 800bcac:	b932      	cbnz	r2, 800bcbc <_scanf_chars+0x1c>
 800bcae:	698a      	ldr	r2, [r1, #24]
 800bcb0:	2a00      	cmp	r2, #0
 800bcb2:	bf0c      	ite	eq
 800bcb4:	2201      	moveq	r2, #1
 800bcb6:	f04f 32ff 	movne.w	r2, #4294967295
 800bcba:	608a      	str	r2, [r1, #8]
 800bcbc:	6822      	ldr	r2, [r4, #0]
 800bcbe:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800bd4c <_scanf_chars+0xac>
 800bcc2:	06d1      	lsls	r1, r2, #27
 800bcc4:	bf5f      	itttt	pl
 800bcc6:	681a      	ldrpl	r2, [r3, #0]
 800bcc8:	1d11      	addpl	r1, r2, #4
 800bcca:	6019      	strpl	r1, [r3, #0]
 800bccc:	6816      	ldrpl	r6, [r2, #0]
 800bcce:	2700      	movs	r7, #0
 800bcd0:	69a0      	ldr	r0, [r4, #24]
 800bcd2:	b188      	cbz	r0, 800bcf8 <_scanf_chars+0x58>
 800bcd4:	2801      	cmp	r0, #1
 800bcd6:	d107      	bne.n	800bce8 <_scanf_chars+0x48>
 800bcd8:	682b      	ldr	r3, [r5, #0]
 800bcda:	781a      	ldrb	r2, [r3, #0]
 800bcdc:	6963      	ldr	r3, [r4, #20]
 800bcde:	5c9b      	ldrb	r3, [r3, r2]
 800bce0:	b953      	cbnz	r3, 800bcf8 <_scanf_chars+0x58>
 800bce2:	bb27      	cbnz	r7, 800bd2e <_scanf_chars+0x8e>
 800bce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bce8:	2802      	cmp	r0, #2
 800bcea:	d120      	bne.n	800bd2e <_scanf_chars+0x8e>
 800bcec:	682b      	ldr	r3, [r5, #0]
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800bcf4:	071b      	lsls	r3, r3, #28
 800bcf6:	d41a      	bmi.n	800bd2e <_scanf_chars+0x8e>
 800bcf8:	6823      	ldr	r3, [r4, #0]
 800bcfa:	06da      	lsls	r2, r3, #27
 800bcfc:	bf5e      	ittt	pl
 800bcfe:	682b      	ldrpl	r3, [r5, #0]
 800bd00:	781b      	ldrbpl	r3, [r3, #0]
 800bd02:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bd06:	682a      	ldr	r2, [r5, #0]
 800bd08:	686b      	ldr	r3, [r5, #4]
 800bd0a:	3201      	adds	r2, #1
 800bd0c:	602a      	str	r2, [r5, #0]
 800bd0e:	68a2      	ldr	r2, [r4, #8]
 800bd10:	3b01      	subs	r3, #1
 800bd12:	3a01      	subs	r2, #1
 800bd14:	606b      	str	r3, [r5, #4]
 800bd16:	3701      	adds	r7, #1
 800bd18:	60a2      	str	r2, [r4, #8]
 800bd1a:	b142      	cbz	r2, 800bd2e <_scanf_chars+0x8e>
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	dcd7      	bgt.n	800bcd0 <_scanf_chars+0x30>
 800bd20:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bd24:	4629      	mov	r1, r5
 800bd26:	4640      	mov	r0, r8
 800bd28:	4798      	blx	r3
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	d0d0      	beq.n	800bcd0 <_scanf_chars+0x30>
 800bd2e:	6823      	ldr	r3, [r4, #0]
 800bd30:	f013 0310 	ands.w	r3, r3, #16
 800bd34:	d105      	bne.n	800bd42 <_scanf_chars+0xa2>
 800bd36:	68e2      	ldr	r2, [r4, #12]
 800bd38:	3201      	adds	r2, #1
 800bd3a:	60e2      	str	r2, [r4, #12]
 800bd3c:	69a2      	ldr	r2, [r4, #24]
 800bd3e:	b102      	cbz	r2, 800bd42 <_scanf_chars+0xa2>
 800bd40:	7033      	strb	r3, [r6, #0]
 800bd42:	6923      	ldr	r3, [r4, #16]
 800bd44:	441f      	add	r7, r3
 800bd46:	6127      	str	r7, [r4, #16]
 800bd48:	2000      	movs	r0, #0
 800bd4a:	e7cb      	b.n	800bce4 <_scanf_chars+0x44>
 800bd4c:	0800ce51 	.word	0x0800ce51

0800bd50 <_scanf_i>:
 800bd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd54:	4698      	mov	r8, r3
 800bd56:	4b74      	ldr	r3, [pc, #464]	; (800bf28 <_scanf_i+0x1d8>)
 800bd58:	460c      	mov	r4, r1
 800bd5a:	4682      	mov	sl, r0
 800bd5c:	4616      	mov	r6, r2
 800bd5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd62:	b087      	sub	sp, #28
 800bd64:	ab03      	add	r3, sp, #12
 800bd66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bd6a:	4b70      	ldr	r3, [pc, #448]	; (800bf2c <_scanf_i+0x1dc>)
 800bd6c:	69a1      	ldr	r1, [r4, #24]
 800bd6e:	4a70      	ldr	r2, [pc, #448]	; (800bf30 <_scanf_i+0x1e0>)
 800bd70:	2903      	cmp	r1, #3
 800bd72:	bf18      	it	ne
 800bd74:	461a      	movne	r2, r3
 800bd76:	68a3      	ldr	r3, [r4, #8]
 800bd78:	9201      	str	r2, [sp, #4]
 800bd7a:	1e5a      	subs	r2, r3, #1
 800bd7c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bd80:	bf88      	it	hi
 800bd82:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bd86:	4627      	mov	r7, r4
 800bd88:	bf82      	ittt	hi
 800bd8a:	eb03 0905 	addhi.w	r9, r3, r5
 800bd8e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bd92:	60a3      	strhi	r3, [r4, #8]
 800bd94:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bd98:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bd9c:	bf98      	it	ls
 800bd9e:	f04f 0900 	movls.w	r9, #0
 800bda2:	6023      	str	r3, [r4, #0]
 800bda4:	463d      	mov	r5, r7
 800bda6:	f04f 0b00 	mov.w	fp, #0
 800bdaa:	6831      	ldr	r1, [r6, #0]
 800bdac:	ab03      	add	r3, sp, #12
 800bdae:	7809      	ldrb	r1, [r1, #0]
 800bdb0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bdb4:	2202      	movs	r2, #2
 800bdb6:	f7f4 fa5b 	bl	8000270 <memchr>
 800bdba:	b328      	cbz	r0, 800be08 <_scanf_i+0xb8>
 800bdbc:	f1bb 0f01 	cmp.w	fp, #1
 800bdc0:	d159      	bne.n	800be76 <_scanf_i+0x126>
 800bdc2:	6862      	ldr	r2, [r4, #4]
 800bdc4:	b92a      	cbnz	r2, 800bdd2 <_scanf_i+0x82>
 800bdc6:	6822      	ldr	r2, [r4, #0]
 800bdc8:	2308      	movs	r3, #8
 800bdca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bdce:	6063      	str	r3, [r4, #4]
 800bdd0:	6022      	str	r2, [r4, #0]
 800bdd2:	6822      	ldr	r2, [r4, #0]
 800bdd4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bdd8:	6022      	str	r2, [r4, #0]
 800bdda:	68a2      	ldr	r2, [r4, #8]
 800bddc:	1e51      	subs	r1, r2, #1
 800bdde:	60a1      	str	r1, [r4, #8]
 800bde0:	b192      	cbz	r2, 800be08 <_scanf_i+0xb8>
 800bde2:	6832      	ldr	r2, [r6, #0]
 800bde4:	1c51      	adds	r1, r2, #1
 800bde6:	6031      	str	r1, [r6, #0]
 800bde8:	7812      	ldrb	r2, [r2, #0]
 800bdea:	f805 2b01 	strb.w	r2, [r5], #1
 800bdee:	6872      	ldr	r2, [r6, #4]
 800bdf0:	3a01      	subs	r2, #1
 800bdf2:	2a00      	cmp	r2, #0
 800bdf4:	6072      	str	r2, [r6, #4]
 800bdf6:	dc07      	bgt.n	800be08 <_scanf_i+0xb8>
 800bdf8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800bdfc:	4631      	mov	r1, r6
 800bdfe:	4650      	mov	r0, sl
 800be00:	4790      	blx	r2
 800be02:	2800      	cmp	r0, #0
 800be04:	f040 8085 	bne.w	800bf12 <_scanf_i+0x1c2>
 800be08:	f10b 0b01 	add.w	fp, fp, #1
 800be0c:	f1bb 0f03 	cmp.w	fp, #3
 800be10:	d1cb      	bne.n	800bdaa <_scanf_i+0x5a>
 800be12:	6863      	ldr	r3, [r4, #4]
 800be14:	b90b      	cbnz	r3, 800be1a <_scanf_i+0xca>
 800be16:	230a      	movs	r3, #10
 800be18:	6063      	str	r3, [r4, #4]
 800be1a:	6863      	ldr	r3, [r4, #4]
 800be1c:	4945      	ldr	r1, [pc, #276]	; (800bf34 <_scanf_i+0x1e4>)
 800be1e:	6960      	ldr	r0, [r4, #20]
 800be20:	1ac9      	subs	r1, r1, r3
 800be22:	f000 f8b5 	bl	800bf90 <__sccl>
 800be26:	f04f 0b00 	mov.w	fp, #0
 800be2a:	68a3      	ldr	r3, [r4, #8]
 800be2c:	6822      	ldr	r2, [r4, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d03d      	beq.n	800beae <_scanf_i+0x15e>
 800be32:	6831      	ldr	r1, [r6, #0]
 800be34:	6960      	ldr	r0, [r4, #20]
 800be36:	f891 c000 	ldrb.w	ip, [r1]
 800be3a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800be3e:	2800      	cmp	r0, #0
 800be40:	d035      	beq.n	800beae <_scanf_i+0x15e>
 800be42:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800be46:	d124      	bne.n	800be92 <_scanf_i+0x142>
 800be48:	0510      	lsls	r0, r2, #20
 800be4a:	d522      	bpl.n	800be92 <_scanf_i+0x142>
 800be4c:	f10b 0b01 	add.w	fp, fp, #1
 800be50:	f1b9 0f00 	cmp.w	r9, #0
 800be54:	d003      	beq.n	800be5e <_scanf_i+0x10e>
 800be56:	3301      	adds	r3, #1
 800be58:	f109 39ff 	add.w	r9, r9, #4294967295
 800be5c:	60a3      	str	r3, [r4, #8]
 800be5e:	6873      	ldr	r3, [r6, #4]
 800be60:	3b01      	subs	r3, #1
 800be62:	2b00      	cmp	r3, #0
 800be64:	6073      	str	r3, [r6, #4]
 800be66:	dd1b      	ble.n	800bea0 <_scanf_i+0x150>
 800be68:	6833      	ldr	r3, [r6, #0]
 800be6a:	3301      	adds	r3, #1
 800be6c:	6033      	str	r3, [r6, #0]
 800be6e:	68a3      	ldr	r3, [r4, #8]
 800be70:	3b01      	subs	r3, #1
 800be72:	60a3      	str	r3, [r4, #8]
 800be74:	e7d9      	b.n	800be2a <_scanf_i+0xda>
 800be76:	f1bb 0f02 	cmp.w	fp, #2
 800be7a:	d1ae      	bne.n	800bdda <_scanf_i+0x8a>
 800be7c:	6822      	ldr	r2, [r4, #0]
 800be7e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800be82:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800be86:	d1bf      	bne.n	800be08 <_scanf_i+0xb8>
 800be88:	2310      	movs	r3, #16
 800be8a:	6063      	str	r3, [r4, #4]
 800be8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be90:	e7a2      	b.n	800bdd8 <_scanf_i+0x88>
 800be92:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800be96:	6022      	str	r2, [r4, #0]
 800be98:	780b      	ldrb	r3, [r1, #0]
 800be9a:	f805 3b01 	strb.w	r3, [r5], #1
 800be9e:	e7de      	b.n	800be5e <_scanf_i+0x10e>
 800bea0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bea4:	4631      	mov	r1, r6
 800bea6:	4650      	mov	r0, sl
 800bea8:	4798      	blx	r3
 800beaa:	2800      	cmp	r0, #0
 800beac:	d0df      	beq.n	800be6e <_scanf_i+0x11e>
 800beae:	6823      	ldr	r3, [r4, #0]
 800beb0:	05d9      	lsls	r1, r3, #23
 800beb2:	d50d      	bpl.n	800bed0 <_scanf_i+0x180>
 800beb4:	42bd      	cmp	r5, r7
 800beb6:	d909      	bls.n	800becc <_scanf_i+0x17c>
 800beb8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bebc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bec0:	4632      	mov	r2, r6
 800bec2:	4650      	mov	r0, sl
 800bec4:	4798      	blx	r3
 800bec6:	f105 39ff 	add.w	r9, r5, #4294967295
 800beca:	464d      	mov	r5, r9
 800becc:	42bd      	cmp	r5, r7
 800bece:	d028      	beq.n	800bf22 <_scanf_i+0x1d2>
 800bed0:	6822      	ldr	r2, [r4, #0]
 800bed2:	f012 0210 	ands.w	r2, r2, #16
 800bed6:	d113      	bne.n	800bf00 <_scanf_i+0x1b0>
 800bed8:	702a      	strb	r2, [r5, #0]
 800beda:	6863      	ldr	r3, [r4, #4]
 800bedc:	9e01      	ldr	r6, [sp, #4]
 800bede:	4639      	mov	r1, r7
 800bee0:	4650      	mov	r0, sl
 800bee2:	47b0      	blx	r6
 800bee4:	f8d8 3000 	ldr.w	r3, [r8]
 800bee8:	6821      	ldr	r1, [r4, #0]
 800beea:	1d1a      	adds	r2, r3, #4
 800beec:	f8c8 2000 	str.w	r2, [r8]
 800bef0:	f011 0f20 	tst.w	r1, #32
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	d00f      	beq.n	800bf18 <_scanf_i+0x1c8>
 800bef8:	6018      	str	r0, [r3, #0]
 800befa:	68e3      	ldr	r3, [r4, #12]
 800befc:	3301      	adds	r3, #1
 800befe:	60e3      	str	r3, [r4, #12]
 800bf00:	1bed      	subs	r5, r5, r7
 800bf02:	44ab      	add	fp, r5
 800bf04:	6925      	ldr	r5, [r4, #16]
 800bf06:	445d      	add	r5, fp
 800bf08:	6125      	str	r5, [r4, #16]
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	b007      	add	sp, #28
 800bf0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf12:	f04f 0b00 	mov.w	fp, #0
 800bf16:	e7ca      	b.n	800beae <_scanf_i+0x15e>
 800bf18:	07ca      	lsls	r2, r1, #31
 800bf1a:	bf4c      	ite	mi
 800bf1c:	8018      	strhmi	r0, [r3, #0]
 800bf1e:	6018      	strpl	r0, [r3, #0]
 800bf20:	e7eb      	b.n	800befa <_scanf_i+0x1aa>
 800bf22:	2001      	movs	r0, #1
 800bf24:	e7f2      	b.n	800bf0c <_scanf_i+0x1bc>
 800bf26:	bf00      	nop
 800bf28:	0800cd98 	.word	0x0800cd98
 800bf2c:	0800c0fd 	.word	0x0800c0fd
 800bf30:	08009799 	.word	0x08009799
 800bf34:	0800d1ee 	.word	0x0800d1ee

0800bf38 <_read_r>:
 800bf38:	b538      	push	{r3, r4, r5, lr}
 800bf3a:	4d07      	ldr	r5, [pc, #28]	; (800bf58 <_read_r+0x20>)
 800bf3c:	4604      	mov	r4, r0
 800bf3e:	4608      	mov	r0, r1
 800bf40:	4611      	mov	r1, r2
 800bf42:	2200      	movs	r2, #0
 800bf44:	602a      	str	r2, [r5, #0]
 800bf46:	461a      	mov	r2, r3
 800bf48:	f7f5 fe90 	bl	8001c6c <_read>
 800bf4c:	1c43      	adds	r3, r0, #1
 800bf4e:	d102      	bne.n	800bf56 <_read_r+0x1e>
 800bf50:	682b      	ldr	r3, [r5, #0]
 800bf52:	b103      	cbz	r3, 800bf56 <_read_r+0x1e>
 800bf54:	6023      	str	r3, [r4, #0]
 800bf56:	bd38      	pop	{r3, r4, r5, pc}
 800bf58:	200008e8 	.word	0x200008e8
 800bf5c:	00000000 	.word	0x00000000

0800bf60 <nan>:
 800bf60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bf68 <nan+0x8>
 800bf64:	4770      	bx	lr
 800bf66:	bf00      	nop
 800bf68:	00000000 	.word	0x00000000
 800bf6c:	7ff80000 	.word	0x7ff80000

0800bf70 <_sbrk_r>:
 800bf70:	b538      	push	{r3, r4, r5, lr}
 800bf72:	4d06      	ldr	r5, [pc, #24]	; (800bf8c <_sbrk_r+0x1c>)
 800bf74:	2300      	movs	r3, #0
 800bf76:	4604      	mov	r4, r0
 800bf78:	4608      	mov	r0, r1
 800bf7a:	602b      	str	r3, [r5, #0]
 800bf7c:	f7f5 fee4 	bl	8001d48 <_sbrk>
 800bf80:	1c43      	adds	r3, r0, #1
 800bf82:	d102      	bne.n	800bf8a <_sbrk_r+0x1a>
 800bf84:	682b      	ldr	r3, [r5, #0]
 800bf86:	b103      	cbz	r3, 800bf8a <_sbrk_r+0x1a>
 800bf88:	6023      	str	r3, [r4, #0]
 800bf8a:	bd38      	pop	{r3, r4, r5, pc}
 800bf8c:	200008e8 	.word	0x200008e8

0800bf90 <__sccl>:
 800bf90:	b570      	push	{r4, r5, r6, lr}
 800bf92:	780b      	ldrb	r3, [r1, #0]
 800bf94:	4604      	mov	r4, r0
 800bf96:	2b5e      	cmp	r3, #94	; 0x5e
 800bf98:	bf0b      	itete	eq
 800bf9a:	784b      	ldrbeq	r3, [r1, #1]
 800bf9c:	1c48      	addne	r0, r1, #1
 800bf9e:	1c88      	addeq	r0, r1, #2
 800bfa0:	2200      	movne	r2, #0
 800bfa2:	bf08      	it	eq
 800bfa4:	2201      	moveq	r2, #1
 800bfa6:	1e61      	subs	r1, r4, #1
 800bfa8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bfac:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bfb0:	42a9      	cmp	r1, r5
 800bfb2:	d1fb      	bne.n	800bfac <__sccl+0x1c>
 800bfb4:	b90b      	cbnz	r3, 800bfba <__sccl+0x2a>
 800bfb6:	3801      	subs	r0, #1
 800bfb8:	bd70      	pop	{r4, r5, r6, pc}
 800bfba:	f082 0101 	eor.w	r1, r2, #1
 800bfbe:	54e1      	strb	r1, [r4, r3]
 800bfc0:	1c42      	adds	r2, r0, #1
 800bfc2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800bfc6:	2d2d      	cmp	r5, #45	; 0x2d
 800bfc8:	f102 36ff 	add.w	r6, r2, #4294967295
 800bfcc:	4610      	mov	r0, r2
 800bfce:	d006      	beq.n	800bfde <__sccl+0x4e>
 800bfd0:	2d5d      	cmp	r5, #93	; 0x5d
 800bfd2:	d0f1      	beq.n	800bfb8 <__sccl+0x28>
 800bfd4:	b90d      	cbnz	r5, 800bfda <__sccl+0x4a>
 800bfd6:	4630      	mov	r0, r6
 800bfd8:	e7ee      	b.n	800bfb8 <__sccl+0x28>
 800bfda:	462b      	mov	r3, r5
 800bfdc:	e7ef      	b.n	800bfbe <__sccl+0x2e>
 800bfde:	7816      	ldrb	r6, [r2, #0]
 800bfe0:	2e5d      	cmp	r6, #93	; 0x5d
 800bfe2:	d0fa      	beq.n	800bfda <__sccl+0x4a>
 800bfe4:	42b3      	cmp	r3, r6
 800bfe6:	dcf8      	bgt.n	800bfda <__sccl+0x4a>
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3001      	adds	r0, #1
 800bfec:	4286      	cmp	r6, r0
 800bfee:	5421      	strb	r1, [r4, r0]
 800bff0:	dcfb      	bgt.n	800bfea <__sccl+0x5a>
 800bff2:	43d8      	mvns	r0, r3
 800bff4:	4430      	add	r0, r6
 800bff6:	1c5d      	adds	r5, r3, #1
 800bff8:	42b3      	cmp	r3, r6
 800bffa:	bfa8      	it	ge
 800bffc:	2000      	movge	r0, #0
 800bffe:	182b      	adds	r3, r5, r0
 800c000:	3202      	adds	r2, #2
 800c002:	e7de      	b.n	800bfc2 <__sccl+0x32>

0800c004 <_strtoul_l.isra.0>:
 800c004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c008:	4e3b      	ldr	r6, [pc, #236]	; (800c0f8 <_strtoul_l.isra.0+0xf4>)
 800c00a:	4686      	mov	lr, r0
 800c00c:	468c      	mov	ip, r1
 800c00e:	4660      	mov	r0, ip
 800c010:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c014:	5da5      	ldrb	r5, [r4, r6]
 800c016:	f015 0508 	ands.w	r5, r5, #8
 800c01a:	d1f8      	bne.n	800c00e <_strtoul_l.isra.0+0xa>
 800c01c:	2c2d      	cmp	r4, #45	; 0x2d
 800c01e:	d134      	bne.n	800c08a <_strtoul_l.isra.0+0x86>
 800c020:	f89c 4000 	ldrb.w	r4, [ip]
 800c024:	f04f 0801 	mov.w	r8, #1
 800c028:	f100 0c02 	add.w	ip, r0, #2
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d05e      	beq.n	800c0ee <_strtoul_l.isra.0+0xea>
 800c030:	2b10      	cmp	r3, #16
 800c032:	d10c      	bne.n	800c04e <_strtoul_l.isra.0+0x4a>
 800c034:	2c30      	cmp	r4, #48	; 0x30
 800c036:	d10a      	bne.n	800c04e <_strtoul_l.isra.0+0x4a>
 800c038:	f89c 0000 	ldrb.w	r0, [ip]
 800c03c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c040:	2858      	cmp	r0, #88	; 0x58
 800c042:	d14f      	bne.n	800c0e4 <_strtoul_l.isra.0+0xe0>
 800c044:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c048:	2310      	movs	r3, #16
 800c04a:	f10c 0c02 	add.w	ip, ip, #2
 800c04e:	f04f 37ff 	mov.w	r7, #4294967295
 800c052:	2500      	movs	r5, #0
 800c054:	fbb7 f7f3 	udiv	r7, r7, r3
 800c058:	fb03 f907 	mul.w	r9, r3, r7
 800c05c:	ea6f 0909 	mvn.w	r9, r9
 800c060:	4628      	mov	r0, r5
 800c062:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c066:	2e09      	cmp	r6, #9
 800c068:	d818      	bhi.n	800c09c <_strtoul_l.isra.0+0x98>
 800c06a:	4634      	mov	r4, r6
 800c06c:	42a3      	cmp	r3, r4
 800c06e:	dd24      	ble.n	800c0ba <_strtoul_l.isra.0+0xb6>
 800c070:	2d00      	cmp	r5, #0
 800c072:	db1f      	blt.n	800c0b4 <_strtoul_l.isra.0+0xb0>
 800c074:	4287      	cmp	r7, r0
 800c076:	d31d      	bcc.n	800c0b4 <_strtoul_l.isra.0+0xb0>
 800c078:	d101      	bne.n	800c07e <_strtoul_l.isra.0+0x7a>
 800c07a:	45a1      	cmp	r9, r4
 800c07c:	db1a      	blt.n	800c0b4 <_strtoul_l.isra.0+0xb0>
 800c07e:	fb00 4003 	mla	r0, r0, r3, r4
 800c082:	2501      	movs	r5, #1
 800c084:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c088:	e7eb      	b.n	800c062 <_strtoul_l.isra.0+0x5e>
 800c08a:	2c2b      	cmp	r4, #43	; 0x2b
 800c08c:	bf08      	it	eq
 800c08e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c092:	46a8      	mov	r8, r5
 800c094:	bf08      	it	eq
 800c096:	f100 0c02 	addeq.w	ip, r0, #2
 800c09a:	e7c7      	b.n	800c02c <_strtoul_l.isra.0+0x28>
 800c09c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c0a0:	2e19      	cmp	r6, #25
 800c0a2:	d801      	bhi.n	800c0a8 <_strtoul_l.isra.0+0xa4>
 800c0a4:	3c37      	subs	r4, #55	; 0x37
 800c0a6:	e7e1      	b.n	800c06c <_strtoul_l.isra.0+0x68>
 800c0a8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c0ac:	2e19      	cmp	r6, #25
 800c0ae:	d804      	bhi.n	800c0ba <_strtoul_l.isra.0+0xb6>
 800c0b0:	3c57      	subs	r4, #87	; 0x57
 800c0b2:	e7db      	b.n	800c06c <_strtoul_l.isra.0+0x68>
 800c0b4:	f04f 35ff 	mov.w	r5, #4294967295
 800c0b8:	e7e4      	b.n	800c084 <_strtoul_l.isra.0+0x80>
 800c0ba:	2d00      	cmp	r5, #0
 800c0bc:	da07      	bge.n	800c0ce <_strtoul_l.isra.0+0xca>
 800c0be:	2322      	movs	r3, #34	; 0x22
 800c0c0:	f8ce 3000 	str.w	r3, [lr]
 800c0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c8:	b942      	cbnz	r2, 800c0dc <_strtoul_l.isra.0+0xd8>
 800c0ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0ce:	f1b8 0f00 	cmp.w	r8, #0
 800c0d2:	d000      	beq.n	800c0d6 <_strtoul_l.isra.0+0xd2>
 800c0d4:	4240      	negs	r0, r0
 800c0d6:	2a00      	cmp	r2, #0
 800c0d8:	d0f7      	beq.n	800c0ca <_strtoul_l.isra.0+0xc6>
 800c0da:	b10d      	cbz	r5, 800c0e0 <_strtoul_l.isra.0+0xdc>
 800c0dc:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c0e0:	6011      	str	r1, [r2, #0]
 800c0e2:	e7f2      	b.n	800c0ca <_strtoul_l.isra.0+0xc6>
 800c0e4:	2430      	movs	r4, #48	; 0x30
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d1b1      	bne.n	800c04e <_strtoul_l.isra.0+0x4a>
 800c0ea:	2308      	movs	r3, #8
 800c0ec:	e7af      	b.n	800c04e <_strtoul_l.isra.0+0x4a>
 800c0ee:	2c30      	cmp	r4, #48	; 0x30
 800c0f0:	d0a2      	beq.n	800c038 <_strtoul_l.isra.0+0x34>
 800c0f2:	230a      	movs	r3, #10
 800c0f4:	e7ab      	b.n	800c04e <_strtoul_l.isra.0+0x4a>
 800c0f6:	bf00      	nop
 800c0f8:	0800ce51 	.word	0x0800ce51

0800c0fc <_strtoul_r>:
 800c0fc:	f7ff bf82 	b.w	800c004 <_strtoul_l.isra.0>

0800c100 <__submore>:
 800c100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c104:	460c      	mov	r4, r1
 800c106:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c10c:	4299      	cmp	r1, r3
 800c10e:	d11d      	bne.n	800c14c <__submore+0x4c>
 800c110:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c114:	f7ff fa3c 	bl	800b590 <_malloc_r>
 800c118:	b918      	cbnz	r0, 800c122 <__submore+0x22>
 800c11a:	f04f 30ff 	mov.w	r0, #4294967295
 800c11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c126:	63a3      	str	r3, [r4, #56]	; 0x38
 800c128:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c12c:	6360      	str	r0, [r4, #52]	; 0x34
 800c12e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c132:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c136:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c13a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c13e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c142:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c146:	6020      	str	r0, [r4, #0]
 800c148:	2000      	movs	r0, #0
 800c14a:	e7e8      	b.n	800c11e <__submore+0x1e>
 800c14c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c14e:	0077      	lsls	r7, r6, #1
 800c150:	463a      	mov	r2, r7
 800c152:	f000 fa2d 	bl	800c5b0 <_realloc_r>
 800c156:	4605      	mov	r5, r0
 800c158:	2800      	cmp	r0, #0
 800c15a:	d0de      	beq.n	800c11a <__submore+0x1a>
 800c15c:	eb00 0806 	add.w	r8, r0, r6
 800c160:	4601      	mov	r1, r0
 800c162:	4632      	mov	r2, r6
 800c164:	4640      	mov	r0, r8
 800c166:	f7fe fce9 	bl	800ab3c <memcpy>
 800c16a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c16e:	f8c4 8000 	str.w	r8, [r4]
 800c172:	e7e9      	b.n	800c148 <__submore+0x48>

0800c174 <__ascii_wctomb>:
 800c174:	b149      	cbz	r1, 800c18a <__ascii_wctomb+0x16>
 800c176:	2aff      	cmp	r2, #255	; 0xff
 800c178:	bf85      	ittet	hi
 800c17a:	238a      	movhi	r3, #138	; 0x8a
 800c17c:	6003      	strhi	r3, [r0, #0]
 800c17e:	700a      	strbls	r2, [r1, #0]
 800c180:	f04f 30ff 	movhi.w	r0, #4294967295
 800c184:	bf98      	it	ls
 800c186:	2001      	movls	r0, #1
 800c188:	4770      	bx	lr
 800c18a:	4608      	mov	r0, r1
 800c18c:	4770      	bx	lr
	...

0800c190 <__assert_func>:
 800c190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c192:	4614      	mov	r4, r2
 800c194:	461a      	mov	r2, r3
 800c196:	4b09      	ldr	r3, [pc, #36]	; (800c1bc <__assert_func+0x2c>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4605      	mov	r5, r0
 800c19c:	68d8      	ldr	r0, [r3, #12]
 800c19e:	b14c      	cbz	r4, 800c1b4 <__assert_func+0x24>
 800c1a0:	4b07      	ldr	r3, [pc, #28]	; (800c1c0 <__assert_func+0x30>)
 800c1a2:	9100      	str	r1, [sp, #0]
 800c1a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1a8:	4906      	ldr	r1, [pc, #24]	; (800c1c4 <__assert_func+0x34>)
 800c1aa:	462b      	mov	r3, r5
 800c1ac:	f000 f9a6 	bl	800c4fc <fiprintf>
 800c1b0:	f000 fc3e 	bl	800ca30 <abort>
 800c1b4:	4b04      	ldr	r3, [pc, #16]	; (800c1c8 <__assert_func+0x38>)
 800c1b6:	461c      	mov	r4, r3
 800c1b8:	e7f3      	b.n	800c1a2 <__assert_func+0x12>
 800c1ba:	bf00      	nop
 800c1bc:	20000034 	.word	0x20000034
 800c1c0:	0800d1f0 	.word	0x0800d1f0
 800c1c4:	0800d1fd 	.word	0x0800d1fd
 800c1c8:	0800d22b 	.word	0x0800d22b

0800c1cc <__sflush_r>:
 800c1cc:	898a      	ldrh	r2, [r1, #12]
 800c1ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d2:	4605      	mov	r5, r0
 800c1d4:	0710      	lsls	r0, r2, #28
 800c1d6:	460c      	mov	r4, r1
 800c1d8:	d458      	bmi.n	800c28c <__sflush_r+0xc0>
 800c1da:	684b      	ldr	r3, [r1, #4]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	dc05      	bgt.n	800c1ec <__sflush_r+0x20>
 800c1e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	dc02      	bgt.n	800c1ec <__sflush_r+0x20>
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1ee:	2e00      	cmp	r6, #0
 800c1f0:	d0f9      	beq.n	800c1e6 <__sflush_r+0x1a>
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1f8:	682f      	ldr	r7, [r5, #0]
 800c1fa:	602b      	str	r3, [r5, #0]
 800c1fc:	d032      	beq.n	800c264 <__sflush_r+0x98>
 800c1fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c200:	89a3      	ldrh	r3, [r4, #12]
 800c202:	075a      	lsls	r2, r3, #29
 800c204:	d505      	bpl.n	800c212 <__sflush_r+0x46>
 800c206:	6863      	ldr	r3, [r4, #4]
 800c208:	1ac0      	subs	r0, r0, r3
 800c20a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c20c:	b10b      	cbz	r3, 800c212 <__sflush_r+0x46>
 800c20e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c210:	1ac0      	subs	r0, r0, r3
 800c212:	2300      	movs	r3, #0
 800c214:	4602      	mov	r2, r0
 800c216:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c218:	6a21      	ldr	r1, [r4, #32]
 800c21a:	4628      	mov	r0, r5
 800c21c:	47b0      	blx	r6
 800c21e:	1c43      	adds	r3, r0, #1
 800c220:	89a3      	ldrh	r3, [r4, #12]
 800c222:	d106      	bne.n	800c232 <__sflush_r+0x66>
 800c224:	6829      	ldr	r1, [r5, #0]
 800c226:	291d      	cmp	r1, #29
 800c228:	d82c      	bhi.n	800c284 <__sflush_r+0xb8>
 800c22a:	4a2a      	ldr	r2, [pc, #168]	; (800c2d4 <__sflush_r+0x108>)
 800c22c:	40ca      	lsrs	r2, r1
 800c22e:	07d6      	lsls	r6, r2, #31
 800c230:	d528      	bpl.n	800c284 <__sflush_r+0xb8>
 800c232:	2200      	movs	r2, #0
 800c234:	6062      	str	r2, [r4, #4]
 800c236:	04d9      	lsls	r1, r3, #19
 800c238:	6922      	ldr	r2, [r4, #16]
 800c23a:	6022      	str	r2, [r4, #0]
 800c23c:	d504      	bpl.n	800c248 <__sflush_r+0x7c>
 800c23e:	1c42      	adds	r2, r0, #1
 800c240:	d101      	bne.n	800c246 <__sflush_r+0x7a>
 800c242:	682b      	ldr	r3, [r5, #0]
 800c244:	b903      	cbnz	r3, 800c248 <__sflush_r+0x7c>
 800c246:	6560      	str	r0, [r4, #84]	; 0x54
 800c248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c24a:	602f      	str	r7, [r5, #0]
 800c24c:	2900      	cmp	r1, #0
 800c24e:	d0ca      	beq.n	800c1e6 <__sflush_r+0x1a>
 800c250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c254:	4299      	cmp	r1, r3
 800c256:	d002      	beq.n	800c25e <__sflush_r+0x92>
 800c258:	4628      	mov	r0, r5
 800c25a:	f7ff f949 	bl	800b4f0 <_free_r>
 800c25e:	2000      	movs	r0, #0
 800c260:	6360      	str	r0, [r4, #52]	; 0x34
 800c262:	e7c1      	b.n	800c1e8 <__sflush_r+0x1c>
 800c264:	6a21      	ldr	r1, [r4, #32]
 800c266:	2301      	movs	r3, #1
 800c268:	4628      	mov	r0, r5
 800c26a:	47b0      	blx	r6
 800c26c:	1c41      	adds	r1, r0, #1
 800c26e:	d1c7      	bne.n	800c200 <__sflush_r+0x34>
 800c270:	682b      	ldr	r3, [r5, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d0c4      	beq.n	800c200 <__sflush_r+0x34>
 800c276:	2b1d      	cmp	r3, #29
 800c278:	d001      	beq.n	800c27e <__sflush_r+0xb2>
 800c27a:	2b16      	cmp	r3, #22
 800c27c:	d101      	bne.n	800c282 <__sflush_r+0xb6>
 800c27e:	602f      	str	r7, [r5, #0]
 800c280:	e7b1      	b.n	800c1e6 <__sflush_r+0x1a>
 800c282:	89a3      	ldrh	r3, [r4, #12]
 800c284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c288:	81a3      	strh	r3, [r4, #12]
 800c28a:	e7ad      	b.n	800c1e8 <__sflush_r+0x1c>
 800c28c:	690f      	ldr	r7, [r1, #16]
 800c28e:	2f00      	cmp	r7, #0
 800c290:	d0a9      	beq.n	800c1e6 <__sflush_r+0x1a>
 800c292:	0793      	lsls	r3, r2, #30
 800c294:	680e      	ldr	r6, [r1, #0]
 800c296:	bf08      	it	eq
 800c298:	694b      	ldreq	r3, [r1, #20]
 800c29a:	600f      	str	r7, [r1, #0]
 800c29c:	bf18      	it	ne
 800c29e:	2300      	movne	r3, #0
 800c2a0:	eba6 0807 	sub.w	r8, r6, r7
 800c2a4:	608b      	str	r3, [r1, #8]
 800c2a6:	f1b8 0f00 	cmp.w	r8, #0
 800c2aa:	dd9c      	ble.n	800c1e6 <__sflush_r+0x1a>
 800c2ac:	6a21      	ldr	r1, [r4, #32]
 800c2ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c2b0:	4643      	mov	r3, r8
 800c2b2:	463a      	mov	r2, r7
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	47b0      	blx	r6
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	dc06      	bgt.n	800c2ca <__sflush_r+0xfe>
 800c2bc:	89a3      	ldrh	r3, [r4, #12]
 800c2be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2c2:	81a3      	strh	r3, [r4, #12]
 800c2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c8:	e78e      	b.n	800c1e8 <__sflush_r+0x1c>
 800c2ca:	4407      	add	r7, r0
 800c2cc:	eba8 0800 	sub.w	r8, r8, r0
 800c2d0:	e7e9      	b.n	800c2a6 <__sflush_r+0xda>
 800c2d2:	bf00      	nop
 800c2d4:	20400001 	.word	0x20400001

0800c2d8 <_fflush_r>:
 800c2d8:	b538      	push	{r3, r4, r5, lr}
 800c2da:	690b      	ldr	r3, [r1, #16]
 800c2dc:	4605      	mov	r5, r0
 800c2de:	460c      	mov	r4, r1
 800c2e0:	b913      	cbnz	r3, 800c2e8 <_fflush_r+0x10>
 800c2e2:	2500      	movs	r5, #0
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	bd38      	pop	{r3, r4, r5, pc}
 800c2e8:	b118      	cbz	r0, 800c2f2 <_fflush_r+0x1a>
 800c2ea:	6983      	ldr	r3, [r0, #24]
 800c2ec:	b90b      	cbnz	r3, 800c2f2 <_fflush_r+0x1a>
 800c2ee:	f000 f887 	bl	800c400 <__sinit>
 800c2f2:	4b14      	ldr	r3, [pc, #80]	; (800c344 <_fflush_r+0x6c>)
 800c2f4:	429c      	cmp	r4, r3
 800c2f6:	d11b      	bne.n	800c330 <_fflush_r+0x58>
 800c2f8:	686c      	ldr	r4, [r5, #4]
 800c2fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d0ef      	beq.n	800c2e2 <_fflush_r+0xa>
 800c302:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c304:	07d0      	lsls	r0, r2, #31
 800c306:	d404      	bmi.n	800c312 <_fflush_r+0x3a>
 800c308:	0599      	lsls	r1, r3, #22
 800c30a:	d402      	bmi.n	800c312 <_fflush_r+0x3a>
 800c30c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c30e:	f000 f927 	bl	800c560 <__retarget_lock_acquire_recursive>
 800c312:	4628      	mov	r0, r5
 800c314:	4621      	mov	r1, r4
 800c316:	f7ff ff59 	bl	800c1cc <__sflush_r>
 800c31a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c31c:	07da      	lsls	r2, r3, #31
 800c31e:	4605      	mov	r5, r0
 800c320:	d4e0      	bmi.n	800c2e4 <_fflush_r+0xc>
 800c322:	89a3      	ldrh	r3, [r4, #12]
 800c324:	059b      	lsls	r3, r3, #22
 800c326:	d4dd      	bmi.n	800c2e4 <_fflush_r+0xc>
 800c328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c32a:	f000 f91a 	bl	800c562 <__retarget_lock_release_recursive>
 800c32e:	e7d9      	b.n	800c2e4 <_fflush_r+0xc>
 800c330:	4b05      	ldr	r3, [pc, #20]	; (800c348 <_fflush_r+0x70>)
 800c332:	429c      	cmp	r4, r3
 800c334:	d101      	bne.n	800c33a <_fflush_r+0x62>
 800c336:	68ac      	ldr	r4, [r5, #8]
 800c338:	e7df      	b.n	800c2fa <_fflush_r+0x22>
 800c33a:	4b04      	ldr	r3, [pc, #16]	; (800c34c <_fflush_r+0x74>)
 800c33c:	429c      	cmp	r4, r3
 800c33e:	bf08      	it	eq
 800c340:	68ec      	ldreq	r4, [r5, #12]
 800c342:	e7da      	b.n	800c2fa <_fflush_r+0x22>
 800c344:	0800d24c 	.word	0x0800d24c
 800c348:	0800d26c 	.word	0x0800d26c
 800c34c:	0800d22c 	.word	0x0800d22c

0800c350 <std>:
 800c350:	2300      	movs	r3, #0
 800c352:	b510      	push	{r4, lr}
 800c354:	4604      	mov	r4, r0
 800c356:	e9c0 3300 	strd	r3, r3, [r0]
 800c35a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c35e:	6083      	str	r3, [r0, #8]
 800c360:	8181      	strh	r1, [r0, #12]
 800c362:	6643      	str	r3, [r0, #100]	; 0x64
 800c364:	81c2      	strh	r2, [r0, #14]
 800c366:	6183      	str	r3, [r0, #24]
 800c368:	4619      	mov	r1, r3
 800c36a:	2208      	movs	r2, #8
 800c36c:	305c      	adds	r0, #92	; 0x5c
 800c36e:	f7fb fc8f 	bl	8007c90 <memset>
 800c372:	4b05      	ldr	r3, [pc, #20]	; (800c388 <std+0x38>)
 800c374:	6263      	str	r3, [r4, #36]	; 0x24
 800c376:	4b05      	ldr	r3, [pc, #20]	; (800c38c <std+0x3c>)
 800c378:	62a3      	str	r3, [r4, #40]	; 0x28
 800c37a:	4b05      	ldr	r3, [pc, #20]	; (800c390 <std+0x40>)
 800c37c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c37e:	4b05      	ldr	r3, [pc, #20]	; (800c394 <std+0x44>)
 800c380:	6224      	str	r4, [r4, #32]
 800c382:	6323      	str	r3, [r4, #48]	; 0x30
 800c384:	bd10      	pop	{r4, pc}
 800c386:	bf00      	nop
 800c388:	080089d1 	.word	0x080089d1
 800c38c:	080089f7 	.word	0x080089f7
 800c390:	08008a2f 	.word	0x08008a2f
 800c394:	08008a53 	.word	0x08008a53

0800c398 <_cleanup_r>:
 800c398:	4901      	ldr	r1, [pc, #4]	; (800c3a0 <_cleanup_r+0x8>)
 800c39a:	f000 b8c1 	b.w	800c520 <_fwalk_reent>
 800c39e:	bf00      	nop
 800c3a0:	0800c2d9 	.word	0x0800c2d9

0800c3a4 <__sfmoreglue>:
 800c3a4:	b570      	push	{r4, r5, r6, lr}
 800c3a6:	1e4a      	subs	r2, r1, #1
 800c3a8:	2568      	movs	r5, #104	; 0x68
 800c3aa:	4355      	muls	r5, r2
 800c3ac:	460e      	mov	r6, r1
 800c3ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3b2:	f7ff f8ed 	bl	800b590 <_malloc_r>
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	b140      	cbz	r0, 800c3cc <__sfmoreglue+0x28>
 800c3ba:	2100      	movs	r1, #0
 800c3bc:	e9c0 1600 	strd	r1, r6, [r0]
 800c3c0:	300c      	adds	r0, #12
 800c3c2:	60a0      	str	r0, [r4, #8]
 800c3c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c3c8:	f7fb fc62 	bl	8007c90 <memset>
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	bd70      	pop	{r4, r5, r6, pc}

0800c3d0 <__sfp_lock_acquire>:
 800c3d0:	4801      	ldr	r0, [pc, #4]	; (800c3d8 <__sfp_lock_acquire+0x8>)
 800c3d2:	f000 b8c5 	b.w	800c560 <__retarget_lock_acquire_recursive>
 800c3d6:	bf00      	nop
 800c3d8:	200008f4 	.word	0x200008f4

0800c3dc <__sfp_lock_release>:
 800c3dc:	4801      	ldr	r0, [pc, #4]	; (800c3e4 <__sfp_lock_release+0x8>)
 800c3de:	f000 b8c0 	b.w	800c562 <__retarget_lock_release_recursive>
 800c3e2:	bf00      	nop
 800c3e4:	200008f4 	.word	0x200008f4

0800c3e8 <__sinit_lock_acquire>:
 800c3e8:	4801      	ldr	r0, [pc, #4]	; (800c3f0 <__sinit_lock_acquire+0x8>)
 800c3ea:	f000 b8b9 	b.w	800c560 <__retarget_lock_acquire_recursive>
 800c3ee:	bf00      	nop
 800c3f0:	200008ef 	.word	0x200008ef

0800c3f4 <__sinit_lock_release>:
 800c3f4:	4801      	ldr	r0, [pc, #4]	; (800c3fc <__sinit_lock_release+0x8>)
 800c3f6:	f000 b8b4 	b.w	800c562 <__retarget_lock_release_recursive>
 800c3fa:	bf00      	nop
 800c3fc:	200008ef 	.word	0x200008ef

0800c400 <__sinit>:
 800c400:	b510      	push	{r4, lr}
 800c402:	4604      	mov	r4, r0
 800c404:	f7ff fff0 	bl	800c3e8 <__sinit_lock_acquire>
 800c408:	69a3      	ldr	r3, [r4, #24]
 800c40a:	b11b      	cbz	r3, 800c414 <__sinit+0x14>
 800c40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c410:	f7ff bff0 	b.w	800c3f4 <__sinit_lock_release>
 800c414:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c418:	6523      	str	r3, [r4, #80]	; 0x50
 800c41a:	4b13      	ldr	r3, [pc, #76]	; (800c468 <__sinit+0x68>)
 800c41c:	4a13      	ldr	r2, [pc, #76]	; (800c46c <__sinit+0x6c>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	62a2      	str	r2, [r4, #40]	; 0x28
 800c422:	42a3      	cmp	r3, r4
 800c424:	bf04      	itt	eq
 800c426:	2301      	moveq	r3, #1
 800c428:	61a3      	streq	r3, [r4, #24]
 800c42a:	4620      	mov	r0, r4
 800c42c:	f000 f820 	bl	800c470 <__sfp>
 800c430:	6060      	str	r0, [r4, #4]
 800c432:	4620      	mov	r0, r4
 800c434:	f000 f81c 	bl	800c470 <__sfp>
 800c438:	60a0      	str	r0, [r4, #8]
 800c43a:	4620      	mov	r0, r4
 800c43c:	f000 f818 	bl	800c470 <__sfp>
 800c440:	2200      	movs	r2, #0
 800c442:	60e0      	str	r0, [r4, #12]
 800c444:	2104      	movs	r1, #4
 800c446:	6860      	ldr	r0, [r4, #4]
 800c448:	f7ff ff82 	bl	800c350 <std>
 800c44c:	68a0      	ldr	r0, [r4, #8]
 800c44e:	2201      	movs	r2, #1
 800c450:	2109      	movs	r1, #9
 800c452:	f7ff ff7d 	bl	800c350 <std>
 800c456:	68e0      	ldr	r0, [r4, #12]
 800c458:	2202      	movs	r2, #2
 800c45a:	2112      	movs	r1, #18
 800c45c:	f7ff ff78 	bl	800c350 <std>
 800c460:	2301      	movs	r3, #1
 800c462:	61a3      	str	r3, [r4, #24]
 800c464:	e7d2      	b.n	800c40c <__sinit+0xc>
 800c466:	bf00      	nop
 800c468:	0800cdc4 	.word	0x0800cdc4
 800c46c:	0800c399 	.word	0x0800c399

0800c470 <__sfp>:
 800c470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c472:	4607      	mov	r7, r0
 800c474:	f7ff ffac 	bl	800c3d0 <__sfp_lock_acquire>
 800c478:	4b1e      	ldr	r3, [pc, #120]	; (800c4f4 <__sfp+0x84>)
 800c47a:	681e      	ldr	r6, [r3, #0]
 800c47c:	69b3      	ldr	r3, [r6, #24]
 800c47e:	b913      	cbnz	r3, 800c486 <__sfp+0x16>
 800c480:	4630      	mov	r0, r6
 800c482:	f7ff ffbd 	bl	800c400 <__sinit>
 800c486:	3648      	adds	r6, #72	; 0x48
 800c488:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c48c:	3b01      	subs	r3, #1
 800c48e:	d503      	bpl.n	800c498 <__sfp+0x28>
 800c490:	6833      	ldr	r3, [r6, #0]
 800c492:	b30b      	cbz	r3, 800c4d8 <__sfp+0x68>
 800c494:	6836      	ldr	r6, [r6, #0]
 800c496:	e7f7      	b.n	800c488 <__sfp+0x18>
 800c498:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c49c:	b9d5      	cbnz	r5, 800c4d4 <__sfp+0x64>
 800c49e:	4b16      	ldr	r3, [pc, #88]	; (800c4f8 <__sfp+0x88>)
 800c4a0:	60e3      	str	r3, [r4, #12]
 800c4a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c4a6:	6665      	str	r5, [r4, #100]	; 0x64
 800c4a8:	f000 f859 	bl	800c55e <__retarget_lock_init_recursive>
 800c4ac:	f7ff ff96 	bl	800c3dc <__sfp_lock_release>
 800c4b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c4b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c4b8:	6025      	str	r5, [r4, #0]
 800c4ba:	61a5      	str	r5, [r4, #24]
 800c4bc:	2208      	movs	r2, #8
 800c4be:	4629      	mov	r1, r5
 800c4c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c4c4:	f7fb fbe4 	bl	8007c90 <memset>
 800c4c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c4cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4d4:	3468      	adds	r4, #104	; 0x68
 800c4d6:	e7d9      	b.n	800c48c <__sfp+0x1c>
 800c4d8:	2104      	movs	r1, #4
 800c4da:	4638      	mov	r0, r7
 800c4dc:	f7ff ff62 	bl	800c3a4 <__sfmoreglue>
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	6030      	str	r0, [r6, #0]
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	d1d5      	bne.n	800c494 <__sfp+0x24>
 800c4e8:	f7ff ff78 	bl	800c3dc <__sfp_lock_release>
 800c4ec:	230c      	movs	r3, #12
 800c4ee:	603b      	str	r3, [r7, #0]
 800c4f0:	e7ee      	b.n	800c4d0 <__sfp+0x60>
 800c4f2:	bf00      	nop
 800c4f4:	0800cdc4 	.word	0x0800cdc4
 800c4f8:	ffff0001 	.word	0xffff0001

0800c4fc <fiprintf>:
 800c4fc:	b40e      	push	{r1, r2, r3}
 800c4fe:	b503      	push	{r0, r1, lr}
 800c500:	4601      	mov	r1, r0
 800c502:	ab03      	add	r3, sp, #12
 800c504:	4805      	ldr	r0, [pc, #20]	; (800c51c <fiprintf+0x20>)
 800c506:	f853 2b04 	ldr.w	r2, [r3], #4
 800c50a:	6800      	ldr	r0, [r0, #0]
 800c50c:	9301      	str	r3, [sp, #4]
 800c50e:	f000 f89f 	bl	800c650 <_vfiprintf_r>
 800c512:	b002      	add	sp, #8
 800c514:	f85d eb04 	ldr.w	lr, [sp], #4
 800c518:	b003      	add	sp, #12
 800c51a:	4770      	bx	lr
 800c51c:	20000034 	.word	0x20000034

0800c520 <_fwalk_reent>:
 800c520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c524:	4606      	mov	r6, r0
 800c526:	4688      	mov	r8, r1
 800c528:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c52c:	2700      	movs	r7, #0
 800c52e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c532:	f1b9 0901 	subs.w	r9, r9, #1
 800c536:	d505      	bpl.n	800c544 <_fwalk_reent+0x24>
 800c538:	6824      	ldr	r4, [r4, #0]
 800c53a:	2c00      	cmp	r4, #0
 800c53c:	d1f7      	bne.n	800c52e <_fwalk_reent+0xe>
 800c53e:	4638      	mov	r0, r7
 800c540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c544:	89ab      	ldrh	r3, [r5, #12]
 800c546:	2b01      	cmp	r3, #1
 800c548:	d907      	bls.n	800c55a <_fwalk_reent+0x3a>
 800c54a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c54e:	3301      	adds	r3, #1
 800c550:	d003      	beq.n	800c55a <_fwalk_reent+0x3a>
 800c552:	4629      	mov	r1, r5
 800c554:	4630      	mov	r0, r6
 800c556:	47c0      	blx	r8
 800c558:	4307      	orrs	r7, r0
 800c55a:	3568      	adds	r5, #104	; 0x68
 800c55c:	e7e9      	b.n	800c532 <_fwalk_reent+0x12>

0800c55e <__retarget_lock_init_recursive>:
 800c55e:	4770      	bx	lr

0800c560 <__retarget_lock_acquire_recursive>:
 800c560:	4770      	bx	lr

0800c562 <__retarget_lock_release_recursive>:
 800c562:	4770      	bx	lr

0800c564 <memmove>:
 800c564:	4288      	cmp	r0, r1
 800c566:	b510      	push	{r4, lr}
 800c568:	eb01 0402 	add.w	r4, r1, r2
 800c56c:	d902      	bls.n	800c574 <memmove+0x10>
 800c56e:	4284      	cmp	r4, r0
 800c570:	4623      	mov	r3, r4
 800c572:	d807      	bhi.n	800c584 <memmove+0x20>
 800c574:	1e43      	subs	r3, r0, #1
 800c576:	42a1      	cmp	r1, r4
 800c578:	d008      	beq.n	800c58c <memmove+0x28>
 800c57a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c57e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c582:	e7f8      	b.n	800c576 <memmove+0x12>
 800c584:	4402      	add	r2, r0
 800c586:	4601      	mov	r1, r0
 800c588:	428a      	cmp	r2, r1
 800c58a:	d100      	bne.n	800c58e <memmove+0x2a>
 800c58c:	bd10      	pop	{r4, pc}
 800c58e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c596:	e7f7      	b.n	800c588 <memmove+0x24>

0800c598 <__malloc_lock>:
 800c598:	4801      	ldr	r0, [pc, #4]	; (800c5a0 <__malloc_lock+0x8>)
 800c59a:	f7ff bfe1 	b.w	800c560 <__retarget_lock_acquire_recursive>
 800c59e:	bf00      	nop
 800c5a0:	200008f0 	.word	0x200008f0

0800c5a4 <__malloc_unlock>:
 800c5a4:	4801      	ldr	r0, [pc, #4]	; (800c5ac <__malloc_unlock+0x8>)
 800c5a6:	f7ff bfdc 	b.w	800c562 <__retarget_lock_release_recursive>
 800c5aa:	bf00      	nop
 800c5ac:	200008f0 	.word	0x200008f0

0800c5b0 <_realloc_r>:
 800c5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b2:	4607      	mov	r7, r0
 800c5b4:	4614      	mov	r4, r2
 800c5b6:	460e      	mov	r6, r1
 800c5b8:	b921      	cbnz	r1, 800c5c4 <_realloc_r+0x14>
 800c5ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c5be:	4611      	mov	r1, r2
 800c5c0:	f7fe bfe6 	b.w	800b590 <_malloc_r>
 800c5c4:	b922      	cbnz	r2, 800c5d0 <_realloc_r+0x20>
 800c5c6:	f7fe ff93 	bl	800b4f0 <_free_r>
 800c5ca:	4625      	mov	r5, r4
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5d0:	f000 fa9a 	bl	800cb08 <_malloc_usable_size_r>
 800c5d4:	42a0      	cmp	r0, r4
 800c5d6:	d20f      	bcs.n	800c5f8 <_realloc_r+0x48>
 800c5d8:	4621      	mov	r1, r4
 800c5da:	4638      	mov	r0, r7
 800c5dc:	f7fe ffd8 	bl	800b590 <_malloc_r>
 800c5e0:	4605      	mov	r5, r0
 800c5e2:	2800      	cmp	r0, #0
 800c5e4:	d0f2      	beq.n	800c5cc <_realloc_r+0x1c>
 800c5e6:	4631      	mov	r1, r6
 800c5e8:	4622      	mov	r2, r4
 800c5ea:	f7fe faa7 	bl	800ab3c <memcpy>
 800c5ee:	4631      	mov	r1, r6
 800c5f0:	4638      	mov	r0, r7
 800c5f2:	f7fe ff7d 	bl	800b4f0 <_free_r>
 800c5f6:	e7e9      	b.n	800c5cc <_realloc_r+0x1c>
 800c5f8:	4635      	mov	r5, r6
 800c5fa:	e7e7      	b.n	800c5cc <_realloc_r+0x1c>

0800c5fc <__sfputc_r>:
 800c5fc:	6893      	ldr	r3, [r2, #8]
 800c5fe:	3b01      	subs	r3, #1
 800c600:	2b00      	cmp	r3, #0
 800c602:	b410      	push	{r4}
 800c604:	6093      	str	r3, [r2, #8]
 800c606:	da08      	bge.n	800c61a <__sfputc_r+0x1e>
 800c608:	6994      	ldr	r4, [r2, #24]
 800c60a:	42a3      	cmp	r3, r4
 800c60c:	db01      	blt.n	800c612 <__sfputc_r+0x16>
 800c60e:	290a      	cmp	r1, #10
 800c610:	d103      	bne.n	800c61a <__sfputc_r+0x1e>
 800c612:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c616:	f000 b94b 	b.w	800c8b0 <__swbuf_r>
 800c61a:	6813      	ldr	r3, [r2, #0]
 800c61c:	1c58      	adds	r0, r3, #1
 800c61e:	6010      	str	r0, [r2, #0]
 800c620:	7019      	strb	r1, [r3, #0]
 800c622:	4608      	mov	r0, r1
 800c624:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c628:	4770      	bx	lr

0800c62a <__sfputs_r>:
 800c62a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c62c:	4606      	mov	r6, r0
 800c62e:	460f      	mov	r7, r1
 800c630:	4614      	mov	r4, r2
 800c632:	18d5      	adds	r5, r2, r3
 800c634:	42ac      	cmp	r4, r5
 800c636:	d101      	bne.n	800c63c <__sfputs_r+0x12>
 800c638:	2000      	movs	r0, #0
 800c63a:	e007      	b.n	800c64c <__sfputs_r+0x22>
 800c63c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c640:	463a      	mov	r2, r7
 800c642:	4630      	mov	r0, r6
 800c644:	f7ff ffda 	bl	800c5fc <__sfputc_r>
 800c648:	1c43      	adds	r3, r0, #1
 800c64a:	d1f3      	bne.n	800c634 <__sfputs_r+0xa>
 800c64c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c650 <_vfiprintf_r>:
 800c650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c654:	460d      	mov	r5, r1
 800c656:	b09d      	sub	sp, #116	; 0x74
 800c658:	4614      	mov	r4, r2
 800c65a:	4698      	mov	r8, r3
 800c65c:	4606      	mov	r6, r0
 800c65e:	b118      	cbz	r0, 800c668 <_vfiprintf_r+0x18>
 800c660:	6983      	ldr	r3, [r0, #24]
 800c662:	b90b      	cbnz	r3, 800c668 <_vfiprintf_r+0x18>
 800c664:	f7ff fecc 	bl	800c400 <__sinit>
 800c668:	4b89      	ldr	r3, [pc, #548]	; (800c890 <_vfiprintf_r+0x240>)
 800c66a:	429d      	cmp	r5, r3
 800c66c:	d11b      	bne.n	800c6a6 <_vfiprintf_r+0x56>
 800c66e:	6875      	ldr	r5, [r6, #4]
 800c670:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c672:	07d9      	lsls	r1, r3, #31
 800c674:	d405      	bmi.n	800c682 <_vfiprintf_r+0x32>
 800c676:	89ab      	ldrh	r3, [r5, #12]
 800c678:	059a      	lsls	r2, r3, #22
 800c67a:	d402      	bmi.n	800c682 <_vfiprintf_r+0x32>
 800c67c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c67e:	f7ff ff6f 	bl	800c560 <__retarget_lock_acquire_recursive>
 800c682:	89ab      	ldrh	r3, [r5, #12]
 800c684:	071b      	lsls	r3, r3, #28
 800c686:	d501      	bpl.n	800c68c <_vfiprintf_r+0x3c>
 800c688:	692b      	ldr	r3, [r5, #16]
 800c68a:	b9eb      	cbnz	r3, 800c6c8 <_vfiprintf_r+0x78>
 800c68c:	4629      	mov	r1, r5
 800c68e:	4630      	mov	r0, r6
 800c690:	f000 f960 	bl	800c954 <__swsetup_r>
 800c694:	b1c0      	cbz	r0, 800c6c8 <_vfiprintf_r+0x78>
 800c696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c698:	07dc      	lsls	r4, r3, #31
 800c69a:	d50e      	bpl.n	800c6ba <_vfiprintf_r+0x6a>
 800c69c:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a0:	b01d      	add	sp, #116	; 0x74
 800c6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6a6:	4b7b      	ldr	r3, [pc, #492]	; (800c894 <_vfiprintf_r+0x244>)
 800c6a8:	429d      	cmp	r5, r3
 800c6aa:	d101      	bne.n	800c6b0 <_vfiprintf_r+0x60>
 800c6ac:	68b5      	ldr	r5, [r6, #8]
 800c6ae:	e7df      	b.n	800c670 <_vfiprintf_r+0x20>
 800c6b0:	4b79      	ldr	r3, [pc, #484]	; (800c898 <_vfiprintf_r+0x248>)
 800c6b2:	429d      	cmp	r5, r3
 800c6b4:	bf08      	it	eq
 800c6b6:	68f5      	ldreq	r5, [r6, #12]
 800c6b8:	e7da      	b.n	800c670 <_vfiprintf_r+0x20>
 800c6ba:	89ab      	ldrh	r3, [r5, #12]
 800c6bc:	0598      	lsls	r0, r3, #22
 800c6be:	d4ed      	bmi.n	800c69c <_vfiprintf_r+0x4c>
 800c6c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6c2:	f7ff ff4e 	bl	800c562 <__retarget_lock_release_recursive>
 800c6c6:	e7e9      	b.n	800c69c <_vfiprintf_r+0x4c>
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	9309      	str	r3, [sp, #36]	; 0x24
 800c6cc:	2320      	movs	r3, #32
 800c6ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6d6:	2330      	movs	r3, #48	; 0x30
 800c6d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c89c <_vfiprintf_r+0x24c>
 800c6dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6e0:	f04f 0901 	mov.w	r9, #1
 800c6e4:	4623      	mov	r3, r4
 800c6e6:	469a      	mov	sl, r3
 800c6e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6ec:	b10a      	cbz	r2, 800c6f2 <_vfiprintf_r+0xa2>
 800c6ee:	2a25      	cmp	r2, #37	; 0x25
 800c6f0:	d1f9      	bne.n	800c6e6 <_vfiprintf_r+0x96>
 800c6f2:	ebba 0b04 	subs.w	fp, sl, r4
 800c6f6:	d00b      	beq.n	800c710 <_vfiprintf_r+0xc0>
 800c6f8:	465b      	mov	r3, fp
 800c6fa:	4622      	mov	r2, r4
 800c6fc:	4629      	mov	r1, r5
 800c6fe:	4630      	mov	r0, r6
 800c700:	f7ff ff93 	bl	800c62a <__sfputs_r>
 800c704:	3001      	adds	r0, #1
 800c706:	f000 80aa 	beq.w	800c85e <_vfiprintf_r+0x20e>
 800c70a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c70c:	445a      	add	r2, fp
 800c70e:	9209      	str	r2, [sp, #36]	; 0x24
 800c710:	f89a 3000 	ldrb.w	r3, [sl]
 800c714:	2b00      	cmp	r3, #0
 800c716:	f000 80a2 	beq.w	800c85e <_vfiprintf_r+0x20e>
 800c71a:	2300      	movs	r3, #0
 800c71c:	f04f 32ff 	mov.w	r2, #4294967295
 800c720:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c724:	f10a 0a01 	add.w	sl, sl, #1
 800c728:	9304      	str	r3, [sp, #16]
 800c72a:	9307      	str	r3, [sp, #28]
 800c72c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c730:	931a      	str	r3, [sp, #104]	; 0x68
 800c732:	4654      	mov	r4, sl
 800c734:	2205      	movs	r2, #5
 800c736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c73a:	4858      	ldr	r0, [pc, #352]	; (800c89c <_vfiprintf_r+0x24c>)
 800c73c:	f7f3 fd98 	bl	8000270 <memchr>
 800c740:	9a04      	ldr	r2, [sp, #16]
 800c742:	b9d8      	cbnz	r0, 800c77c <_vfiprintf_r+0x12c>
 800c744:	06d1      	lsls	r1, r2, #27
 800c746:	bf44      	itt	mi
 800c748:	2320      	movmi	r3, #32
 800c74a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c74e:	0713      	lsls	r3, r2, #28
 800c750:	bf44      	itt	mi
 800c752:	232b      	movmi	r3, #43	; 0x2b
 800c754:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c758:	f89a 3000 	ldrb.w	r3, [sl]
 800c75c:	2b2a      	cmp	r3, #42	; 0x2a
 800c75e:	d015      	beq.n	800c78c <_vfiprintf_r+0x13c>
 800c760:	9a07      	ldr	r2, [sp, #28]
 800c762:	4654      	mov	r4, sl
 800c764:	2000      	movs	r0, #0
 800c766:	f04f 0c0a 	mov.w	ip, #10
 800c76a:	4621      	mov	r1, r4
 800c76c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c770:	3b30      	subs	r3, #48	; 0x30
 800c772:	2b09      	cmp	r3, #9
 800c774:	d94e      	bls.n	800c814 <_vfiprintf_r+0x1c4>
 800c776:	b1b0      	cbz	r0, 800c7a6 <_vfiprintf_r+0x156>
 800c778:	9207      	str	r2, [sp, #28]
 800c77a:	e014      	b.n	800c7a6 <_vfiprintf_r+0x156>
 800c77c:	eba0 0308 	sub.w	r3, r0, r8
 800c780:	fa09 f303 	lsl.w	r3, r9, r3
 800c784:	4313      	orrs	r3, r2
 800c786:	9304      	str	r3, [sp, #16]
 800c788:	46a2      	mov	sl, r4
 800c78a:	e7d2      	b.n	800c732 <_vfiprintf_r+0xe2>
 800c78c:	9b03      	ldr	r3, [sp, #12]
 800c78e:	1d19      	adds	r1, r3, #4
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	9103      	str	r1, [sp, #12]
 800c794:	2b00      	cmp	r3, #0
 800c796:	bfbb      	ittet	lt
 800c798:	425b      	neglt	r3, r3
 800c79a:	f042 0202 	orrlt.w	r2, r2, #2
 800c79e:	9307      	strge	r3, [sp, #28]
 800c7a0:	9307      	strlt	r3, [sp, #28]
 800c7a2:	bfb8      	it	lt
 800c7a4:	9204      	strlt	r2, [sp, #16]
 800c7a6:	7823      	ldrb	r3, [r4, #0]
 800c7a8:	2b2e      	cmp	r3, #46	; 0x2e
 800c7aa:	d10c      	bne.n	800c7c6 <_vfiprintf_r+0x176>
 800c7ac:	7863      	ldrb	r3, [r4, #1]
 800c7ae:	2b2a      	cmp	r3, #42	; 0x2a
 800c7b0:	d135      	bne.n	800c81e <_vfiprintf_r+0x1ce>
 800c7b2:	9b03      	ldr	r3, [sp, #12]
 800c7b4:	1d1a      	adds	r2, r3, #4
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	9203      	str	r2, [sp, #12]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	bfb8      	it	lt
 800c7be:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7c2:	3402      	adds	r4, #2
 800c7c4:	9305      	str	r3, [sp, #20]
 800c7c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c8ac <_vfiprintf_r+0x25c>
 800c7ca:	7821      	ldrb	r1, [r4, #0]
 800c7cc:	2203      	movs	r2, #3
 800c7ce:	4650      	mov	r0, sl
 800c7d0:	f7f3 fd4e 	bl	8000270 <memchr>
 800c7d4:	b140      	cbz	r0, 800c7e8 <_vfiprintf_r+0x198>
 800c7d6:	2340      	movs	r3, #64	; 0x40
 800c7d8:	eba0 000a 	sub.w	r0, r0, sl
 800c7dc:	fa03 f000 	lsl.w	r0, r3, r0
 800c7e0:	9b04      	ldr	r3, [sp, #16]
 800c7e2:	4303      	orrs	r3, r0
 800c7e4:	3401      	adds	r4, #1
 800c7e6:	9304      	str	r3, [sp, #16]
 800c7e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ec:	482c      	ldr	r0, [pc, #176]	; (800c8a0 <_vfiprintf_r+0x250>)
 800c7ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7f2:	2206      	movs	r2, #6
 800c7f4:	f7f3 fd3c 	bl	8000270 <memchr>
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	d03f      	beq.n	800c87c <_vfiprintf_r+0x22c>
 800c7fc:	4b29      	ldr	r3, [pc, #164]	; (800c8a4 <_vfiprintf_r+0x254>)
 800c7fe:	bb1b      	cbnz	r3, 800c848 <_vfiprintf_r+0x1f8>
 800c800:	9b03      	ldr	r3, [sp, #12]
 800c802:	3307      	adds	r3, #7
 800c804:	f023 0307 	bic.w	r3, r3, #7
 800c808:	3308      	adds	r3, #8
 800c80a:	9303      	str	r3, [sp, #12]
 800c80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c80e:	443b      	add	r3, r7
 800c810:	9309      	str	r3, [sp, #36]	; 0x24
 800c812:	e767      	b.n	800c6e4 <_vfiprintf_r+0x94>
 800c814:	fb0c 3202 	mla	r2, ip, r2, r3
 800c818:	460c      	mov	r4, r1
 800c81a:	2001      	movs	r0, #1
 800c81c:	e7a5      	b.n	800c76a <_vfiprintf_r+0x11a>
 800c81e:	2300      	movs	r3, #0
 800c820:	3401      	adds	r4, #1
 800c822:	9305      	str	r3, [sp, #20]
 800c824:	4619      	mov	r1, r3
 800c826:	f04f 0c0a 	mov.w	ip, #10
 800c82a:	4620      	mov	r0, r4
 800c82c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c830:	3a30      	subs	r2, #48	; 0x30
 800c832:	2a09      	cmp	r2, #9
 800c834:	d903      	bls.n	800c83e <_vfiprintf_r+0x1ee>
 800c836:	2b00      	cmp	r3, #0
 800c838:	d0c5      	beq.n	800c7c6 <_vfiprintf_r+0x176>
 800c83a:	9105      	str	r1, [sp, #20]
 800c83c:	e7c3      	b.n	800c7c6 <_vfiprintf_r+0x176>
 800c83e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c842:	4604      	mov	r4, r0
 800c844:	2301      	movs	r3, #1
 800c846:	e7f0      	b.n	800c82a <_vfiprintf_r+0x1da>
 800c848:	ab03      	add	r3, sp, #12
 800c84a:	9300      	str	r3, [sp, #0]
 800c84c:	462a      	mov	r2, r5
 800c84e:	4b16      	ldr	r3, [pc, #88]	; (800c8a8 <_vfiprintf_r+0x258>)
 800c850:	a904      	add	r1, sp, #16
 800c852:	4630      	mov	r0, r6
 800c854:	f7fb fab4 	bl	8007dc0 <_printf_float>
 800c858:	4607      	mov	r7, r0
 800c85a:	1c78      	adds	r0, r7, #1
 800c85c:	d1d6      	bne.n	800c80c <_vfiprintf_r+0x1bc>
 800c85e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c860:	07d9      	lsls	r1, r3, #31
 800c862:	d405      	bmi.n	800c870 <_vfiprintf_r+0x220>
 800c864:	89ab      	ldrh	r3, [r5, #12]
 800c866:	059a      	lsls	r2, r3, #22
 800c868:	d402      	bmi.n	800c870 <_vfiprintf_r+0x220>
 800c86a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c86c:	f7ff fe79 	bl	800c562 <__retarget_lock_release_recursive>
 800c870:	89ab      	ldrh	r3, [r5, #12]
 800c872:	065b      	lsls	r3, r3, #25
 800c874:	f53f af12 	bmi.w	800c69c <_vfiprintf_r+0x4c>
 800c878:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c87a:	e711      	b.n	800c6a0 <_vfiprintf_r+0x50>
 800c87c:	ab03      	add	r3, sp, #12
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	462a      	mov	r2, r5
 800c882:	4b09      	ldr	r3, [pc, #36]	; (800c8a8 <_vfiprintf_r+0x258>)
 800c884:	a904      	add	r1, sp, #16
 800c886:	4630      	mov	r0, r6
 800c888:	f7fb fd26 	bl	80082d8 <_printf_i>
 800c88c:	e7e4      	b.n	800c858 <_vfiprintf_r+0x208>
 800c88e:	bf00      	nop
 800c890:	0800d24c 	.word	0x0800d24c
 800c894:	0800d26c 	.word	0x0800d26c
 800c898:	0800d22c 	.word	0x0800d22c
 800c89c:	0800d1c4 	.word	0x0800d1c4
 800c8a0:	0800d1ce 	.word	0x0800d1ce
 800c8a4:	08007dc1 	.word	0x08007dc1
 800c8a8:	0800c62b 	.word	0x0800c62b
 800c8ac:	0800d1ca 	.word	0x0800d1ca

0800c8b0 <__swbuf_r>:
 800c8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b2:	460e      	mov	r6, r1
 800c8b4:	4614      	mov	r4, r2
 800c8b6:	4605      	mov	r5, r0
 800c8b8:	b118      	cbz	r0, 800c8c2 <__swbuf_r+0x12>
 800c8ba:	6983      	ldr	r3, [r0, #24]
 800c8bc:	b90b      	cbnz	r3, 800c8c2 <__swbuf_r+0x12>
 800c8be:	f7ff fd9f 	bl	800c400 <__sinit>
 800c8c2:	4b21      	ldr	r3, [pc, #132]	; (800c948 <__swbuf_r+0x98>)
 800c8c4:	429c      	cmp	r4, r3
 800c8c6:	d12b      	bne.n	800c920 <__swbuf_r+0x70>
 800c8c8:	686c      	ldr	r4, [r5, #4]
 800c8ca:	69a3      	ldr	r3, [r4, #24]
 800c8cc:	60a3      	str	r3, [r4, #8]
 800c8ce:	89a3      	ldrh	r3, [r4, #12]
 800c8d0:	071a      	lsls	r2, r3, #28
 800c8d2:	d52f      	bpl.n	800c934 <__swbuf_r+0x84>
 800c8d4:	6923      	ldr	r3, [r4, #16]
 800c8d6:	b36b      	cbz	r3, 800c934 <__swbuf_r+0x84>
 800c8d8:	6923      	ldr	r3, [r4, #16]
 800c8da:	6820      	ldr	r0, [r4, #0]
 800c8dc:	1ac0      	subs	r0, r0, r3
 800c8de:	6963      	ldr	r3, [r4, #20]
 800c8e0:	b2f6      	uxtb	r6, r6
 800c8e2:	4283      	cmp	r3, r0
 800c8e4:	4637      	mov	r7, r6
 800c8e6:	dc04      	bgt.n	800c8f2 <__swbuf_r+0x42>
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	f7ff fcf4 	bl	800c2d8 <_fflush_r>
 800c8f0:	bb30      	cbnz	r0, 800c940 <__swbuf_r+0x90>
 800c8f2:	68a3      	ldr	r3, [r4, #8]
 800c8f4:	3b01      	subs	r3, #1
 800c8f6:	60a3      	str	r3, [r4, #8]
 800c8f8:	6823      	ldr	r3, [r4, #0]
 800c8fa:	1c5a      	adds	r2, r3, #1
 800c8fc:	6022      	str	r2, [r4, #0]
 800c8fe:	701e      	strb	r6, [r3, #0]
 800c900:	6963      	ldr	r3, [r4, #20]
 800c902:	3001      	adds	r0, #1
 800c904:	4283      	cmp	r3, r0
 800c906:	d004      	beq.n	800c912 <__swbuf_r+0x62>
 800c908:	89a3      	ldrh	r3, [r4, #12]
 800c90a:	07db      	lsls	r3, r3, #31
 800c90c:	d506      	bpl.n	800c91c <__swbuf_r+0x6c>
 800c90e:	2e0a      	cmp	r6, #10
 800c910:	d104      	bne.n	800c91c <__swbuf_r+0x6c>
 800c912:	4621      	mov	r1, r4
 800c914:	4628      	mov	r0, r5
 800c916:	f7ff fcdf 	bl	800c2d8 <_fflush_r>
 800c91a:	b988      	cbnz	r0, 800c940 <__swbuf_r+0x90>
 800c91c:	4638      	mov	r0, r7
 800c91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c920:	4b0a      	ldr	r3, [pc, #40]	; (800c94c <__swbuf_r+0x9c>)
 800c922:	429c      	cmp	r4, r3
 800c924:	d101      	bne.n	800c92a <__swbuf_r+0x7a>
 800c926:	68ac      	ldr	r4, [r5, #8]
 800c928:	e7cf      	b.n	800c8ca <__swbuf_r+0x1a>
 800c92a:	4b09      	ldr	r3, [pc, #36]	; (800c950 <__swbuf_r+0xa0>)
 800c92c:	429c      	cmp	r4, r3
 800c92e:	bf08      	it	eq
 800c930:	68ec      	ldreq	r4, [r5, #12]
 800c932:	e7ca      	b.n	800c8ca <__swbuf_r+0x1a>
 800c934:	4621      	mov	r1, r4
 800c936:	4628      	mov	r0, r5
 800c938:	f000 f80c 	bl	800c954 <__swsetup_r>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d0cb      	beq.n	800c8d8 <__swbuf_r+0x28>
 800c940:	f04f 37ff 	mov.w	r7, #4294967295
 800c944:	e7ea      	b.n	800c91c <__swbuf_r+0x6c>
 800c946:	bf00      	nop
 800c948:	0800d24c 	.word	0x0800d24c
 800c94c:	0800d26c 	.word	0x0800d26c
 800c950:	0800d22c 	.word	0x0800d22c

0800c954 <__swsetup_r>:
 800c954:	4b32      	ldr	r3, [pc, #200]	; (800ca20 <__swsetup_r+0xcc>)
 800c956:	b570      	push	{r4, r5, r6, lr}
 800c958:	681d      	ldr	r5, [r3, #0]
 800c95a:	4606      	mov	r6, r0
 800c95c:	460c      	mov	r4, r1
 800c95e:	b125      	cbz	r5, 800c96a <__swsetup_r+0x16>
 800c960:	69ab      	ldr	r3, [r5, #24]
 800c962:	b913      	cbnz	r3, 800c96a <__swsetup_r+0x16>
 800c964:	4628      	mov	r0, r5
 800c966:	f7ff fd4b 	bl	800c400 <__sinit>
 800c96a:	4b2e      	ldr	r3, [pc, #184]	; (800ca24 <__swsetup_r+0xd0>)
 800c96c:	429c      	cmp	r4, r3
 800c96e:	d10f      	bne.n	800c990 <__swsetup_r+0x3c>
 800c970:	686c      	ldr	r4, [r5, #4]
 800c972:	89a3      	ldrh	r3, [r4, #12]
 800c974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c978:	0719      	lsls	r1, r3, #28
 800c97a:	d42c      	bmi.n	800c9d6 <__swsetup_r+0x82>
 800c97c:	06dd      	lsls	r5, r3, #27
 800c97e:	d411      	bmi.n	800c9a4 <__swsetup_r+0x50>
 800c980:	2309      	movs	r3, #9
 800c982:	6033      	str	r3, [r6, #0]
 800c984:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c988:	81a3      	strh	r3, [r4, #12]
 800c98a:	f04f 30ff 	mov.w	r0, #4294967295
 800c98e:	e03e      	b.n	800ca0e <__swsetup_r+0xba>
 800c990:	4b25      	ldr	r3, [pc, #148]	; (800ca28 <__swsetup_r+0xd4>)
 800c992:	429c      	cmp	r4, r3
 800c994:	d101      	bne.n	800c99a <__swsetup_r+0x46>
 800c996:	68ac      	ldr	r4, [r5, #8]
 800c998:	e7eb      	b.n	800c972 <__swsetup_r+0x1e>
 800c99a:	4b24      	ldr	r3, [pc, #144]	; (800ca2c <__swsetup_r+0xd8>)
 800c99c:	429c      	cmp	r4, r3
 800c99e:	bf08      	it	eq
 800c9a0:	68ec      	ldreq	r4, [r5, #12]
 800c9a2:	e7e6      	b.n	800c972 <__swsetup_r+0x1e>
 800c9a4:	0758      	lsls	r0, r3, #29
 800c9a6:	d512      	bpl.n	800c9ce <__swsetup_r+0x7a>
 800c9a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9aa:	b141      	cbz	r1, 800c9be <__swsetup_r+0x6a>
 800c9ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9b0:	4299      	cmp	r1, r3
 800c9b2:	d002      	beq.n	800c9ba <__swsetup_r+0x66>
 800c9b4:	4630      	mov	r0, r6
 800c9b6:	f7fe fd9b 	bl	800b4f0 <_free_r>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	6363      	str	r3, [r4, #52]	; 0x34
 800c9be:	89a3      	ldrh	r3, [r4, #12]
 800c9c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c9c4:	81a3      	strh	r3, [r4, #12]
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	6063      	str	r3, [r4, #4]
 800c9ca:	6923      	ldr	r3, [r4, #16]
 800c9cc:	6023      	str	r3, [r4, #0]
 800c9ce:	89a3      	ldrh	r3, [r4, #12]
 800c9d0:	f043 0308 	orr.w	r3, r3, #8
 800c9d4:	81a3      	strh	r3, [r4, #12]
 800c9d6:	6923      	ldr	r3, [r4, #16]
 800c9d8:	b94b      	cbnz	r3, 800c9ee <__swsetup_r+0x9a>
 800c9da:	89a3      	ldrh	r3, [r4, #12]
 800c9dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c9e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9e4:	d003      	beq.n	800c9ee <__swsetup_r+0x9a>
 800c9e6:	4621      	mov	r1, r4
 800c9e8:	4630      	mov	r0, r6
 800c9ea:	f000 f84d 	bl	800ca88 <__smakebuf_r>
 800c9ee:	89a0      	ldrh	r0, [r4, #12]
 800c9f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9f4:	f010 0301 	ands.w	r3, r0, #1
 800c9f8:	d00a      	beq.n	800ca10 <__swsetup_r+0xbc>
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	60a3      	str	r3, [r4, #8]
 800c9fe:	6963      	ldr	r3, [r4, #20]
 800ca00:	425b      	negs	r3, r3
 800ca02:	61a3      	str	r3, [r4, #24]
 800ca04:	6923      	ldr	r3, [r4, #16]
 800ca06:	b943      	cbnz	r3, 800ca1a <__swsetup_r+0xc6>
 800ca08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca0c:	d1ba      	bne.n	800c984 <__swsetup_r+0x30>
 800ca0e:	bd70      	pop	{r4, r5, r6, pc}
 800ca10:	0781      	lsls	r1, r0, #30
 800ca12:	bf58      	it	pl
 800ca14:	6963      	ldrpl	r3, [r4, #20]
 800ca16:	60a3      	str	r3, [r4, #8]
 800ca18:	e7f4      	b.n	800ca04 <__swsetup_r+0xb0>
 800ca1a:	2000      	movs	r0, #0
 800ca1c:	e7f7      	b.n	800ca0e <__swsetup_r+0xba>
 800ca1e:	bf00      	nop
 800ca20:	20000034 	.word	0x20000034
 800ca24:	0800d24c 	.word	0x0800d24c
 800ca28:	0800d26c 	.word	0x0800d26c
 800ca2c:	0800d22c 	.word	0x0800d22c

0800ca30 <abort>:
 800ca30:	b508      	push	{r3, lr}
 800ca32:	2006      	movs	r0, #6
 800ca34:	f000 f898 	bl	800cb68 <raise>
 800ca38:	2001      	movs	r0, #1
 800ca3a:	f7f5 f90d 	bl	8001c58 <_exit>

0800ca3e <__swhatbuf_r>:
 800ca3e:	b570      	push	{r4, r5, r6, lr}
 800ca40:	460e      	mov	r6, r1
 800ca42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca46:	2900      	cmp	r1, #0
 800ca48:	b096      	sub	sp, #88	; 0x58
 800ca4a:	4614      	mov	r4, r2
 800ca4c:	461d      	mov	r5, r3
 800ca4e:	da07      	bge.n	800ca60 <__swhatbuf_r+0x22>
 800ca50:	2300      	movs	r3, #0
 800ca52:	602b      	str	r3, [r5, #0]
 800ca54:	89b3      	ldrh	r3, [r6, #12]
 800ca56:	061a      	lsls	r2, r3, #24
 800ca58:	d410      	bmi.n	800ca7c <__swhatbuf_r+0x3e>
 800ca5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca5e:	e00e      	b.n	800ca7e <__swhatbuf_r+0x40>
 800ca60:	466a      	mov	r2, sp
 800ca62:	f000 f89d 	bl	800cba0 <_fstat_r>
 800ca66:	2800      	cmp	r0, #0
 800ca68:	dbf2      	blt.n	800ca50 <__swhatbuf_r+0x12>
 800ca6a:	9a01      	ldr	r2, [sp, #4]
 800ca6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ca74:	425a      	negs	r2, r3
 800ca76:	415a      	adcs	r2, r3
 800ca78:	602a      	str	r2, [r5, #0]
 800ca7a:	e7ee      	b.n	800ca5a <__swhatbuf_r+0x1c>
 800ca7c:	2340      	movs	r3, #64	; 0x40
 800ca7e:	2000      	movs	r0, #0
 800ca80:	6023      	str	r3, [r4, #0]
 800ca82:	b016      	add	sp, #88	; 0x58
 800ca84:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ca88 <__smakebuf_r>:
 800ca88:	898b      	ldrh	r3, [r1, #12]
 800ca8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca8c:	079d      	lsls	r5, r3, #30
 800ca8e:	4606      	mov	r6, r0
 800ca90:	460c      	mov	r4, r1
 800ca92:	d507      	bpl.n	800caa4 <__smakebuf_r+0x1c>
 800ca94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca98:	6023      	str	r3, [r4, #0]
 800ca9a:	6123      	str	r3, [r4, #16]
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	6163      	str	r3, [r4, #20]
 800caa0:	b002      	add	sp, #8
 800caa2:	bd70      	pop	{r4, r5, r6, pc}
 800caa4:	ab01      	add	r3, sp, #4
 800caa6:	466a      	mov	r2, sp
 800caa8:	f7ff ffc9 	bl	800ca3e <__swhatbuf_r>
 800caac:	9900      	ldr	r1, [sp, #0]
 800caae:	4605      	mov	r5, r0
 800cab0:	4630      	mov	r0, r6
 800cab2:	f7fe fd6d 	bl	800b590 <_malloc_r>
 800cab6:	b948      	cbnz	r0, 800cacc <__smakebuf_r+0x44>
 800cab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cabc:	059a      	lsls	r2, r3, #22
 800cabe:	d4ef      	bmi.n	800caa0 <__smakebuf_r+0x18>
 800cac0:	f023 0303 	bic.w	r3, r3, #3
 800cac4:	f043 0302 	orr.w	r3, r3, #2
 800cac8:	81a3      	strh	r3, [r4, #12]
 800caca:	e7e3      	b.n	800ca94 <__smakebuf_r+0xc>
 800cacc:	4b0d      	ldr	r3, [pc, #52]	; (800cb04 <__smakebuf_r+0x7c>)
 800cace:	62b3      	str	r3, [r6, #40]	; 0x28
 800cad0:	89a3      	ldrh	r3, [r4, #12]
 800cad2:	6020      	str	r0, [r4, #0]
 800cad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cad8:	81a3      	strh	r3, [r4, #12]
 800cada:	9b00      	ldr	r3, [sp, #0]
 800cadc:	6163      	str	r3, [r4, #20]
 800cade:	9b01      	ldr	r3, [sp, #4]
 800cae0:	6120      	str	r0, [r4, #16]
 800cae2:	b15b      	cbz	r3, 800cafc <__smakebuf_r+0x74>
 800cae4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cae8:	4630      	mov	r0, r6
 800caea:	f000 f86b 	bl	800cbc4 <_isatty_r>
 800caee:	b128      	cbz	r0, 800cafc <__smakebuf_r+0x74>
 800caf0:	89a3      	ldrh	r3, [r4, #12]
 800caf2:	f023 0303 	bic.w	r3, r3, #3
 800caf6:	f043 0301 	orr.w	r3, r3, #1
 800cafa:	81a3      	strh	r3, [r4, #12]
 800cafc:	89a0      	ldrh	r0, [r4, #12]
 800cafe:	4305      	orrs	r5, r0
 800cb00:	81a5      	strh	r5, [r4, #12]
 800cb02:	e7cd      	b.n	800caa0 <__smakebuf_r+0x18>
 800cb04:	0800c399 	.word	0x0800c399

0800cb08 <_malloc_usable_size_r>:
 800cb08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb0c:	1f18      	subs	r0, r3, #4
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	bfbc      	itt	lt
 800cb12:	580b      	ldrlt	r3, [r1, r0]
 800cb14:	18c0      	addlt	r0, r0, r3
 800cb16:	4770      	bx	lr

0800cb18 <_raise_r>:
 800cb18:	291f      	cmp	r1, #31
 800cb1a:	b538      	push	{r3, r4, r5, lr}
 800cb1c:	4604      	mov	r4, r0
 800cb1e:	460d      	mov	r5, r1
 800cb20:	d904      	bls.n	800cb2c <_raise_r+0x14>
 800cb22:	2316      	movs	r3, #22
 800cb24:	6003      	str	r3, [r0, #0]
 800cb26:	f04f 30ff 	mov.w	r0, #4294967295
 800cb2a:	bd38      	pop	{r3, r4, r5, pc}
 800cb2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cb2e:	b112      	cbz	r2, 800cb36 <_raise_r+0x1e>
 800cb30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb34:	b94b      	cbnz	r3, 800cb4a <_raise_r+0x32>
 800cb36:	4620      	mov	r0, r4
 800cb38:	f000 f830 	bl	800cb9c <_getpid_r>
 800cb3c:	462a      	mov	r2, r5
 800cb3e:	4601      	mov	r1, r0
 800cb40:	4620      	mov	r0, r4
 800cb42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb46:	f000 b817 	b.w	800cb78 <_kill_r>
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	d00a      	beq.n	800cb64 <_raise_r+0x4c>
 800cb4e:	1c59      	adds	r1, r3, #1
 800cb50:	d103      	bne.n	800cb5a <_raise_r+0x42>
 800cb52:	2316      	movs	r3, #22
 800cb54:	6003      	str	r3, [r0, #0]
 800cb56:	2001      	movs	r0, #1
 800cb58:	e7e7      	b.n	800cb2a <_raise_r+0x12>
 800cb5a:	2400      	movs	r4, #0
 800cb5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb60:	4628      	mov	r0, r5
 800cb62:	4798      	blx	r3
 800cb64:	2000      	movs	r0, #0
 800cb66:	e7e0      	b.n	800cb2a <_raise_r+0x12>

0800cb68 <raise>:
 800cb68:	4b02      	ldr	r3, [pc, #8]	; (800cb74 <raise+0xc>)
 800cb6a:	4601      	mov	r1, r0
 800cb6c:	6818      	ldr	r0, [r3, #0]
 800cb6e:	f7ff bfd3 	b.w	800cb18 <_raise_r>
 800cb72:	bf00      	nop
 800cb74:	20000034 	.word	0x20000034

0800cb78 <_kill_r>:
 800cb78:	b538      	push	{r3, r4, r5, lr}
 800cb7a:	4d07      	ldr	r5, [pc, #28]	; (800cb98 <_kill_r+0x20>)
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	4604      	mov	r4, r0
 800cb80:	4608      	mov	r0, r1
 800cb82:	4611      	mov	r1, r2
 800cb84:	602b      	str	r3, [r5, #0]
 800cb86:	f7f5 f857 	bl	8001c38 <_kill>
 800cb8a:	1c43      	adds	r3, r0, #1
 800cb8c:	d102      	bne.n	800cb94 <_kill_r+0x1c>
 800cb8e:	682b      	ldr	r3, [r5, #0]
 800cb90:	b103      	cbz	r3, 800cb94 <_kill_r+0x1c>
 800cb92:	6023      	str	r3, [r4, #0]
 800cb94:	bd38      	pop	{r3, r4, r5, pc}
 800cb96:	bf00      	nop
 800cb98:	200008e8 	.word	0x200008e8

0800cb9c <_getpid_r>:
 800cb9c:	f7f5 b844 	b.w	8001c28 <_getpid>

0800cba0 <_fstat_r>:
 800cba0:	b538      	push	{r3, r4, r5, lr}
 800cba2:	4d07      	ldr	r5, [pc, #28]	; (800cbc0 <_fstat_r+0x20>)
 800cba4:	2300      	movs	r3, #0
 800cba6:	4604      	mov	r4, r0
 800cba8:	4608      	mov	r0, r1
 800cbaa:	4611      	mov	r1, r2
 800cbac:	602b      	str	r3, [r5, #0]
 800cbae:	f7f5 f8a2 	bl	8001cf6 <_fstat>
 800cbb2:	1c43      	adds	r3, r0, #1
 800cbb4:	d102      	bne.n	800cbbc <_fstat_r+0x1c>
 800cbb6:	682b      	ldr	r3, [r5, #0]
 800cbb8:	b103      	cbz	r3, 800cbbc <_fstat_r+0x1c>
 800cbba:	6023      	str	r3, [r4, #0]
 800cbbc:	bd38      	pop	{r3, r4, r5, pc}
 800cbbe:	bf00      	nop
 800cbc0:	200008e8 	.word	0x200008e8

0800cbc4 <_isatty_r>:
 800cbc4:	b538      	push	{r3, r4, r5, lr}
 800cbc6:	4d06      	ldr	r5, [pc, #24]	; (800cbe0 <_isatty_r+0x1c>)
 800cbc8:	2300      	movs	r3, #0
 800cbca:	4604      	mov	r4, r0
 800cbcc:	4608      	mov	r0, r1
 800cbce:	602b      	str	r3, [r5, #0]
 800cbd0:	f7f5 f8a1 	bl	8001d16 <_isatty>
 800cbd4:	1c43      	adds	r3, r0, #1
 800cbd6:	d102      	bne.n	800cbde <_isatty_r+0x1a>
 800cbd8:	682b      	ldr	r3, [r5, #0]
 800cbda:	b103      	cbz	r3, 800cbde <_isatty_r+0x1a>
 800cbdc:	6023      	str	r3, [r4, #0]
 800cbde:	bd38      	pop	{r3, r4, r5, pc}
 800cbe0:	200008e8 	.word	0x200008e8

0800cbe4 <_init>:
 800cbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbe6:	bf00      	nop
 800cbe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbea:	bc08      	pop	{r3}
 800cbec:	469e      	mov	lr, r3
 800cbee:	4770      	bx	lr

0800cbf0 <_fini>:
 800cbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbf2:	bf00      	nop
 800cbf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbf6:	bc08      	pop	{r3}
 800cbf8:	469e      	mov	lr, r3
 800cbfa:	4770      	bx	lr
